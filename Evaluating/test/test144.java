public final class ServerService { private static final Logger LOG = Logger . getLogger ( ServerService . class . getName ( ) ) ; private static final String MSG_COM_PROBLEM = "Communication problem." ; private static final String MSG_PROCESSING_ERROR = "Processing error." ; private static final String MSG_UNABLE_TO_STORE_DATA = "Unable to store data on the server." ; private static final int ERROR_ACCOUNT_NOT_ACTIVATED = - 1 ; private static final int ERROR_PASSWORD_INCORRECT = - 2 ; private static final int ERROR_ACCOUNT_NOT_REGISTERED = - 3 ; private static final URL SERVICE_URL ; private static ServerService instance ; private static final int OPML_VERSION = 1 ; private final static Object opmlURLsLock = new Object ( ) ; private static Map opmlURLs = null ; static { String serviceURL = System . getProperty ( ResourceID . URL_SERVICE ) ; if ( serviceURL == null ) serviceURL = ResourceUtils . getString ( ResourceID . URL_SERVICE ) ; LOG . config ( "Server service URL: " + serviceURL ) ; URL url = null ; try { url = new URL ( serviceURL ) ; } catch ( MalformedURLException e ) { LOG . severe ( MessageFormat . format ( "Failed to initialize service with bad URL: {0}" , serviceURL ) ) ; } finally { SERVICE_URL = url ; } } private ServerService ( ) { } public static synchronized ServerService getInstance ( ) { if ( instance == null ) instance = new ServerService ( ) ; return instance ; } public static XmlRpcHandler getClient ( ) { return new XmlRpcClientSimple ( SERVICE_URL ) ; } public void registerUser ( String fullName , String email , String password , String locale , boolean notifyOnUpdates ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 5 ) ; params . add ( fullName ) ; params . add ( email ) ; params . add ( password ) ; params . add ( locale ) ; params . add ( notifyOnUpdates ) ; String errMessage ; try { errMessage = ( String ) cl . execute ( "accounts.registerAccount" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( Strings . error ( "service.unable.to.process.registration.on.server" ) , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } if ( errMessage != null && errMessage . length ( ) > 0 ) { throw new ServerServiceException ( errMessage ) ; } } public static boolean ping ( ) { boolean online = false ; XmlRpcHandler cl = getClient ( ) ; Vector params = new Vector ( 0 ) ; try { String response = ( String ) cl . execute ( "ping.ping" , params ) ; online = "pong" . equals ( response ) ; } catch ( XmlRpcException e ) { } catch ( Exception e ) { logError ( Level . WARNING , "Invalid response." , e ) ; } return online ; } public void ping ( long installationId , String appVersion , int runs , String os , String javaVersion , String email , String password ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 7 ) ; params . add ( Long . toString ( installationId ) ) ; params . add ( appVersion ) ; params . add ( runs ) ; params . add ( os ) ; params . add ( javaVersion ) ; if ( ! StringUtils . isEmpty ( email ) && ! StringUtils . isEmpty ( password ) ) { try { params . add ( email ) ; params . add ( StringUtils . digestMD5 ( email , password ) ) ; } catch ( NoSuchAlgorithmException e ) { LOG . log ( Level . SEVERE , "There's no necessary digesting algorithm implemetned." , e ) ; } } try { cl . execute ( "ping.ping1" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Can't ping the server." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } } public static int syncStore ( String email , String password , String opml ) throws ServerServiceException { int userId ; byte [ ] opmlBytes = StringUtils . toUTF8 ( opml ) ; Integer sessionId = getSessionId ( email , password ) ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( sessionId ) ; params . add ( opmlBytes ) ; String errMessage ; try { errMessage = ( String ) cl . execute ( "sync.storeInUtf8" , params ) ; userId = getUserId ( sessionId ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( MSG_UNABLE_TO_STORE_DATA , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } if ( errMessage != null && errMessage . length ( ) > 0 ) { throw new ServerServiceException ( errMessage ) ; } return userId ; } private static int getUserId ( Integer sessionId ) { return sessionId == null ? - 1 : sessionId ; } public static void syncStorePrefs ( String email , String password , Map prefs ) throws ServerServiceException { Integer sessionId = getSessionId ( email , password ) ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( sessionId ) ; params . add ( prefs ) ; try { cl . execute ( "sync.storePrefs" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( MSG_UNABLE_TO_STORE_DATA , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } } public static String syncRestore ( String email , String password ) throws ServerServiceException { Integer sessionId = getSessionId ( email , password ) ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( sessionId ) ; params . add ( OPML_VERSION ) ; byte [ ] opmlBytes ; try { opmlBytes = ( byte [ ] ) cl . execute ( "sync.restoreInUtf8" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Unable to restore data from the server." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } return StringUtils . fromUTF8 ( opmlBytes ) ; } public static Map syncRestorePrefs ( String email , String password ) throws ServerServiceException { Integer sessionId = getSessionId ( email , password ) ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 1 ) ; params . add ( sessionId ) ; Map prefs ; try { prefs = ( Map ) cl . execute ( "sync.restorePrefs" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Unable to restore preferences from the server." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } return prefs ; } private static Integer getSessionId ( String email , String password ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( email ) ; params . add ( password ) ; Integer idInt ; try { idInt = ( Integer ) cl . execute ( "accounts.getSessionId" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Unable to get session id." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } int sessionId = idInt ; switch ( sessionId ) { case ERROR_ACCOUNT_NOT_ACTIVATED : throw new ServerServiceException ( Strings . error ( "service.you.need.active.account" ) ) ; case ERROR_PASSWORD_INCORRECT : throw new ServerServiceException ( Strings . error ( "service.account.password.is.incorrect" ) ) ; case ERROR_ACCOUNT_NOT_REGISTERED : throw new ServerServiceException ( Strings . error ( "service.account.is.not.registered" ) ) ; default : } return idInt ; } public static List tagsFetch ( String email , String password , URL aLink ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( getSessionId ( email , password ) ) ; params . add ( StringUtils . toUTF8 ( aLink . toString ( ) ) ) ; Vector tags ; try { tags = ( Vector ) cl . execute ( "tags.getTags" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } return tags ; } public static void tagsStore ( String email , String password , URL aLink , boolean aFeed , String [ ] aUserTags , String aDescription , String aExtended ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 6 ) ; params . add ( getSessionId ( email , password ) ) ; params . add ( StringUtils . toUTF8 ( aLink . toString ( ) ) ) ; params . add ( aFeed ) ; params . add ( StringUtils . toUTF8 ( StringUtils . arrayToQuotedKeywords ( aUserTags ) ) ) ; params . add ( StringUtils . toUTF8 ( aDescription ) ) ; params . add ( StringUtils . toUTF8 ( aExtended ) ) ; String error ; try { error = ( String ) cl . execute ( "tags.tag" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( MessageFormat . format ( "Could not save user tags for: {0}" , aLink ) , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } if ( error != null && error . length ( ) > 0 ) { throw new ServerServiceException ( error ) ; } } public void requestPasswordResending ( String email ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 1 ) ; params . add ( email ) ; String msg ; try { msg = ( String ) cl . execute ( "accounts.requestPasswordResending" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Could not process password resending request." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } if ( msg . length ( ) > 0 ) throw new ServerServiceException ( msg ) ; } public Map discover ( String ref ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 1 ) ; params . add ( ref ) ; Map result ; try { result = ( Map ) cl . execute ( "meta.getBlogByUrlInUtf8" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Could not process the discovery request." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } Map serviceFields = ( Map ) result . get ( "communityFields" ) ; if ( serviceFields != null ) { result . put ( "communityFields" , convertToClientFields ( serviceFields ) ) ; } return result ; } public static void metaSuggestFeedUrl ( String reference , String suggestedFeedUrl ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Suggesting Feed URL: Ref=" + reference + ", Feed URL=" + suggestedFeedUrl ) ; } XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( reference ) ; params . add ( suggestedFeedUrl ) ; try { cl . execute ( "meta.suggestFeedUrl" , params ) ; } catch ( XmlRpcException e ) { } catch ( Exception e ) { logError ( Level . WARNING , "Could not suggest feed URL." , e ) ; } } public static CommunityFields metaGetCommunityFields ( String dataUrl ) throws ServerServiceException { if ( dataUrl == null ) return null ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 1 ) ; params . add ( dataUrl ) ; Map fields ; try { fields = ( Map ) cl . execute ( "meta.getCommunityFields" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Could not load community fields." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } return new CommunityFields ( convertToClientFields ( fields ) ) ; } public static void metaSetCommunityFields ( String email , String password , String dataUrl , CommunityFields fields ) throws ServerServiceException { if ( fields == null || fields . size ( ) == 0 ) return ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 3 ) ; params . add ( getSessionId ( email , password ) ) ; params . add ( dataUrl ) ; params . add ( convertToServiceFields ( fields ) ) ; String message ; try { message = ( String ) cl . execute ( "meta.setCommunityFields" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Could not save community fields." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } if ( message . length ( ) > 0 ) { throw new ServerServiceException ( message ) ; } } static Map convertToClientFields ( Map serviceFields ) { if ( serviceFields == null ) return null ; Map < String , Object > clientFields = new HashMap < String , Object > ( serviceFields . size ( ) ) ; for ( Object o : serviceFields . entrySet ( ) ) { Map . Entry entry = ( Map . Entry ) o ; String name = ( String ) entry . getKey ( ) ; Object value = convertFieldToClientValue ( entry . getValue ( ) ) ; if ( value != null ) clientFields . put ( name , value ) ; } return clientFields ; } static Object convertFieldToClientValue ( Object serviceValue ) { if ( serviceValue == null ) return null ; Object clientValue = null ; if ( serviceValue instanceof byte [ ] ) { clientValue = StringUtils . fromUTF8 ( ( byte [ ] ) serviceValue ) ; } else if ( serviceValue instanceof Vector ) { Vector vector = ( Vector ) serviceValue ; String [ ] values = new String [ vector . size ( ) ] ; for ( int i = 0 ; i < vector . size ( ) ; i ++ ) { byte [ ] value = ( byte [ ] ) vector . get ( i ) ; values [ i ] = StringUtils . fromUTF8 ( value ) ; } clientValue = values ; } return clientValue ; } static Map convertToServiceFields ( Map clientFields ) { if ( clientFields == null ) return null ; Map < String , Object > serviceFields = new HashMap < String , Object > ( clientFields . size ( ) ) ; for ( Object o : clientFields . entrySet ( ) ) { Map . Entry entry = ( Map . Entry ) o ; String name = entry . getKey ( ) . toString ( ) ; Object value = convertFieldToServiceValue ( entry . getValue ( ) ) ; if ( value != null ) serviceFields . put ( name , value ) ; } return serviceFields ; } static Object convertFieldToServiceValue ( Object aValue ) { if ( aValue == null ) return null ; Object value ; boolean isList = false ; if ( aValue instanceof byte [ ] ) { value = aValue ; } else if ( aValue instanceof Object [ ] || ( isList = aValue instanceof List ) ) { Object [ ] array = ! isList ? ( Object [ ] ) aValue : ( ( List ) aValue ) . toArray ( ) ; Vector < byte [ ] > vector = new Vector < byte [ ] > ( array . length ) ; for ( Object o : array ) vector . add ( StringUtils . toUTF8 ( o . toString ( ) ) ) ; value = vector ; } else { value = StringUtils . toUTF8 ( aValue . toString ( ) ) ; } return value ; } public static void reportClientError ( final String message , final String details ) { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 3 ) ; params . add ( message ) ; params . add ( details ) ; params . add ( Application . getDescription ( ) . getVersion ( ) ) ; try { cl . execute ( "reports.clientError" , params ) ; } catch ( Exception e ) { } } public static boolean reportFeedback ( String message ) { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 1 ) ; params . add ( StringUtils . toUTF8 ( message ) ) ; boolean sent = false ; try { cl . execute ( "reports.feedbackMessage" , params ) ; sent = true ; } catch ( XmlRpcException e ) { } catch ( Exception e ) { logError ( Level . WARNING , "Could not send feedback message." , e ) ; } return sent ; } public static void reportClientError ( String message , String description , Throwable exception ) { StringBuffer details = new StringBuffer ( ) ; if ( description != null ) details . append ( description ) . append ( "\n\n" ) ; if ( exception != null ) { dumpThrowable ( exception , details ) ; } else details . append ( "No stack dump." ) ; reportClientError ( message , details . toString ( ) ) ; } static void dumpThrowable ( Throwable exception , StringBuffer details ) { details . append ( exception . toString ( ) ) ; for ( int i = 0 ; i < exception . getStackTrace ( ) . length ; i ++ ) { StackTraceElement element = exception . getStackTrace ( ) [ i ] ; details . append ( "\n\t" ) . append ( element ) ; } Throwable cause = exception . getCause ( ) ; if ( cause != null ) { details . append ( "\nCaused by:\n" ) ; dumpThrowable ( cause , details ) ; } } public static String checkForUpdates ( String aCurrentVersion ) throws ServerServiceException { boolean productionOnly = System . getProperty ( "service.checkupdates.allversions" ) == null ; XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 2 ) ; params . add ( aCurrentVersion ) ; params . add ( productionOnly ) ; String response ; try { response = ( String ) cl . execute ( "updates.checkForUpdates" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Could not check for updates." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } return response ; } public static Map forumGetForums ( ) throws ServerServiceException { XmlRpcHandler cl = getClient ( ) ; Vector params = new Vector ( 0 ) ; Map response ; try { response = ( Map ) cl . execute ( "forum.getForums" , params ) ; } catch ( XmlRpcException e ) { throw new ServerServiceException ( MSG_COM_PROBLEM , e ) ; } catch ( Exception e ) { logError ( "Could not fetch forums list." , e ) ; throw new ServerServiceException ( MSG_PROCESSING_ERROR , e ) ; } return response ; } public static boolean forumPost ( String aName , String aEmail , int aForumId , String aSubject , String aMessage ) { XmlRpcHandler cl = getClient ( ) ; Vector < Object > params = new Vector < Object > ( 5 ) ; params . add ( StringUtils . toUTF8 ( aName ) ) ; params . add ( StringUtils . toUTF8 ( aEmail ) ) ; params . add ( aForumId ) ; params . add ( StringUtils . toUTF8 ( aSubject ) ) ; params . add ( StringUtils . toUTF8 ( aMessage ) ) ; boolean sent = false ; try { cl . execute ( "forum.post" , params ) ; sent = true ; } catch ( XmlRpcException e ) { } catch ( Exception e ) { logError ( Level . WARNING , "Could not send forum message." , e ) ; } return sent ; } public static URL getStartingPointsURL ( ) { return getOPMLURLbyKey ( "opml.starting.points.url" ) ; } public static URL getExpertsURL ( ) { return getOPMLURLbyKey ( "opml.experts.url" ) ; } private static URL getOPMLURLbyKey ( String urlKey ) { URL url = getSystemURLProperty ( urlKey ) ; if ( url == null ) { synchronized ( opmlURLsLock ) { loadOPMLURLs ( ) ; if ( opmlURLs != null ) { String urlS = StringUtils . fromUTF8 ( ( byte [ ] ) opmlURLs . get ( urlKey ) ) ; try { if ( urlS == null ) url = null ; else url = new URL ( urlS ) ; } catch ( MalformedURLException e ) { url = null ; } } } } return url ; } private static URL getSystemURLProperty ( String key ) { URL url = null ; String val = System . getProperty ( key ) ; if ( val != null ) { try { url = new URL ( val ) ; } catch ( MalformedURLException e ) { LOG . log ( Level . WARNING , MessageFormat . format ( "Invalid overriden URL for key {0}" , key ) , e ) ; } } return url ; } private static void loadOPMLURLs ( ) { if ( opmlURLs == null ) { XmlRpcHandler cl = getClient ( ) ; Vector params = new Vector ( 0 ) ; try { opmlURLs = ( Map ) cl . execute ( "meta.getOPMLURLs" , params ) ; } catch ( Exception e ) { logError ( "Could not retrieve OPML URLs." , e ) ; } } } public static String getPlanHash ( String email , String password ) { XmlRpcHandler cl = getClient ( ) ; Vector < String > params = new Vector < String > ( 2 ) ; params . add ( email ) ; params . add ( password ) ; String hash = null ; try { hash = ( String ) cl . execute ( "plans.getHash" , params ) ; } catch ( Exception e ) { LOG . log ( Level . WARNING , "Failed to get plan hash." , e ) ; } return hash ; } public static Map < String , String > getPlanFeatures ( String email , String password ) { XmlRpcHandler cl = getClient ( ) ; Vector < String > params = new Vector < String > ( 2 ) ; params . add ( email ) ; params . add ( password ) ; Map < String , String > features = null ; try { features = ( Map < String , String > ) cl . execute ( "plans.getFeatures" , params ) ; } catch ( Exception e ) { logError ( Level . WARNING , "Failed to get plan features." , e ) ; } return features ; } private static void logError ( String msg , Exception ex ) { logError ( Level . SEVERE , msg , ex ) ; } private static void logError ( Level level , String msg , Exception ex ) { level = ex instanceof IOException ? Level . FINE : level ; LOG . log ( level , msg , ex ) ; } } 