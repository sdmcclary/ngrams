public class RecentFilesClient extends CometClient { public static final String LIST_RECENT_FILES = "listRecentFiles" ; public static final String RECENT_FILES_CHANNEL = "/portal/recentFiles" ; public static final String PROJECTS = "projects" ; public static final String FILES = "files" ; public static final String NAME = "name" ; public static final String OPEN_FILE = "openFile" ; public static final String PROJECT = "project" ; public static final String FILE = "file" ; private IPartListener partListener = new PartListenerAdapter ( ) { @ Override public void partOpened ( IWorkbenchPart part ) { if ( part instanceof IEditorPart ) { publishRecentFiles ( ) ; } } @ Override public void partClosed ( IWorkbenchPart part ) { if ( part instanceof IEditorPart ) { publishRecentFiles ( ) ; } } } ; private IWindowListener windowListener = new IWindowListener ( ) { public void windowActivated ( IWorkbenchWindow window ) { } public void windowClosed ( IWorkbenchWindow window ) { IPartService partService = window . getPartService ( ) ; if ( partService != null ) { partService . removePartListener ( partListener ) ; } } public void windowDeactivated ( IWorkbenchWindow window ) { } public void windowOpened ( IWorkbenchWindow window ) { IPartService partService = window . getPartService ( ) ; if ( partService != null ) { partService . addPartListener ( partListener ) ; } } } ; public RecentFilesClient ( ) { init ( ) ; } private void init ( ) { IWorkbenchWindow [ ] workbenchWindows = PlatformUI . getWorkbench ( ) . getWorkbenchWindows ( ) ; for ( IWorkbenchWindow workbenchWindow : workbenchWindows ) { IPartService partService = workbenchWindow . getPartService ( ) ; if ( partService != null ) { partService . addPartListener ( partListener ) ; } } PlatformUI . getWorkbench ( ) . addWindowListener ( windowListener ) ; } public void destroy ( ) { super . destroy ( ) ; IWorkbenchWindow [ ] workbenchWindows = PlatformUI . getWorkbench ( ) . getWorkbenchWindows ( ) ; for ( IWorkbenchWindow workbenchWindow : workbenchWindows ) { IPartService partService = workbenchWindow . getPartService ( ) ; if ( partService != null ) { partService . removePartListener ( partListener ) ; } } partListener = null ; PlatformUI . getWorkbench ( ) . removeWindowListener ( windowListener ) ; windowListener = null ; } protected Object getResponse ( String toChannel , Object request ) { if ( RECENT_FILES_CHANNEL . equals ( toChannel ) ) { Map requestData = ( Map ) request ; if ( LIST_RECENT_FILES . equals ( requestData . get ( CometConstants . REQUEST ) ) ) { return listRecentFiles ( ) ; } else if ( OPEN_FILE . equals ( requestData . get ( CometConstants . REQUEST ) ) ) { String project = ( String ) requestData . get ( PROJECT ) ; String file = ( String ) requestData . get ( FILE ) ; if ( project != null && file != null ) { openFile ( project , file ) ; } } } return null ; } protected void publishRecentFiles ( ) { if ( bayeux == null ) return ; Channel listChannel = bayeux . getChannel ( getRecentFilesChannel ( ) , true ) ; listChannel . publish ( this . client , listRecentFiles ( ) , Long . toString ( System . currentTimeMillis ( ) ) ) ; } protected Map < Object , Object > listRecentFiles ( ) { Map < Object , Object > returnData = new HashMap < Object , Object > ( ) ; returnData . put ( CometConstants . RESPONSE , LIST_RECENT_FILES ) ; Map < String , List < String > > projectFilesMap = new HashMap < String , List < String > > ( ) ; EditorHistory editorHistory = getEditorHistory ( ) ; if ( editorHistory != null ) { EditorHistoryItem [ ] editorHistoryItems = editorHistory . getItems ( ) ; for ( EditorHistoryItem editorHistoryItem : editorHistoryItems ) { try { if ( ! editorHistoryItem . isRestored ( ) ) { editorHistoryItem . restoreState ( ) ; } } catch ( Exception e ) { } IEditorInput editorInput = editorHistoryItem . getInput ( ) ; if ( editorInput instanceof FileEditorInput ) { FileEditorInput fileEditorInput = ( FileEditorInput ) editorInput ; IFile file = fileEditorInput . getFile ( ) ; if ( file != null ) { IProject project = file . getProject ( ) ; String projectName = project . getName ( ) ; List < String > list = projectFilesMap . get ( projectName ) ; if ( list == null ) { list = new LinkedList < String > ( ) ; projectFilesMap . put ( projectName , list ) ; } list . add ( editorHistoryItem . getName ( ) ) ; } } } } List < Map < String , Object > > projectMapsList = new LinkedList < Map < String , Object > > ( ) ; Set < String > projectNames = projectFilesMap . keySet ( ) ; for ( String projectName : projectNames ) { Map < String , Object > projectMap = new HashMap < String , Object > ( ) ; projectMap . put ( NAME , projectName ) ; List < Map < String , String > > fileMapsList = new LinkedList < Map < String , String > > ( ) ; List < String > projectFiles = projectFilesMap . get ( projectName ) ; for ( String file : projectFiles ) { Map < String , String > fileMap = new HashMap < String , String > ( ) ; fileMap . put ( NAME , file ) ; fileMapsList . add ( fileMap ) ; } projectMap . put ( FILES , fileMapsList ) ; projectMapsList . add ( projectMap ) ; } returnData . put ( PROJECTS , projectMapsList ) ; return returnData ; } private void openFile ( String project , String file ) { EditorHistory editorHistory = getEditorHistory ( ) ; if ( editorHistory != null ) { EditorHistoryItem [ ] editorHistoryItems = editorHistory . getItems ( ) ; for ( EditorHistoryItem editorHistoryItem : editorHistoryItems ) { if ( editorHistoryItem . getName ( ) . equals ( file ) ) { IEditorInput editorInput = editorHistoryItem . getInput ( ) ; if ( editorInput instanceof FileEditorInput ) { FileEditorInput fileEditorInput = ( FileEditorInput ) editorInput ; IFile fileEditorInputFile = fileEditorInput . getFile ( ) ; if ( fileEditorInputFile != null ) { IProject fileEditorInputFileProject = fileEditorInputFile . getProject ( ) ; if ( fileEditorInputFileProject . getName ( ) . equals ( project ) ) { open ( editorHistory , editorHistoryItem ) ; } } } } } } } protected String getRecentFilesChannel ( ) { return RECENT_FILES_CHANNEL ; } protected String [ ] getSubscriptionIDs ( ) { return new String [ ] { getRecentFilesChannel ( ) } ; } protected String getID ( String msgId ) { return Long . toString ( System . currentTimeMillis ( ) ) ; } private EditorHistory getEditorHistory ( ) { return ( ( Workbench ) PlatformUI . getWorkbench ( ) ) . getEditorHistory ( ) ; } private void open ( final EditorHistory history , final EditorHistoryItem item ) { UIJob uiJob = new UIJob ( "Opening file." ) { @ Override public IStatus runInUIThread ( IProgressMonitor monitor ) { IWorkbenchPage page = CoreUIUtils . getActivePage ( ) ; if ( page != null ) { try { String itemName = item . getName ( ) ; if ( ! item . isRestored ( ) ) { item . restoreState ( ) ; } IEditorInput input = item . getInput ( ) ; IEditorDescriptor desc = item . getDescriptor ( ) ; if ( input == null || desc == null ) { history . remove ( item ) ; } else { page . openEditor ( input , desc . getId ( ) ) ; } } catch ( PartInitException pe ) { CoreUIUtils . showError ( pe . getMessage ( ) , pe ) ; history . remove ( item ) ; } } return Status . OK_STATUS ; } } ; uiJob . setPriority ( UIJob . INTERACTIVE ) ; uiJob . schedule ( ) ; } } 