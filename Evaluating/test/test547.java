public class WebPerspectiveFactory implements IPerspectiveFactory { private static final float MINIMUM_VIEW_WIDTH = 0.5f ; private static final float MAXIMUM_VIEW_HEIGHT = 0.7f ; private static final float MINIMUM_VIEW_HEIGHT = 0.2f ; private static final String FILE_WIZARD_ID = "file_wizards" ; private static final String TAG_NEW_FILE_WIZARD = "new-file-wizard" ; private static final String TAG_UNTITLED_FILE_WIZARD = "untitled-file-wizard" ; private static final String ATTR_WIZARD_ID = "wizard-id" ; public static final int VERSION = 65 ; public static final String PERSPECTIVE_ID = "com.aptana.ide.js.ui.WebPerspective" ; public static final String RAILS_PERSPECTIVE_ID = "org.radrails.rails.ui.PerspectiveRails" ; public static final String RUBY_PERSPECTIVE_ID = "org.rubypeople.rdt.ui.PerspectiveRuby" ; private static List < Runnable > resettingHandlers ; public static void addResettingHandler ( Runnable handler ) { if ( resettingHandlers == null ) { resettingHandlers = new ArrayList < Runnable > ( ) ; } resettingHandlers . add ( handler ) ; } public void createInitialLayout ( IPageLayout layout ) { defineActions ( layout ) ; defineLayout ( layout ) ; } private void defineLayout ( IPageLayout layout ) { IFolderLayout leftTop = layout . createFolder ( "leftTop" , IPageLayout . LEFT , MINIMUM_VIEW_HEIGHT , IPageLayout . ID_EDITOR_AREA ) ; leftTop . addView ( "com.aptana.ide.ui.io.fileExplorerView" ) ; leftTop . addPlaceholder ( "com.aptana.ide.ui.io.fileExplorerView:*" ) ; leftTop . addView ( "com.aptana.ide.js.ui.views.profilesView" ) ; IFolderLayout left = layout . createFolder ( "left" , IPageLayout . BOTTOM , MINIMUM_VIEW_WIDTH , "leftTop" ) ; left . addView ( "com.aptana.ide.documentation.TutorialView" ) ; left . addView ( IPageLayout . ID_OUTLINE ) ; IPlaceholderFolderLayout right = layout . createPlaceholderFolder ( "right" , IPageLayout . RIGHT , MAXIMUM_VIEW_HEIGHT , IPageLayout . ID_EDITOR_AREA ) ; right . addPlaceholder ( "com.aptana.ide.samples.SamplesView" ) ; IPlaceholderFolderLayout rightBottom = layout . createPlaceholderFolder ( "rightBottom" , IPageLayout . BOTTOM , MAXIMUM_VIEW_HEIGHT , "right" ) ; rightBottom . addPlaceholder ( "org.eclipse.eclipsemonkey.views.ScriptsView" ) ; rightBottom . addPlaceholder ( "com.aptana.ide.scripting.SnippetsView" ) ; IPlaceholderFolderLayout bottom = layout . createPlaceholderFolder ( "bottom" , IPageLayout . BOTTOM , MAXIMUM_VIEW_HEIGHT , IPageLayout . ID_EDITOR_AREA ) ; bottom . addPlaceholder ( "com.aptana.ide.js.ui.views.problemsView" ) ; bottom . addPlaceholder ( "org.eclipse.ui.console.ConsoleView" ) ; bottom . addPlaceholder ( "com.aptana.ide.server.ui.serversView" ) ; bottom . addPlaceholder ( "com.aptana.ide.ui.ViewPlugins" ) ; bottom . addPlaceholder ( "com.aptana.ide.documentation.jquery.visualjquery" ) ; bottom . addPlaceholder ( "com.aptana.ide.js.ui.views.GenericScriptableView:*" ) ; bottom . addPlaceholder ( "com.aptana.ide.logging.LogView" ) ; } private static String [ ] getWizardShortcuts ( ) { List < String > ids = getFileWizardShortcuts ( ) ; return ids . toArray ( new String [ ids . size ( ) ] ) ; } public static List < String > getProjectWizardShortcuts ( ) { List < String > ids = new ArrayList < String > ( ) ; addFromExtension ( ids , TAG_NEW_FILE_WIZARD ) ; Collections . sort ( ids ) ; ids . add ( "org.eclipse.ui.wizards.new.file" ) ; ids . add ( "org.eclipse.ui.wizards.new.folder" ) ; return ids ; } public static List < String > getFileWizardShortcuts ( ) { List < String > ids = new ArrayList < String > ( ) ; addFromExtension ( ids , TAG_UNTITLED_FILE_WIZARD ) ; Collections . sort ( ids ) ; return ids ; } private static void addFromExtension ( List < String > ids , String elementName ) { IExtensionRegistry registry = Platform . getExtensionRegistry ( ) ; if ( registry != null ) { IExtensionPoint extensionPoint = registry . getExtensionPoint ( CoreUIPlugin . ID , FILE_WIZARD_ID ) ; if ( extensionPoint != null ) { IExtension [ ] extensions = extensionPoint . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] elements = extension . getConfigurationElements ( ) ; for ( int j = 0 ; j < elements . length ; j ++ ) { IConfigurationElement element = elements [ j ] ; if ( element . getName ( ) . equals ( elementName ) ) { String id = element . getAttribute ( ATTR_WIZARD_ID ) ; if ( id != null ) { ids . add ( id ) ; } } } } } } } private void defineActions ( IPageLayout layout ) { String [ ] wizards = getWizardShortcuts ( ) ; for ( int i = 0 ; i < wizards . length ; i ++ ) { layout . addNewWizardShortcut ( wizards [ i ] ) ; } layout . addActionSet ( "com.aptana.ide.server.ui.launchActionSet" ) ; layout . addActionSet ( IPageLayout . ID_NAVIGATE_ACTION_SET ) ; layout . addShowViewShortcut ( "com.aptana.ide.scripting.SnippetsView" ) ; layout . addShowViewShortcut ( "com.aptana.ide.ui.io.fileExplorerView" ) ; layout . addShowViewShortcut ( "com.aptana.ide.js.ui.views.profilesView" ) ; layout . addShowViewShortcut ( IPageLayout . ID_OUTLINE ) ; layout . addShowViewShortcut ( "com.aptana.ide.js.ui.views.problemsView" ) ; layout . addShowViewShortcut ( "org.eclipse.ui.console.ConsoleView" ) ; layout . addShowViewShortcut ( IPageLayout . ID_BOOKMARKS ) ; layout . addShowViewShortcut ( IPageLayout . ID_TASK_LIST ) ; layout . addShowViewShortcut ( IPageLayout . ID_PROP_SHEET ) ; layout . addShowViewShortcut ( "com.aptana.ide.js.docgen.views.visualscriptdoc" ) ; layout . addShowViewShortcut ( "com.aptana.ide.logging.LogView" ) ; layout . addShowViewShortcut ( "com.aptana.ide.server.ui.serversView" ) ; } public static void removeResettingHandler ( Runnable handler ) { resettingHandlers . remove ( handler ) ; } public static void resetPerspective ( final IWorkbenchPage page ) { if ( Display . getCurrent ( ) == null ) { return ; } final Shell shell = Display . getCurrent ( ) . getActiveShell ( ) ; final IPreferenceStore p = CoreUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; if ( p . getBoolean ( IPreferenceConstants . WEB_PERSPECTIVE_RESET_PERSPECTIVE ) ) { return ; } UIJob job = new UIJob ( "Resetting Aptana perspective" ) { @ Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( shell != null ) { p . setValue ( IPreferenceConstants . WEB_PERSPECTIVE_RESETTING_PERSPECTIVE , true ) ; boolean ret = MessageDialog . openQuestion ( CoreUIUtils . getActiveShell ( ) , Messages . WebPerspectiveFactory_UpdatePerspectiveTitle , Messages . WebPerspectiveFactory_UpdatePerspectiveConfirmation ) ; p . setValue ( IPreferenceConstants . WEB_PERSPECTIVE_LAST_VERSION , WebPerspectiveFactory . VERSION ) ; if ( ! ret ) { return Status . OK_STATUS ; } p . setValue ( IPreferenceConstants . WEB_PERSPECTIVE_RESET_PERSPECTIVE , true ) ; if ( resettingHandlers != null ) { for ( int i = 0 ; i < resettingHandlers . size ( ) ; i ++ ) { resettingHandlers . get ( i ) . run ( ) ; } } page . resetPerspective ( ) ; } return Status . OK_STATUS ; } } ; job . setRule ( MutexJobRule . getInstance ( ) ) ; job . setSystem ( true ) ; job . schedule ( ) ; } public static boolean isValidAptanaPerspective ( IPerspectiveDescriptor desc ) { if ( WebPerspectiveFactory . RAILS_PERSPECTIVE_ID . equals ( desc . getId ( ) ) || WebPerspectiveFactory . RUBY_PERSPECTIVE_ID . equals ( desc . getId ( ) ) || WebPerspectiveFactory . PERSPECTIVE_ID . equals ( desc . getId ( ) ) ) { return true ; } if ( desc instanceof PerspectiveDescriptor ) { PerspectiveDescriptor pd = ( PerspectiveDescriptor ) desc ; return pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . PERSPECTIVE_ID ) || pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . RUBY_PERSPECTIVE_ID ) || pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . RAILS_PERSPECTIVE_ID ) ; } return false ; } public static boolean isSameOrDescendantPerspective ( IPerspectiveDescriptor desc ) { if ( desc . getId ( ) . equals ( WebPerspectiveFactory . PERSPECTIVE_ID ) ) { return true ; } if ( desc instanceof PerspectiveDescriptor ) { PerspectiveDescriptor pd = ( PerspectiveDescriptor ) desc ; return pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . PERSPECTIVE_ID ) ; } return false ; } } 