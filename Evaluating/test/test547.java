<<<<<<< HEAD
public class WebPerspectiveFactory implements IPerspectiveFactory { private static final float MINIMUM_VIEW_WIDTH = 0.5f ; private static final float MAXIMUM_VIEW_HEIGHT = 0.7f ; private static final float MINIMUM_VIEW_HEIGHT = 0.2f ; private static final String FILE_WIZARD_ID = "file_wizards" ; private static final String TAG_NEW_FILE_WIZARD = "new-file-wizard" ; private static final String TAG_UNTITLED_FILE_WIZARD = "untitled-file-wizard" ; private static final String ATTR_WIZARD_ID = "wizard-id" ; public static final int VERSION = 65 ; public static final String PERSPECTIVE_ID = "com.aptana.ide.js.ui.WebPerspective" ; public static final String RAILS_PERSPECTIVE_ID = "org.radrails.rails.ui.PerspectiveRails" ; public static final String RUBY_PERSPECTIVE_ID = "org.rubypeople.rdt.ui.PerspectiveRuby" ; private static List < Runnable > resettingHandlers ; public static void addResettingHandler ( Runnable handler ) { if ( resettingHandlers == null ) { resettingHandlers = new ArrayList < Runnable > ( ) ; } resettingHandlers . add ( handler ) ; } public void createInitialLayout ( IPageLayout layout ) { defineActions ( layout ) ; defineLayout ( layout ) ; } private void defineLayout ( IPageLayout layout ) { IFolderLayout leftTop = layout . createFolder ( "leftTop" , IPageLayout . LEFT , MINIMUM_VIEW_HEIGHT , IPageLayout . ID_EDITOR_AREA ) ; leftTop . addView ( "com.aptana.ide.ui.io.fileExplorerView" ) ; leftTop . addPlaceholder ( "com.aptana.ide.ui.io.fileExplorerView:*" ) ; leftTop . addView ( "com.aptana.ide.js.ui.views.profilesView" ) ; IFolderLayout left = layout . createFolder ( "left" , IPageLayout . BOTTOM , MINIMUM_VIEW_WIDTH , "leftTop" ) ; left . addView ( "com.aptana.ide.documentation.TutorialView" ) ; left . addView ( IPageLayout . ID_OUTLINE ) ; IPlaceholderFolderLayout right = layout . createPlaceholderFolder ( "right" , IPageLayout . RIGHT , MAXIMUM_VIEW_HEIGHT , IPageLayout . ID_EDITOR_AREA ) ; right . addPlaceholder ( "com.aptana.ide.samples.SamplesView" ) ; IPlaceholderFolderLayout rightBottom = layout . createPlaceholderFolder ( "rightBottom" , IPageLayout . BOTTOM , MAXIMUM_VIEW_HEIGHT , "right" ) ; rightBottom . addPlaceholder ( "org.eclipse.eclipsemonkey.views.ScriptsView" ) ; rightBottom . addPlaceholder ( "com.aptana.ide.scripting.SnippetsView" ) ; IPlaceholderFolderLayout bottom = layout . createPlaceholderFolder ( "bottom" , IPageLayout . BOTTOM , MAXIMUM_VIEW_HEIGHT , IPageLayout . ID_EDITOR_AREA ) ; bottom . addPlaceholder ( "com.aptana.ide.js.ui.views.problemsView" ) ; bottom . addPlaceholder ( "org.eclipse.ui.console.ConsoleView" ) ; bottom . addPlaceholder ( "com.aptana.ide.server.ui.serversView" ) ; bottom . addPlaceholder ( "com.aptana.ide.ui.ViewPlugins" ) ; bottom . addPlaceholder ( "com.aptana.ide.documentation.jquery.visualjquery" ) ; bottom . addPlaceholder ( "com.aptana.ide.js.ui.views.GenericScriptableView:*" ) ; bottom . addPlaceholder ( "com.aptana.ide.logging.LogView" ) ; } private static String [ ] getWizardShortcuts ( ) { List < String > ids = getFileWizardShortcuts ( ) ; return ids . toArray ( new String [ ids . size ( ) ] ) ; } public static List < String > getProjectWizardShortcuts ( ) { List < String > ids = new ArrayList < String > ( ) ; addFromExtension ( ids , TAG_NEW_FILE_WIZARD ) ; Collections . sort ( ids ) ; ids . add ( "org.eclipse.ui.wizards.new.file" ) ; ids . add ( "org.eclipse.ui.wizards.new.folder" ) ; return ids ; } public static List < String > getFileWizardShortcuts ( ) { List < String > ids = new ArrayList < String > ( ) ; addFromExtension ( ids , TAG_UNTITLED_FILE_WIZARD ) ; Collections . sort ( ids ) ; return ids ; } private static void addFromExtension ( List < String > ids , String elementName ) { IExtensionRegistry registry = Platform . getExtensionRegistry ( ) ; if ( registry != null ) { IExtensionPoint extensionPoint = registry . getExtensionPoint ( CoreUIPlugin . ID , FILE_WIZARD_ID ) ; if ( extensionPoint != null ) { IExtension [ ] extensions = extensionPoint . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] elements = extension . getConfigurationElements ( ) ; for ( int j = 0 ; j < elements . length ; j ++ ) { IConfigurationElement element = elements [ j ] ; if ( element . getName ( ) . equals ( elementName ) ) { String id = element . getAttribute ( ATTR_WIZARD_ID ) ; if ( id != null ) { ids . add ( id ) ; } } } } } } } private void defineActions ( IPageLayout layout ) { String [ ] wizards = getWizardShortcuts ( ) ; for ( int i = 0 ; i < wizards . length ; i ++ ) { layout . addNewWizardShortcut ( wizards [ i ] ) ; } layout . addActionSet ( "com.aptana.ide.server.ui.launchActionSet" ) ; layout . addActionSet ( IPageLayout . ID_NAVIGATE_ACTION_SET ) ; layout . addShowViewShortcut ( "com.aptana.ide.scripting.SnippetsView" ) ; layout . addShowViewShortcut ( "com.aptana.ide.ui.io.fileExplorerView" ) ; layout . addShowViewShortcut ( "com.aptana.ide.js.ui.views.profilesView" ) ; layout . addShowViewShortcut ( IPageLayout . ID_OUTLINE ) ; layout . addShowViewShortcut ( "com.aptana.ide.js.ui.views.problemsView" ) ; layout . addShowViewShortcut ( "org.eclipse.ui.console.ConsoleView" ) ; layout . addShowViewShortcut ( IPageLayout . ID_BOOKMARKS ) ; layout . addShowViewShortcut ( IPageLayout . ID_TASK_LIST ) ; layout . addShowViewShortcut ( IPageLayout . ID_PROP_SHEET ) ; layout . addShowViewShortcut ( "com.aptana.ide.js.docgen.views.visualscriptdoc" ) ; layout . addShowViewShortcut ( "com.aptana.ide.logging.LogView" ) ; layout . addShowViewShortcut ( "com.aptana.ide.server.ui.serversView" ) ; } public static void removeResettingHandler ( Runnable handler ) { resettingHandlers . remove ( handler ) ; } public static void resetPerspective ( final IWorkbenchPage page ) { if ( Display . getCurrent ( ) == null ) { return ; } final Shell shell = Display . getCurrent ( ) . getActiveShell ( ) ; final IPreferenceStore p = CoreUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; if ( p . getBoolean ( IPreferenceConstants . WEB_PERSPECTIVE_RESET_PERSPECTIVE ) ) { return ; } UIJob job = new UIJob ( "Resetting Aptana perspective" ) { @ Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( shell != null ) { p . setValue ( IPreferenceConstants . WEB_PERSPECTIVE_RESETTING_PERSPECTIVE , true ) ; boolean ret = MessageDialog . openQuestion ( CoreUIUtils . getActiveShell ( ) , Messages . WebPerspectiveFactory_UpdatePerspectiveTitle , Messages . WebPerspectiveFactory_UpdatePerspectiveConfirmation ) ; p . setValue ( IPreferenceConstants . WEB_PERSPECTIVE_LAST_VERSION , WebPerspectiveFactory . VERSION ) ; if ( ! ret ) { return Status . OK_STATUS ; } p . setValue ( IPreferenceConstants . WEB_PERSPECTIVE_RESET_PERSPECTIVE , true ) ; if ( resettingHandlers != null ) { for ( int i = 0 ; i < resettingHandlers . size ( ) ; i ++ ) { resettingHandlers . get ( i ) . run ( ) ; } } page . resetPerspective ( ) ; } return Status . OK_STATUS ; } } ; job . setRule ( MutexJobRule . getInstance ( ) ) ; job . setSystem ( true ) ; job . schedule ( ) ; } public static boolean isValidAptanaPerspective ( IPerspectiveDescriptor desc ) { if ( WebPerspectiveFactory . RAILS_PERSPECTIVE_ID . equals ( desc . getId ( ) ) || WebPerspectiveFactory . RUBY_PERSPECTIVE_ID . equals ( desc . getId ( ) ) || WebPerspectiveFactory . PERSPECTIVE_ID . equals ( desc . getId ( ) ) ) { return true ; } if ( desc instanceof PerspectiveDescriptor ) { PerspectiveDescriptor pd = ( PerspectiveDescriptor ) desc ; return pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . PERSPECTIVE_ID ) || pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . RUBY_PERSPECTIVE_ID ) || pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . RAILS_PERSPECTIVE_ID ) ; } return false ; } public static boolean isSameOrDescendantPerspective ( IPerspectiveDescriptor desc ) { if ( desc . getId ( ) . equals ( WebPerspectiveFactory . PERSPECTIVE_ID ) ) { return true ; } if ( desc instanceof PerspectiveDescriptor ) { PerspectiveDescriptor pd = ( PerspectiveDescriptor ) desc ; return pd . getOriginalId ( ) . equals ( WebPerspectiveFactory . PERSPECTIVE_ID ) ; } return false ; } } 
=======
public class MediaQuery extends AbstractDatatype { public static final MediaQuery THE_INSTANCE = new MediaQuery ( ) ; private static final boolean WARN = System . getProperty ( "org.whattf.datatype.warn" , "" ) . equals ( "true" ) ? true : false ; private enum State { INITIAL_WS , OPEN_PAREN_SEEN , IN_ONLY_OR_NOT , IN_MEDIA_TYPE , IN_MEDIA_FEATURE , WS_BEFORE_MEDIA_TYPE , WS_BEFORE_AND , IN_AND , WS_BEFORE_EXPRESSION , WS_BEFORE_COLON , WS_BEFORE_VALUE , IN_VALUE_DIGITS , IN_VALUE_SCAN , IN_VALUE_ORIENTATION , WS_BEFORE_CLOSE_PAREN , IN_VALUE_UNIT , IN_VALUE_DIGITS_AFTER_DOT , RATIO_SECOND_INTEGER_START , IN_VALUE_BEFORE_DIGITS , IN_VALUE_DIGITS_AFTER_DOT_TRAIL , AFTER_CLOSE_PAREN , IN_VALUE_ONEORZERO } private enum ValueType { LENGTH , RATIO , INTEGER , RESOLUTION , SCAN , ORIENTATION , NONZEROINTEGER , ONEORZERO } private static final Set < String > LENGTH_UNITS = new HashSet < String > ( ) ; static { LENGTH_UNITS . add ( "em" ) ; LENGTH_UNITS . add ( "ex" ) ; LENGTH_UNITS . add ( "px" ) ; LENGTH_UNITS . add ( "gd" ) ; LENGTH_UNITS . add ( "rem" ) ; LENGTH_UNITS . add ( "vw" ) ; LENGTH_UNITS . add ( "vh" ) ; LENGTH_UNITS . add ( "vm" ) ; LENGTH_UNITS . add ( "ch" ) ; LENGTH_UNITS . add ( "in" ) ; LENGTH_UNITS . add ( "cm" ) ; LENGTH_UNITS . add ( "mm" ) ; LENGTH_UNITS . add ( "pt" ) ; LENGTH_UNITS . add ( "pc" ) ; } private static final Set < String > MEDIA_TYPES = new HashSet < String > ( ) ; static { MEDIA_TYPES . add ( "all" ) ; MEDIA_TYPES . add ( "aural" ) ; MEDIA_TYPES . add ( "braille" ) ; MEDIA_TYPES . add ( "handheld" ) ; MEDIA_TYPES . add ( "print" ) ; MEDIA_TYPES . add ( "projection" ) ; MEDIA_TYPES . add ( "screen" ) ; MEDIA_TYPES . add ( "tty" ) ; MEDIA_TYPES . add ( "tv" ) ; MEDIA_TYPES . add ( "embossed" ) ; MEDIA_TYPES . add ( "speech" ) ; } private enum MediaType { ALL , AURAL , BRAILLE , HANDHELD , PRINT , PROJECTION , SCREEN , TTY , TV , EMBOSSED , SPEECH , INVALID ; private static MediaType toCaps ( String str ) { try { return valueOf ( toAsciiUpperCase ( str ) ) ; } catch ( Exception ex ) { return INVALID ; } } } private static final Map < String , ValueType > FEATURES_TO_VALUE_TYPES = new HashMap < String , ValueType > ( ) ; static { FEATURES_TO_VALUE_TYPES . put ( "width" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "min-width" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "max-width" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "height" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "min-height" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "max-height" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "device-width" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "min-device-width" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "max-device-width" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "device-height" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "min-device-height" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "max-device-height" , ValueType . LENGTH ) ; FEATURES_TO_VALUE_TYPES . put ( "device-aspect-ratio" , ValueType . RATIO ) ; FEATURES_TO_VALUE_TYPES . put ( "min-device-aspect-ratio" , ValueType . RATIO ) ; FEATURES_TO_VALUE_TYPES . put ( "max-device-aspect-ratio" , ValueType . RATIO ) ; FEATURES_TO_VALUE_TYPES . put ( "aspect-ratio" , ValueType . RATIO ) ; FEATURES_TO_VALUE_TYPES . put ( "min-aspect-ratio" , ValueType . RATIO ) ; FEATURES_TO_VALUE_TYPES . put ( "max-aspect-ratio" , ValueType . RATIO ) ; FEATURES_TO_VALUE_TYPES . put ( "color" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "min-color" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "max-color" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "color-index" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "min-color-index" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "max-color-index" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "monochrome" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "min-monochrome" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "max-monochrome" , ValueType . INTEGER ) ; FEATURES_TO_VALUE_TYPES . put ( "resolution" , ValueType . RESOLUTION ) ; FEATURES_TO_VALUE_TYPES . put ( "min-resolution" , ValueType . RESOLUTION ) ; FEATURES_TO_VALUE_TYPES . put ( "max-resolution" , ValueType . RESOLUTION ) ; FEATURES_TO_VALUE_TYPES . put ( "scan" , ValueType . SCAN ) ; FEATURES_TO_VALUE_TYPES . put ( "orientation" , ValueType . ORIENTATION ) ; FEATURES_TO_VALUE_TYPES . put ( "grid" , ValueType . ONEORZERO ) ; } private static final String [ ] visualFeatures = { "aspect-ratio" , "color" , "color-index" , "device-aspect-ratio" , "max-aspect-ratio" , "max-color" , "max-color-index" , "max-device-aspect-ratio" , "max-monochrome" , "max-resolution" , "min-aspect-ratio" , "min-color" , "min-color-index" , "min-device-aspect-ratio" , "min-monochrome" , "min-resolution" , "monochrome" , "orientation" , "resolution" , } ; private static final String [ ] bitmapFeatures = { "aspect-ratio" , "device-aspect-ratio" , "max-aspect-ratio" , "max-device-aspect-ratio" , "max-resolution" , "min-aspect-ratio" , "min-device-aspect-ratio" , "min-resolution" , "orientation" , "resolution" , } ; private static final String scanWarning = "The media feature “scan” is applicable only to the media type “tv”. " ; private MediaQuery ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { List < String > warnings = new ArrayList < String > ( ) ; List < CharSequenceWithOffset > queries = split ( literal , ',' ) ; for ( CharSequenceWithOffset query : queries ) { warnings = checkQuery ( query . getSequence ( ) , query . getOffset ( ) , warnings ) ; } if ( ! warnings . isEmpty ( ) && WARN ) { StringBuilder sb = new StringBuilder ( ) ; for ( String s : warnings ) { sb . append ( s + " " ) ; } throw newDatatypeException ( sb . toString ( ) . trim ( ) , WARN ) ; } } private List < String > checkQuery ( CharSequence query , int offset , List < String > warnings ) throws DatatypeException { boolean containsAural = false ; boolean zero = true ; String type = null ; String feature = null ; ValueType valueExpectation = null ; query = toAsciiLowerCase ( query ) ; StringBuilder sb = new StringBuilder ( ) ; State state = State . INITIAL_WS ; for ( int i = 0 ; i < query . length ( ) ; i ++ ) { char c = query . charAt ( i ) ; switch ( state ) { case INITIAL_WS : if ( isWhitespace ( c ) ) { continue ; } else if ( '(' == c ) { state = State . OPEN_PAREN_SEEN ; continue ; } else if ( 'o' == c || 'n' == c ) { sb . append ( c ) ; state = State . IN_ONLY_OR_NOT ; continue ; } else if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_MEDIA_TYPE ; continue ; } else { throw newDatatypeException ( offset + i , "Expected “(” or letter at start of a media query part but saw " , c , " instead." ) ; } case IN_ONLY_OR_NOT : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; continue ; } else if ( isWhitespace ( c ) ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( "only" . equals ( kw ) || "not" . equals ( kw ) ) { state = State . WS_BEFORE_MEDIA_TYPE ; continue ; } else { throw newDatatypeException ( offset + i , "Expected “only” or “not” but saw “" + kw + "” instead." ) ; } } else { throw newDatatypeException ( offset + i , "Expected a letter or whitespace but saw “" + c + "” instead." ) ; } case WS_BEFORE_MEDIA_TYPE : if ( isWhitespace ( c ) ) { continue ; } else if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_MEDIA_TYPE ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a letter or whitespace but saw “" + c + "” instead." ) ; } case IN_MEDIA_TYPE : if ( ( 'a' <= c && 'z' >= c ) || c == '-' ) { sb . append ( c ) ; continue ; } else if ( isWhitespace ( c ) ) { type = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( isMediaType ( type ) ) { if ( "aural" . equals ( type ) ) { containsAural = true ; } state = State . WS_BEFORE_AND ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a CSS media type but saw “" + type + "” instead." ) ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, hyphen or whitespace but saw “" + c + "” instead." ) ; } case WS_BEFORE_AND : if ( isWhitespace ( c ) ) { continue ; } else if ( 'a' == c ) { sb . append ( c ) ; state = State . IN_AND ; continue ; } else { throw newDatatypeException ( offset + i , "Expected whitespace or “and” but saw" + " “" + c + "” instead." ) ; } case IN_AND : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; continue ; } else if ( isWhitespace ( c ) ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( "and" . equals ( kw ) ) { state = State . WS_BEFORE_EXPRESSION ; continue ; } else { throw newDatatypeException ( offset + i , "Expected “and” but saw “" + kw + "” instead." ) ; } } else { throw newDatatypeException ( offset + i , "Expected a letter or whitespace but saw “" + c + "” instead." ) ; } case WS_BEFORE_EXPRESSION : if ( isWhitespace ( c ) ) { continue ; } else if ( '(' == c ) { state = State . OPEN_PAREN_SEEN ; continue ; } else { throw newDatatypeException ( offset + i , "Expected “(” or whitespace but saw “" + c + "” instead." ) ; } case OPEN_PAREN_SEEN : if ( isWhitespace ( c ) ) { continue ; } else if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_MEDIA_FEATURE ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a letter at start of a media feature part but saw “" + c + "” instead." ) ; } case IN_MEDIA_FEATURE : if ( ( 'a' <= c && 'z' >= c ) || c == '-' ) { sb . append ( c ) ; continue ; } else if ( c == ')' ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; checkApplicability ( offset + i , kw , type , warnings ) ; checkIfValueRequired ( offset + i , kw ) ; state = State . AFTER_CLOSE_PAREN ; continue ; } else if ( isWhitespace ( c ) || c == ':' ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; checkApplicability ( offset + i , kw , type , warnings ) ; feature = kw ; valueExpectation = valueExpectationFor ( kw ) ; if ( valueExpectation != null ) { if ( c == ':' ) { state = State . WS_BEFORE_VALUE ; continue ; } else { state = State . WS_BEFORE_COLON ; continue ; } } else { throw newDatatypeException ( offset + i , "Expected a CSS media feature but saw “" + kw + "” instead." ) ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, hyphen, colon or whitespace but saw “" + c + "” instead." ) ; } case WS_BEFORE_COLON : if ( isWhitespace ( c ) ) { continue ; } else if ( ':' == c ) { state = State . WS_BEFORE_VALUE ; continue ; } else { throw newDatatypeException ( offset + i , "Expected whitespace or colon but saw “" + c + "” instead." ) ; } case WS_BEFORE_VALUE : if ( isWhitespace ( c ) ) { continue ; } else { zero = true ; switch ( valueExpectation ) { case SCAN : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_VALUE_SCAN ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a letter but saw “" + c + "” instead." ) ; } case ORIENTATION : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_VALUE_ORIENTATION ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a letter but saw “" + c + "” instead." ) ; } case ONEORZERO : if ( c == '0' || c == '1' ) { sb . append ( c ) ; state = State . IN_VALUE_ONEORZERO ; continue ; } else { throw newDatatypeException ( offset + i , "Expected “0” or “1” as “" + feature + "” value but found “" + c + "” instead." ) ; } default : if ( '1' <= c && '9' >= c ) { zero = false ; state = State . IN_VALUE_DIGITS ; continue ; } else if ( '0' == c ) { state = State . IN_VALUE_DIGITS ; continue ; } else if ( '+' == c ) { state = State . IN_VALUE_BEFORE_DIGITS ; continue ; } else if ( '.' == c && valueExpectation == ValueType . LENGTH ) { state = State . IN_VALUE_DIGITS_AFTER_DOT ; continue ; } else if ( valueExpectation == ValueType . LENGTH ) { throw newDatatypeException ( offset + i , "Expected a digit, a dot or a plus sign but saw “" + c + "” instead." ) ; } else { throw newDatatypeException ( offset + i , "Expected a digit or a plus sign but saw “" + c + "” instead." ) ; } } } case IN_VALUE_SCAN : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; continue ; } else if ( isWhitespace ( c ) || c == ')' ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( ! ( "progressive" . equals ( kw ) || "interlace" . equals ( kw ) ) ) { throw newDatatypeException ( offset + i , "Expected “progressive” or “interlace” as the scan mode value but saw “" + kw + "” instead." ) ; } if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, whitespace or “)” but saw “" + c + "” instead." ) ; } case IN_VALUE_ORIENTATION : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; continue ; } else if ( isWhitespace ( c ) || c == ')' ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( ! ( "portrait" . equals ( kw ) || "landscape" . equals ( kw ) ) ) { throw newDatatypeException ( offset + i , "Expected “portrait” or “landscape” as the “orientation” value but saw “" + kw + "” instead." ) ; } if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, whitespace or “)” but saw “" + c + "” instead." ) ; } case IN_VALUE_ONEORZERO : if ( isWhitespace ( c ) || c == ')' ) { sb . setLength ( 0 ) ; if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } } else { sb . append ( c ) ; String kw = sb . toString ( ) ; throw newDatatypeException ( offset + i , "Expected “0” or “1” as “" + feature + "” value but saw “" + kw + "” instead." ) ; } case IN_VALUE_BEFORE_DIGITS : if ( '0' == c ) { state = State . IN_VALUE_DIGITS ; continue ; } else if ( '1' <= c && '9' >= c ) { zero = false ; state = State . IN_VALUE_DIGITS ; continue ; } else { switch ( valueExpectation ) { case LENGTH : case RESOLUTION : if ( '.' == c ) { state = State . IN_VALUE_DIGITS_AFTER_DOT ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a dot or a digit but saw “" + c + "” instead." ) ; } case INTEGER : case RATIO : throw newDatatypeException ( offset + i , "Expected a digit but saw “" + c + "” instead." ) ; default : throw new RuntimeException ( "Impossible state." ) ; } } case IN_VALUE_DIGITS : if ( '0' == c ) { continue ; } else if ( '1' <= c && '9' >= c ) { zero = false ; continue ; } else { switch ( valueExpectation ) { case LENGTH : case RESOLUTION : if ( '.' == c ) { state = State . IN_VALUE_DIGITS_AFTER_DOT ; continue ; } else if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_VALUE_UNIT ; continue ; } else if ( isWhitespace ( c ) || c == ')' ) { if ( ! zero ) { if ( valueExpectation == ValueType . LENGTH ) { throw newDatatypeException ( offset + i , "Non-zero lengths require a unit." ) ; } else { throw newDatatypeException ( offset + i , "Non-zero resolutions require a unit." ) ; } } if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, a dot or a digit but saw “" + c + "” instead." ) ; } case INTEGER : if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else if ( isWhitespace ( c ) ) { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a digit, whitespace or “)” but saw “" + c + "” instead." ) ; } case NONZEROINTEGER : if ( c == ')' ) { if ( zero ) { throw newDatatypeException ( offset + i , "Expected a non-zero positive integer." ) ; } state = State . AFTER_CLOSE_PAREN ; continue ; } else if ( isWhitespace ( c ) ) { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a digit, whitespace or “)” but saw “" + c + "” instead." ) ; } case RATIO : if ( isWhitespace ( c ) ) { continue ; } else if ( c == '/' ) { if ( zero ) { throw newDatatypeException ( offset + i , "Expected non-zero positive integer in ratio value." ) ; } valueExpectation = ValueType . NONZEROINTEGER ; state = State . RATIO_SECOND_INTEGER_START ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a digit, whitespace or" + " “/” for " + feature + " value but saw “" + c + "” instead." ) ; } default : throw new RuntimeException ( "Impossible state." ) ; } } case IN_VALUE_DIGITS_AFTER_DOT : if ( '0' == c ) { state = State . IN_VALUE_DIGITS_AFTER_DOT_TRAIL ; continue ; } else if ( '1' <= c && '9' >= c ) { state = State . IN_VALUE_DIGITS_AFTER_DOT_TRAIL ; zero = false ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a digit but saw “" + c + "” instead." ) ; } case IN_VALUE_DIGITS_AFTER_DOT_TRAIL : if ( '0' == c ) { continue ; } else if ( '1' <= c && '9' >= c ) { zero = false ; continue ; } else { switch ( valueExpectation ) { case LENGTH : case RESOLUTION : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; state = State . IN_VALUE_UNIT ; continue ; } else if ( isWhitespace ( c ) || c == ')' ) { if ( ! zero ) { if ( valueExpectation == ValueType . LENGTH ) { throw newDatatypeException ( offset + i , "Non-zero lengths require a unit." ) ; } else { throw newDatatypeException ( offset + i , "Non-zero resolutions require a unit." ) ; } } if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, a digit, whitespace or “)” but saw “" + c + "” instead." ) ; } default : throw new RuntimeException ( "Impossible state." ) ; } } case IN_VALUE_UNIT : if ( 'a' <= c && 'z' >= c ) { sb . append ( c ) ; continue ; } else if ( isWhitespace ( c ) || c == ')' ) { String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( valueExpectation == ValueType . LENGTH ) { if ( ! isLengthUnit ( kw ) ) { throw newDatatypeException ( offset + i , "Expected a length unit but saw “" + c + "” instead." ) ; } } else { if ( ! ( "dpi" . equals ( kw ) || "dpcm" . equals ( kw ) ) ) { throw newDatatypeException ( offset + i , "Expected a resolution unit but saw “" + c + "” instead." ) ; } } if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { state = State . WS_BEFORE_CLOSE_PAREN ; continue ; } } else { throw newDatatypeException ( offset + i , "Expected a letter, a dot or a digit but saw “" + c + "” instead." ) ; } case RATIO_SECOND_INTEGER_START : valueExpectation = ValueType . NONZEROINTEGER ; if ( isWhitespace ( c ) ) { continue ; } else if ( '1' <= c && '9' >= c ) { zero = false ; state = State . IN_VALUE_DIGITS ; continue ; } else if ( '0' == c ) { zero = true ; state = State . IN_VALUE_DIGITS ; continue ; } else if ( '+' == c ) { state = State . IN_VALUE_BEFORE_DIGITS ; continue ; } else { throw newDatatypeException ( offset + i , "Expected a digit, whitespace or a plus sign" + " for " + feature + " value but saw “" + c + "” instead." ) ; } case AFTER_CLOSE_PAREN : if ( isWhitespace ( c ) ) { state = State . WS_BEFORE_AND ; continue ; } else { throw newDatatypeException ( offset + i , "Expected whitespace but saw “" + c + "” instead." ) ; } case WS_BEFORE_CLOSE_PAREN : if ( isWhitespace ( c ) ) { continue ; } else if ( c == ')' ) { state = State . AFTER_CLOSE_PAREN ; continue ; } else { throw newDatatypeException ( offset + i , "Expected whitespace or “)” but saw “" + c + "” instead." ) ; } } } switch ( state ) { case AFTER_CLOSE_PAREN : case WS_BEFORE_AND : if ( containsAural && WARN ) { warnings . add ( "The media type “aural” is deprecated. Use “speech” instead. " ) ; } return warnings ; case IN_MEDIA_TYPE : String kw = sb . toString ( ) ; sb . setLength ( 0 ) ; if ( isMediaType ( kw ) ) { if ( "aural" . equals ( kw ) && WARN ) { warnings . add ( "The media type “aural” is deprecated. Use “speech” instead. " ) ; } return warnings ; } else { throw newDatatypeException ( "Expected a CSS media type but the query ended." ) ; } default : throw newDatatypeException ( "Media query ended prematurely." ) ; } } private boolean isMediaFeature ( String feature ) { return FEATURES_TO_VALUE_TYPES . containsKey ( feature ) ; } private ValueType valueExpectationFor ( String feature ) { return FEATURES_TO_VALUE_TYPES . get ( feature ) ; } private boolean isMediaType ( String type ) { return MEDIA_TYPES . contains ( type ) ; } private boolean isLengthUnit ( String unit ) { return LENGTH_UNITS . contains ( unit ) ; } private List < String > checkApplicability ( int index , String feature , String type , List < String > warnings ) throws DatatypeException { if ( ! isMediaType ( type ) ) { return warnings ; } if ( ! isMediaFeature ( feature ) ) { throw newDatatypeException ( index , "Expected a CSS media feature but saw “" + feature + "” instead." ) ; } if ( "scan" . equals ( feature ) && ! "tv" . equals ( type ) ) { warnings . add ( scanWarning ) ; return warnings ; } switch ( MediaType . toCaps ( type ) ) { case SPEECH : warnings . add ( "The media feature “" + feature + "” is not applicable to the media type “speech”. " ) ; return warnings ; case BRAILLE : case EMBOSSED : if ( Arrays . binarySearch ( visualFeatures , feature ) > - 1 ) { warnings . add ( "The visual media feature “" + feature + "” is not applicable to the tactile media type “" + type + "”. " ) ; } return warnings ; case TTY : if ( Arrays . binarySearch ( bitmapFeatures , feature ) > - 1 ) { warnings . add ( "The bitmap media feature “" + feature + "” is not applicable to the media type “tty”. " ) ; } return warnings ; default : return warnings ; } } private void checkIfValueRequired ( int index , String feature ) throws DatatypeException { if ( feature . startsWith ( "min-" ) || feature . startsWith ( "max-" ) ) { throw newDatatypeException ( index , "Expected a value for the media feature “" + feature + "”." ) ; } } @ Override public String getName ( ) { return "media query" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
