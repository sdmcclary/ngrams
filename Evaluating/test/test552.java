public final class ApplicationPreferences { private static final String aptanaSettings = ".aptana-settings" ; private static ApplicationPreferences instance ; private Map < String , String > _keyValuePairs ; private boolean _hasLoaded ; private ListenerList listenerList ; private ApplicationPreferences ( ) { this . _keyValuePairs = new HashMap < String , String > ( ) ; this . listenerList = new ListenerList ( ) ; } public static ApplicationPreferences getInstance ( ) { if ( instance == null ) { instance = new ApplicationPreferences ( ) ; instance . loadPreferences ( ) ; } return instance ; } private File getSettingsFile ( ) { File config = ApplicationPreferences . getConfigurationDirectory ( ) ; return new File ( config , aptanaSettings ) ; } public static File getConfigurationDirectory ( ) { String homeDir = System . getProperty ( "osgi.configuration.area" ) ; URL fileURL = ApplicationPreferences . uriToURL ( homeDir ) ; File f = ApplicationPreferences . urlToFile ( fileURL ) ; f . mkdirs ( ) ; return f ; } public void loadPreferences ( ) { File settings = getSettingsFile ( ) ; if ( this . _hasLoaded || settings . exists ( ) == false ) { return ; } FileReader fr = null ; StringBuilder errors = new StringBuilder ( ) ; try { fr = new FileReader ( settings ) ; BufferedReader br = new BufferedReader ( fr ) ; String line = br . readLine ( ) ; int lineNumber = 1 ; while ( line != null ) { int colonIndex = line . indexOf ( ":" ) ; if ( colonIndex != - 1 ) { String key = line . substring ( 0 , colonIndex ) ; String value = line . substring ( colonIndex + 1 , line . length ( ) ) ; this . _keyValuePairs . put ( key , value ) ; } else { errors . append ( "\t[line " ) ; errors . append ( lineNumber ) ; errors . append ( "] - Expected key-value pair, but found '" ) ; errors . append ( line ) ; errors . append ( "'\n" ) ; } line = br . readLine ( ) ; lineNumber ++ ; } } catch ( Exception e ) { logError ( Messages . ApplicationPreferences_ERR_UnableToReadAptanaSettings , e ) ; } finally { if ( fr != null ) { try { fr . close ( ) ; } catch ( IOException e ) { logError ( Messages . ApplicationPreferences_ERR_UnableToCloseAptanaSettings , e ) ; } } if ( errors . length ( ) > 0 ) { logError ( "Errors found when reading the Aptana settings file:\n" + errors . toString ( ) , null ) ; } this . _hasLoaded = true ; } } private File getPreviousDefaultSettingsFile ( ) { File previousReleaseSettingsFile = null ; if ( Platform . OS_MACOSX . equals ( Platform . getOS ( ) ) ) { previousReleaseSettingsFile = new File ( System . getProperty ( "user.home" ) + "/Library/Application Support/Aptana/Aptana Studio/configuration" , aptanaSettings ) ; } else if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { previousReleaseSettingsFile = new File ( System . getProperty ( "user.home" ) + "\\Application Data\\Aptana\\Aptana Studio\\configuration" , aptanaSettings ) ; } else if ( Platform . OS_LINUX . equals ( Platform . getOS ( ) ) ) { previousReleaseSettingsFile = new File ( System . getProperty ( "user.home" ) + "/.Aptana/Aptana Studio/configuration" , aptanaSettings ) ; } if ( previousReleaseSettingsFile != null && previousReleaseSettingsFile . exists ( ) ) { return previousReleaseSettingsFile ; } return null ; } public Map < String , String > loadPreviousPreferences ( ) { Map < String , String > previousPreferences = new HashMap < String , String > ( ) ; File previousDefaultSettingsFile = getPreviousDefaultSettingsFile ( ) ; if ( previousDefaultSettingsFile != null ) { FileReader fr = null ; try { fr = new FileReader ( previousDefaultSettingsFile ) ; BufferedReader br = new BufferedReader ( fr ) ; String line = br . readLine ( ) ; while ( line != null ) { int colonIndex = line . indexOf ( ":" ) ; if ( colonIndex != - 1 ) { String key = line . substring ( 0 , colonIndex ) ; String value = line . substring ( colonIndex + 1 , line . length ( ) ) ; previousPreferences . put ( key , value ) ; line = br . readLine ( ) ; } } } catch ( Exception e ) { logError ( "Unable to read previous Aptana settings" , e ) ; } finally { if ( fr != null ) { try { fr . close ( ) ; } catch ( IOException e ) { logError ( "Unable to close previous Aptana settings" , e ) ; } } } } return previousPreferences ; } public void addPropertyChangeListener ( IPropertyChangeListener listener ) { listenerList . add ( listener ) ; } public void removePropertyChangeListener ( IPropertyChangeListener listener ) { listenerList . remove ( listener ) ; } public void firePropertyChangeEvent ( String name , Object oldValue , Object newValue ) { firePropertyChangeEvent ( new PropertyChangeEvent ( this , name , oldValue , newValue ) ) ; } private void firePropertyChangeEvent ( PropertyChangeEvent event ) { Object [ ] listeners = listenerList . getListeners ( ) ; for ( int i = 0 ; i < listeners . length ; i ++ ) { ( ( IPropertyChangeListener ) listeners [ i ] ) . propertyChange ( event ) ; } } public void savePreferences ( ) { BufferedWriter bw = null ; try { File settings = getSettingsFile ( ) ; FileWriter fw = new FileWriter ( settings ) ; bw = new BufferedWriter ( fw ) ; Set < Map . Entry < String , String > > entries = this . _keyValuePairs . entrySet ( ) ; Iterator < Map . Entry < String , String > > iter = entries . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , String > entry = iter . next ( ) ; bw . write ( entry . getKey ( ) ) ; bw . write ( ":" ) ; bw . write ( entry . getValue ( ) ) ; bw . newLine ( ) ; } } catch ( Exception e ) { logError ( Messages . ApplicationPreferences_ERR_UnableToWriteAptanaSettings , e ) ; } finally { if ( bw != null ) { try { bw . close ( ) ; } catch ( IOException e ) { logError ( Messages . ApplicationPreferences_ERR_UnableToCloseAptanaSettings , e ) ; } } } } public boolean getBoolean ( String preferenceName ) { return "true" . equals ( this . getString ( preferenceName ) ) ; } public String getString ( String preferenceName ) { if ( preferenceName == null ) { throw new IllegalArgumentException ( "preference name must be defined" ) ; } String result = null ; if ( this . _keyValuePairs . containsKey ( preferenceName ) ) { result = this . _keyValuePairs . get ( preferenceName ) ; } return result ; } public void setBoolean ( String preferenceName , boolean preferenceValue ) { this . setString ( preferenceName , preferenceValue ? "true" : "false" ) ; } public void setString ( String preferenceName , String preferenceValue ) { if ( preferenceName == null ) { throw new IllegalArgumentException ( "preference name must be defined" ) ; } this . _keyValuePairs . put ( preferenceName , preferenceValue ) ; firePropertyChangeEvent ( preferenceName , StringUtils . EMPTY , preferenceValue ) ; } public static URL uriToURL ( String uri ) { URI uri2 ; String encodedUri ; try { encodedUri = URLEncoder . encode ( uri , null , null ) ; uri2 = new URI ( encodedUri ) ; return uri2 . toURL ( ) ; } catch ( MalformedURLException e ) { logError ( StringUtils . format ( Messages . ApplicationPreferences_ERR_UnableToConvertURIToURL , uri ) , e ) ; return null ; } catch ( URISyntaxException e ) { logError ( StringUtils . format ( Messages . ApplicationPreferences_ERR_UnableToConvertURIToURLSyntaxIsIncorrect , uri ) , e ) ; return null ; } } public static File urlToFile ( URL url ) { try { URI uri = new URI ( url . toString ( ) ) ; if ( "file" . equals ( uri . getScheme ( ) ) ) { return new File ( uri . getSchemeSpecificPart ( ) ) ; } } catch ( Exception e ) { logError ( Messages . ApplicationPreferences_ERR_FailedToConvertURLToFile , e ) ; } return null ; } private static void logError ( String errorMessage , Throwable e ) { IStatus status = new Status ( IStatus . ERROR , ResourcesPlugin . getPlugin ( ) . getBundle ( ) . getSymbolicName ( ) , IStatus . OK , errorMessage , e ) ; ResourcesPlugin . getPlugin ( ) . getLog ( ) . log ( status ) ; } } 