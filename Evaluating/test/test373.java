<<<<<<< HEAD
public class Function extends AbstractFunction { protected final FunctionInfo _info ; protected final boolean _isReturnsReference ; protected final String _name ; protected final Arg [ ] _args ; protected final Statement _statement ; protected boolean _hasReturn ; protected String _comment ; Function ( Location location , String name , FunctionInfo info , Arg [ ] args , Statement [ ] statements ) { super ( location ) ; _name = name . intern ( ) ; _info = info ; _info . setFunction ( this ) ; _isReturnsReference = info . isReturnsReference ( ) ; _args = args ; _statement = new BlockStatement ( location , statements ) ; setGlobal ( info . isPageStatic ( ) ) ; _isStatic = true ; } public Function ( ExprFactory exprFactory , Location location , String name , FunctionInfo info , Arg [ ] args , Statement [ ] statements ) { super ( location ) ; _name = name . intern ( ) ; _info = info ; _info . setFunction ( this ) ; _isReturnsReference = info . isReturnsReference ( ) ; _args = new Arg [ args . length ] ; System . arraycopy ( args , 0 , _args , 0 , args . length ) ; _statement = exprFactory . createBlock ( location , statements ) ; setGlobal ( info . isPageStatic ( ) ) ; _isStatic = true ; } public String getName ( ) { return _name ; } @ Override public ClassDef getDeclaringClass ( ) { return _info . getDeclaringClass ( ) ; } @ Override public String getDeclaringClassName ( ) { ClassDef declaringClass = _info . getDeclaringClass ( ) ; if ( declaringClass != null ) return declaringClass . getName ( ) ; else return null ; } public Arg [ ] getArgs ( ) { return _args ; } public boolean isObjectMethod ( ) { return false ; } public boolean isReturnsReference ( ) { return _isReturnsReference ; } public void setComment ( String comment ) { _comment = comment ; } @ Override public String getComment ( ) { return _comment ; } public Value execute ( Env env ) { return null ; } @ Override public Value [ ] evalArguments ( Env env , Expr fun , Expr [ ] args ) { Value [ ] values = new Value [ args . length ] ; for ( int i = 0 ; i < args . length ; i ++ ) { Arg arg = null ; if ( i < _args . length ) arg = _args [ i ] ; if ( arg == null ) values [ i ] = args [ i ] . eval ( env ) . copy ( ) ; else if ( arg . isReference ( ) ) values [ i ] = args [ i ] . evalRef ( env ) ; else { values [ i ] = args [ i ] . eval ( env ) ; } } return values ; } public Value call ( Env env , Expr [ ] args ) { return callImpl ( env , args , false ) ; } public Value callCopy ( Env env , Expr [ ] args ) { return callImpl ( env , args , false ) ; } public Value callRef ( Env env , Expr [ ] args ) { return callImpl ( env , args , true ) ; } private Value callImpl ( Env env , Expr [ ] args , boolean isRef ) { HashMap < String , EnvVar > map = new HashMap < String , EnvVar > ( ) ; Value [ ] values = new Value [ args . length ] ; for ( int i = 0 ; i < args . length ; i ++ ) { Arg arg = null ; if ( i < _args . length ) { arg = _args [ i ] ; } if ( arg == null ) { values [ i ] = args [ i ] . eval ( env ) . copy ( ) ; } else if ( arg . isReference ( ) ) { values [ i ] = args [ i ] . evalRef ( env ) ; map . put ( arg . getName ( ) , new EnvVarImpl ( values [ i ] . toRefVar ( ) ) ) ; } else { values [ i ] = args [ i ] . eval ( env ) ; Var var = values [ i ] . toVar ( ) ; map . put ( arg . getName ( ) , new EnvVarImpl ( var ) ) ; values [ i ] = var . toValue ( ) ; } } for ( int i = args . length ; i < _args . length ; i ++ ) { Arg arg = _args [ i ] ; Expr defaultExpr = arg . getDefault ( ) ; if ( defaultExpr == null ) return env . error ( "expected default expression" ) ; else if ( arg . isReference ( ) ) map . put ( arg . getName ( ) , new EnvVarImpl ( defaultExpr . evalRef ( env ) . toVar ( ) ) ) ; else { map . put ( arg . getName ( ) , new EnvVarImpl ( defaultExpr . eval ( env ) . copy ( ) . toVar ( ) ) ) ; } } Map < String , EnvVar > oldMap = env . pushEnv ( map ) ; Value [ ] oldArgs = env . setFunctionArgs ( values ) ; Value oldThis ; if ( isStatic ( ) ) { oldThis = env . setThis ( NullThisValue . NULL ) ; } else oldThis = env . getThis ( ) ; try { Value value = _statement . execute ( env ) ; if ( value == null ) return NullValue . NULL ; else if ( _isReturnsReference && isRef ) return value ; else return value . copyReturn ( ) ; } finally { env . restoreFunctionArgs ( oldArgs ) ; env . popEnv ( oldMap ) ; env . setThis ( oldThis ) ; } } public Value call ( Env env , Value [ ] args ) { return callImpl ( env , args , false ) ; } public Value callCopy ( Env env , Value [ ] args ) { return callImpl ( env , args , false ) ; } public Value callRef ( Env env , Value [ ] args ) { return callImpl ( env , args , true ) ; } private Value callImpl ( Env env , Value [ ] args , boolean isRef ) { HashMap < String , EnvVar > map = new HashMap < String , EnvVar > ( 8 ) ; for ( int i = 0 ; i < args . length ; i ++ ) { Arg arg = null ; if ( i < _args . length ) { arg = _args [ i ] ; } if ( arg == null ) { } else if ( arg . isReference ( ) ) { map . put ( arg . getName ( ) , new EnvVarImpl ( args [ i ] . toRefVar ( ) ) ) ; } else { Var var = args [ i ] . copy ( ) . toVar ( ) ; if ( arg . getExpectedClass ( ) != null && arg . getDefault ( ) instanceof RequiredExpr ) { env . checkTypeHint ( var , arg . getExpectedClass ( ) , arg . getName ( ) , getName ( ) ) ; } map . put ( arg . getName ( ) , new EnvVarImpl ( var ) ) ; } } for ( int i = args . length ; i < _args . length ; i ++ ) { Arg arg = _args [ i ] ; Expr defaultExpr = arg . getDefault ( ) ; if ( defaultExpr == null ) return env . error ( "expected default expression" ) ; else if ( arg . isReference ( ) ) map . put ( arg . getName ( ) , new EnvVarImpl ( defaultExpr . evalRef ( env ) . toVar ( ) ) ) ; else { map . put ( arg . getName ( ) , new EnvVarImpl ( defaultExpr . eval ( env ) . copy ( ) . toVar ( ) ) ) ; } } Map < String , EnvVar > oldMap = env . pushEnv ( map ) ; Value [ ] oldArgs = env . setFunctionArgs ( args ) ; Value oldThis ; if ( isStatic ( ) ) { oldThis = env . setThis ( NullThisValue . NULL ) ; } else oldThis = env . getThis ( ) ; try { Value value = _statement . execute ( env ) ; if ( value == null ) return NullValue . NULL ; else if ( _isReturnsReference && isRef ) return value ; else return value . copyReturn ( ) ; } finally { env . restoreFunctionArgs ( oldArgs ) ; env . popEnv ( oldMap ) ; env . setThis ( oldThis ) ; } } public String toString ( ) { return getClass ( ) . getSimpleName ( ) + "[" + _name + "]" ; } } 
=======
public class XsdSchemaReaderFactory implements SchemaReaderFactory { public XsdSchemaReaderFactory ( ) { new XMLGrammarPreparser ( ) ; } public SchemaReader createSchemaReader ( String namespaceUri ) { if ( WellKnownNamespaces . XML_SCHEMA . equals ( namespaceUri ) ) return new SchemaReaderImpl ( ) ; return null ; } public Option getOption ( String uri ) { return null ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
