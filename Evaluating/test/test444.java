public class CdoCdcPair extends AbstractDatatype { private enum State { DATA , LESS_THAN_SIGN , LESS_THAN_SIGN_BANG , LESS_THAN_SIGN_BANG_HYPHEN , HAS_CDO , HAS_CDO_AND_HYPHEN , HAS_CDO_AND_DOUBLE_HYPHEN } public static final CdoCdcPair THE_INSTANCE = new CdoCdcPair ( ) ; protected CdoCdcPair ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { State state = State . DATA ; for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; switch ( state ) { case DATA : if ( '<' == c ) { state = State . LESS_THAN_SIGN ; continue ; } continue ; case LESS_THAN_SIGN : if ( '!' == c ) { state = State . LESS_THAN_SIGN_BANG ; continue ; } state = State . DATA ; continue ; case LESS_THAN_SIGN_BANG : if ( '-' == c ) { state = State . LESS_THAN_SIGN_BANG_HYPHEN ; continue ; } state = State . DATA ; continue ; case LESS_THAN_SIGN_BANG_HYPHEN : if ( '-' == c ) { state = State . HAS_CDO ; continue ; } state = State . DATA ; continue ; case HAS_CDO : if ( '-' == c ) { state = State . HAS_CDO_AND_HYPHEN ; continue ; } continue ; case HAS_CDO_AND_HYPHEN : if ( '-' == c ) { state = State . HAS_CDO_AND_DOUBLE_HYPHEN ; continue ; } state = State . HAS_CDO ; continue ; case HAS_CDO_AND_DOUBLE_HYPHEN : if ( '>' == c ) { state = State . DATA ; continue ; } else if ( '-' == c ) { continue ; } state = State . HAS_CDO ; continue ; default : assert false : state ; } } if ( state == State . HAS_CDO ) { throw newDatatypeException ( "Content contains the character sequence “<!--” without" + " a later occurrence of the character sequence “-->”." ) ; } } @ Override public String getName ( ) { return "text content with CDO-CDC pair" ; } } 