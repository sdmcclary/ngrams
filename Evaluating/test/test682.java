public class LibraryWizardPage extends WizardPage implements IBaseWizardPage { private CheckboxTableViewer referenceProjectsViewer ; private static final String JS_LIBS_TITLE = Messages . LibraryWizardPage_SelectAJAXLibraries ; private static final String INSTALL_JS_LIBS_LABEL = Messages . LibraryWizardPage_InstallJavascriptLibraries ; private static final int LIB_LIST_MULTIPLIER = 15 ; private IStructuredContentProvider _contentProvider ; private ILabelProvider _labelProvider ; public LibraryWizardPage ( String pageName , IStructuredContentProvider contentProvider , ILabelProvider labelProvider ) { super ( pageName ) ; _contentProvider = contentProvider ; _labelProvider = labelProvider ; } public void createControl ( Composite parent ) { Font font = parent . getFont ( ) ; Composite composite = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; composite . setLayout ( layout ) ; composite . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; composite . setFont ( font ) ; LibraryInfo [ ] libraryInfoExtensions = LibraryManager . getInstance ( ) . getLibraryInfoExtensions ( ) ; if ( libraryInfoExtensions . length == 0 ) { Browser browser = new Browser ( composite , SWT . BORDER ) ; browser . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; browser . setFont ( font ) ; Bundle bundle = Platform . getBundle ( ProjectsPlugin . PLUGIN_ID ) ; URL url = null ; try { url = FileLocator . toFileURL ( bundle . getEntry ( "html/librarywizardpage.html" ) ) ; browser . setUrl ( url . toString ( ) ) ; } catch ( IOException e ) { IdeLog . logInfo ( ProjectsPlugin . getDefault ( ) , e . getMessage ( ) , e ) ; } } else { Label referenceLabel = new Label ( composite , SWT . NONE ) ; referenceLabel . setText ( JS_LIBS_TITLE ) ; referenceLabel . setFont ( font ) ; referenceProjectsViewer = CheckboxTableViewer . newCheckList ( composite , SWT . BORDER ) ; referenceProjectsViewer . getTable ( ) . setFont ( composite . getFont ( ) ) ; GridData data = new GridData ( ) ; data . horizontalAlignment = GridData . FILL ; data . verticalAlignment = GridData . FILL ; data . grabExcessHorizontalSpace = true ; data . grabExcessVerticalSpace = true ; data . heightHint = getDefaultFontHeight ( referenceProjectsViewer . getTable ( ) , LIB_LIST_MULTIPLIER ) ; referenceProjectsViewer . getTable ( ) . setLayoutData ( data ) ; referenceProjectsViewer . setLabelProvider ( new LabelProvider ( ) ) ; referenceProjectsViewer . setContentProvider ( _contentProvider ) ; referenceProjectsViewer . setLabelProvider ( _labelProvider ) ; referenceProjectsViewer . setInput ( ResourcesPlugin . getWorkspace ( ) ) ; } Button installLibrariesButton = new Button ( composite , SWT . PUSH ) ; installLibrariesButton . setText ( INSTALL_JS_LIBS_LABEL ) ; installLibrariesButton . setLayoutData ( new GridData ( SWT . END , SWT . CENTER , false , false ) ) ; installLibrariesButton . addSelectionListener ( new SelectionListener ( ) { public void widgetDefaultSelected ( SelectionEvent e ) { } public void widgetSelected ( SelectionEvent e ) { getWizard ( ) . performCancel ( ) ; getWizard ( ) . getContainer ( ) . getShell ( ) . close ( ) ; Activator . launchWizard ( false , new String [ ] { "installer.ajax" } ) ; } } ) ; setControl ( composite ) ; } private static int getDefaultFontHeight ( Control control , int lines ) { FontData [ ] viewerFontData = control . getFont ( ) . getFontData ( ) ; int fontHeight = 10 ; if ( viewerFontData . length > 0 ) { fontHeight = viewerFontData [ 0 ] . getHeight ( ) ; } return lines * fontHeight ; } public String [ ] getSelectedLibraries ( ) { List < String > libs = new ArrayList < String > ( ) ; if ( referenceProjectsViewer != null ) { Object [ ] elements = referenceProjectsViewer . getCheckedElements ( ) ; for ( int i = 0 ; i < elements . length ; i ++ ) { LibraryInfo item = ( LibraryInfo ) elements [ i ] ; URL resolved = item . getResolvedURL ( ) ; if ( resolved != null ) { libs . add ( resolved . getFile ( ) ) ; } } } return libs . toArray ( new String [ 0 ] ) ; } public void setVisible ( boolean visible ) { super . setVisible ( visible ) ; if ( visible ) { setPageComplete ( true ) ; } } public void performFinish ( ) { IProgressMonitor monitor = ( ( BaseWizard ) getWizard ( ) ) . getFinishProgressMonitor ( ) ; IProject p = ( ( BaseWizard ) getWizard ( ) ) . getCreatedProject ( ) ; String toOpen = null ; String [ ] selection = getSelectedLibraries ( ) ; for ( int j = 0 ; j < selection . length ; j ++ ) { String destinationDir = p . getLocation ( ) . toOSString ( ) ; String sourceDir = selection [ j ] ; try { File f = new File ( sourceDir ) ; File [ ] files = f . listFiles ( ) ; if ( monitor != null ) { monitor . beginTask ( StringUtils . format ( Messages . LibraryProjectWizard_CopyingFiles , selection [ j ] ) , files . length ) ; } for ( int i = 0 ; i < files . length ; i ++ ) { String name = files [ i ] . getName ( ) ; if ( monitor != null ) { monitor . subTask ( name ) ; } FileUtils . copy ( sourceDir , destinationDir , name ) ; if ( toOpen == null && ( name . toLowerCase ( ) . endsWith ( ".htm" ) || name . toLowerCase ( ) . endsWith ( ".html" ) ) ) { toOpen = name ; } if ( monitor != null ) { monitor . worked ( 1 ) ; } } } catch ( Exception e ) { IdeLog . logError ( ProjectsPlugin . getDefault ( ) , Messages . LibraryProjectWizard_UnableToCopyFileToProject , e ) ; } try { p . refreshLocal ( IResource . DEPTH_INFINITE , null ) ; } catch ( CoreException e ) { IdeLog . logError ( ProjectsPlugin . getDefault ( ) , Messages . LibraryProjectWizard_Error , e ) ; } } } } 