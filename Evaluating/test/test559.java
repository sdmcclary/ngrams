public abstract class CoreGroupObject < T extends CoreModelObject > extends CoreModelObject { protected List < T > children ; protected boolean requireUniqueIds ; protected T childTemplate ; public CoreGroupObject ( ) { children = new ArrayList < T > ( ) ; childTemplate = createItem ( ) ; this . requireUniqueIds = true ; } public T getItem ( String itemId ) { if ( itemId != null ) { for ( T item : getItems ( ) ) { if ( itemId . equals ( item . getId ( ) ) ) { return item ; } } } return null ; } public abstract boolean shouldAdd ( T item ) ; public T [ ] getItems ( ) { return this . children . toArray ( createEmptyArray ( ) ) ; } public synchronized void clear ( ) { if ( this . children != null ) { isLoading = true ; for ( T item : getItems ( ) ) { item . clear ( ) ; } this . children . clear ( ) ; } } public void addListener ( IModelListener listener ) { super . addListener ( listener ) ; for ( T item : getItems ( ) ) { item . addListener ( listener ) ; } } public void fromNode ( Node node ) { try { NodeList set = ( NodeList ) XPATH . evaluate ( getItemString ( ) , node , XPathConstants . NODESET ) ; updateGroup ( set ) ; } catch ( XPathExpressionException e1 ) { isLoading = false ; String message = MessageFormat . format ( Messages . getString ( "CoreGroupObject.XPath_Error_During_Parse" ) , new Object [ ] { getLoggingPrefix ( ) , e1 . getMessage ( ) } ) ; logError ( message ) ; } } protected abstract T [ ] createEmptyArray ( ) ; public abstract T createItem ( ) ; protected void configureItem ( T item ) { configurationLocation ( item ) ; item . setRequestBuilder ( getRequestBuilder ( ) ) ; item . setServiceProvider ( getServiceProvider ( ) ) ; } protected void configurationLocation ( T item ) { if ( item . getId ( ) != null && getLocation ( ) != null ) { String itemLocation = getLocation ( ) . toExternalForm ( ) ; if ( ! itemLocation . endsWith ( "/" ) ) { itemLocation += "/" ; } itemLocation += item . getId ( ) ; try { URL itemURL = new URL ( itemLocation ) ; item . setLocation ( itemURL ) ; } catch ( MalformedURLException e ) { String message = MessageFormat . format ( Messages . getString ( "CoreGroupObject.Error_During_Build" ) , new Object [ ] { getLoggingPrefix ( ) , e . getMessage ( ) } ) ; logError ( message ) ; } } } protected boolean isLoading = true ; public IServiceErrors update ( ) { IServiceErrors errors = null ; isLoading = true ; try { errors = super . update ( ) ; } finally { isLoading = false ; } return errors ; } public boolean isLoading ( ) { return isLoading ; } private void updateGroup ( NodeList set ) { try { List < T > newChildren = new ArrayList < T > ( ) ; if ( requireUniqueIds ) { synchronized ( this ) { newChildren . addAll ( this . children ) ; } } List < String > ids = new ArrayList < String > ( ) ; for ( int i = 0 ; i < set . getLength ( ) ; i ++ ) { T groupItem = null ; boolean newItem = true ; if ( requireUniqueIds ) { String id = getTextContent ( ID_ELEMENT , set . item ( i ) ) ; if ( id != null && id . length ( ) > 0 ) { ids . add ( id ) ; for ( T item : this . children ) { if ( id . equals ( item . getId ( ) ) ) { groupItem = item ; newItem = false ; break ; } } if ( groupItem == null ) { groupItem = createItem ( ) ; if ( requireUniqueIds ) { groupItem . setId ( id ) ; } } } } else { groupItem = createItem ( ) ; } if ( groupItem != null ) { groupItem . suspendEvents ( ) ; groupItem . setLogger ( getLogger ( ) ) ; groupItem . addListeners ( getListeners ( ) ) ; groupItem . fromNode ( set . item ( i ) ) ; configureItem ( groupItem ) ; if ( newItem && shouldAdd ( groupItem ) ) { newChildren . add ( groupItem ) ; groupItem . fireChange ( ) ; } groupItem . resumeEvents ( ) ; } } if ( requireUniqueIds ) { Iterator < T > iterator = newChildren . iterator ( ) ; while ( iterator . hasNext ( ) ) { T removedItem = iterator . next ( ) ; if ( ! ids . contains ( removedItem . getId ( ) ) ) { iterator . remove ( ) ; removedItem . clear ( ) ; } } } synchronized ( this ) { this . children = newChildren ; } } catch ( Exception e1 ) { String message = MessageFormat . format ( Messages . getString ( "CoreGroupObject.XPath_Error_During_Parse" ) , new Object [ ] { getLoggingPrefix ( ) , e1 . getMessage ( ) } ) ; logError ( message ) ; } finally { isLoading = false ; } } public void fromXML ( String xml ) { try { NodeList set = ( NodeList ) XPATH . evaluate ( "/" + getGroupString ( ) + "/" + getItemString ( ) , XPathUtils . createSource ( xml ) , XPathConstants . NODESET ) ; updateGroup ( set ) ; } catch ( XPathExpressionException e1 ) { isLoading = false ; String message = MessageFormat . format ( Messages . getString ( "CoreGroupObject.XPath_Error_During_Parse" ) , new Object [ ] { getLoggingPrefix ( ) , e1 . getMessage ( ) } ) ; logError ( message ) ; } } public Node toNode ( ) { return null ; } public String toXML ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "<" + getGroupString ( ) + ">" ) ; for ( T item : getItems ( ) ) { buffer . append ( item . toXML ( ) ) ; } buffer . append ( "</" + getGroupString ( ) + ">" ) ; return buffer . toString ( ) ; } protected abstract String getGroupString ( ) ; protected String getItemString ( ) { if ( childTemplate != null ) { return childTemplate . getItemString ( ) ; } return null ; } public boolean isRequireUniqueIds ( ) { return requireUniqueIds ; } public void setRequireUniqueIds ( boolean requireUniqueIds ) { this . requireUniqueIds = requireUniqueIds ; } public void addChild ( T item ) { this . children . add ( item ) ; } } 