<<<<<<< HEAD
public class JSInformationPresenter extends AbstractInformationControlManager implements IInformationPresenter , IInformationPresenterExtension , IWidgetTokenKeeper , IWidgetTokenKeeperExtension { public static final int WIDGET_PRIORITY = 5 ; class Closer implements IInformationControlCloser , ControlListener , MouseListener , FocusListener , IViewportListener , KeyListener { private Control fSubjectControl ; private IInformationControl fInformationControlToClose ; private boolean fIsActive = false ; public void setSubjectControl ( Control control ) { fSubjectControl = control ; } public void setInformationControl ( IInformationControl control ) { fInformationControlToClose = control ; } public void start ( Rectangle informationArea ) { if ( fIsActive ) { return ; } fIsActive = true ; if ( fSubjectControl != null && ! fSubjectControl . isDisposed ( ) ) { fSubjectControl . addControlListener ( this ) ; fSubjectControl . addMouseListener ( this ) ; fSubjectControl . addFocusListener ( this ) ; fSubjectControl . addKeyListener ( this ) ; } if ( fInformationControlToClose != null ) { fInformationControlToClose . addFocusListener ( this ) ; } fTextViewer . addViewportListener ( this ) ; } public void stop ( ) { if ( ! fIsActive ) { return ; } fIsActive = false ; fTextViewer . removeViewportListener ( this ) ; if ( fInformationControlToClose != null ) { fInformationControlToClose . removeFocusListener ( this ) ; } hideInformationControl ( ) ; if ( fSubjectControl != null && ! fSubjectControl . isDisposed ( ) ) { fSubjectControl . removeControlListener ( this ) ; fSubjectControl . removeMouseListener ( this ) ; fSubjectControl . removeFocusListener ( this ) ; fSubjectControl . removeKeyListener ( this ) ; } } public void controlResized ( ControlEvent e ) { stop ( ) ; } public void controlMoved ( ControlEvent e ) { stop ( ) ; } public void mouseDown ( MouseEvent e ) { stop ( ) ; } public void mouseUp ( MouseEvent e ) { } public void mouseDoubleClick ( MouseEvent e ) { stop ( ) ; } public void focusGained ( FocusEvent e ) { } public void focusLost ( FocusEvent e ) { Display d = fSubjectControl . getDisplay ( ) ; d . asyncExec ( new Runnable ( ) { public void run ( ) { if ( fInformationControlToClose == null || ! fInformationControlToClose . isFocusControl ( ) ) { stop ( ) ; } } } ) ; } public void viewportChanged ( int topIndex ) { stop ( ) ; } public void keyPressed ( KeyEvent e ) { stop ( ) ; } public void keyReleased ( KeyEvent e ) { } } private ITextViewer fTextViewer ; private Map < String , IInformationProvider > fProviders ; private int fOffset = - 1 ; private String fPartitioning ; public JSInformationPresenter ( IInformationControlCreator creator ) { super ( creator ) ; setCloser ( new Closer ( ) ) ; takesFocusWhenVisible ( true ) ; fPartitioning = IDocumentExtension3 . DEFAULT_PARTITIONING ; } public void setDocumentPartitioning ( String partitioning ) { fPartitioning = partitioning ; } public String getDocumentPartitioning ( ) { return fPartitioning ; } public void setInformationProvider ( IInformationProvider provider , String contentType ) { if ( fProviders == null ) { fProviders = new HashMap < String , IInformationProvider > ( ) ; } if ( provider == null ) { fProviders . remove ( contentType ) ; } else { fProviders . put ( contentType , provider ) ; } } public IInformationProvider getInformationProvider ( String contentType ) { if ( fProviders == null ) { return null ; } return fProviders . get ( contentType ) ; } public void setOffset ( int offset ) { fOffset = offset ; } protected void computeInformation ( ) { int offset = fOffset < 0 ? fTextViewer . getSelectedRange ( ) . x : fOffset ; if ( offset == - 1 ) { return ; } fOffset = - 1 ; IInformationProvider provider = null ; try { String contentType = TextUtilities . getContentType ( fTextViewer . getDocument ( ) , getDocumentPartitioning ( ) , offset , true ) ; provider = getInformationProvider ( contentType ) ; } catch ( BadLocationException x ) { } if ( provider == null ) { return ; } IRegion subject = provider . getSubject ( fTextViewer , offset ) ; if ( subject == null ) { return ; } if ( provider instanceof IInformationProviderExtension2 ) { setCustomInformationControlCreator ( ( ( IInformationProviderExtension2 ) provider ) . getInformationPresenterControlCreator ( ) ) ; } else { setCustomInformationControlCreator ( null ) ; } if ( provider instanceof IInformationProviderExtension ) { IInformationProviderExtension extension = ( IInformationProviderExtension ) provider ; setInformation ( extension . getInformation2 ( fTextViewer , subject ) , computeArea ( subject ) ) ; } else { setInformation ( provider . getInformation ( fTextViewer , subject ) , computeArea ( subject ) ) ; } } private Rectangle computeArea ( IRegion region ) { int start = 0 ; int end = 0 ; IRegion widgetRegion = modelRange2WidgetRange ( region ) ; if ( widgetRegion != null ) { start = widgetRegion . getOffset ( ) ; end = widgetRegion . getOffset ( ) + widgetRegion . getLength ( ) ; } StyledText styledText = fTextViewer . getTextWidget ( ) ; Rectangle bounds ; if ( end > 0 && start < end ) { bounds = styledText . getTextBounds ( start , end - 1 ) ; } else { GC gc = new GC ( styledText ) ; int width = gc . getFontMetrics ( ) . getAverageCharWidth ( ) ; gc . dispose ( ) ; Point loc = styledText . getLocationAtOffset ( start ) ; bounds = new Rectangle ( loc . x , loc . y , width , styledText . getLineHeight ( ) ) ; } return new Rectangle ( bounds . x , bounds . y , bounds . width , bounds . height ) ; } private IRegion modelRange2WidgetRange ( IRegion region ) { if ( fTextViewer instanceof ITextViewerExtension5 ) { ITextViewerExtension5 extension = ( ITextViewerExtension5 ) fTextViewer ; return extension . modelRange2WidgetRange ( region ) ; } IRegion visibleRegion = fTextViewer . getVisibleRegion ( ) ; int start = region . getOffset ( ) - visibleRegion . getOffset ( ) ; int end = start + region . getLength ( ) ; if ( end > visibleRegion . getLength ( ) ) { end = visibleRegion . getLength ( ) ; } return new Region ( start , end - start ) ; } public void install ( ITextViewer textViewer ) { fTextViewer = textViewer ; install ( fTextViewer . getTextWidget ( ) ) ; } public void uninstall ( ) { dispose ( ) ; } protected void showInformationControl ( Rectangle subjectArea ) { super . showInformationControl ( subjectArea ) ; } protected void hideInformationControl ( ) { try { super . hideInformationControl ( ) ; } finally { if ( fTextViewer instanceof IWidgetTokenOwner ) { IWidgetTokenOwner owner = ( IWidgetTokenOwner ) fTextViewer ; owner . releaseWidgetToken ( this ) ; } } } protected void handleInformationControlDisposed ( ) { try { super . handleInformationControlDisposed ( ) ; } finally { if ( fTextViewer instanceof IWidgetTokenOwner ) { IWidgetTokenOwner owner = ( IWidgetTokenOwner ) fTextViewer ; owner . releaseWidgetToken ( this ) ; } } } public boolean requestWidgetToken ( IWidgetTokenOwner owner ) { return false ; } public boolean requestWidgetToken ( IWidgetTokenOwner owner , int priority ) { return false ; } public boolean setFocus ( IWidgetTokenOwner owner ) { return false ; } } 
=======
public final class DatetimeTz extends AbstractDatetime { public static final DatetimeTz THE_INSTANCE = new DatetimeTz ( ) ; private static final Pattern THE_PATTERN = Pattern . compile ( "^([0-9]{4,})-([0-9]{2})-([0-9]{2})[T ]([0-9]{2}):([0-9]{2})(?::([0-9]{2})(?:\\.[0-9]{1,3})?)?(?:Z|(?:([+-][0-9]{2}):([0-9]{2})))$" ) ; private DatetimeTz ( ) { super ( ) ; } protected final Pattern getPattern ( ) { return THE_PATTERN ; } @ Override public String getName ( ) { return "datetime with timezone" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
