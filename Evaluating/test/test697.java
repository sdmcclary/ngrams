<<<<<<< HEAD
public class PortalServiceLoader { public static interface IPortalListener { public void newPortalDownloaded ( String newVersion ) ; } public static final String ID_ATTRIBUTE = "id" ; public static final String RESOURCE_ATTRIBUTE = "resource" ; public static final String PORTLET_ELEMENT = "service" ; public static final String PORTLET_EXTENSION = JettyPlugin . PLUGIN_ID + ".portalService" ; private static final String PORTAL_URL ; static { String serverURL = System . getProperty ( "SERVER_URL" ) ; if ( serverURL == null || serverURL . length ( ) == 0 ) { serverURL = "http://ide.aptana.com" ; } PORTAL_URL = serverURL + "/portal" ; } private static final String PORTAL_XML = "portal.xml" ; private static final String PORTAL_SUFFIX = "portal." ; private static final String LOCAL_INSTALL_JAR = "from local installation" ; private static PortalServiceLoader loader ; private List < PortalService > portlets ; private String portalJar ; private String currentPortalVersion ; private AtomicBoolean isDownloading = new AtomicBoolean ( ) ; private List < IPortalListener > listeners ; private DefaultHandler xmlHandler = new DefaultHandler ( ) { private static final String PORTAL = "portal" ; private static final String VERSION = "studio-version" ; private static final String JAR = "jar" ; private static final String CHECKSUM = "checksum" ; public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws SAXException { if ( qName . equals ( PORTAL ) ) { String versionStr = attributes . getValue ( VERSION ) ; VersionRange versionRange = new VersionRange ( versionStr ) ; if ( versionRange . isIncluded ( new Version ( getCoreVersion ( ) ) ) ) { String jar = attributes . getValue ( JAR ) ; File configDir = CoreUIUtils . getConfigurationDirectory ( ) ; String oldJar = portalJar ; portalJar = PORTAL_URL + "/" + getUpdateType ( ) + "/" + jar ; int index = jar . lastIndexOf ( "." ) ; String subdir = ( index < 0 ) ? jar : jar . substring ( 0 , index ) ; if ( ( new File ( configDir , subdir ) ) . exists ( ) ) { return ; } File tempDir = new File ( configDir , "portal-temp" ) ; tempDir . mkdir ( ) ; JarInputStream stream = null ; Checksum checksum = new CRC32 ( ) ; URL url = null ; try { url = new URL ( portalJar ) ; URLConnection conn = url . openConnection ( ) ; conn . setUseCaches ( false ) ; if ( conn instanceof HttpURLConnection ) { conn . addRequestProperty ( "Cache-Control" , "no-cache" ) ; } conn . setConnectTimeout ( 10000 ) ; CheckedInputStream checkedInput = new CheckedInputStream ( conn . getInputStream ( ) , checksum ) ; stream = new JarInputStream ( checkedInput ) ; FileOutputStream out ; File contentFile ; JarEntry entry ; byte [ ] b ; int nread ; while ( ( entry = stream . getNextJarEntry ( ) ) != null ) { contentFile = new File ( tempDir , entry . toString ( ) ) ; if ( ! contentFile . getParentFile ( ) . exists ( ) ) { contentFile . getParentFile ( ) . mkdirs ( ) ; } if ( entry . isDirectory ( ) ) { contentFile . mkdir ( ) ; } else { out = new FileOutputStream ( contentFile ) ; b = new byte [ 10000 ] ; while ( ( nread = stream . read ( b , 0 , b . length ) ) >= 0 ) { out . write ( b , 0 , nread ) ; } out . close ( ) ; } } String expectedChecksum = attributes . getValue ( CHECKSUM ) ; if ( expectedChecksum == null || checksum . getValue ( ) == Long . parseLong ( expectedChecksum ) ) { FileUtils . copy ( tempDir , configDir ) ; FileUtils . deleteDirectory ( tempDir ) ; String latestVersion = getLatestPortalVersion ( ) ; if ( latestVersion . length ( ) > 0 && ! latestVersion . equals ( currentPortalVersion ) ) { currentPortalVersion = latestVersion ; fireNewPortalDownloaded ( currentPortalVersion ) ; copyPortalContents ( ) ; } } } catch ( Exception e ) { String message = ( url == null ) ? e . getMessage ( ) : "Failed to parse " + url . toString ( ) ; IdeLog . logError ( JettyPlugin . getDefault ( ) , message , e ) ; portalJar = oldJar ; } finally { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { } } } } } } } ; private PortalServiceLoader ( ) { portlets = getInstalledPortalServices ( ) ; portalJar = LOCAL_INSTALL_JAR ; currentPortalVersion = getCoreVersion ( ) ; listeners = new ArrayList < IPortalListener > ( ) ; copyPortalContents ( ) ; Job job = new Job ( "Downloading portal contents" ) { @ Override protected IStatus run ( IProgressMonitor monitor ) { downloadPortalContents ( ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } public PortalService getPortlet ( String id ) { if ( id == null ) { return null ; } for ( PortalService p : portlets ) { if ( id . equals ( p . getId ( ) ) ) { return p ; } } return null ; } public PortalService [ ] getPortlets ( ) { return portlets . toArray ( new PortalService [ 0 ] ) ; } public static PortalServiceLoader getLoader ( ) { if ( loader == null ) { loader = new PortalServiceLoader ( ) ; } return loader ; } public String getPortalJarLocation ( ) { return portalJar ; } public String getPortalFolderLocation ( ) { for ( PortalService service : portlets ) { if ( service . getId ( ) . equals ( "" ) ) { return service . getFolder ( ) ; } } return "" ; } public void addListener ( IPortalListener listener ) { if ( ! listeners . contains ( listener ) ) { listeners . add ( listener ) ; } } public void removeListener ( IPortalListener listener ) { listeners . remove ( listener ) ; } public void copyPortalContents ( ) { File configDir = CoreUIUtils . getConfigurationDirectory ( ) ; File portalDir = new File ( configDir , PORTAL_SUFFIX + currentPortalVersion ) ; List < PortalService > services = getInstalledPortalServices ( ) ; File file ; for ( PortalService service : services ) { String id = service . getId ( ) ; if ( "" . equals ( id ) ) { file = new File ( portalDir , id ) ; if ( file . exists ( ) && System . getProperty ( "OVERWRITE_PORTAL" ) == null ) { continue ; } file . mkdir ( ) ; FileUtils . copy ( new File ( service . getFolder ( ) ) , file ) ; } } for ( PortalService service : services ) { String id = service . getId ( ) ; if ( ! ( "" . equals ( id ) ) ) { file = new File ( portalDir , service . getId ( ) ) ; if ( file . exists ( ) && System . getProperty ( "OVERWRITE_PORTAL" ) == null ) { continue ; } file . mkdir ( ) ; FileUtils . copy ( new File ( service . getFolder ( ) ) , file ) ; } } } public void switchPortalLocations ( ) { File configDir = CoreUIUtils . getConfigurationDirectory ( ) ; String directory = getLatestPortalDirectory ( ) ; if ( directory . length ( ) == 0 ) { return ; } File portalDir = new File ( configDir , directory ) ; File serviceDir ; for ( PortalService service : portlets ) { serviceDir = new File ( portalDir , service . getId ( ) ) ; if ( ! serviceDir . exists ( ) ) { serviceDir . mkdir ( ) ; FileUtils . copy ( new File ( service . getFolder ( ) ) , serviceDir ) ; } service . setResource ( new File ( serviceDir , service . getResourceName ( ) ) . getAbsolutePath ( ) ) ; } } public void downloadPortalContents ( ) { if ( ! isDownloading . compareAndSet ( false , true ) ) { return ; } URL url = null ; try { url = new URL ( PORTAL_URL + "/" + getUpdateType ( ) + "/" + PORTAL_XML ) ; URLConnection conn = url . openConnection ( ) ; conn . setUseCaches ( false ) ; if ( conn instanceof HttpURLConnection ) { conn . addRequestProperty ( "Cache-Control" , "no-cache" ) ; } conn . setConnectTimeout ( 10000 ) ; InputStream stream = conn . getInputStream ( ) ; SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; factory . setNamespaceAware ( true ) ; SAXParser saxParser = null ; saxParser = factory . newSAXParser ( ) ; saxParser . parse ( stream , xmlHandler ) ; stream . close ( ) ; } catch ( Exception e ) { } finally { isDownloading . set ( false ) ; } } private void fireNewPortalDownloaded ( String newVersion ) { for ( IPortalListener listener : listeners ) { listener . newPortalDownloaded ( newVersion ) ; } } private String getLatestPortalDirectory ( ) { File configDir = CoreUIUtils . getConfigurationDirectory ( ) ; String coreVersion = currentPortalVersion ; int index = coreVersion . lastIndexOf ( "." ) ; final String baseVersion = PORTAL_SUFFIX + ( ( index < 0 ) ? coreVersion : coreVersion . substring ( 0 , index ) ) ; String [ ] filenames = configDir . list ( new FilenameFilter ( ) { public boolean accept ( File file , String filename ) { return ( new File ( file , filename ) ) . isDirectory ( ) && filename . contains ( baseVersion ) ; } } ) ; if ( filenames == null || filenames . length == 0 ) { return "" ; } SortedMap < Float , String > map = new TreeMap < Float , String > ( ) ; float buildNumber ; for ( String filename : filenames ) { index = filename . lastIndexOf ( baseVersion ) ; try { buildNumber = Float . parseFloat ( filename . substring ( index + baseVersion . length ( ) ) ) ; } catch ( NumberFormatException e ) { buildNumber = Float . MAX_VALUE ; } map . put ( new Float ( buildNumber ) , filename ) ; } return map . get ( map . lastKey ( ) ) ; } public String getLatestPortalVersion ( ) { String directory = getLatestPortalDirectory ( ) ; return directory . length ( ) == 0 ? directory : directory . substring ( PORTAL_SUFFIX . length ( ) ) ; } private static String getCoreVersion ( ) { return PluginUtils . getPluginVersion ( CoreUIPlugin . getDefault ( ) ) ; } private static List < PortalService > getInstalledPortalServices ( ) { List < PortalService > services = new ArrayList < PortalService > ( ) ; IConfigurationElement [ ] elements = Platform . getExtensionRegistry ( ) . getConfigurationElementsFor ( PORTLET_EXTENSION ) ; for ( IConfigurationElement element : elements ) { if ( PORTLET_ELEMENT . equals ( element . getName ( ) ) ) { String id = element . getAttribute ( ID_ATTRIBUTE ) ; String resource = element . getAttribute ( RESOURCE_ATTRIBUTE ) ; if ( id != null && resource != null ) { Bundle bundle = Platform . getBundle ( element . getContributor ( ) . getName ( ) ) ; String folder = resource . substring ( 0 , resource . lastIndexOf ( "/" ) ) ; URL folderPath = bundle . getEntry ( folder ) ; if ( folderPath != null ) { try { FileLocator . toFileURL ( folderPath ) ; } catch ( IOException e ) { } } URL filePath = bundle . getEntry ( resource ) ; if ( filePath != null ) { try { filePath = FileLocator . toFileURL ( filePath ) ; PortalService p = new PortalService ( id , filePath . getPath ( ) ) ; services . add ( p ) ; } catch ( IOException e ) { } } } } } return services ; } private static String getUpdateType ( ) { return JettyPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( IPreferenceConstants . PORTAL_UPDATE_TYPE ) ; } } 
=======
public class Book extends BaseObject { private String asin ; private String detailPageUrl ; private BookAttributes itemAttributes ; public Object getProperty ( int index ) { throw new RuntimeException ( "Book.getProperty is not implemented yet" ) ; } public int getPropertyCount ( ) { return 3 ; } public void getPropertyInfo ( int index , Hashtable properties , PropertyInfo info ) { info . type = PropertyInfo . STRING_CLASS ; switch ( index ) { case 0 : info . name = "ASIN" ; break ; case 1 : info . name = "DetailPageURL" ; break ; case 2 : info . name = "ItemAttributes" ; info . type = new BookAttributes ( ) . getClass ( ) ; default : break ; } } public void setProperty ( int index , Object value ) { switch ( index ) { case 0 : asin = value . toString ( ) ; break ; case 1 : detailPageUrl = value . toString ( ) ; break ; case 2 : itemAttributes = ( BookAttributes ) value ; default : break ; } } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "ASIN: " ) ; buffer . append ( asin ) ; buffer . append ( "\n" ) ; buffer . append ( "Detail page URL: " ) ; buffer . append ( detailPageUrl ) ; buffer . append ( "\n" ) ; buffer . append ( itemAttributes . toString ( ) ) ; return buffer . toString ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
