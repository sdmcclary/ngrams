public abstract class BrowserView extends ViewPart { private String partId ; private Browser browser ; private String url ; public static String Browser_homeButton_tooltip = Messages . BrowserView_Home ; public static String Browser_forwardButton_tooltip = Messages . BrowserView_NavigateToNextTopic ; public static String Browser_backwardButton_tooltip = Messages . BrowserView_NavigateToPreviousTopic ; public static String Browser_invalidConfig = Messages . BrowserView_InvalidConfiguration ; protected BrowserIntroPartLocationListener urlListener = new BrowserIntroPartLocationListener ( this ) ; protected History history = new History ( ) ; protected Action backAction = new Action ( ) { { setToolTipText ( BrowserView . Browser_backwardButton_tooltip ) ; setImageDescriptor ( BrowserView . getImageDescriptor ( "icons/backward_nav_on.gif" ) ) ; setDisabledImageDescriptor ( BrowserView . getImageDescriptor ( "icons/backward_nav_off.gif" ) ) ; } public void run ( ) { navigateBackward ( ) ; } } ; protected Action forwardAction = new Action ( ) { { setToolTipText ( BrowserView . Browser_forwardButton_tooltip ) ; setImageDescriptor ( BrowserView . getImageDescriptor ( "icons/forward_nav_on.gif" ) ) ; setDisabledImageDescriptor ( BrowserView . getImageDescriptor ( "icons/forward_nav_off.gif" ) ) ; } public void run ( ) { navigateForward ( ) ; } } ; public abstract String getStartUrl ( ) ; protected Action homeAction = new Action ( ) { { setToolTipText ( BrowserView . Browser_homeButton_tooltip ) ; setImageDescriptor ( BrowserView . getImageDescriptor ( "icons/home_nav_on.gif" ) ) ; setDisabledImageDescriptor ( BrowserView . getImageDescriptor ( "icons/home_nav_off.gif" ) ) ; } public void run ( ) { navigateHome ( ) ; } } ; public BrowserView ( ) { url = getStartUrl ( ) ; partId = getPartId ( ) ; } public abstract String getPartId ( ) ; public void init ( IViewSite site , IMemento memento ) throws PartInitException { super . init ( site , memento ) ; if ( memento != null ) { url = memento . getString ( partId ) ; sendMessage ( url ) ; } } public void saveState ( IMemento memento ) { if ( url != null ) { memento . putString ( partId , url ) ; } } public void createPartControl ( Composite parent ) { browser = new Browser ( parent , SWT . NONE ) ; if ( this . url != null ) { browser . setUrl ( this . url ) ; } PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( browser , "com.aptana.ide.js.ui." + partId ) ; browser . addLocationListener ( urlListener ) ; browser . addProgressListener ( new ProgressListener ( ) { public void changed ( ProgressEvent event ) { } public void completed ( ProgressEvent event ) { urlListener . flagEndOfNavigation ( ) ; urlListener . flagEndOfFrameNavigation ( ) ; urlListener . flagRemovedTempUrl ( ) ; updateNavigationActionsState ( ) ; } } ) ; addToolBarActions ( ) ; } protected void addToolBarActions ( ) { IActionBars actionBars = getViewSite ( ) . getActionBars ( ) ; IToolBarManager toolBarManager = actionBars . getToolBarManager ( ) ; actionBars . setGlobalActionHandler ( ActionFactory . FORWARD . getId ( ) , forwardAction ) ; actionBars . setGlobalActionHandler ( ActionFactory . BACK . getId ( ) , backAction ) ; toolBarManager . add ( homeAction ) ; toolBarManager . add ( backAction ) ; toolBarManager . add ( forwardAction ) ; toolBarManager . update ( true ) ; actionBars . updateActionBars ( ) ; updateNavigationActionsState ( ) ; } public Browser getBrowser ( ) { return browser ; } public void setFocus ( ) { browser . setFocus ( ) ; } public void sendMessage ( String url ) { if ( url != null ) { this . url = url ; if ( browser != null ) { browser . setUrl ( url ) ; } } } protected void updateNavigationActionsState ( ) { forwardAction . setEnabled ( browser . isForwardEnabled ( ) ) ; backAction . setEnabled ( browser . isBackEnabled ( ) ) ; } public boolean navigateBackward ( ) { return browser . back ( ) ; } public boolean navigateForward ( ) { return browser . forward ( ) ; } public boolean navigateHome ( ) { String location = url ; boolean success = browser . setUrl ( location ) ; updateHistory ( location ) ; return success ; } public void updateHistory ( String location ) { history . updateHistory ( location ) ; updateNavigationActionsState ( ) ; } private static ImageDescriptor getImageDescriptor ( String imageFilePath ) { ImageDescriptor imageDescriptor = AbstractUIPlugin . imageDescriptorFromPlugin ( "org.eclipse.eclipsemonkey.ui" , imageFilePath ) ; if ( imageDescriptor == null ) { imageDescriptor = ImageDescriptor . getMissingImageDescriptor ( ) ; } return imageDescriptor ; } private class BrowserIntroPartLocationListener implements LocationListener { private BrowserView implementation ; public BrowserIntroPartLocationListener ( BrowserView implementation ) { this . implementation = implementation ; } public void changed ( LocationEvent event ) { String url = event . location ; if ( url == null ) { return ; } Browser browser = ( Browser ) event . getSource ( ) ; if ( browser . getData ( "navigation" ) != null && browser . getData ( "navigation" ) . equals ( "true" ) ) { return ; } } public void changing ( LocationEvent event ) { String url = event . location ; if ( url == null ) { return ; } } public void flagStartOfFrameNavigation ( ) { if ( implementation . getBrowser ( ) . getData ( "frameNavigation" ) == null ) { implementation . getBrowser ( ) . setData ( "frameNavigation" , "true" ) ; } } public void flagEndOfFrameNavigation ( ) { implementation . getBrowser ( ) . setData ( "frameNavigation" , null ) ; } public void flagStartOfNavigation ( ) { if ( implementation . getBrowser ( ) . getData ( "navigation" ) == null ) { implementation . getBrowser ( ) . setData ( "navigation" , "true" ) ; } } public void flagEndOfNavigation ( ) { implementation . getBrowser ( ) . setData ( "navigation" , null ) ; } public void flagStoredTempUrl ( ) { if ( implementation . getBrowser ( ) . getData ( "tempUrl" ) == null ) { implementation . getBrowser ( ) . setData ( "tempUrl" , "true" ) ; } } public void flagRemovedTempUrl ( ) { implementation . getBrowser ( ) . setData ( "tempUrl" , null ) ; } } private class History { private Vector history = new Vector ( ) ; private int navigationLocation = 0 ; class HistoryObject { String iframeUrl ; String url ; HistoryObject ( Object location ) { if ( location instanceof String ) { this . url = ( String ) location ; } } String getIFrameUrl ( ) { return iframeUrl ; } String getUrl ( ) { return url ; } boolean isURL ( ) { return ( url != null ) ? true : false ; } boolean isIFramePage ( ) { return ( iframeUrl != null ) ? true : false ; } } public void updateHistory ( String location ) { if ( ! history . isEmpty ( ) && isSameLocation ( location ) ) { return ; } doUpdateHistory ( location ) ; } private void doUpdateHistory ( Object location ) { if ( navigationLocation == getHistoryEndPosition ( ) ) { pushToHistory ( location ) ; } else { trimHistory ( location ) ; } } private boolean isSameLocation ( Object location ) { HistoryObject currentLocation = getCurrentLocation ( ) ; if ( location instanceof String && currentLocation . isURL ( ) ) { return currentLocation . getUrl ( ) . equals ( location ) ; } return false ; } private void pushToHistory ( Object location ) { history . add ( new HistoryObject ( location ) ) ; navigationLocation = getHistoryEndPosition ( ) ; } public void removeLastHistory ( ) { history . remove ( getHistoryEndPosition ( ) ) ; navigationLocation = getHistoryEndPosition ( ) ; } private void trimHistory ( Object location ) { List newHistory = history . subList ( 0 , navigationLocation + 1 ) ; history = new Vector ( newHistory ) ; history . add ( new HistoryObject ( location ) ) ; navigationLocation = getHistoryEndPosition ( ) ; } private int getHistoryEndPosition ( ) { if ( history . isEmpty ( ) ) { return 0 ; } return history . size ( ) - 1 ; } public void navigateHistoryBackward ( ) { if ( badNavigationLocation ( navigationLocation - 1 ) ) { return ; } -- navigationLocation ; } public void navigateHistoryForward ( ) { if ( badNavigationLocation ( navigationLocation + 1 ) ) { return ; } ++ navigationLocation ; } private boolean badNavigationLocation ( int navigationLocation ) { if ( navigationLocation < 0 || navigationLocation >= history . size ( ) ) { return true ; } return false ; } private HistoryObject getCurrentLocation ( ) { return ( HistoryObject ) history . elementAt ( navigationLocation ) ; } public boolean canNavigateForward ( ) { return navigationLocation != getHistoryEndPosition ( ) ? true : false ; } public boolean canNavigateBackward ( ) { return navigationLocation == 0 ? false : true ; } public boolean currentLocationIsUrl ( ) { return getCurrentLocation ( ) . isURL ( ) ; } public String getCurrentLocationAsUrl ( ) { return getCurrentLocation ( ) . getUrl ( ) ; } public void clear ( ) { history . clear ( ) ; navigationLocation = 0 ; } } } 