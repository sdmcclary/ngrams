public class CheckerSchema implements Schema { public static final CheckerSchema DEBUG_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , DebugChecker . class ) ; public static final CheckerSchema NORMALIZATION_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , NormalizationChecker . class ) ; public static final CheckerSchema TEXT_CONTENT_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , TextContentChecker . class ) ; public static final CheckerSchema UNCHECKED_SUBTREE_WARNER = new CheckerSchema ( PropertyMap . EMPTY , UncheckedSubtreeWarner . class ) ; public static final CheckerSchema USEMAP_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , UsemapChecker . class ) ; public static final CheckerSchema TABLE_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , TableChecker . class ) ; public static final CheckerSchema ASSERTION_SCH = new CheckerSchema ( PropertyMap . EMPTY , Assertions . class ) ; public static final CheckerSchema HTML4ASSERTION_SCH = new CheckerSchema ( PropertyMap . EMPTY , Html4Assertions . class ) ; public static final CheckerSchema CONFORMING_BUT_OBSOLETE_WARNER = new CheckerSchema ( PropertyMap . EMPTY , ConformingButObsoleteWarner . class ) ; public static final CheckerSchema XML_PI_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , XmlPiChecker . class ) ; public static final CheckerSchema UNSUPPORTED_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , UnsupportedFeatureChecker . class ) ; public static final CheckerSchema MICRODATA_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , MicrodataChecker . class ) ; public static final CheckerSchema RDFALITE_CHECKER = new CheckerSchema ( PropertyMap . EMPTY , RdfaLiteChecker . class ) ; private final PropertyMap properties ; private final Class < ? extends Checker > klazz ; public CheckerSchema ( PropertyMap properties , Class < ? extends Checker > klazz ) { this . properties = properties ; this . klazz = klazz ; } public Validator createValidator ( PropertyMap props ) { try { return new CheckerValidator ( klazz . newInstance ( ) , props ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } } public PropertyMap getProperties ( ) { return properties ; } } 