public class MetadataRuntimeEnvironment implements com . aptana . ide . parsing . IRuntimeEnvironment , IMetadataEnvironment { private static final String EMPTY = "" ; private ArrayList < MetadataEnvironment > environments = new ArrayList < MetadataEnvironment > ( ) ; private Hashtable < Integer , Hashtable < String , ParseNodeBase > > fileObjects = new Hashtable < Integer , Hashtable < String , ParseNodeBase > > ( ) ; private Hashtable < Integer , Hashtable < String , ParseNodeBase > > cssFileObjects = new Hashtable < Integer , Hashtable < String , ParseNodeBase > > ( ) ; public Hashtable < Integer , Hashtable < String , ParseNodeBase > > getFileObjects ( ) { return fileObjects ; } public String [ ] getAllIds ( ) { ArrayList < String > ids = new ArrayList < String > ( ) ; Hashtable < Integer , Hashtable < String , ParseNodeBase > > objs = getFileObjects ( ) ; Enumeration < Integer > keys = objs . keys ( ) ; while ( keys . hasMoreElements ( ) ) { Integer fileIndex = ( Integer ) keys . nextElement ( ) ; if ( fileIndex . intValue ( ) >= 0 ) { Hashtable < String , ParseNodeBase > a = objs . get ( fileIndex ) ; ids . addAll ( a . keySet ( ) ) ; } } return ( String [ ] ) ids . toArray ( new String [ 0 ] ) ; } public void addId ( String id , int fileIndex , ParseNodeBase hn ) { if ( ! fileObjects . containsKey ( new Integer ( fileIndex ) ) ) { Hashtable < String , ParseNodeBase > h = new Hashtable < String , ParseNodeBase > ( ) ; h . put ( id , hn ) ; fileObjects . put ( new Integer ( fileIndex ) , h ) ; } else { Hashtable < String , ParseNodeBase > h = fileObjects . get ( new Integer ( fileIndex ) ) ; if ( ! h . containsKey ( id ) ) { h . put ( id , hn ) ; } } } public void removeFileIds ( int fileIndex ) { fileObjects . remove ( new Integer ( fileIndex ) ) ; } public void addEnvironment ( MetadataEnvironment environment ) { environments . add ( environment ) ; } public void removeEnvironment ( MetadataEnvironment environment ) { environments . remove ( environment ) ; } public MetadataEnvironment [ ] getEnvironments ( ) { return environments . toArray ( new MetadataEnvironment [ 0 ] ) ; } public String [ ] getAllElements ( ) { List < String > allElements = new ArrayList < String > ( ) ; for ( Iterator < MetadataEnvironment > iterator = environments . iterator ( ) ; iterator . hasNext ( ) ; ) { MetadataEnvironment name = iterator . next ( ) ; ElementMetadata [ ] elements = name . getAllElements ( ) ; for ( int i = 0 ; i < elements . length ; i ++ ) { ElementMetadata elementMetadata = elements [ i ] ; String elementName = elementMetadata . getName ( ) . toLowerCase ( ) ; if ( ! allElements . contains ( elementName ) ) { allElements . add ( elementName ) ; } } } return allElements . toArray ( new String [ 0 ] ) ; } public Hashtable < String , FieldMetadata > getGlobalFields ( ) { Hashtable < String , FieldMetadata > globalFields = new Hashtable < String , FieldMetadata > ( ) ; for ( Iterator < MetadataEnvironment > iterator = environments . iterator ( ) ; iterator . hasNext ( ) ; ) { MetadataEnvironment name = iterator . next ( ) ; Hashtable < String , FieldMetadata > fields = name . getGlobalFields ( ) ; Enumeration < FieldMetadata > fieldSet = fields . elements ( ) ; while ( fieldSet . hasMoreElements ( ) ) { FieldMetadata field = ( FieldMetadata ) fieldSet . nextElement ( ) ; if ( ! globalFields . containsKey ( field . getName ( ) ) ) { globalFields . put ( field . getName ( ) , field ) ; } else { globalFields . get ( field . getName ( ) ) . merge ( field ) ; } } } return globalFields ; } public Hashtable < String , EventMetadata > getGlobalEvents ( ) { Hashtable < String , EventMetadata > globalEvents = new Hashtable < String , EventMetadata > ( ) ; for ( Iterator < MetadataEnvironment > iterator = environments . iterator ( ) ; iterator . hasNext ( ) ; ) { MetadataEnvironment name = iterator . next ( ) ; Hashtable < String , EventMetadata > events = name . getGlobalEvents ( ) ; Enumeration < EventMetadata > eventsSet = events . elements ( ) ; while ( eventsSet . hasMoreElements ( ) ) { EventMetadata field = ( EventMetadata ) eventsSet . nextElement ( ) ; if ( ! globalEvents . containsKey ( field . getName ( ) ) ) { globalEvents . put ( field . getName ( ) , field ) ; } else { globalEvents . get ( field . getName ( ) ) . merge ( field ) ; } } } return globalEvents ; } public ElementMetadata getElement ( String tagNameLower ) { return getMergedElement ( tagNameLower ) ; } protected ElementMetadata getMergedElement ( String tagNameLower ) { ElementMetadata data = new ElementMetadata ( ) ; for ( Iterator < MetadataEnvironment > iterator = environments . iterator ( ) ; iterator . hasNext ( ) ; ) { MetadataEnvironment name = iterator . next ( ) ; ElementMetadata d = name . getElement ( tagNameLower ) ; if ( d != null ) { data . merge ( d ) ; } } return data ; } public ElementMetadata getElement ( Lexeme lexeme ) { String lexemeText = lexeme . getText ( ) . replaceAll ( "</" , EMPTY ) ; lexemeText = lexeme . getText ( ) . replaceAll ( "<" , EMPTY ) ; return getElement ( lexemeText ) ; } public String getElementDocumentation ( String elementName ) { ElementMetadata element = getElement ( elementName ) ; return getElementDocumentation ( element ) ; } public String getElementDocumentation ( ElementMetadata element ) { StringBuffer docText = new StringBuffer ( ) ; docText . append ( "<b>" + element . getName ( ) + "</b>" ) ; if ( element . getFullName ( ) != EMPTY ) { docText . append ( " (" + element . getFullName ( ) + ")" ) ; } docText . append ( "<br>" + element . getDescription ( ) ) ; UserAgent [ ] agents = element . getUserAgents ( ) ; if ( agents . length > 0 ) { docText . append ( "<br><br><b>" ) . append ( Messages . MetadataEnvironment_Supported_Header ) . append ( "</b> " ) ; for ( int i = 0 ; i < agents . length ; i ++ ) { UserAgent ua = agents [ i ] ; docText . append ( ua . getPlatform ( ) + " " + ua . getVersion ( ) ) ; if ( i < agents . length - 1 ) { docText . append ( ", " ) ; } } } return docText . toString ( ) ; } public String [ ] getUserAgentPlatformNames ( String elementName ) { ElementMetadata element = getElement ( elementName ) ; return element . getUserAgentPlatformNames ( ) ; } public String getFieldDocumentation ( FieldMetadata element ) { StringBuffer docText = new StringBuffer ( ) ; docText . append ( "<b>" + element . getName ( ) + "</b>" ) ; if ( element . getType ( ) != EMPTY ) { docText . append ( ": " + element . getType ( ) ) ; } docText . append ( "<br>" + element . getDescription ( ) ) ; UserAgent [ ] agents = element . getUserAgents ( ) ; if ( agents . length > 0 ) { docText . append ( "<br><br><b>" ) . append ( Messages . MetadataEnvironment_Supported_Header ) . append ( "</b> " ) ; for ( int i = 0 ; i < agents . length ; i ++ ) { UserAgent ua = agents [ i ] ; docText . append ( ua . getPlatform ( ) + " " + ua . getVersion ( ) ) ; if ( i < agents . length - 1 ) { docText . append ( ", " ) ; } } } return docText . toString ( ) ; } public String getEventDocumentation ( EventMetadata element ) { StringBuffer docText = new StringBuffer ( ) ; docText . append ( "<b>" + element . getName ( ) + "</b>" ) ; if ( element . getType ( ) != EMPTY ) { docText . append ( ": " + element . getType ( ) ) ; } docText . append ( "<br>" + element . getDescription ( ) ) ; UserAgent [ ] agents = element . getUserAgents ( ) ; if ( agents . length > 0 ) { docText . append ( "<br><br><b>" ) . append ( Messages . MetadataEnvironment_Supported_Header ) . append ( "</b> " ) ; for ( int i = 0 ; i < agents . length ; i ++ ) { UserAgent ua = agents [ i ] ; docText . append ( ua . getPlatform ( ) + " " + ua . getVersion ( ) ) ; if ( i < agents . length - 1 ) { docText . append ( ", " ) ; } } } return docText . toString ( ) ; } public void addClass ( String cssClass , int fileIndex , ParseNodeBase hn ) { if ( ! cssFileObjects . containsKey ( new Integer ( fileIndex ) ) ) { Hashtable < String , ParseNodeBase > h = new Hashtable < String , ParseNodeBase > ( ) ; h . put ( cssClass , hn ) ; cssFileObjects . put ( new Integer ( fileIndex ) , h ) ; } else { Hashtable < String , ParseNodeBase > h = cssFileObjects . get ( new Integer ( fileIndex ) ) ; if ( ! h . containsKey ( hn ) ) { h . put ( cssClass , hn ) ; } } } public List < String > getAllClasses ( ) { List < String > classes = new ArrayList < String > ( ) ; Hashtable < Integer , Hashtable < String , ParseNodeBase > > objs = cssFileObjects ; Enumeration < Integer > keys = objs . keys ( ) ; while ( keys . hasMoreElements ( ) ) { Integer fileIndex = ( Integer ) keys . nextElement ( ) ; if ( fileIndex . intValue ( ) >= 0 ) { Hashtable < String , ParseNodeBase > a = objs . get ( fileIndex ) ; classes . addAll ( a . keySet ( ) ) ; } } return classes ; } } 