public final class Month extends AbstractDatatype { public static final Month THE_INSTANCE = new Month ( ) ; private static final Pattern THE_PATTERN = Pattern . compile ( "^([0-9]{4,})-([0-9]{2})$" ) ; private Month ( ) { super ( ) ; } private void checkMonth ( String year , String month ) throws DatatypeException { checkMonth ( Integer . parseInt ( year ) , Integer . parseInt ( month ) ) ; } private void checkMonth ( int year , int month ) throws DatatypeException { if ( year < 1 ) { throw newDatatypeException ( "Year cannot be less than 1." ) ; } if ( month < 1 ) { throw newDatatypeException ( "Month cannot be less than 1." ) ; } if ( month > 12 ) { throw newDatatypeException ( "Month cannot be greater than 12." ) ; } } public final void checkValid ( CharSequence literal ) throws DatatypeException { Matcher m = THE_PATTERN . matcher ( literal ) ; if ( m . matches ( ) ) { checkMonth ( m . group ( 1 ) , m . group ( 2 ) ) ; } else { throw newDatatypeException ( "The literal did not satisfy the format for month." ) ; } } @ Override public String getName ( ) { return "month" ; } } 