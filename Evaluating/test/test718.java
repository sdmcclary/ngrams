<<<<<<< HEAD
public class FileSystemWorkbenchAdapter implements IWorkbenchAdapter , IDeferredWorkbenchAdapter { private static FileSystemWorkbenchAdapter instance ; private static final Object [ ] EMPTY = new Object [ 0 ] ; protected FileSystemWorkbenchAdapter ( ) { } static synchronized FileSystemWorkbenchAdapter getInstance ( ) { if ( instance == null ) { instance = new FileSystemWorkbenchAdapter ( ) ; } return instance ; } public Object [ ] getChildren ( Object object ) { if ( object instanceof IConnectionPoint ) { IConnectionPoint connectionPoint = ( IConnectionPoint ) object ; if ( object instanceof WorkspaceConnectionPoint ) { IContainer container = ( ( WorkspaceConnectionPoint ) object ) . getResource ( ) ; if ( container == null ) { return EMPTY ; } try { return container . members ( ) ; } catch ( CoreException e ) { IdeLog . logImportant ( IOUIPlugin . getDefault ( ) , "Failed to get members" , e ) ; } } else { try { return fetchFileSystemChildren ( connectionPoint . getRoot ( ) , new NullProgressMonitor ( ) ) ; } catch ( CoreException e ) { try { connectionPoint . connect ( true , new NullProgressMonitor ( ) ) ; return fetchFileSystemChildren ( connectionPoint . getRoot ( ) , new NullProgressMonitor ( ) ) ; } catch ( CoreException e1 ) { IdeLog . logError ( IOUIPlugin . getDefault ( ) , "Fetch children failed" , e ) ; UIUtils . showErrorMessage ( "Fetch children failed" , e ) ; } } } } else if ( object instanceof IConnectionPointCategory ) { return ( ( IConnectionPointCategory ) object ) . getConnectionPoints ( ) ; } else if ( object instanceof LocalRoot ) { try { return fetchFileSystemChildren ( ( ( LocalRoot ) object ) . getRoot ( ) , new NullProgressMonitor ( ) ) ; } catch ( CoreException e ) { IdeLog . logError ( IOUIPlugin . getDefault ( ) , "Fetch children failed" , e ) ; UIUtils . showErrorMessage ( "Fetch children failed" , e ) ; } } else if ( object instanceof IConnectionPointManager ) { List < Object > list = new ArrayList < Object > ( ) ; list . add ( LocalFileSystems . getInstance ( ) ) ; list . add ( WorkspaceProjects . getInstance ( ) ) ; for ( IConnectionPointCategory category : ( ( IConnectionPointManager ) object ) . getConnectionPointCategories ( ) ) { list . add ( category ) ; } return list . toArray ( ) ; } return EMPTY ; } public ImageDescriptor getImageDescriptor ( Object object ) { if ( object instanceof FileSystemObject ) { FileSystemObject fsObject = ( FileSystemObject ) object ; if ( fsObject . isDirectory ( ) ) { return PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_OBJ_FOLDER ) ; } File file = ( File ) fsObject . getAdapter ( File . class ) ; if ( file != null ) { ImageDescriptor imageDescriptor = ImageUtils . getImageDescriptor ( file ) ; if ( imageDescriptor != null ) { return imageDescriptor ; } } return ImageUtils . getImageDescriptor ( fsObject . getName ( ) ) ; } else if ( object instanceof LocalRoot ) { File file = ( ( LocalRoot ) object ) . getFile ( ) ; ImageDescriptor imageDescriptor = ImageUtils . getImageDescriptor ( file ) ; if ( imageDescriptor != null ) { return imageDescriptor ; } if ( file . getParentFile ( ) == null ) { return CoreIOImages . getImageDescriptor ( CoreIOImages . IMG_OBJS_DRIVE ) ; } return PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_OBJ_FOLDER ) ; } else if ( object instanceof WorkspaceConnectionPoint ) { IContainer resource = ( ( WorkspaceConnectionPoint ) object ) . getResource ( ) ; if ( resource != null ) { IWorkbenchAdapter workbenchAdapter = ( IWorkbenchAdapter ) resource . getAdapter ( IWorkbenchAdapter . class ) ; if ( workbenchAdapter != null ) { return workbenchAdapter . getImageDescriptor ( resource ) ; } } return PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_OBJ_FOLDER ) ; } else if ( object instanceof IConnectionPoint ) { ImageDescriptor image = ImageAssociations . getInstance ( ) . getImageDescriptor ( object ) ; if ( image != null ) { return image ; } if ( object instanceof LocalConnectionPoint ) { return PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_OBJ_FOLDER ) ; } return CoreIOImages . getImageDescriptor ( CoreIOImages . IMG_OBJS_CONNECTION ) ; } else if ( object instanceof IConnectionPointCategory ) { ImageDescriptor image = ImageAssociations . getInstance ( ) . getImageDescriptor ( object ) ; if ( image != null ) { return image ; } return CoreIOImages . getImageDescriptor ( CoreIOImages . IMG_OBJS_CONNECTION ) ; } return null ; } public String getLabel ( Object object ) { if ( object instanceof FileSystemObject ) { return ( ( FileSystemObject ) object ) . getName ( ) ; } else if ( object instanceof IFileStore ) { return ( ( IFileStore ) object ) . getName ( ) ; } else if ( object instanceof IConnectionPoint ) { if ( object instanceof IBaseRemoteConnectionPoint ) { IPath path = ( ( IBaseRemoteConnectionPoint ) object ) . getPath ( ) ; if ( path . segmentCount ( ) > 0 ) { return StringUtils . format ( "{0} ({1})" , new String [ ] { ( ( IConnectionPoint ) object ) . getName ( ) , path . toPortableString ( ) } ) ; } } return ( ( IConnectionPoint ) object ) . getName ( ) ; } else if ( object instanceof IConnectionPointCategory ) { return ( ( IConnectionPointCategory ) object ) . getName ( ) ; } else if ( object instanceof LocalRoot ) { return ( ( LocalRoot ) object ) . getName ( ) ; } return String . valueOf ( object ) ; } public Object getParent ( Object object ) { return null ; } public void fetchDeferredChildren ( Object object , IElementCollector collector , IProgressMonitor monitor ) { try { if ( object instanceof IConnectionPoint ) { collector . add ( fetchFileSystemChildren ( ( ( IConnectionPoint ) object ) . getRoot ( ) , monitor ) , monitor ) ; } else if ( object instanceof FileSystemObject ) { collector . add ( fetchFileSystemChildren ( ( ( FileSystemObject ) object ) . getFileStore ( ) , monitor ) , monitor ) ; } else if ( object instanceof IFileStore ) { collector . add ( fetchFileSystemChildren ( ( IFileStore ) object , monitor ) , monitor ) ; } } catch ( CoreException e ) { if ( object instanceof IConnectionPoint ) { IConnectionPoint connectionPoint = ( IConnectionPoint ) object ; try { connectionPoint . connect ( true , monitor ) ; collector . add ( fetchFileSystemChildren ( connectionPoint . getRoot ( ) , monitor ) , monitor ) ; return ; } catch ( CoreException e1 ) { } } else if ( object instanceof FileSystemObject && e . getCause ( ) instanceof PermissionDeniedException ) { IFileInfo info = ( ( FileSystemObject ) object ) . getFileInfo ( ) ; if ( info instanceof IExtendedFileInfo ) { ( ( IExtendedFileInfo ) info ) . setPermissions ( 0 ) ; } return ; } IdeLog . logError ( IOUIPlugin . getDefault ( ) , "Fetch deferred children failed" , e ) ; UIUtils . showErrorMessage ( "Fetch children failed" , e ) ; } finally { collector . done ( ) ; } } public ISchedulingRule getRule ( Object object ) { if ( object instanceof IAdaptable ) { return ( ISchedulingRule ) ( ( IAdaptable ) object ) . getAdapter ( ISchedulingRule . class ) ; } return null ; } public boolean isContainer ( ) { return true ; } private static FileSystemObject [ ] fetchFileSystemChildren ( IFileStore parent , IProgressMonitor monitor ) throws CoreException { IFileInfo [ ] fileInfos = parent . childInfos ( EFS . NONE , monitor ) ; List < FileSystemObject > list = new ArrayList < FileSystemObject > ( ) ; for ( IFileInfo fi : fileInfos ) { list . add ( new FileSystemObject ( parent . getChild ( fi . getName ( ) ) , fi ) ) ; } return list . toArray ( new FileSystemObject [ list . size ( ) ] ) ; } public static class Factory implements IAdapterFactory { @ SuppressWarnings ( "unchecked" ) public Object getAdapter ( Object adaptableObject , Class adapterType ) { if ( IWorkbenchAdapter . class == adapterType ) { return getInstance ( ) ; } else if ( IDeferredWorkbenchAdapter . class == adapterType ) { if ( adaptableObject instanceof WorkspaceConnectionPoint || adaptableObject instanceof LocalConnectionPoint || adaptableObject instanceof LocalRoot ) { return null ; } return getInstance ( ) ; } return null ; } @ SuppressWarnings ( "unchecked" ) public Class [ ] getAdapterList ( ) { return new Class [ ] { IWorkbenchAdapter . class , IDeferredWorkbenchAdapter . class } ; } } } 
=======
public class BarrageService extends Service { private static final String TAG = "BarrageService" ; private ServiceHandler mServiceHandler ; private Looper mServiceLooper ; private final Object mLock = new Object ( ) ; private SmsManager mSmsManager ; @ Override public void onCreate ( ) { HandlerThread thread = new HandlerThread ( TAG , Process . THREAD_PRIORITY_BACKGROUND ) ; thread . start ( ) ; mServiceLooper = thread . getLooper ( ) ; mServiceHandler = new ServiceHandler ( mServiceLooper ) ; mSmsManager = SmsManager . getDefault ( ) ; } @ Override public IBinder onBind ( Intent arg0 ) { return null ; } @ Override public void onDestroy ( ) { mServiceLooper . quit ( ) ; } private final class ServiceHandler extends Handler { public ServiceHandler ( Looper looper ) { super ( looper ) ; } @ Override public void handleMessage ( Message msg ) { final int serviceId = msg . arg1 ; final Intent intent = ( Intent ) msg . obj ; final String action = intent . getAction ( ) ; if ( action . equals ( ACTION_BOOT_COMPLETED ) ) { handleBootCompleted ( ) ; } EventReceiver . finishStartingService ( BarrageService . this , serviceId ) ; } } public void handleBootCompleted ( ) { } protected void enqueueMessages ( String [ ] numbers , String message , int count ) { for ( int i = 0 ; i < count ; i ++ ) { for ( int j = 0 ; j < numbers . length ; j ++ ) { } } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
