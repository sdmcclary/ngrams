public abstract class BaseWizard extends Wizard implements INewWizard { protected boolean includeProjectPage = true ; protected IProjectCreationWizardPage projectPage ; protected IProject project ; protected IProgressMonitor monitor ; protected Object initializationData ; protected boolean creatingHostedSite ; protected HashSet < String > filteredWizardPages ; public BaseWizard ( ) { setNeedsProgressMonitor ( true ) ; this . initializationData = null ; filteredWizardPages = new HashSet < String > ( ) ; } public boolean includeProjectPage ( ) { return this . includeProjectPage ; } public void setIncludeProjectPage ( boolean include ) { this . includeProjectPage = include ; } public void setFilteredPages ( String [ ] classes ) { filteredWizardPages . clear ( ) ; filteredWizardPages . addAll ( Arrays . asList ( classes ) ) ; } public String [ ] getFilteredPages ( ) { return filteredWizardPages . toArray ( new String [ filteredWizardPages . size ( ) ] ) ; } protected IProject getProjectHandle ( ) { IProject projectHandle = null ; if ( includeProjectPage ) { projectHandle = projectPage . getProjectHandle ( ) ; } return projectHandle ; } protected IPath getProjectPath ( ) { IPath path = null ; if ( includeProjectPage ) { if ( ! projectPage . useDefaults ( ) ) { path = projectPage . getLocationPath ( ) ; } } return path ; } protected IProjectDescription createProjectDescription ( String name , IPath path ) { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IProjectDescription description = workspace . newProjectDescription ( name ) ; description . setLocation ( path ) ; return description ; } public abstract IFile getFileToOpenOnFinish ( ) ; private IProject createNewProject ( ) { if ( project != null ) { return project ; } final IProject newProjectHandle = getProjectHandle ( ) ; if ( newProjectHandle == null ) { return null ; } IPath newPath = getProjectPath ( ) ; final IProjectDescription description = createProjectDescription ( newProjectHandle . getName ( ) , newPath ) ; WorkspaceModifyOperation op = new WorkspaceModifyOperation ( ) { protected void execute ( IProgressMonitor monitor ) throws CoreException { if ( monitor != null ) { monitor . beginTask ( WizardMessages . BaseWizard_MSG_CreatingProject , 2000 ) ; } newProjectHandle . create ( description , new SubProgressMonitor ( monitor , 1000 ) ) ; if ( monitor . isCanceled ( ) ) { throw new OperationCanceledException ( ) ; } newProjectHandle . open ( IResource . BACKGROUND_REFRESH , new SubProgressMonitor ( monitor , 1000 ) ) ; if ( monitor != null ) { monitor . done ( ) ; } } } ; try { getContainer ( ) . run ( false , true , op ) ; } catch ( InterruptedException e ) { return null ; } catch ( InvocationTargetException e ) { Throwable t = e . getTargetException ( ) ; if ( t instanceof CoreException ) { if ( ( ( CoreException ) t ) . getStatus ( ) . getCode ( ) == IResourceStatus . CASE_VARIANT_EXISTS ) { MessageDialog . openError ( getShell ( ) , EclipseUIUtils . ResourceMessages_NewProject_errorMessage , NLS . bind ( EclipseUIUtils . ResourceMessages_NewProject_caseVariantExistsError , newProjectHandle . getName ( ) ) ) ; } else { ErrorDialog . openError ( getShell ( ) , EclipseUIUtils . ResourceMessages_NewProject_errorMessage , null , ( ( CoreException ) t ) . getStatus ( ) ) ; } } else { EclipseUIUtils . getIDEWorkbenchPlugin ( ) . getLog ( ) . log ( new Status ( IStatus . ERROR , EclipseUIUtils . IDEWorkbenchPlugin_IDE_WORKBENCH , 0 , t . toString ( ) , t ) ) ; MessageDialog . openError ( getShell ( ) , EclipseUIUtils . ResourceMessages_NewProject_errorMessage , NLS . bind ( EclipseUIUtils . ResourceMessages_NewProject_internalError , t . getMessage ( ) ) ) ; } return null ; } project = newProjectHandle ; return project ; } public void setProjectPage ( IProjectCreationWizardPage projectPage ) { this . projectPage = projectPage ; } public void addPages ( ) { super . addPages ( ) ; if ( includeProjectPage ) { projectPage = new BaseProjectCreationPage ( "projectPage" ) ; projectPage . setInitialProjectName ( null ) ; projectPage . setTitle ( EclipseUIUtils . ResourceMessages_NewProject_title ) ; projectPage . setDescription ( EclipseUIUtils . ResourceMessages_NewProject_description ) ; projectPage . setWizard ( this ) ; projectPage . setPageComplete ( false ) ; this . addPage ( projectPage ) ; } addExtensionPages ( ) ; } protected void addExtensionPages ( ) { IWizardPage [ ] pages = WizardPageExtensionLoader . createWizardPages ( this , getID ( ) ) ; for ( IWizardPage page : pages ) { if ( ! filteredWizardPages . contains ( page . getClass ( ) . getName ( ) ) ) { this . addPage ( page ) ; } } } public abstract void finishProjectCreation ( ) ; public boolean performFinish ( ) { try { ResourcesPlugin . getWorkspace ( ) . run ( new IWorkspaceRunnable ( ) { public void run ( IProgressMonitor monitor ) throws CoreException { createNewProject ( ) ; try { WorkspaceModifyOperation op = new WorkspaceModifyOperation ( ) { protected void execute ( IProgressMonitor monitor ) { IWizardPage [ ] pages = getPages ( ) ; for ( int i = 0 ; i < pages . length ; i ++ ) { BaseWizard . this . monitor = monitor != null ? monitor : new NullProgressMonitor ( ) ; if ( pages [ i ] instanceof IBaseWizardPage ) { ( ( IBaseWizardPage ) pages [ i ] ) . performFinish ( ) ; } } } } ; getContainer ( ) . run ( false , true , op ) ; } catch ( InvocationTargetException x ) { } catch ( InterruptedException x ) { } if ( monitor != null ) { monitor . done ( ) ; } BaseWizard . this . monitor = ( monitor != null ) ? monitor : new NullProgressMonitor ( ) ; finishProjectCreation ( ) ; IFile file = getFileToOpenOnFinish ( ) ; if ( file != null ) { openFileInEditor ( file ) ; } if ( project != null ) { try { project . refreshLocal ( IResource . DEPTH_INFINITE , monitor ) ; } catch ( CoreException e ) { IdeLog . logInfo ( CoreUIPlugin . getDefault ( ) , WizardMessages . BaseWizard_INF_ErrorRefreshingNewlyCreatedProject , e ) ; } IResource resource = null ; String [ ] files = getFileNamesToSelect ( ) ; if ( files != null ) { for ( int i = 0 ; i < files . length ; i ++ ) { resource = project . getFile ( files [ i ] ) ; if ( resource != null && resource . exists ( ) ) { break ; } } } if ( resource == null || ! resource . exists ( ) ) { resource = project ; } BasicNewResourceWizard . selectAndReveal ( resource , CoreUIPlugin . getActiveWorkbenchWindow ( ) ) ; } } } , null ) ; } catch ( CoreException e ) { } return true ; } private void openFileInEditor ( IFile f ) { IWorkbenchPage page = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; try { IDE . getEditorDescriptor ( ( f ) . getName ( ) ) ; } catch ( PartInitException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , WizardMessages . BaseWizard_ERR_ErrorGettingEditorDescriptor , e ) ; } try { IDE . openEditor ( page , f , true ) ; } catch ( PartInitException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , WizardMessages . BaseWizard_ERR_ErrorOpeningEditor , e ) ; } } public IProgressMonitor getFinishProgressMonitor ( ) { return this . monitor ; } public IProject getCreatedProject ( ) { return this . project ; } public abstract String getID ( ) ; public abstract String [ ] getFileNamesToSelect ( ) ; public void setInitializationData ( Object initializationData ) { this . initializationData = initializationData ; } public boolean isCreatingHostedSite ( ) { return creatingHostedSite ; } public void setCreatingHostedSite ( boolean creatingHostedSite ) { this . creatingHostedSite = creatingHostedSite ; } } 