public abstract class SmartFeedDialog extends AbstractDialog { private static final int LABEL_COL_WIDTH = 40 ; private final IFeed feed ; protected JTextField tfTitle ; protected JComboBox cbService ; protected JTextField tfArticlesLimit ; private Component panelMyOwnFeed ; private JTextArea lbDescription ; protected JCheckBox chDedupEnabled ; protected JSpinner spnDedupFrom ; protected JSpinner spnDedupTo ; protected JLabel lbTo ; protected QueryBuilder queryBuilder ; protected Query query ; private boolean queryFeed ; private JPanel pnlOptions ; private QueryEditorPanel queryEditor ; private DisplayPropertiesTabPanel displayTab ; private FeedUpdatePeriodPanel pnlFeedUpdatePeriod ; private FeedAutoSavePanel pnlFeedAutoSave ; private JComboBox cbHandlingType ; public SmartFeedDialog ( IFeed feed , Frame frame , String title ) { super ( frame , title ) ; this . feed = feed ; query = new Query ( ) ; pnlOptions = new JPanel ( new BorderLayout ( ) ) ; } protected JComponent buildContent ( ) { JPanel content = new JPanel ( new BorderLayout ( ) ) ; content . add ( buildBody ( ) , BorderLayout . CENTER ) ; content . add ( buildButtonBarWithOKCancel ( ) , BorderLayout . SOUTH ) ; return content ; } private Component buildBody ( ) { initComponents ( ) ; JTabbedPane tp = new JTabbedPane ( ) ; tp . addTab ( "Basic" , createBasicTab ( ) ) ; tp . addTab ( "Display" , displayTab ) ; if ( GlobalController . SINGLETON . getFeatureManager ( ) . isSfDeduplication ( ) || GlobalController . SINGLETON . getFeatureManager ( ) . isAutoSaving ( ) || feed instanceof DataFeed ) { tp . addTab ( "Advanced" , createAdvancedTab ( ) ) ; } return tp ; } public Component createBasicTab ( ) { BBFormBuilder b = new BBFormBuilder ( LABEL_COL_WIDTH + "dlu, 4dlu, 120dlu, 75dlu:grow" ) ; b . setDefaultDialogBorder ( ) ; b . append ( Strings . message ( "create.smartfeed.source" ) , cbService ) ; b . setLeadingColumnOffset ( 2 ) ; b . appendRelatedComponentsGapRow ( 2 ) ; b . appendRow ( "40dlu" ) ; b . append ( lbDescription , 2 , CellConstraints . FILL , CellConstraints . TOP ) ; b . setLeadingColumnOffset ( 0 ) ; b . appendUnrelatedComponentsGapRow ( 2 ) ; b . append ( createTitlePanel ( ) , 4 ) ; b . appendUnrelatedComponentsGapRow ( 2 ) ; b . append ( pnlOptions , 4 , CellConstraints . FILL , CellConstraints . FILL ) ; return b . getPanel ( ) ; } private Component createTitlePanel ( ) { BBFormBuilder b = new BBFormBuilder ( LABEL_COL_WIDTH + "dlu, 4dlu, p:grow, 7dlu, p, 4dlu, 25dlu" ) ; b . append ( Strings . message ( "create.smartfeed.title" ) , tfTitle ) ; b . append ( Strings . message ( "create.smartfeed.max" ) , tfArticlesLimit ) ; return b . getPanel ( ) ; } private Component createAdvancedTab ( ) { BBFormBuilder builder = new BBFormBuilder ( "p, 2dlu, 30dlu, 2dlu, p, 2dlu, 30dlu, 0:grow" ) ; builder . setDefaultDialogBorder ( ) ; if ( GlobalController . SINGLETON . getFeatureManager ( ) . isSfDeduplication ( ) ) { builder . append ( chDedupEnabled ) ; builder . append ( spnDedupFrom ) ; builder . append ( lbTo ) ; builder . append ( spnDedupTo ) ; builder . nextLine ( ) ; } if ( feed instanceof DataFeed ) { DataFeed dfeed = ( DataFeed ) feed ; long initialUpdatePeriod = dfeed . getUpdatePeriod ( ) ; pnlFeedUpdatePeriod = new FeedUpdatePeriodPanel ( initialUpdatePeriod ) ; builder . append ( Strings . message ( "show.feed.properties.tab.advanced.handling.type" ) ) ; builder . append ( cbHandlingType , 5 ) ; builder . nextLine ( ) ; builder . append ( Strings . message ( "show.feed.properties.tab.advanced.update.period" ) , 1 , CellConstraints . LEFT , CellConstraints . TOP ) ; builder . append ( pnlFeedUpdatePeriod , 6 ) ; } pnlFeedAutoSave = new FeedAutoSavePanel ( feed , GlobalController . SINGLETON . getFeatureManager ( ) . isAutoSaving ( ) ) ; builder . append ( pnlFeedAutoSave , 8 ) ; return builder . getPanel ( ) ; } private Component buildMyOwnFeedsPanel ( ) { queryBuilder = new QueryBuilder ( ) ; queryBuilder . addPropertyChangeListener ( QueryBuilder . PROP_CRITERIA_COUNT , new QueryBuilderResizer ( ) ) ; queryBuilder . setQuery ( query ) ; return queryBuilder ; } protected void initComponents ( ) { if ( tfTitle != null ) return ; tfTitle = new JTextField ( ) ; tfArticlesLimit = new JTextField ( ) ; lbDescription = ComponentsFactory . createWrappedMultilineLabel ( "" ) ; UifUtilities . smallerFont ( lbDescription ) ; cbService = new JComboBox ( ) ; cbHandlingType = new JComboBox ( FeedHandlingType . ALL_TYPES ) ; cbHandlingType . setSelectedItem ( feed == null ? FeedHandlingType . DEFAULT : feed . getHandlingType ( ) ) ; panelMyOwnFeed = buildMyOwnFeedsPanel ( ) ; queryFeed = false ; cbService . setRenderer ( new ServicesListRenderer ( ) ) ; cbService . addItemListener ( new ServiceSelectionListener ( ) ) ; cbService . addItem ( Strings . message ( "create.smartfeed.own.feeds.service" ) ) ; QueryType [ ] types = QueryType . getAvailableTypes ( ) ; Arrays . sort ( types , new QueryTypeNameComparator ( ) ) ; for ( QueryType type : types ) cbService . addItem ( type ) ; String str = Strings . message ( "create.smartfeed.remove.duplicates" ) ; String [ ] chunks = StringUtils . split ( str , "~" ) ; lbTo = new JLabel ( chunks . length > 1 ? chunks [ 1 ] : "" ) ; spnDedupFrom = createSpinner ( ) ; spnDedupTo = createSpinner ( ) ; chDedupEnabled = new JCheckBox ( chunks [ 0 ] ) ; StateUpdatingToggleListener . install ( chDedupEnabled , spnDedupFrom , spnDedupTo ) ; displayTab = new DisplayPropertiesTabPanel ( feed ) ; } @ Override public void setVisible ( boolean b ) { tfTitle . requestFocusInWindow ( ) ; super . setVisible ( b ) ; } private static JSpinner createSpinner ( ) { return new JSpinner ( new SpinnerNumberModel ( 1 , 1 , 100 , 1 ) ) ; } static String validateCommonFields ( String title , String maxCount ) { String msg = null ; if ( title . trim ( ) . length ( ) == 0 ) { msg = Strings . message ( "create.smartfeed.validation.empty.title" ) ; } else { try { int limit = Integer . parseInt ( maxCount ) ; if ( limit <= 0 ) msg = Strings . message ( "create.smartfeed.validation.negative.limit" ) ; } catch ( NumberFormatException e ) { msg = Strings . message ( "create.smartfeed.validation.invalid.limit" ) ; } } return msg ; } static String validateQueryFeedData ( QueryType type , String parameter , String articlesLimit , boolean removeDuplicates , int maxDupWords ) { return type . validateEntry ( parameter , Integer . parseInt ( articlesLimit ) , removeDuplicates , maxDupWords ) ; } static String validateSearchFeedData ( Query aQuery , boolean removeDuplicates , int maxDupWords ) { return aQuery . validate ( removeDuplicates , maxDupWords ) ; } public void doAccept ( ) { Object selectedSource = cbService . getSelectedItem ( ) ; String msg ; String title = tfTitle . getText ( ) ; String articlesLimit = tfArticlesLimit . getText ( ) ; int maxDupWords = getDedupFrom ( ) ; boolean removeDuplicates = isDedupEnabled ( ) ; msg = validateCommonFields ( title , articlesLimit ) ; if ( msg == null && pnlFeedAutoSave != null ) msg = pnlFeedAutoSave . validateData ( ) ; if ( msg == null ) { if ( selectedSource instanceof QueryType ) { QueryType queryType = ( QueryType ) selectedSource ; String queryParam = getFeedParameter ( ) ; msg = validateQueryFeedData ( queryType , queryParam , articlesLimit , removeDuplicates , maxDupWords ) ; } else { msg = validateSearchFeedData ( query , removeDuplicates , maxDupWords ) ; } } if ( msg == null ) { displayTab . commitChanges ( ) ; if ( feed != null ) { feed . setHandlingType ( ( FeedHandlingType ) cbHandlingType . getSelectedItem ( ) ) ; if ( pnlFeedAutoSave != null ) pnlFeedAutoSave . commitChanges ( feed ) ; } if ( feed instanceof DataFeed ) { DataFeed dfeed = ( DataFeed ) feed ; dfeed . setUpdatePeriod ( pnlFeedUpdatePeriod . getUpdatePeriod ( ) ) ; } super . doAccept ( ) ; } else { JOptionPane . showMessageDialog ( this , msg , Strings . message ( "create.smartfeed.validation.dialog.title" ) , JOptionPane . ERROR_MESSAGE ) ; } } public void commitAutoSaveProperties ( IFeed feed ) { if ( pnlFeedAutoSave != null ) pnlFeedAutoSave . commitChanges ( feed ) ; } public String getFeedTitle ( ) { return tfTitle . getText ( ) ; } public int getFeedQueryType ( ) { Object selectedItem = cbService . getSelectedItem ( ) ; return selectedItem instanceof QueryType ? ( ( QueryType ) selectedItem ) . getType ( ) : - 1 ; } public String getFeedParameter ( ) { return queryEditor == null ? null : queryEditor . getParameter ( ) ; } protected void setFeedParameter ( String text ) { if ( queryEditor != null ) queryEditor . setParameter ( text ) ; } public int getFeedArticlesLimit ( ) { return strToInt ( tfArticlesLimit . getText ( ) ) ; } public int getDedupFrom ( ) { return ( Integer ) spnDedupFrom . getValue ( ) ; } public int getDedupTo ( ) { return ( Integer ) spnDedupTo . getValue ( ) ; } private int strToInt ( String str ) { int limit = - 1 ; if ( str . trim ( ) . length ( ) != 0 ) { limit = Integer . parseInt ( str ) ; } return limit ; } public boolean isDedupEnabled ( ) { return chDedupEnabled . isSelected ( ) ; } public boolean isQueryFeed ( ) { return queryFeed ; } public Query getFeedSearchQuery ( ) { return query ; } public FeedType getFeedType ( ) { return displayTab . getFeedType ( ) ; } public int getViewMode ( ) { return displayTab . getViewMode ( ) ; } public boolean isCustomViewModeEnabled ( ) { return displayTab . isCustomViewModeEnabled ( ) ; } private static class ServicesListRenderer extends JPanel implements ListCellRenderer { private JLabel label ; public ServicesListRenderer ( ) { super ( new BorderLayout ( ) ) ; label = new JLabel ( ) ; label . setBorder ( BorderFactory . createEmptyBorder ( 2 , 2 , 2 , 2 ) ) ; add ( label , BorderLayout . CENTER ) ; } public Component getListCellRendererComponent ( JList list , Object value , int index , boolean isSelected , boolean cellHasFocus ) { ImageIcon icon ; String text ; if ( value instanceof QueryType ) { QueryType type = ( QueryType ) value ; String key = type . getIconKey ( ) ; icon = key != null ? IconSource . getIcon ( key ) : type . getIcon ( ) ; text = type . getName ( ) ; } else { icon = IconSource . getIcon ( ResourceID . ICON_SEARCHFEED_MYFEEDS ) ; text = value . toString ( ) ; } label . setIcon ( icon ) ; label . setText ( text ) ; final Color back = isSelected ? list . getSelectionBackground ( ) : list . getBackground ( ) ; setBackground ( back ) ; return this ; } } private class ServiceSelectionListener implements ItemListener { public void itemStateChanged ( ItemEvent e ) { boolean selected = e . getStateChange ( ) == ItemEvent . SELECTED ; if ( selected ) { Object item = e . getItem ( ) ; boolean queryTypeSelected = ( item instanceof QueryType ) ; queryFeed = queryTypeSelected ; Component pnlEditor ; String description ; if ( queryTypeSelected ) { QueryType queryType = ( QueryType ) item ; description = queryType . getQueryDescription ( ) ; pnlEditor = queryEditor = queryType . getEditorPanel ( LABEL_COL_WIDTH ) ; if ( displayTab != null ) { displayTab . setViewMode ( queryType . getPreferredViewMode ( ) ) ; displayTab . setFeedType ( queryType . getFeedType ( ) ) ; } } else { description = Strings . message ( "create.smartfeed.own.feeds.description" ) ; pnlEditor = panelMyOwnFeed ; } pnlOptions . removeAll ( ) ; pnlOptions . add ( pnlEditor , BorderLayout . CENTER ) ; pnlOptions . validate ( ) ; lbDescription . setText ( description ) ; updateWindowSize ( ) ; } } private void updateWindowSize ( ) { pack ( ) ; } } private static class QueryTypeNameComparator implements Comparator < QueryType > { public int compare ( QueryType t1 , QueryType t2 ) { return t1 . getName ( ) . compareToIgnoreCase ( t2 . getName ( ) ) ; } } private class QueryBuilderResizer implements PropertyChangeListener { public void propertyChange ( PropertyChangeEvent evt ) { pack ( ) ; } } } 