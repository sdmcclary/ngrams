public class GuideModel extends AbstractListModel { private final boolean nonVisual ; private ScoresCalculator scoreCalculator ; private JList listComponent ; private IFeed [ ] feeds ; private int [ ] channelsClasses ; private int [ ] channelsScores ; private int [ ] filteredChannels ; private int filteredChannelsCount ; private int [ ] sortedChannels ; private int sortedChannelsCount ; private int scoreThreshold ; private boolean sortingEnabled ; private int primarySort ; private boolean primarySortRev ; private int secondarySort ; private boolean secondarySortRev ; private IGuide currentGuide ; private FeedScoresComparator feedScoresComparator ; private IFeed selectedFeed ; public GuideModel ( ScoresCalculator aCalculator , FeedDisplayModeManager aFeedDDM ) { this ( aCalculator , true , aFeedDDM ) ; } public GuideModel ( ScoresCalculator aCalculator , boolean visual , FeedDisplayModeManager aFeedDMM ) { scoreThreshold = UserPreferences . DEFAULT_GOOD_CHANNEL_STARZ - 1 ; sortingEnabled = UserPreferences . DEFAULT_SORTING_ENABLED ; primarySort = UserPreferences . DEFAULT_SORT_BY_CLASS_1 ; primarySortRev = UserPreferences . DEFAULT_REVERSED_SORT_BY_CLASS_1 ; secondarySort = UserPreferences . DEFAULT_SORT_BY_CLASS_2 ; secondarySortRev = UserPreferences . DEFAULT_REVERSED_SORT_BY_CLASS_2 ; scoreCalculator = aCalculator ; nonVisual = ! visual ; currentGuide = null ; selectedFeed = null ; setFeeds ( Constants . EMPTY_FEEDS_LIST , true ) ; } public void setListComponent ( JList aListComponent ) { listComponent = aListComponent ; } public void setGuide ( IGuide aGuide ) { IFeed [ ] feedsList ; if ( aGuide == null ) { feedsList = Constants . EMPTY_FEEDS_LIST ; } else { feedsList = aGuide . getFeeds ( ) ; } synchronized ( this ) { boolean newGuide = currentGuide != aGuide ; currentGuide = aGuide ; setFeeds ( feedsList , newGuide ) ; } } public IGuide getCurrentGuide ( ) { return currentGuide ; } private void setFeeds ( final IFeed [ ] feedsList , final boolean newGuide ) { feeds = feedsList ; rebuild0 ( newGuide , true ) ; } private synchronized void recalculate ( ) { channelsClasses = calculateClasses ( feeds ) ; channelsScores = calculateScores ( feeds , channelsClasses ) ; } public synchronized void rebuild ( boolean doFiltering ) { rebuild0 ( false , doFiltering ) ; } private void rebuild0 ( boolean newGuide , boolean doFiltering ) { if ( doFiltering ) recalculate ( ) ; final int currentViewIndex = newGuide ? - 1 : getSelectedChannelIndex ( ) ; final int oldSortedCount = sortedChannelsCount ; final int currentDataIndex = currentViewIndex == - 1 ? - 1 : sortedChannels [ currentViewIndex ] ; if ( newGuide || filteredChannels . length < feeds . length ) { filteredChannels = new int [ feeds . length ] ; sortedChannels = new int [ feeds . length ] ; doFiltering = true ; } if ( newGuide || doFiltering ) { filteredChannelsCount = filterFeeds ( feeds , channelsScores . length , channelsClasses , filteredChannels ) ; } sortedChannels = copyFeedsList ( filteredChannels , filteredChannelsCount , sortingEnabled , channelsScores ) ; sortedChannelsCount = filteredChannelsCount ; final int newViewIndex = currentDataIndex == - 1 ? - 1 : dataToView ( sortedChannels , sortedChannelsCount , currentDataIndex ) ; if ( ! nonVisual ) { fireChanges ( oldSortedCount , sortedChannelsCount , currentViewIndex , newViewIndex ) ; } } private int getSelectedChannelIndex ( ) { return listComponent == null ? - 1 : listComponent . getSelectedIndex ( ) ; } public synchronized void setScoreThreshold ( int aScoreThreshold ) { if ( scoreThreshold != aScoreThreshold ) { scoreThreshold = aScoreThreshold ; rebuild ( true ) ; } } public synchronized int getSize ( ) { return sortedChannelsCount ; } public synchronized Object getElementAt ( final int index ) { return feeds [ viewToData ( index ) ] ; } public synchronized boolean isPresent ( IFeed feed ) { return indexOf ( feed ) != - 1 ; } public synchronized void contentsChangedAt ( final IFeed feed ) { if ( feed == null ) return ; if ( ! nonVisual ) { int viewIndex = indexOf ( feed ) ; if ( viewIndex > - 1 ) { fireContentsChanged ( this , viewIndex , viewIndex ) ; } } SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { final int viewIndex = indexOf ( feed ) ; final int dataIndex = viewIndex > - 1 ? viewToData ( viewIndex ) : dataIndexOf ( feed ) ; if ( dataIndex != - 1 ) { IFeed channel = feeds [ dataIndex ] ; int newClass = FeedClassifier . classify ( channel ) ; int newScore = calculateScore ( channel , newClass , - 1 ) ; int oldClass = channelsClasses [ dataIndex ] ; boolean doRebuild = false ; boolean doFiltering = false ; if ( oldClass != newClass || channelsScores [ dataIndex ] != newScore ) { channelsClasses [ dataIndex ] = newClass ; channelsScores [ dataIndex ] = newScore ; doRebuild = true ; doFiltering = true ; } boolean shouldBeDisplayed = shouldBeDisplayed ( channel , newClass ) ; if ( viewIndex == - 1 && shouldBeDisplayed ) { filteredChannels [ filteredChannelsCount ++ ] = dataIndex ; doRebuild = true ; doFiltering = false ; } else if ( viewIndex != - 1 && ! shouldBeDisplayed ) { doRebuild = true ; doFiltering = true ; } if ( doRebuild ) rebuild ( doFiltering ) ; } } } ) ; } public synchronized void feedsAdded ( final int indexFrom , final int indexTo ) { int size = filteredChannels . length + indexTo - indexFrom + 1 ; int [ ] newFiltered = new int [ size ] ; int [ ] newSorted = new int [ size ] ; System . arraycopy ( filteredChannels , 0 , newFiltered , 0 , filteredChannels . length ) ; System . arraycopy ( sortedChannels , 0 , newSorted , 0 , filteredChannels . length ) ; filteredChannels = newFiltered ; sortedChannels = newSorted ; setGuide ( currentGuide ) ; } public synchronized void fullRebuild ( ) { setGuide ( currentGuide ) ; } public synchronized int indexOf ( IFeed feed ) { int viewIndex = - 1 ; if ( feed != null ) { for ( int i = 0 ; viewIndex == - 1 && i < sortedChannelsCount ; i ++ ) { if ( feeds [ viewToData ( i ) ] == feed ) viewIndex = i ; } } return viewIndex ; } private int dataToView ( int [ ] list , int length , int dataIndex ) { int viewIndex = - 1 ; for ( int i = 0 ; viewIndex == - 1 && i < length ; i ++ ) { if ( list [ i ] == dataIndex ) viewIndex = i ; } return viewIndex ; } private synchronized int dataIndexOf ( IFeed channel ) { int index = - 1 ; for ( int i = 0 ; index == - 1 && i < feeds . length ; i ++ ) { if ( feeds [ i ] == channel ) index = i ; } return index ; } public synchronized int viewToData ( int viewIndex ) { return sortedChannels [ viewIndex ] ; } public void setSortingEnabled ( boolean enabled ) { if ( sortingEnabled != enabled ) { sortingEnabled = enabled ; rebuild ( false ) ; } } public void setPrimarySortOrder ( int order ) { if ( primarySort != order ) { primarySort = order ; fullRebuild ( ) ; } } public void setSecondarySortOrder ( int order ) { if ( secondarySort != order ) { secondarySort = order ; fullRebuild ( ) ; } } public void setPrimarySortOrderDirection ( boolean reversed ) { if ( primarySortRev != reversed ) { primarySortRev = reversed ; fullRebuild ( ) ; } } public void setSecondarySortOrderDirection ( boolean reversed ) { if ( secondarySortRev != reversed ) { secondarySortRev = reversed ; fullRebuild ( ) ; } } public void filterChanged ( ) { rebuild ( true ) ; } public void setOptions ( int aScoreThreshold , int aPrSortOrder , boolean aPrSortOrderReversed , int aScSortOrder , boolean aScSortOrderReversed , boolean aSortingEnabled ) { scoreThreshold = aScoreThreshold ; primarySort = aPrSortOrder ; primarySortRev = aPrSortOrderReversed ; secondarySort = aScSortOrder ; secondarySortRev = aScSortOrderReversed ; sortingEnabled = aSortingEnabled ; } private int filterFeeds ( IFeed [ ] aFeeds , int aFeedsCount , int [ ] aFeedsClasses , int [ ] aFilteredFeedsList ) { int index = 0 ; for ( int i = 0 ; i < aFeedsCount ; i ++ ) { IFeed feed = aFeeds [ i ] ; int feedsClass = aFeedsClasses [ i ] ; if ( shouldBeDisplayed ( feed , feedsClass ) ) aFilteredFeedsList [ index ++ ] = i ; } return index ; } private boolean shouldBeDisplayed ( IFeed aFeed , int aFeedClasses ) { return shouldBeVisible ( aFeed ) || aFeed . isVisible ( ) ; } private boolean shouldBeVisible ( IFeed aFeed ) { return aFeed == selectedFeed ; } private int [ ] copyFeedsList ( int [ ] source , int sourceLength , boolean sort , final int [ ] feedsScores ) { int [ ] dest ; if ( sort ) { FeedScoresComparator comp = getFeedScoresComparator ( ) ; synchronized ( comp ) { comp . initialize ( feedsScores ) ; dest = Sort . sort ( source , 0 , sourceLength , comp ) ; } } else { dest = new int [ source . length ] ; System . arraycopy ( source , 0 , dest , 0 , sourceLength ) ; } return dest ; } private synchronized FeedScoresComparator getFeedScoresComparator ( ) { if ( feedScoresComparator == null ) feedScoresComparator = new FeedScoresComparator ( ) ; return feedScoresComparator ; } private int [ ] calculateClasses ( IFeed [ ] aFeeds ) { int [ ] classes = new int [ aFeeds . length ] ; for ( int i = 0 ; i < aFeeds . length ; i ++ ) classes [ i ] = aFeeds [ i ] . getClassesMask ( ) ; return classes ; } private int [ ] calculateScores ( IFeed [ ] aFeeds , int [ ] aFeedsClasses ) { int [ ] scores = new int [ aFeeds . length ] ; int minVisits = 0 ; if ( primarySort == FeedsSortOrder . VISITS || secondarySort == FeedsSortOrder . VISITS ) { minVisits = getMininumVisits ( ) ; } for ( int i = 0 ; i < aFeeds . length ; i ++ ) { scores [ i ] = calculateScore ( aFeeds [ i ] , aFeedsClasses [ i ] , minVisits ) ; } return scores ; } int calculateScore ( IFeed feed , int feedClass , int minVisits ) { int score = 0 ; if ( minVisits == - 1 && ( primarySort == FeedsSortOrder . VISITS || secondarySort == FeedsSortOrder . VISITS ) ) { minVisits = getMininumVisits ( ) ; } score = shiftInSortMark ( score , feedClass , feed , primarySort , primarySortRev , minVisits ) ; if ( primarySort != secondarySort ) { score = shiftInSortMark ( score , feedClass , feed , secondarySort , secondarySortRev , minVisits ) ; } score = ( score << 3 ) | ( 4 - getFeedRating ( feed ) ) ; if ( primarySort != FeedsSortOrder . ALPHABETICAL && secondarySort != FeedsSortOrder . ALPHABETICAL ) { score = ( score << 10 ) | ( getFeedAlphaOrder ( feed ) & 0x7ff ) ; } return score ; } int shiftInSortMark ( int score , int feedClass , IFeed feed , int sortOrder , boolean reverseSort , int minVisits ) { int value ; int shift ; switch ( sortOrder ) { case FeedsSortOrder . ALPHABETICAL : value = getFeedAlphaOrder ( feed ) & 0x3ff ; if ( reverseSort ) value = 1023 - value ; shift = 10 ; break ; case FeedsSortOrder . RATING : int feedRating = getFeedRating ( feed ) ; value = feedRating == - 1 ? 0 : feedRating & 7 ; if ( ! reverseSort ) value = 7 - value ; shift = 3 ; break ; case FeedsSortOrder . VISITS : value = getFeedVisits ( feed , minVisits ) & 0xff ; if ( ! reverseSort ) value = 255 - value ; shift = 8 ; break ; default : value = ( feedClass & sortOrder ) != 0 ? 1 : 0 ; if ( reverseSort ) value = 1 - value ; shift = 1 ; break ; } return ( score << shift ) | value ; } private int getFeedVisits ( IFeed feed , int minVisits ) { return Math . min ( 255 , feed . getViews ( ) - minVisits ) ; } int getMininumVisits ( ) { int min = Integer . MAX_VALUE ; for ( IFeed feed : feeds ) min = Math . min ( feed . getViews ( ) , min ) ; return min ; } int getFeedRating ( IFeed feed ) { return scoreCalculator . calcFinalScore ( feed ) ; } synchronized int getFeedAlphaOrder ( IFeed feed ) { return currentGuide . alphaIndexOf ( feed ) ; } public void ensureVisibilityOf ( IFeed aFeed ) { if ( selectedFeed != aFeed ) { selectedFeed = aFeed ; if ( selectedFeed == null ) { if ( getSize ( ) > 0 ) fullRebuild ( ) ; } else if ( selectedFeed . belongsTo ( currentGuide ) && indexOf ( selectedFeed ) == - 1 ) { fullRebuild ( ) ; } } } private static class FeedScoresComparator implements Sort . IValueComparator { private int [ ] feedsScores ; public int compare ( int dataIndex1 , int dataIndex2 ) { int s1 = feedsScores [ dataIndex1 ] ; int s2 = feedsScores [ dataIndex2 ] ; return s1 == s2 ? 0 : s1 > s2 ? 1 : - 1 ; } public void initialize ( int [ ] aFeedsScores ) { feedsScores = aFeedsScores ; } } private void fireChanges ( int oldLength , int newLength , int currentViewIndex , int newViewIndex ) { if ( oldLength == 0 && newLength == 0 ) return ; if ( newViewIndex != - 1 ) { int changeStart = 0 ; int changeEnd = newLength - 1 ; int diffInPositions = newViewIndex - currentViewIndex ; if ( diffInPositions < 0 ) { fireIntervalRemoved ( this , 0 , - diffInPositions - 1 ) ; } else if ( diffInPositions > 0 ) { fireIntervalAdded ( this , 0 , diffInPositions - 1 ) ; changeStart = diffInPositions ; } oldLength += diffInPositions ; int diffInLength = newLength - oldLength ; if ( diffInLength < 0 ) { fireIntervalRemoved ( this , newLength , oldLength - 1 ) ; } else if ( diffInLength > 0 ) { fireIntervalAdded ( this , oldLength , newLength - 1 ) ; changeEnd = oldLength - 1 ; } fireContentsChanged ( this , changeStart , changeEnd ) ; if ( listComponent != null && newViewIndex != oldLength ) { listComponent . setSelectedIndex ( newViewIndex ) ; } } else { if ( listComponent != null ) listComponent . clearSelection ( ) ; fireChanges ( 0 , oldLength , newLength ) ; } } private void fireChanges ( int offset , int aOldSize , int aNewSize ) { int o = aOldSize <= aNewSize ? aOldSize : aNewSize ; int d = aNewSize - aOldSize ; if ( d > 0 ) { fireIntervalAdded ( this , offset + o , offset + o + d - 1 ) ; } else if ( d < 0 ) { fireIntervalRemoved ( this , offset + o , offset + o - d - 1 ) ; } if ( o > 0 ) fireContentsChanged ( this , offset , offset + o - 1 ) ; } public void fireContentsChanged ( Object source , int index0 , int index1 ) { synchronized ( this ) { index0 = Math . min ( index0 , sortedChannelsCount ) ; index1 = Math . min ( index1 , sortedChannelsCount ) ; } super . fireContentsChanged ( source , index0 , index1 ) ; } protected void fireIntervalAdded ( Object source , int index0 , int index1 ) { super . fireIntervalAdded ( source , index0 , index1 ) ; } protected void fireIntervalRemoved ( Object source , int index0 , int index1 ) { super . fireIntervalRemoved ( source , index0 , index1 ) ; } } 