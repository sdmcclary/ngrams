<<<<<<< HEAD
public class ScriptsView extends ViewPart implements IScriptStoreListener { static final String INFO_MESSAGE = Messages . ScriptsView_INF_MSG_Aptana_scripts_view ; static final String [ ] FILTER_EXTENSIONS = new String [ ] { "*.js" , "*.*" } ; static final String [ ] FILTER_NAMES = new String [ ] { MessageFormat . format ( Messages . ScriptsView_Javascript_files_0 , new Object [ ] { FILTER_EXTENSIONS [ 0 ] } ) , MessageFormat . format ( Messages . ScriptsView_All_files_0 , new Object [ ] { FILTER_EXTENSIONS [ 1 ] } ) } ; private static Image fProfileFileIcon = getImageDescriptor ( "icons/js_file.gif" ) . createImage ( ) ; private static ImageDescriptor fAddFileIconDescriptor = getImageDescriptor ( "icons/js_file_new.gif" ) ; private static ImageDescriptor fRefreshIconDescriptor = getImageDescriptor ( "icons/refresh.gif" ) ; private static ImageDescriptor fEditIconDescriptor = getImageDescriptor ( "icons/pencil.png" ) ; private static Image fErrIcon = getImageDescriptor ( "icons/error.gif" ) . createImage ( ) ; private static Image fProfileIcon = getImageDescriptor ( "icons/profile.gif" ) . createImage ( ) ; private static Image fProfileDynamicIcon = getImageDescriptor ( "icons/profile-dynamic.gif" ) . createImage ( ) ; private TreeViewer viewer ; private StackLayout layout ; private Composite viewParent ; private Label infoLabel ; private Font infoLabelFont ; private static ImageRegistry imageRegistry = new ImageRegistry ( ) ; private org . eclipse . jface . action . Action actionNewActionSet ; private org . eclipse . jface . action . Action actionAdd ; private org . eclipse . jface . action . Action actionEdit ; private org . eclipse . jface . action . Action actionReload ; private Action actionCollapseAll ; private Action actionRefresh ; private org . eclipse . jface . action . Action actionDelete ; private org . eclipse . jface . action . Action actionDoubleClick ; private org . eclipse . jface . action . Action actionAddCurrentFile ; private org . eclipse . jface . action . Action actionExecute ; private org . eclipse . jface . action . Action actionMakeExecutable ; private ArrayList listeners = new ArrayList ( ) ; private Pattern submenu_pattern = Pattern . compile ( "^(.+?)>(.*)$" ) ; private ScriptActionsManager _scriptActionsManager ; public ScriptsView ( ) { _scriptActionsManager = ScriptActionsManager . getInstance ( ) ; } public void fireActionsViewEvent ( ScriptActionsViewEvent e ) { for ( int i = 0 ; i < listeners . size ( ) ; i ++ ) { IScriptActionsViewEventListener listener = ( IScriptActionsViewEventListener ) listeners . get ( i ) ; listener . onScriptActionsViewEvent ( e ) ; } } public void addScriptsViewEventListener ( IScriptActionsViewEventListener l ) { listeners . add ( l ) ; } public void removeScriptsViewEventListener ( IScriptActionsViewEventListener l ) { listeners . remove ( l ) ; } class ScriptsViewContentProvider implements ITreeContentProvider { public void inputChanged ( Viewer v , Object oldInput , Object newInput ) { } public void dispose ( ) { } public Object [ ] getElements ( Object parent ) { updateActionSets ( ) ; IScriptAction [ ] actions = _scriptActionsManager . getAll ( ) ; if ( actions != null && actions . length > 0 ) { if ( layout != null && infoLabel != null && viewParent != null && layout . topControl == infoLabel ) { layout . topControl = viewer . getControl ( ) ; viewParent . layout ( ) ; } return actions ; } if ( layout != null && infoLabel != null && viewParent != null ) { layout . topControl = infoLabel ; viewParent . layout ( ) ; } return new Object [ 0 ] ; } public Object [ ] getChildren ( Object parentElement ) { if ( parentElement instanceof ScriptActionSet ) { ScriptActionSet actionSet = ( ScriptActionSet ) parentElement ; ScriptAction [ ] actions = actionSet . getScriptActions ( ) ; return actions ; } else { return new Object [ 0 ] ; } } public Object getParent ( Object element ) { if ( element instanceof ScriptAction ) { return ( ( ScriptAction ) element ) . getParent ( ) ; } else { return null ; } } public boolean hasChildren ( Object element ) { if ( element instanceof ScriptActionSet ) { ScriptActionSet actionSet = ( ScriptActionSet ) element ; return actionSet . getScriptActions ( ) . length > 0 ; } else { return false ; } } } class ScriptsViewSorterProvider extends ViewerSorter { public int category ( Object element ) { if ( element instanceof ScriptAction ) { return 0 ; } else { return 1 ; } } public int compare ( Viewer viewer , Object e1 , Object e2 ) { int cat1 = category ( e1 ) ; int cat2 = category ( e2 ) ; if ( cat1 == cat2 ) { IScriptAction action1 = ( IScriptAction ) e1 ; IScriptAction action2 = ( IScriptAction ) e2 ; return action1 . getName ( ) . compareTo ( action2 . getName ( ) ) ; } else { return cat1 - cat2 ; } } } class ScriptsViewLabelProvider extends LabelProvider { public String getText ( Object element ) { if ( element instanceof IScriptAction ) { IScriptAction profile = ( IScriptAction ) element ; return profile . getName ( ) ; } else { return null ; } } public Image getImage ( Object obj ) { if ( obj instanceof ScriptActionSet ) { ScriptActionSet set = ( ScriptActionSet ) obj ; if ( set . isExecutable ( ) ) { return fProfileDynamicIcon ; } else { return fProfileIcon ; } } else if ( obj instanceof ScriptAction ) { ScriptAction action = ( ScriptAction ) obj ; IPath scriptPath = action . getStoredScript ( ) . metadata . getPath ( ) ; String imagePath = action . getStoredScript ( ) . metadata . getImage ( ) ; if ( imagePath != null ) { return getImageFromMetadata ( scriptPath , imagePath ) ; } else { return fProfileFileIcon ; } } else { return null ; } } } private Image getImageFromMetadata ( IPath scriptPath , String imagePath ) { IPath newPath = scriptPath . removeLastSegments ( 1 ) . append ( imagePath ) ; String absolutePath = newPath . toFile ( ) . getAbsolutePath ( ) ; Image i = imageRegistry . get ( absolutePath ) ; if ( i == null ) { ImageDescriptor id = ImageDescriptor . createFromFile ( null , absolutePath ) ; if ( id != null ) { imageRegistry . put ( absolutePath , id ) ; i = imageRegistry . get ( absolutePath ) ; } } return i ; } public void storeChanged ( ) { Display display = viewer . getControl ( ) . getDisplay ( ) ; if ( ! display . isDisposed ( ) ) { display . asyncExec ( new Runnable ( ) { public void run ( ) { if ( viewer . getControl ( ) . isDisposed ( ) ) return ; viewer . refresh ( ) ; } } ) ; } } private void updateActionSets ( ) { ArrayList foundItems = new ArrayList ( ) ; Map scriptStore = EclipseMonkeyPlugin . getDefault ( ) . getScriptStore ( ) ; Object [ ] scripts = scriptStore . values ( ) . toArray ( ) ; for ( int i = 0 ; i < scripts . length ; i ++ ) { if ( scripts [ i ] instanceof StoredScript ) { StoredScript s = ( StoredScript ) scripts [ i ] ; if ( s . metadata == null || s . metadata . getMenuName ( ) == null ) continue ; String menuName = s . metadata . getMenuName ( ) . trim ( ) ; foundItems . add ( menuName ) ; Matcher match = submenu_pattern . matcher ( menuName ) ; if ( match . find ( ) ) { String primary_key = match . group ( 1 ) . trim ( ) ; String secondary_key = match . group ( 2 ) . trim ( ) ; ScriptActionSet as = _scriptActionsManager . createScriptActionSet ( primary_key ) ; as . addScriptAction ( secondary_key , s ) ; } else { _scriptActionsManager . addScriptAction ( menuName , s ) ; } } } pruneUnusedActions ( foundItems ) ; } private void pruneUnusedActions ( ArrayList foundItems ) { ScriptAction [ ] actions = _scriptActionsManager . getScriptActions ( ) ; ScriptActionSet [ ] sets = _scriptActionsManager . getScriptActionSets ( ) ; for ( int i = 0 ; i < actions . length ; i ++ ) { String name = actions [ i ] . getStoredScript ( ) . metadata . getMenuName ( ) ; if ( foundItems . contains ( name ) == false ) _scriptActionsManager . removeScriptAction ( actions [ i ] ) ; } for ( int i = 0 ; i < sets . length ; i ++ ) { actions = sets [ i ] . getScriptActions ( ) ; for ( int j = 0 ; j < actions . length ; j ++ ) { String name = actions [ j ] . getStoredScript ( ) . metadata . getMenuName ( ) ; if ( foundItems . contains ( name ) == false ) _scriptActionsManager . removeScriptActionSet ( name ) ; } } } public void dispose ( ) { if ( infoLabelFont != null ) { infoLabelFont . dispose ( ) ; } if ( fErrIcon != null ) { fErrIcon . dispose ( ) ; } if ( imageRegistry != null ) { imageRegistry . dispose ( ) ; } EclipseMonkeyPlugin . getDefault ( ) . removeScriptStoreListener ( this ) ; } public void createPartControl ( Composite parent ) { layout = new StackLayout ( ) ; parent . setLayout ( layout ) ; viewer = new TreeViewer ( new Tree ( parent , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL ) ) ; viewer . setContentProvider ( new ScriptsViewContentProvider ( ) ) ; viewer . setLabelProvider ( new ScriptsViewLabelProvider ( ) ) ; viewer . setSorter ( new ScriptsViewSorterProvider ( ) ) ; viewer . setInput ( getViewSite ( ) ) ; viewer . expandAll ( ) ; infoLabel = new Label ( parent , SWT . CENTER ) ; infoLabel . setBackground ( parent . getDisplay ( ) . getSystemColor ( SWT . COLOR_WHITE ) ) ; infoLabelFont = new Font ( parent . getDisplay ( ) , Messages . ScriptsView_FNT_Aptana_scripts_view , 14 , SWT . NONE ) ; infoLabel . setFont ( infoLabelFont ) ; infoLabel . setForeground ( parent . getDisplay ( ) . getSystemColor ( SWT . COLOR_GRAY ) ) ; infoLabel . setText ( INFO_MESSAGE ) ; layout . topControl = infoLabel ; layout . topControl = viewer . getControl ( ) ; viewParent = parent ; viewParent . layout ( ) ; final DropTarget labeldt = new DropTarget ( infoLabel , DND . DROP_MOVE ) ; labeldt . setTransfer ( new Transfer [ ] { FileTransfer . getInstance ( ) } ) ; labeldt . addDropListener ( new DropTargetAdapter ( ) { public void drop ( DropTargetEvent event ) { handleDrop ( event ) ; } } ) ; DropTarget dt = new DropTarget ( viewer . getControl ( ) , DND . DROP_MOVE ) ; dt . setTransfer ( new Transfer [ ] { FileTransfer . getInstance ( ) } ) ; dt . addDropListener ( new DropTargetAdapter ( ) { public void drop ( DropTargetEvent event ) { handleDrop ( event ) ; } } ) ; makeActions ( ) ; hookKeyActions ( viewer . getControl ( ) ) ; hookContextMenu ( ) ; hookDoubleClickAction ( ) ; contributeToActionBars ( ) ; EclipseMonkeyPlugin . getDefault ( ) . addScriptStoreListener ( this ) ; PreferenceUtils . registerBackgroundColorPreference ( viewer . getControl ( ) , "com.aptana.ide.core.ui.background.color.scriptsView" ) ; PreferenceUtils . registerForegroundColorPreference ( viewer . getControl ( ) , "com.aptana.ide.core.ui.foreground.color.scriptsView" ) ; } protected void handleDrop ( DropTargetEvent event ) { String [ ] files = ( String [ ] ) event . data ; ArrayList paths = new ArrayList ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { paths . add ( new Path ( files [ i ] ) ) ; } if ( paths . size ( ) > 0 ) { IPath [ ] ipaths = ( IPath [ ] ) paths . toArray ( new IPath [ 0 ] ) ; ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . DROP ) ; e . setPaths ( ipaths ) ; Widget w = event . item ; if ( w != null ) { TreeItem item = ( TreeItem ) w ; Object element = item . getData ( ) ; IScriptAction action = null ; if ( element instanceof ScriptActionSet ) { action = ( ScriptActionSet ) element ; } else if ( element instanceof ScriptAction ) { action = ( ( ScriptAction ) element ) . getParent ( ) ; } if ( action != null ) { e . setName ( action . getName ( ) ) ; } } fireActionsViewEvent ( e ) ; } } private void hookContextMenu ( ) { MenuManager menuMgr = new MenuManager ( "#PopupMenu" ) ; menuMgr . setRemoveAllWhenShown ( true ) ; menuMgr . addMenuListener ( new IMenuListener ( ) { public void menuAboutToShow ( IMenuManager manager ) { ISelection selection = viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; ScriptsView . this . fillContextMenu ( manager , firstElement ) ; } } ) ; Menu menu = menuMgr . createContextMenu ( viewer . getControl ( ) ) ; viewer . getControl ( ) . setMenu ( menu ) ; getSite ( ) . registerContextMenu ( menuMgr , viewer ) ; } private void contributeToActionBars ( ) { IActionBars bars = getViewSite ( ) . getActionBars ( ) ; fillLocalPullDown ( bars . getMenuManager ( ) ) ; fillLocalToolBar ( bars . getToolBarManager ( ) ) ; } private void fillLocalPullDown ( IMenuManager manager ) { } private void fillContextMenu ( IMenuManager manager , Object element ) { if ( element instanceof ScriptActionSet ) { ScriptActionSet set = ( ScriptActionSet ) element ; if ( set . isExecutable ( ) ) { manager . add ( actionExecute ) ; } manager . add ( actionMakeExecutable ) ; } else { manager . add ( actionExecute ) ; } manager . add ( new Separator ( ) ) ; if ( element instanceof ScriptActionSet == false ) { manager . add ( actionEdit ) ; } manager . add ( new Separator ( IWorkbenchActionConstants . MB_ADDITIONS ) ) ; } private void fillLocalToolBar ( IToolBarManager manager ) { manager . add ( actionEdit ) ; manager . add ( actionCollapseAll ) ; manager . add ( actionRefresh ) ; } class PushButtonAction extends Action { public PushButtonAction ( String text ) { super ( text , Action . AS_PUSH_BUTTON ) ; } } private void makeActions ( ) { actionRefresh = new PushButtonAction ( Messages . ScriptsView_LBL_Refresh ) { public void run ( ) { _scriptActionsManager . clearAll ( ) ; viewer . refresh ( ) ; } } ; actionRefresh . setToolTipText ( Messages . ScriptsView_TTP_Refresh ) ; actionRefresh . setImageDescriptor ( fRefreshIconDescriptor ) ; actionMakeExecutable = new org . eclipse . jface . action . Action ( ) { public void run ( ) { ISelection selection = viewer . getSelection ( ) ; if ( selection != null && selection instanceof IStructuredSelection ) { IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; Object element = structuredSelection . getFirstElement ( ) ; if ( element instanceof ScriptActionSet ) { if ( ( ( ScriptActionSet ) element ) . isExecutable ( ) ) { ( ( ScriptActionSet ) element ) . setExecutable ( false ) ; } else { ( ( ScriptActionSet ) element ) . setExecutable ( true ) ; } viewer . refresh ( ) ; } } } } ; actionMakeExecutable . setText ( Messages . ScriptsView_LBL_Toggle_executable ) ; actionMakeExecutable . setToolTipText ( Messages . ScriptsView_TTP_Toggle_executable ) ; actionExecute = new org . eclipse . jface . action . Action ( ) { public void run ( ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . EXECUTE ) ; ISelection selection = viewer . getSelection ( ) ; if ( selection != null && selection instanceof IStructuredSelection ) { IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; Object element = structuredSelection . getFirstElement ( ) ; IScriptAction [ ] actions ; if ( element instanceof ScriptAction ) { actions = new IScriptAction [ ] { ( IScriptAction ) element } ; executeScript ( ( ScriptAction ) element ) ; } else if ( element instanceof ScriptActionSet ) { actions = ( ( ScriptActionSet ) element ) . getScriptActions ( ) ; for ( int i = 0 ; i < actions . length ; i ++ ) { executeScript ( actions [ i ] ) ; } } else { actions = new IScriptAction [ 0 ] ; } e . setActions ( actions ) ; } fireActionsViewEvent ( e ) ; } } ; actionExecute . setText ( Messages . ScriptsView_LBL_Execute ) ; actionExecute . setToolTipText ( Messages . ScriptsView_TTP_Execute ) ; actionAddCurrentFile = new org . eclipse . jface . action . Action ( ) { public void run ( ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . ADD_CURRENT_FILE ) ; ISelection selection = viewer . getSelection ( ) ; if ( selection != null ) { Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof ScriptActionSet ) { e . setName ( ( ( ScriptActionSet ) firstElement ) . getName ( ) ) ; } } fireActionsViewEvent ( e ) ; } } ; actionAddCurrentFile . setText ( Messages . ScriptsView_LBL_Add_current_file ) ; actionAddCurrentFile . setToolTipText ( Messages . ScriptsView_TTP_Add_current_file ) ; actionNewActionSet = new org . eclipse . jface . action . Action ( ) { public void run ( ) { InputDialog input = new InputDialog ( getSite ( ) . getShell ( ) , Messages . ScriptsView_TTL_New_action_set_name , Messages . ScriptsView_MSG_New_action_set_name , org . eclipse . eclipsemonkey . utils . StringUtils . EMPTY , null ) ; if ( input . open ( ) == Window . OK && input . getValue ( ) . length ( ) > 0 ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . CREATE_ACTION_SET ) ; e . setName ( input . getValue ( ) ) ; fireActionsViewEvent ( e ) ; } } } ; actionNewActionSet . setText ( Messages . ScriptsView_LBL_New_script_set ) ; actionNewActionSet . setToolTipText ( Messages . ScriptsView_TTP_New_script_set ) ; actionNewActionSet . setImageDescriptor ( fAddFileIconDescriptor ) ; actionEdit = new org . eclipse . jface . action . Action ( ) { public void run ( ) { ISelection selection = viewer . getSelection ( ) ; if ( selection != null ) { Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof ScriptAction ) { ScriptAction a = ( ScriptAction ) firstElement ; editAction ( a ) ; } } } } ; actionEdit . setText ( Messages . ScriptsView_LBL_Edit_script ) ; actionEdit . setToolTipText ( Messages . ScriptsView_TTP_Edit_script ) ; actionEdit . setImageDescriptor ( fEditIconDescriptor ) ; actionReload = new org . eclipse . jface . action . Action ( ) { public void run ( ) { ISelection selection = viewer . getSelection ( ) ; if ( selection != null ) { Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof ScriptAction ) { ScriptAction a = ( ScriptAction ) firstElement ; reloadAction ( a ) ; } } } } ; actionReload . setText ( Messages . ScriptsView_LBL_Reload_script ) ; actionReload . setToolTipText ( Messages . ScriptsView_TTP_Reload_script ) ; actionAdd = new org . eclipse . jface . action . Action ( ) { public void run ( ) { FileDialog fileDialog = new FileDialog ( viewer . getControl ( ) . getShell ( ) , SWT . MULTI ) ; fileDialog . setFilterExtensions ( FILTER_EXTENSIONS ) ; fileDialog . setFilterNames ( FILTER_NAMES ) ; String text = fileDialog . open ( ) ; if ( text != null ) { IPath basePath = new Path ( fileDialog . getFilterPath ( ) ) ; String [ ] fileNames = fileDialog . getFileNames ( ) ; IPath [ ] paths = new IPath [ fileNames . length ] ; for ( int i = 0 ; i < paths . length ; i ++ ) { paths [ i ] = basePath . append ( fileNames [ i ] ) ; } ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . ADD ) ; e . setPaths ( paths ) ; fireActionsViewEvent ( e ) ; } } } ; actionAdd . setText ( Messages . ScriptsView_LBL_Add_file ) ; actionAdd . setToolTipText ( Messages . ScriptsView_TTP_Add_file ) ; actionAdd . setImageDescriptor ( fAddFileIconDescriptor ) ; actionDelete = new org . eclipse . jface . action . Action ( ) { public void run ( ) { removeFiles ( viewer . getSelection ( ) ) ; } } ; actionDelete . setText ( Messages . ScriptsView_LBL_Remove_file ) ; actionDelete . setToolTipText ( Messages . ScriptsView_TTP_Remove_file ) ; actionDelete . setImageDescriptor ( PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_TOOL_DELETE ) ) ; actionDoubleClick = new org . eclipse . jface . action . Action ( ) { public void run ( ) { ISelection selection = viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof ScriptActionSet ) { toggleElementState ( firstElement ) ; } else if ( firstElement instanceof IScriptAction ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . EXECUTE ) ; IScriptAction [ ] actions = new IScriptAction [ ] { ( IScriptAction ) firstElement } ; e . setActions ( actions ) ; fireActionsViewEvent ( e ) ; executeScript ( ( ScriptAction ) firstElement ) ; } } } ; this . actionCollapseAll = new Action ( Messages . ScriptsView_LBL_Collapse_all ) { public void run ( ) { if ( viewer != null ) { viewer . collapseAll ( ) ; } } } ; this . actionCollapseAll . setToolTipText ( Messages . ScriptsView_TTP_Collapse_all ) ; this . actionCollapseAll . setImageDescriptor ( getImageDescriptor ( "icons/collapseall.gif" ) ) ; } private void executeScript ( IScriptAction script ) { MenuRunMonkeyScript run = new MenuRunMonkeyScript ( script . getStoredScript ( ) . scriptPath ) ; try { run . run ( "main" , new Object [ ] { } ) ; } catch ( RunMonkeyException e1 ) { e1 . printStackTrace ( ) ; } } private void toggleElementState ( Object element ) { boolean state = viewer . getExpandedState ( element ) ; if ( state ) { viewer . setExpandedState ( element , false ) ; } else { viewer . setExpandedState ( element , true ) ; } } private void removeFiles ( ISelection selection ) { if ( ! ( selection instanceof StructuredSelection ) ) { return ; } Object o = ( ( StructuredSelection ) selection ) . getFirstElement ( ) ; if ( o == null ) { return ; } if ( o instanceof ScriptActionSet ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . DELETE_ACTION_SET ) ; e . setName ( ( ( ScriptActionSet ) o ) . getName ( ) ) ; fireActionsViewEvent ( e ) ; } else { ArrayList actionsList = new ArrayList ( ) ; for ( Iterator iter = ( ( StructuredSelection ) selection ) . iterator ( ) ; iter . hasNext ( ) ; ) { actionsList . add ( iter . next ( ) ) ; } ScriptAction [ ] actions = ( ScriptAction [ ] ) actionsList . toArray ( new ScriptAction [ 0 ] ) ; if ( actions . length > 0 ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . DELETE ) ; e . setActions ( actions ) ; fireActionsViewEvent ( e ) ; } } } private void hookDoubleClickAction ( ) { viewer . addDoubleClickListener ( new IDoubleClickListener ( ) { public void doubleClick ( DoubleClickEvent event ) { actionDoubleClick . run ( ) ; } } ) ; } private void hookKeyActions ( Control control ) { control . addKeyListener ( new KeyListener ( ) { public void keyPressed ( KeyEvent e ) { if ( e . character == SWT . DEL ) { removeFiles ( viewer . getSelection ( ) ) ; } } public void keyReleased ( KeyEvent e ) { } } ) ; } public void setFocus ( ) { viewer . getControl ( ) . setFocus ( ) ; } private static ImageDescriptor getImageDescriptor ( String imageFilePath ) { ImageDescriptor imageDescriptor = AbstractUIPlugin . imageDescriptorFromPlugin ( "org.eclipse.eclipsemonkey.ui" , imageFilePath ) ; if ( imageDescriptor == null ) { imageDescriptor = ImageDescriptor . getMissingImageDescriptor ( ) ; } return imageDescriptor ; } public void expandAll ( ) { this . viewer . expandAll ( ) ; } public void expandScriptActionSet ( String setName ) { TreeItem [ ] treeItems = viewer . getTree ( ) . getItems ( ) ; for ( int i = 0 ; i < treeItems . length ; i ++ ) { Object o = treeItems [ i ] . getData ( ) ; if ( o instanceof ScriptActionSet ) { ScriptActionSet p = ( ScriptActionSet ) o ; String name = p . getName ( ) ; if ( name . equals ( setName ) ) { viewer . setExpandedState ( o , true ) ; viewer . getTree ( ) . showItem ( treeItems [ i ] ) ; return ; } } } } public void selectAndReveal ( String actionPath ) { IScriptAction a = findAction ( actionPath ) ; if ( a != null && a instanceof ScriptAction ) { selectAndReveal ( ( ScriptAction ) a ) ; } } public void selectAndReveal ( ScriptAction action ) { TreeItem [ ] treeItems = viewer . getTree ( ) . getItems ( ) ; forcePopulateTree ( ) ; for ( int i = 0 ; i < treeItems . length ; i ++ ) { Object o = treeItems [ i ] . getData ( ) ; if ( o instanceof ScriptActionSet ) { TreeItem [ ] children = treeItems [ i ] . getItems ( ) ; for ( int j = 0 ; j < children . length ; j ++ ) { IScriptAction a = ( IScriptAction ) children [ j ] . getData ( ) ; if ( a == action ) { viewer . getTree ( ) . showItem ( children [ j ] ) ; viewer . getTree ( ) . setSelection ( new TreeItem [ ] { children [ j ] } ) ; return ; } } } else if ( o instanceof ScriptAction ) { ScriptAction a = ( ScriptAction ) o ; if ( a == action ) { viewer . getTree ( ) . showItem ( treeItems [ i ] ) ; viewer . getTree ( ) . setSelection ( new TreeItem [ ] { treeItems [ i ] } ) ; return ; } } } } public void forcePopulateTree ( ) { viewer . getTree ( ) . setVisible ( false ) ; Object [ ] expandedElement = viewer . getExpandedElements ( ) ; viewer . expandAll ( ) ; viewer . setExpandedElements ( expandedElement ) ; viewer . getTree ( ) . setVisible ( true ) ; } public ScriptActionSet findActionSet ( String name ) { ScriptActionSet result = null ; TreeItem [ ] treeItems = viewer . getTree ( ) . getItems ( ) ; for ( int i = 0 ; i < treeItems . length ; i ++ ) { Object itemData = treeItems [ i ] . getData ( ) ; if ( itemData instanceof ScriptActionSet ) { ScriptActionSet actionSet = ( ScriptActionSet ) itemData ; if ( actionSet . getName ( ) . equals ( name ) ) { result = actionSet ; break ; } } } return result ; } public ScriptAction findAction ( String path ) { ScriptAction result = null ; if ( path != null && path . length ( ) > 0 && path . charAt ( 0 ) == '/' ) { int slashIndex = path . indexOf ( '/' , 1 ) ; if ( slashIndex != - 1 ) { String actionSetName = path . substring ( 1 , slashIndex ) ; String actionName = path . substring ( slashIndex + 1 ) ; ScriptActionSet actionSet = findActionSet ( actionSetName ) ; if ( actionSet != null ) { ScriptAction [ ] actions = actionSet . getScriptActions ( ) ; for ( int i = 0 ; i < actions . length ; i ++ ) { ScriptAction action = actions [ i ] ; if ( action . getName ( ) . equals ( actionName ) ) { result = action ; break ; } } } } } return result ; } public void fireAction ( String actionName ) { IScriptAction action = findAction ( actionName ) ; if ( action != null ) { ScriptActionsViewEvent actionEvent = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . EXECUTE ) ; IScriptAction [ ] actions = new IScriptAction [ ] { action } ; actionEvent . setActions ( actions ) ; fireActionsViewEvent ( actionEvent ) ; } } public void refresh ( ) { this . viewer . refresh ( ) ; } public void editAction ( String path ) { editAction ( findAction ( path ) ) ; } private void editAction ( final IScriptAction a ) { if ( a == null ) { return ; } IWorkbenchPage page = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; IEditorDescriptor editorDesc = null ; File f = a . getStoredScript ( ) . metadata . getPath ( ) . toFile ( ) ; try { editorDesc = IDE . getEditorDescriptor ( f . getName ( ) ) ; if ( editorDesc . isOpenExternal ( ) == true ) { editorDesc = IDE . getEditorDescriptor ( "foo.txt" ) ; } } catch ( PartInitException e ) { System . err . println ( "Error opening file in editor: " + e ) ; } try { IDE . openEditor ( page , UIUtils . createJavaFileEditorInput ( f ) , editorDesc . getId ( ) ) ; } catch ( PartInitException e ) { System . err . println ( "Error opening editor: " + e ) ; } } private void reloadAction ( final IScriptAction a ) { ScriptActionsViewEvent e = new ScriptActionsViewEvent ( ScriptActionsViewEventTypes . RELOAD ) ; e . setActions ( new IScriptAction [ ] { a } ) ; fireActionsViewEvent ( e ) ; } } 
=======
public class Preferences extends PreferenceActivity { private static final int MENU_RESTORE_DEFAULTS = 0 ; public void onCreate ( Bundle icicle ) { super . onCreate ( icicle ) ; addPreferencesFromResource ( R . xml . preferences ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu . clear ( ) ; menu . add ( 0 , MENU_RESTORE_DEFAULTS , 0 , R . string . menu_restore_defaults ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_RESTORE_DEFAULTS : restoreDefaultPreferences ( ) ; return true ; } return false ; } private void restoreDefaultPreferences ( ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . clear ( ) . commit ( ) ; setPreferenceScreen ( null ) ; addPreferencesFromResource ( R . xml . preferences ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
