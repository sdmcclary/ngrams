<<<<<<< HEAD
public class MysqliModule extends AbstractQuercusModule { private static final Logger log = Log . open ( MysqliModule . class ) ; private static final L10N L = new L10N ( MysqliModule . class ) ; public static final int MYSQLI_ASSOC = JdbcResultResource . FETCH_ASSOC ; public static final int MYSQLI_NUM = JdbcResultResource . FETCH_NUM ; public static final int MYSQLI_BOTH = JdbcResultResource . FETCH_BOTH ; public static final int MYSQLI_USE_RESULT = 0x0 ; public static final int MYSQLI_STORE_RESULT = 0x1 ; public static final int NOT_NULL_FLAG = 0x1 ; public static final int PRI_KEY_FLAG = 0x2 ; public static final int UNIQUE_KEY_FLAG = 0x4 ; public static final int MULTIPLE_KEY_FLAG = 0x8 ; public static final int BLOB_FLAG = 0x10 ; public static final int UNSIGNED_FLAG = 0x20 ; public static final int ZEROFILL_FLAG = 0x40 ; public static final int BINARY_FLAG = 0x80 ; public static final int ENUM_FLAG = 0x100 ; public static final int AUTO_INCREMENT_FLAG = 0x200 ; public static final int TIMESTAMP_FLAG = 0x400 ; public static final int SET_FLAG = 0x800 ; public static final int NUM_FLAG = 0x8000 ; public static final int PART_KEY_FLAG = 0x4000 ; public static final int GROUP_FLAG = 0x8000 ; public static final int UNIQUE_FLAG = 0x10000 ; public static final int BINCMP_FLAG = 0x20000 ; public static final int MYSQLI_TYPE_DECIMAL = 0x0 ; public static final int MYSQLI_TYPE_TINY = 0x1 ; public static final int MYSQLI_TYPE_SHORT = 0x2 ; public static final int MYSQLI_TYPE_LONG = 0x3 ; public static final int MYSQLI_TYPE_FLOAT = 0x4 ; public static final int MYSQLI_TYPE_DOUBLE = 0x5 ; public static final int MYSQLI_TYPE_NULL = 0x6 ; public static final int MYSQLI_TYPE_TIMESTAMP = 0x7 ; public static final int MYSQLI_TYPE_LONGLONG = 0x8 ; public static final int MYSQLI_TYPE_INT24 = 0x9 ; public static final int MYSQLI_TYPE_DATE = 0xA ; public static final int MYSQLI_TYPE_TIME = 0xB ; public static final int MYSQLI_TYPE_DATETIME = 0xC ; public static final int MYSQLI_TYPE_YEAR = 0xD ; public static final int MYSQLI_TYPE_NEWDATE = 0xE ; public static final int MYSQLI_TYPE_BIT = 0x10 ; public static final int MYSQLI_TYPE_NEWDECIMAL = 0xF6 ; public static final int MYSQLI_TYPE_ENUM = 0xF7 ; public static final int MYSQLI_TYPE_SET = 0xF8 ; public static final int MYSQLI_TYPE_TINY_BLOB = 0xF9 ; public static final int MYSQLI_TYPE_MEDIUM_BLOB = 0xFA ; public static final int MYSQLI_TYPE_LONG_BLOB = 0xFB ; public static final int MYSQLI_TYPE_BLOB = 0xFC ; public static final int MYSQLI_TYPE_VAR_STRING = 0xFD ; public static final int MYSQLI_TYPE_STRING = 0xFE ; public static final int MYSQLI_TYPE_GEOMETRY = 0xFF ; public static final int MYSQLI_TYPE_CHAR = MYSQLI_TYPE_TINY ; public static final int MYSQLI_TYPE_INTERVAL = MYSQLI_TYPE_ENUM ; public static final int MYSQL_CLIENT_COMPRESS = ( 1 << 5 ) ; public static final int MYSQL_CLIENT_IGNORE_SPACE = ( 1 << 8 ) ; public static final int MYSQL_CLIENT_INTERACTIVE = ( 1 << 10 ) ; public static final int MYSQL_CLIENT_SSL = ( 1 << 11 ) ; public static final int MYSQLI_READ_DEFAULT_GROUP = 0x0 ; public static final int MYSQLI_READ_DEFAULT_FILE = 0x1 ; public static final int MYSQLI_OPT_CONNECT_TIMEOUT = 0x2 ; public static final int MYSQLI_OPT_LOCAL_INFILE = 0x3 ; public static final int MYSQLI_INIT_COMMAND = 0x4 ; public MysqliModule ( ) { } public String [ ] getLoadedExtensions ( ) { return new String [ ] { "mysqli" } ; } public static int mysqli_affected_rows ( @ NotNull Mysqli conn ) { if ( conn == null ) return - 1 ; return conn . affected_rows ( ) ; } public static boolean mysqli_autocommit ( @ NotNull Mysqli conn , boolean mode ) { if ( conn == null ) return false ; return conn . autocommit ( mode ) ; } public static boolean mysqli_bind_param ( Env env , @ NotNull MysqliStatement stmt , StringValue types , @ Reference Value [ ] params ) { return mysqli_stmt_bind_param ( env , stmt , types , params ) ; } public static boolean mysqli_commit ( @ NotNull Mysqli conn ) { if ( conn == null ) return false ; return conn . commit ( ) ; } public static Value mysqli_character_set_name ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return conn . character_set_name ( env ) ; } public static Value mysqli_client_encoding ( Env env , @ NotNull Mysqli conn ) { return mysqli_character_set_name ( env , conn ) ; } public static boolean mysqli_close ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return false ; else if ( ! conn . isConnected ( ) ) { env . warning ( L . l ( "no MySQLi-Link resource supplied" ) ) ; return false ; } return conn . close ( env ) ; } @ ReturnNullAsFalse public static Mysqli mysqli_connect ( Env env , @ Optional ( "localhost" ) StringValue host , @ Optional StringValue userName , @ Optional StringValue password , @ Optional String dbname , @ Optional ( "3306" ) int port , @ Optional StringValue socket ) throws IllegalStateException { Mysqli mysqli = new Mysqli ( env , host , userName , password , dbname , port , socket ) ; if ( ! mysqli . isConnected ( ) ) return null ; return mysqli ; } public static int mysqli_connect_errno ( Env env ) { Value value = ( Value ) env . getSpecialValue ( "mysqli.connectErrno" ) ; if ( value != null ) return value . toInt ( ) ; else return 0 ; } public static StringValue mysqli_connect_error ( Env env ) { Object error = env . getSpecialValue ( "mysqli.connectError" ) ; if ( error != null ) return env . createString ( error . toString ( ) , "UTF-8" ) ; else return env . getEmptyString ( ) ; } public static Value mysqli_data_seek ( Env env , @ NotNull MysqliResult result , int rowNumber ) { if ( result == null ) return NullValue . NULL ; if ( result . seek ( env , rowNumber ) ) { return BooleanValue . TRUE ; } else { env . warning ( L . l ( "Offset {0} is invalid for MySQL (or the query data is unbuffered)" , rowNumber ) ) ; return BooleanValue . FALSE ; } } public static Value mysqli_errno ( @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return LongValue . create ( conn . errno ( ) ) ; } public static Value mysqli_escape_string ( Env env , @ NotNull Mysqli conn , StringValue unescapedString ) { return mysqli_real_escape_string ( env , conn , unescapedString ) ; } public static Value mysqli_fetch ( Env env , MysqliStatement stmt ) { return mysqli_stmt_fetch ( env , stmt ) ; } public static Value mysqli_fetch_field_direct ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { if ( result == null ) return BooleanValue . FALSE ; return result . fetch_field_direct ( env , fieldOffset ) ; } public static Value mysqli_fetch_field ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return BooleanValue . FALSE ; return result . fetch_field ( env ) ; } public static Value mysqli_fetch_fields ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return BooleanValue . FALSE ; return result . fetch_fields ( env ) ; } public static Value mysqli_fetch_lengths ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return NullValue . NULL ; return result . fetch_lengths ( ) ; } public static boolean mysqli_field_seek ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { if ( result == null ) return false ; return result . field_seek ( env , fieldOffset ) ; } public static int mysqli_field_tell ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return - 1 ; return result . field_tell ( env ) ; } public static boolean mysqli_free_result ( @ NotNull MysqliResult result ) { if ( result == null ) return false ; result . close ( ) ; return true ; } public static Value mysqli_insert_id ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return BooleanValue . FALSE ; return conn . insert_id ( env ) ; } public static Value mysqli_num_fields ( @ NotNull MysqliResult result ) { if ( result == null ) return NullValue . NULL ; return LongValue . create ( result . num_fields ( ) ) ; } public static boolean mysqli_multi_query ( Env env , @ NotNull Mysqli conn , StringValue query ) { if ( conn == null ) return false ; return conn . multi_query ( env , query ) ; } public static boolean mysqli_more_results ( @ NotNull Mysqli conn ) { if ( conn == null ) return false ; return conn . more_results ( ) ; } public static boolean mysqli_next_result ( @ NotNull Mysqli conn ) { if ( conn == null ) return false ; return conn . next_result ( ) ; } public static int mysqli_stmt_errno ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return 0 ; return stmt . errno ( ) ; } public static StringValue mysqli_stmt_error ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return env . getEmptyString ( ) ; return stmt . error ( env ) ; } public static Value mysqli_error ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return conn . error ( env ) ; } public static int mysqli_field_count ( @ NotNull Mysqli conn ) { if ( conn == null ) return 0 ; return conn . field_count ( ) ; } @ ReturnNullAsFalse public static ArrayValue mysqli_fetch_array ( Env env , @ NotNull MysqliResult result , @ Optional ( "MYSQLI_BOTH" ) int type ) { if ( result == null ) return null ; return result . fetch_array ( env , type ) ; } @ ReturnNullAsFalse public static ArrayValue mysqli_fetch_assoc ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return null ; return result . fetch_assoc ( env ) ; } public static ArrayValue mysqli_fetch_row ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return null ; return result . fetch_row ( env ) ; } public static Value mysqli_fetch_object ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return NullValue . NULL ; return result . fetch_object ( env ) ; } public static StringValue mysqli_get_client_info ( Env env ) { return Mysqli . getClientInfo ( env ) ; } public static int mysqli_get_client_version ( Env env ) { return Mysqli . infoToVersion ( mysqli_get_client_info ( env ) . toString ( ) ) ; } public static Value mysqli_get_host_info ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return conn . get_host_info ( env ) ; } public static Value mysqli_get_proto_info ( @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return LongValue . create ( conn . get_proto_info ( ) ) ; } public static Value mysqli_get_server_info ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; if ( conn . isConnected ( ) ) return conn . get_server_info ( env ) ; else return NullValue . NULL ; } public static Value mysqli_get_server_version ( @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return LongValue . create ( conn . get_server_version ( ) ) ; } public static Value mysqli_num_rows ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return NullValue . NULL ; return LongValue . create ( result . num_rows ( ) ) ; } public static boolean mysqli_options ( @ NotNull Mysqli mysqli , int option , Value value ) { if ( mysqli == null ) return false ; return mysqli . options ( option , value ) ; } public static boolean mysqli_set_opt ( @ NotNull Mysqli mysqli , int option , Value value ) { return mysqli_options ( mysqli , option , value ) ; } public static int mysqli_param_count ( Env env , @ NotNull MysqliStatement stmt ) { return mysqli_stmt_param_count ( env , stmt ) ; } public static boolean mysqli_rollback ( @ NotNull Mysqli conn ) { if ( conn == null ) return false ; return conn . rollback ( ) ; } public static boolean mysqli_set_charset ( @ NotNull Mysqli mysqli , String charset ) { if ( mysqli == null ) return false ; return mysqli . set_charset ( charset ) ; } public static Value mysqli_stmt_num_rows ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return BooleanValue . FALSE ; return stmt . num_rows ( env ) ; } public static int mysqli_stmt_param_count ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return - 1 ; return stmt . param_count ( env ) ; } public static boolean mysqli_stmt_prepare ( Env env , @ NotNull MysqliStatement stmt , StringValue query ) { if ( stmt == null ) return false ; return stmt . prepare ( env , query ) ; } public static boolean mysqli_stmt_reset ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return false ; return stmt . reset ( env ) ; } @ ReturnNullAsFalse public static JdbcResultResource mysqli_stmt_result_metadata ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return null ; return stmt . result_metadata ( env ) ; } public static Value mysqli_sqlstate ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return NullValue . NULL ; return conn . sqlstate ( env ) ; } public static Value mysqli_stmt_sqlstate ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return NullValue . NULL ; return stmt . sqlstate ( env ) ; } public static boolean mysqli_stmt_store_result ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return false ; return stmt . store_result ( env ) ; } @ ReturnNullAsFalse public static JdbcResultResource mysqli_store_result ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return null ; return conn . store_result ( env ) ; } @ ReturnNullAsFalse public static JdbcResultResource mysqli_use_result ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return null ; return conn . use_result ( env ) ; } public static int mysqli_warning_count ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return 0 ; return conn . warning_count ( env ) ; } public static boolean mysqli_ping ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return false ; return conn . ping ( env ) ; } public static Value mysqli_query ( Env env , @ NotNull Mysqli conn , StringValue sql , @ Optional ( "MYSQLI_STORE_RESULT" ) int resultMode ) { Value value = query ( env , conn , sql ) ; if ( value == null ) { return BooleanValue . FALSE ; } return value ; } private static Value query ( Env env , Mysqli conn , StringValue sql ) { Value value = null ; try { value = conn . query ( env , sql , MYSQLI_STORE_RESULT ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } if ( value == null ) { return BooleanValue . FALSE ; } return value ; } public static boolean mysqli_real_connect ( Env env , @ NotNull Mysqli mysqli , @ Optional ( "localhost" ) StringValue host , @ Optional StringValue userName , @ Optional StringValue password , @ Optional StringValue dbname , @ Optional ( "3306" ) int port , @ Optional StringValue socket , @ Optional int flags ) { if ( mysqli == null ) return false ; return mysqli . real_connect ( env , host , userName , password , dbname , port , socket , flags ) ; } public static Value mysqli_real_escape_string ( Env env , @ NotNull Mysqli conn , StringValue unescapedString ) { if ( conn == null ) return NullValue . NULL ; if ( unescapedString . length ( ) == 0 ) return env . getEmptyString ( ) ; StringBuilder buf = new StringBuilder ( ) ; escapeString ( buf , unescapedString . toString ( ) ) ; return env . createString ( buf . toString ( ) , "UTF-8" ) ; } static void escapeString ( StringBuilder buf , String unescapedString ) { char c ; final int strLength = unescapedString . length ( ) ; for ( int i = 0 ; i < strLength ; i ++ ) { c = unescapedString . charAt ( i ) ; switch ( c ) { case ' ' : buf . append ( '\\' ) ; buf . append ( ' ' ) ; break ; case '\n' : buf . append ( '\\' ) ; buf . append ( 'n' ) ; break ; case '\r' : buf . append ( '\\' ) ; buf . append ( 'r' ) ; break ; case '\\' : buf . append ( '\\' ) ; buf . append ( '\\' ) ; break ; case '\'' : buf . append ( '\\' ) ; buf . append ( '\'' ) ; break ; case '"' : buf . append ( '\\' ) ; buf . append ( '\"' ) ; break ; case '\032' : buf . append ( '\\' ) ; buf . append ( 'Z' ) ; break ; default : buf . append ( c ) ; break ; } } } public static boolean mysqli_real_query ( Env env , @ NotNull Mysqli conn , StringValue query ) { if ( conn == null ) return false ; return conn . real_query ( env , query ) ; } static Value mysqli_query ( Env env , Mysqli conn , StringValue query , Object ... args ) { StringBuilder buf = new StringBuilder ( ) ; int size = query . length ( ) ; int argIndex = 0 ; for ( int i = 0 ; i < size ; i ++ ) { char ch = buf . charAt ( i ) ; if ( ch == '?' ) { Object arg = args [ argIndex ++ ] ; if ( arg == null ) throw new IllegalArgumentException ( L . l ( "argument `{0}' cannot be null" , arg ) ) ; buf . append ( '\'' ) ; escapeString ( buf , String . valueOf ( arg ) ) ; buf . append ( '\'' ) ; } else buf . append ( ch ) ; } return query ( env , conn , env . createStringOld ( buf . toString ( ) ) ) ; } public static boolean mysqli_select_db ( Mysqli conn , String dbName ) { if ( conn == null ) return false ; return conn . select_db ( dbName ) ; } public static Value mysqli_stat ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return BooleanValue . FALSE ; return conn . stat ( env ) ; } public static int mysqli_stmt_affected_rows ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return - 1 ; if ( stmt . errno ( ) != 0 ) return - 1 ; return stmt . affected_rows ( env ) ; } public static boolean mysqli_stmt_bind_param ( Env env , @ NotNull MysqliStatement stmt , StringValue types , @ Reference Value [ ] params ) { if ( stmt == null ) return false ; return stmt . bind_param ( env , types , params ) ; } public static boolean mysqli_stmt_bind_result ( Env env , @ NotNull MysqliStatement stmt , @ Reference Value [ ] outParams ) { if ( stmt == null ) return false ; return stmt . bind_result ( env , outParams ) ; } public boolean mysql_stmt_close ( MysqliStatement stmt ) { if ( stmt == null ) return false ; stmt . close ( ) ; return true ; } public Value mysqli_stmt_data_seek ( Env env , @ NotNull MysqliStatement stmt , int offset ) { if ( stmt == null ) return BooleanValue . FALSE ; return stmt . data_seek ( env , offset ) ; } public int mysql_stmt_errno ( Env env , MysqliStatement stmt ) { if ( stmt != null ) return stmt . errno ( ) ; else return 0 ; } public StringValue mysql_stmt_error ( Env env , MysqliStatement stmt ) { if ( stmt == null ) return null ; return stmt . error ( env ) ; } public static boolean mysqli_stmt_execute ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return false ; return stmt . execute ( env ) ; } public static Value mysqli_stmt_fetch ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return BooleanValue . FALSE ; return stmt . fetch ( env ) ; } public static boolean mysqli_stmt_free_result ( Env env , MysqliStatement stmt ) { if ( stmt == null ) return false ; stmt . free_result ( env ) ; return true ; } public static boolean mysqli_bind_result ( Env env , @ NotNull MysqliStatement stmt , @ Reference Value [ ] outParams ) { return mysqli_stmt_bind_result ( env , stmt , outParams ) ; } public static boolean mysqli_change_user ( @ NotNull Mysqli mysqli , String user , String password , String db ) { if ( mysqli == null ) return false ; return mysqli . change_user ( user , password , db ) ; } public static boolean mysqli_execute ( Env env , @ NotNull MysqliStatement stmt ) { return mysqli_stmt_execute ( env , stmt ) ; } @ ReturnNullAsFalse public static JdbcResultResource mysqli_get_metadata ( Env env , @ NotNull MysqliStatement stmt ) { return mysqli_stmt_result_metadata ( env , stmt ) ; } public static Mysqli mysqli_init ( Env env ) { return new Mysqli ( env ) ; } @ ReturnNullAsFalse public static MysqliStatement mysqli_prepare ( Env env , @ NotNull Mysqli conn , StringValue query ) { if ( conn == null ) return null ; return conn . prepare ( env , query ) ; } public static boolean mysqli_stmt_close ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return false ; return stmt . close ( env ) ; } public static MysqliStatement mysqli_stmt_init ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return null ; return conn . stmt_init ( env ) ; } public static Value mysqli_info ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) return null ; return conn . info ( env ) ; } public static int mysqli_stmt_field_count ( Env env , @ NotNull MysqliStatement stmt ) { if ( stmt == null ) return - 1 ; return stmt . field_count ( env ) ; } public static Value mysqli_thread_id ( Env env , @ NotNull Mysqli conn ) { if ( conn == null ) return BooleanValue . FALSE ; return conn . thread_id ( env ) ; } public static boolean mysqli_kill ( Env env , @ NotNull Mysqli conn , int threadId ) { if ( conn == null ) return false ; return conn . kill ( env , threadId ) ; } } 
=======
public class WrapProperty { public static final PropertyId < Name > ATTRIBUTE_OWNER = PropertyId . newInstance ( "ATTRIBUTE_OWNER" , Name . class ) ; private WrapProperty ( ) { } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
