<<<<<<< HEAD
public class PreviewConfigurationPage { private Composite displayArea ; private Composite browserArea ; private Composite editArea ; private Button currentPageButton ; private Button startUrlButton ; private Text startUrlText ; private Button internalServerButton ; private Button customServerButton ; private Text baseUrlText ; private Button addProjectNameButton ; private Button save ; private Button cancel ; private String title = Messages . PreviewConfigurationPage_Title ; private String browserLabel = "" ; private Label nameLabel ; private Text nameText ; private ContributedBrowser browser ; private MultiPageCSSEditor editor ; private int index = - 1 ; private String url ; public PreviewConfigurationPage ( MultiPageCSSEditor editor ) { this . editor = editor ; this . url = this . editor . getURL ( ) ; } public void setIndex ( int index ) { this . index = index ; } public void createControl ( Composite parent ) { displayArea = new Composite ( parent , SWT . NONE ) ; GridLayout daLayout = new GridLayout ( 1 , false ) ; daLayout . marginHeight = 0 ; daLayout . marginWidth = 0 ; displayArea . setLayout ( daLayout ) ; displayArea . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; this . editArea = new Composite ( displayArea , SWT . NONE ) ; GridLayout eaLayout = new GridLayout ( 1 , false ) ; eaLayout . marginWidth = 0 ; eaLayout . marginHeight = 0 ; editArea . setLayout ( eaLayout ) ; editArea . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; this . browserArea = new Composite ( displayArea , SWT . NONE ) ; GridData baData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; baData . exclude = true ; GridLayout baLayout = new GridLayout ( 1 , false ) ; baLayout . marginHeight = 0 ; baLayout . marginWidth = 0 ; this . browserArea . setLayout ( baLayout ) ; this . browserArea . setLayoutData ( baData ) ; this . browserArea . setVisible ( false ) ; createButtonSection ( this . editArea ) ; createConfigurationSection ( this . editArea ) ; createBrowserSection ( this . editArea ) ; createStartActionSection ( this . editArea ) ; createServerSection ( this . editArea ) ; } public String getBrowserLabel ( ) { return this . browserLabel ; } public void setBrowser ( ContributedBrowser browser , String label ) { Button button = buttons . get ( label ) ; if ( button != null && ! button . isDisposed ( ) ) { button . setSelection ( true ) ; Iterator < Button > iter = buttons . values ( ) . iterator ( ) ; Button other ; while ( iter . hasNext ( ) ) { other = iter . next ( ) ; if ( other != button && other != null ) { other . setSelection ( false ) ; } } } if ( this . browser != null ) { this . browser . dispose ( ) ; } this . browserLabel = label ; this . browser = browser ; this . browser . createControl ( browserArea ) ; } public void setTitle ( String title ) { if ( this . nameText != null && ! this . nameText . isDisposed ( ) ) { this . nameText . setText ( title ) ; } else { this . title = title ; } } public void showEditArea ( ) { GridData eaData = ( GridData ) editArea . getLayoutData ( ) ; eaData . exclude = false ; GridData baData = ( GridData ) browserArea . getLayoutData ( ) ; baData . exclude = true ; this . browserArea . setVisible ( false ) ; this . editArea . setVisible ( true ) ; displayArea . layout ( true , true ) ; } public void showBrowserArea ( ) { GridData eaData = ( GridData ) editArea . getLayoutData ( ) ; eaData . exclude = true ; GridData baData = ( GridData ) browserArea . getLayoutData ( ) ; baData . exclude = false ; this . browserArea . setVisible ( true ) ; this . editArea . setVisible ( false ) ; displayArea . layout ( true , true ) ; } public String getURL ( ) { return this . url ; } public void setURL ( String url ) { if ( this . browser != null ) { if ( currentPageButton . getSelection ( ) ) { this . browser . setURL ( url ) ; } else { this . browser . setURL ( startUrlText . getText ( ) ) ; } } this . url = url ; } private void save ( ) { IExtensionRegistry reg = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = reg . getExtensionPoint ( UnifiedEditorsPlugin . BROWSER_EXTENSION_POINT ) ; IExtension [ ] extensions = ep . getExtensions ( ) ; boolean found = false ; IConfigurationElement [ ] ce ; String browserClass ; String browserName ; Object obj ; for ( int i = 0 ; i < extensions . length && ! found ; i ++ ) { ce = extensions [ i ] . getConfigurationElements ( ) ; for ( int j = 0 ; j < ce . length && ! found ; j ++ ) { browserClass = ce [ j ] . getAttribute ( UnifiedEditorsPlugin . CLASS_ATTR ) ; browserName = BrowserExtensionLoader . getBrowserLabel ( ce [ j ] ) ; if ( browserClass != null && browserName != null && browserName . equals ( browserLabel ) ) { found = true ; try { obj = ce [ j ] . createExecutableExtension ( UnifiedEditorsPlugin . CLASS_ATTR ) ; if ( obj instanceof ContributedBrowser ) { this . setBrowser ( ( ContributedBrowser ) obj , browserName ) ; } } catch ( CoreException e ) { } } } } editor . setPreviewPageText ( this . index , this . title ) ; setURL ( this . url ) ; editor . savePreviewsPages ( ) ; showBrowserArea ( ) ; } private void createButtonSection ( Composite parent ) { Composite buttons = new Composite ( parent , SWT . NONE ) ; GridLayout bLayout = new GridLayout ( 2 , false ) ; bLayout . marginHeight = 0 ; bLayout . marginWidth = 0 ; buttons . setLayout ( bLayout ) ; GridData bData = new GridData ( SWT . FILL , SWT . FILL , true , false ) ; buttons . setLayoutData ( bData ) ; save = new Button ( buttons , SWT . PUSH ) ; save . setToolTipText ( Messages . PreviewConfigurationPage_SaveText ) ; save . setImage ( CSSPlugin . getImage ( "icons/save.gif" ) ) ; save . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { save ( ) ; } } ) ; save . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , false ) ) ; cancel = new Button ( buttons , SWT . PUSH ) ; cancel . setText ( Messages . PreviewConfigurationPage_CancelText ) ; cancel . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { showBrowserArea ( ) ; } } ) ; cancel . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , false ) ) ; } private void createConfigurationSection ( Composite parent ) { Group group = new Group ( parent , SWT . FLAT | SWT . SHADOW_IN ) ; group . setText ( Messages . PreviewConfigurationPage_GroupTitle ) ; group . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; GridLayout layout = new GridLayout ( 2 , false ) ; layout . marginHeight *= 2 ; layout . marginWidth *= 2 ; group . setLayout ( layout ) ; nameLabel = new Label ( group , SWT . LEFT ) ; nameLabel . setText ( Messages . PreviewConfigurationPage_NameLabel ) ; nameText = new Text ( group , SWT . SINGLE | SWT . BORDER ) ; nameText . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; nameText . setText ( title ) ; nameText . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { title = nameText . getText ( ) ; } } ) ; } private Map < String , Button > buttons = new HashMap < String , Button > ( ) ; private void createBrowserSection ( Composite parent ) { Group group = new Group ( parent , SWT . FLAT | SWT . SHADOW_IN ) ; group . setText ( Messages . PreviewConfigurationPage_BrowserGroupText ) ; group . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; GridLayout layout = new GridLayout ( 1 , false ) ; layout . marginHeight *= 2 ; layout . marginWidth *= 2 ; group . setLayout ( layout ) ; List < String > labels = BrowserExtensionLoader . getAllBrowserLabels ( ) ; String label ; for ( int i = 0 ; i < labels . size ( ) ; i ++ ) { label = labels . get ( i ) ; final Button browserButton = new Button ( group , SWT . RADIO ) ; browserButton . setText ( label ) ; if ( i == 0 ) { browserLabel = label ; browserButton . setSelection ( true ) ; } buttons . put ( label , browserButton ) ; browserButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { if ( browserButton . getSelection ( ) ) { browserLabel = browserButton . getText ( ) ; } } } ) ; } } public String getTitle ( ) { return title ; } private void createStartActionSection ( Composite parent ) { Group group = new Group ( parent , SWT . FLAT | SWT . SHADOW_IN ) ; group . setText ( Messages . PreviewConfigurationPage_StartActionGroupText ) ; group . setFont ( parent . getFont ( ) ) ; group . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; GridLayout layout = new GridLayout ( 2 , false ) ; layout . marginHeight *= 2 ; layout . marginWidth *= 2 ; group . setLayout ( layout ) ; currentPageButton = new Button ( group , SWT . RADIO ) ; currentPageButton . setText ( Messages . PreviewConfigurationPage_CurrentPageText ) ; GridData data = new GridData ( SWT . LEFT , SWT . CENTER , true , false ) ; data . horizontalSpan = 2 ; currentPageButton . setLayoutData ( data ) ; currentPageButton . setSelection ( true ) ; startUrlButton = new Button ( group , SWT . RADIO ) ; startUrlButton . setText ( Messages . PreviewConfigurationPage_StartUrlText ) ; data = new GridData ( SWT . LEFT , SWT . CENTER , false , false ) ; startUrlButton . setLayoutData ( data ) ; startUrlText = new Text ( group , SWT . SINGLE | SWT . BORDER ) ; data = new GridData ( SWT . FILL , SWT . FILL , true , false ) ; data . horizontalSpan = 1 ; startUrlText . setLayoutData ( data ) ; } private void createServerSection ( Composite parent ) { Group group = new Group ( parent , SWT . FLAT ) ; group . setText ( Messages . PreviewConfigurationPage_ServerGroupTitle ) ; group . setFont ( parent . getFont ( ) ) ; group . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; GridLayout layout = new GridLayout ( 2 , false ) ; layout . marginHeight *= 2 ; layout . marginWidth *= 2 ; group . setLayout ( layout ) ; internalServerButton = new Button ( group , SWT . RADIO ) ; internalServerButton . setText ( Messages . PreviewConfigurationPage_InternalServerText ) ; GridData data = new GridData ( SWT . LEFT , SWT . CENTER , false , false ) ; data . horizontalSpan = 2 ; internalServerButton . setLayoutData ( data ) ; internalServerButton . setSelection ( true ) ; customServerButton = new Button ( group , SWT . RADIO ) ; customServerButton . setText ( Messages . PreviewConfigurationPage_ExternalServerText ) ; data = new GridData ( SWT . LEFT , SWT . CENTER , false , false ) ; data . horizontalSpan = 2 ; customServerButton . setLayoutData ( data ) ; Label baseUrlLabel = new Label ( group , SWT . NONE ) ; baseUrlLabel . setText ( Messages . PreviewConfigurationPage_BaseUrlLabel ) ; baseUrlLabel . setAlignment ( SWT . RIGHT ) ; data = new GridData ( SWT . RIGHT , SWT . CENTER , false , false ) ; data . horizontalIndent = 50 ; baseUrlLabel . setLayoutData ( data ) ; baseUrlText = new Text ( group , SWT . SINGLE | SWT . BORDER ) ; data = new GridData ( SWT . FILL , SWT . CENTER , true , false ) ; baseUrlText . setLayoutData ( data ) ; Label dummyLabel = new Label ( group , SWT . NONE ) ; dummyLabel . setLayoutData ( new GridData ( ) ) ; addProjectNameButton = new Button ( group , SWT . CHECK ) ; addProjectNameButton . setText ( Messages . PreviewConfigurationPage_AddProjectText ) ; addProjectNameButton . setLayoutData ( new GridData ( ) ) ; } public Control getControl ( ) { return this . displayArea ; } public void dispose ( ) { if ( this . browser != null ) { this . browser . dispose ( ) ; } } } 
=======
public abstract class AbstractDatatype implements Datatype { AbstractDatatype ( ) { super ( ) ; } public final boolean isValid ( String literal , ValidationContext context ) { try { checkValid ( literal ) ; } catch ( DatatypeException e ) { return false ; } return true ; } public void checkValid ( String literal , ValidationContext context ) throws DatatypeException { checkValid ( literal ) ; } public abstract void checkValid ( CharSequence literal ) throws DatatypeException ; public DatatypeStreamingValidator createStreamingValidator ( ValidationContext context ) { return new DatatypeStreamingValidatorImpl ( this ) ; } public Object createValue ( String literal , ValidationContext context ) { return literal ; } public final boolean sameValue ( Object value1 , Object value2 ) { if ( value1 == null ) { return ( value2 == null ) ; } return value1 . equals ( value2 ) ; } public final int valueHashCode ( Object value ) { return value . hashCode ( ) ; } public final int getIdType ( ) { return Datatype . ID_TYPE_NULL ; } public boolean isContextDependent ( ) { return false ; } protected final boolean isWhitespace ( char c ) { return c == ' ' || c == '\t' || c == '\f' || c == '\n' || c == '\r' ; } protected final boolean isAsciiDigit ( char c ) { return c >= '0' && c <= '9' ; } protected static final char toAsciiLowerCase ( char c ) { if ( c >= 'A' && c <= 'Z' ) { c += 0x20 ; } return c ; } protected static final String toAsciiLowerCase ( CharSequence str ) { if ( str == null ) { return null ; } char [ ] buf = new char [ str . length ( ) ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char c = str . charAt ( i ) ; if ( c >= 'A' && c <= 'Z' ) { c += 0x20 ; } buf [ i ] = c ; } return new String ( buf ) ; } protected static final char toAsciiUpperCase ( char c ) { if ( c >= 'a' && c <= 'z' ) { c -= 0x20 ; } return c ; } protected static final String toAsciiUpperCase ( CharSequence str ) { if ( str == null ) { return null ; } char [ ] buf = new char [ str . length ( ) ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char c = str . charAt ( i ) ; if ( c >= 'a' && c <= 'z' ) { c -= 0x20 ; } buf [ i ] = c ; } return new String ( buf ) ; } protected DatatypeException newDatatypeException ( String message ) { return new Html5DatatypeException ( this . getClass ( ) , this . getName ( ) , message ) ; } protected DatatypeException newDatatypeException ( String head , String literal , String tail ) { return new Html5DatatypeException ( this . getClass ( ) , this . getName ( ) , head , literal , tail ) ; } protected DatatypeException newDatatypeException ( String head , char literal , String tail ) { return new Html5DatatypeException ( this . getClass ( ) , this . getName ( ) , head , String . valueOf ( literal ) , tail ) ; } protected DatatypeException newDatatypeException ( int position , String message ) { return new Html5DatatypeException ( position , this . getClass ( ) , this . getName ( ) , message ) ; } protected DatatypeException newDatatypeException ( int position , String head , String literal , String tail ) { return new Html5DatatypeException ( position , this . getClass ( ) , this . getName ( ) , head , literal , tail ) ; } protected DatatypeException newDatatypeException ( int position , String head , char literal , String tail ) { return new Html5DatatypeException ( position , this . getClass ( ) , this . getName ( ) , head , String . valueOf ( literal ) , tail ) ; } protected DatatypeException newDatatypeException ( String message , boolean warning ) { return new Html5DatatypeException ( this . getClass ( ) , this . getName ( ) , message , warning ) ; } protected DatatypeException newDatatypeException ( String head , String literal , String tail , boolean warning ) { return new Html5DatatypeException ( this . getClass ( ) , this . getName ( ) , head , literal , tail , warning ) ; } protected DatatypeException newDatatypeException ( String head , char literal , String tail , boolean warning ) { return new Html5DatatypeException ( this . getClass ( ) , this . getName ( ) , head , String . valueOf ( literal ) , tail , warning ) ; } protected DatatypeException newDatatypeException ( int position , String message , boolean warning ) { return new Html5DatatypeException ( position , this . getClass ( ) , this . getName ( ) , message , warning ) ; } protected DatatypeException newDatatypeException ( int position , String head , String literal , String tail , boolean warning ) { return new Html5DatatypeException ( position , this . getClass ( ) , this . getName ( ) , head , literal , tail , warning ) ; } protected DatatypeException newDatatypeException ( int position , String head , char literal , String tail , boolean warning ) { return new Html5DatatypeException ( position , this . getClass ( ) , this . getName ( ) , head , String . valueOf ( literal ) , tail , warning ) ; } public abstract String getName ( ) ; protected List < CharSequenceWithOffset > split ( CharSequence sequence , char delimiter ) { List < CharSequenceWithOffset > rv = new ArrayList < CharSequenceWithOffset > ( ) ; int offset = 0 ; for ( int i = 0 ; i < sequence . length ( ) ; i ++ ) { char c = sequence . charAt ( i ) ; if ( c == delimiter ) { rv . add ( new CharSequenceWithOffset ( sequence . subSequence ( offset , i ) , offset ) ) ; offset = i + 1 ; } } rv . add ( new CharSequenceWithOffset ( sequence . subSequence ( offset , sequence . length ( ) ) , offset ) ) ; return rv ; } protected class CharSequenceWithOffset { private final CharSequence sequence ; private final int offset ; public CharSequenceWithOffset ( final CharSequence sequence , final int offset ) { this . sequence = sequence ; this . offset = offset ; } public int getOffset ( ) { return offset ; } public CharSequence getSequence ( ) { return sequence ; } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
