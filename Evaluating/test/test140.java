public class Editor extends AbstractDialog { private final String STR_DIALOG_TITLE = Strings . message ( "te.dialog.title" ) ; private final String STR_DIALOG_HEADER = Strings . message ( "te.dialog.header" ) ; private final String STR_TEMPLATE = Strings . message ( "te.template" ) ; private final String STR_HELP = Strings . message ( "te.help" ) ; private final String STR_HELP_TEXT = Strings . message ( "te.help.text" ) ; private final String STR_NEW_PROMT = Strings . message ( "te.new.prompt" ) ; private final String STR_NEW_TITLE = Strings . message ( "te.new.title" ) ; private final String STR_COPY_TITLE = Strings . message ( "te.copy.title" ) ; private final String STR_NEW_PROMPT_EMPTY = Strings . message ( "te.new.prompt.empty" ) ; private final String STR_NEW_PROMPT_UNIQUE = Strings . message ( "te.new.prompt.unique" ) ; private final String STR_DELETE_TEXT = Strings . message ( "te.delete.text" ) ; private final String STR_DELETE_TITLE = Strings . message ( "te.delete.title" ) ; private final String STR_SAVE_SAVE = Strings . message ( "te.save" ) ; private final String STR_SAVE_DONT_SAVE = Strings . message ( "te.dont.save" ) ; private final String STR_SAVE_CANCEL = Strings . message ( "te.cancel" ) ; private final String STR_SAVE_MODIFIED = Strings . message ( "te.save.modified" ) ; private final String STR_SAVE_INVALID = Strings . message ( "te.save.invalid" ) ; private final String STR_NEW = Strings . message ( "te.new" ) ; private final String STR_DELETE = Strings . message ( "te.delete" ) ; private final String STR_COPY = Strings . message ( "te.copy" ) ; private final String STR_SAVE = Strings . message ( "te.save" ) ; private final String STR_REVERT = Strings . message ( "te.revert" ) ; private volatile boolean templateModified ; private volatile boolean templateValid ; private volatile Template selectedTemplate ; private JComboBox cbTemplates ; private JTextArea taEditor ; private JButton btnSave ; private JButton btnRevert ; private JButton btnDelete ; private JButton btnCopy ; private JButton btnNew ; public Editor ( Dialog parent ) { super ( parent ) ; initComponents ( ) ; } public Editor ( MainFrame parent ) { super ( parent ) ; initComponents ( ) ; } protected JComponent buildHeader ( ) { return new HeaderPanelExt ( STR_DIALOG_TITLE , STR_DIALOG_HEADER ) ; } protected void setResizable ( ) { setResizable ( true ) ; } private void initComponents ( ) { setTitle ( STR_DIALOG_TITLE ) ; btnNew = new JButton ( new NewTemplateAction ( ) ) ; btnCopy = new JButton ( new CopyTemplateAction ( ) ) ; btnDelete = new JButton ( new DeleteTemplateAction ( ) ) ; btnSave = new JButton ( new SaveTemplateAction ( ) ) ; btnRevert = new JButton ( new RevertTemplateAction ( ) ) ; cbTemplates = new JComboBox ( ) ; cbTemplates . addActionListener ( new TemplateDropDownListener ( ) ) ; taEditor = new JTextArea ( "" ) ; taEditor . setFont ( new Font ( "Monospaced" , Font . PLAIN , btnNew . getFont ( ) . getSize ( ) ) ) ; taEditor . setTabSize ( 2 ) ; taEditor . addKeyListener ( new EditorListener ( ) ) ; } protected JComponent buildContent ( ) { JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( buildMainPanel ( ) , BorderLayout . CENTER ) ; panel . add ( buildButtonBar ( ) , BorderLayout . SOUTH ) ; return panel ; } private Component buildMainPanel ( ) { ButtonBarBuilder buttons = new ButtonBarBuilder ( ) ; buttons . addFixed ( btnNew ) ; buttons . addRelatedGap ( ) ; buttons . addFixed ( btnCopy ) ; buttons . addRelatedGap ( ) ; buttons . addFixed ( btnDelete ) ; BBFormBuilder builder = new BBFormBuilder ( "p, 2dlu, max(50dlu;p):grow, 7dlu, p, 0dlu:grow" ) ; builder . append ( STR_TEMPLATE , cbTemplates ) ; builder . append ( buttons . getPanel ( ) ) ; builder . appendRelatedComponentsGapRow ( ) ; builder . appendRow ( "200px:grow" ) ; builder . nextLine ( 2 ) ; builder . append ( new JScrollPane ( taEditor ) , 6 , CellConstraints . FILL , CellConstraints . FILL ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( STR_HELP , 6 ) ; builder . appendRelatedComponentsGapRow ( ) ; builder . appendRow ( "150px" ) ; builder . nextLine ( 2 ) ; builder . append ( ComponentsFactory . createInstructionsBox ( STR_HELP_TEXT ) , 6 , CellConstraints . FILL , CellConstraints . FILL ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; return builder . getPanel ( ) ; } private Component buildButtonBar ( ) { ButtonBarBuilder builder = new ButtonBarBuilder ( ) ; builder . addGriddedButtons ( new JButton [ ] { btnSave , btnRevert } ) ; builder . addGlue ( ) ; builder . addGridded ( createCloseButton ( true ) ) ; return builder . getPanel ( ) ; } public void open ( Template template ) { updateDropDown ( template ) ; super . open ( ) ; } private void onTemplateChange ( ) { String text = taEditor . getText ( ) ; templateModified = ! text . equals ( selectedTemplate . getText ( ) ) ; templateValid = SyntaxChecker . validate ( text ) . isEmpty ( ) ; btnSave . setEnabled ( templateModified && templateValid ) ; btnRevert . setEnabled ( templateModified ) ; } private void onTemplateSelect ( Template template ) { if ( template == null || template == selectedTemplate ) return ; if ( ! saveIfNecessary ( ) ) { updateDropDown ( selectedTemplate ) ; return ; } selectedTemplate = template ; templateModified = false ; templateValid = true ; taEditor . setText ( template . getText ( ) ) ; taEditor . setCaretPosition ( 0 ) ; boolean userDefined = ! template . isSystem ( ) ; btnDelete . setEnabled ( userDefined ) ; btnSave . setEnabled ( userDefined ) ; btnRevert . setEnabled ( userDefined ) ; taEditor . setEditable ( userDefined ) ; taEditor . setEnabled ( userDefined ) ; onTemplateChange ( ) ; } private void onTemplateCopy ( ) { if ( selectedTemplate == null ) return ; String title = selectedTemplate . getName ( ) ; onTemplateNew ( createUniqueTitleFrom ( title ) , selectedTemplate . getText ( ) ) ; } private void onTemplateNew ( String newTitle , String text ) { String message = STR_NEW_PROMT ; String dialogTitle = newTitle == null ? STR_NEW_TITLE : STR_COPY_TITLE ; String name = null ; while ( message != null ) { name = ( String ) JOptionPane . showInputDialog ( Editor . this , message , dialogTitle , JOptionPane . QUESTION_MESSAGE , getIcon ( ) , null , newTitle ) ; if ( name == null ) { return ; } else { if ( StringUtils . isEmpty ( name ) ) { message = STR_NEW_PROMPT_EMPTY ; } else if ( Templates . isExisting ( name ) ) { message = STR_NEW_PROMPT_UNIQUE ; } else { message = null ; } } } if ( text == null ) text = "" ; Template newTemplate = new Template ( name , false , text ) ; Templates . addTemplate ( newTemplate ) ; updateDropDown ( newTemplate ) ; } private void onTemplateDelete ( ) { if ( selectedTemplate == null ) return ; int answer = JOptionPane . showConfirmDialog ( Editor . this , STR_DELETE_TEXT , STR_DELETE_TITLE , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE , getIcon ( ) ) ; if ( answer == JOptionPane . YES_OPTION ) { Templates . deleteTemplate ( selectedTemplate ) ; selectedTemplate = null ; updateDropDown ( null ) ; } } private Icon getIcon ( ) { return Resources . getLargeApplicationIcon ( ) ; } private void onTemplateSave ( ) { saveTemplate ( selectedTemplate ) ; } private void onTemplateRevert ( ) { taEditor . setText ( selectedTemplate . getText ( ) ) ; onTemplateChange ( ) ; } public void doClose ( ) { if ( saveIfNecessary ( ) ) super . doClose ( ) ; } protected void doCloseWindow ( ) { doClose ( ) ; } private void saveTemplate ( Template target ) { target . setText ( taEditor . getText ( ) ) ; onTemplateChange ( ) ; } private void updateDropDown ( Template select ) { if ( select == null ) { select = ( Template ) cbTemplates . getSelectedItem ( ) ; } cbTemplates . removeAllItems ( ) ; Collection < Template > templates = Templates . getUserTemplates ( ) . values ( ) ; for ( Template template : templates ) { cbTemplates . addItem ( template ) ; } if ( select != null ) cbTemplates . setSelectedItem ( select ) ; } private static String createUniqueTitleFrom ( String title ) { String newTitle ; int cnt = 2 ; do { newTitle = title + " (" + cnt + ")" ; cnt ++ ; } while ( Templates . isExisting ( newTitle ) ) ; return newTitle ; } protected void resizeHook ( JComponent component ) { Resizer . ONE2ONE . resize ( component ) ; } private boolean saveIfNecessary ( ) { if ( templateModified ) { String answerSave = STR_SAVE_SAVE ; String answerDontSave = STR_SAVE_DONT_SAVE ; String answerCancel = STR_SAVE_CANCEL ; Object answer ; if ( templateValid ) { Object [ ] options = { answerSave , answerDontSave , answerCancel } ; answer = JOptionPane . showOptionDialog ( Editor . this , STR_SAVE_MODIFIED , STR_DIALOG_TITLE , - 1 , JOptionPane . QUESTION_MESSAGE , getIcon ( ) , options , answerSave ) ; answer = options [ ( Integer ) answer ] ; } else { Object [ ] options = { answerDontSave , answerCancel } ; answer = JOptionPane . showOptionDialog ( Editor . this , STR_SAVE_INVALID , STR_DIALOG_TITLE , - 1 , JOptionPane . QUESTION_MESSAGE , getIcon ( ) , options , answerCancel ) ; answer = options [ ( Integer ) answer ] ; } if ( answer == answerSave ) { saveTemplate ( selectedTemplate ) ; } else if ( answer == answerCancel ) { return false ; } } return true ; } private class TemplateDropDownListener implements ActionListener { public void actionPerformed ( ActionEvent e ) { Object newSelection = cbTemplates . getSelectedItem ( ) ; if ( newSelection != selectedTemplate ) { onTemplateSelect ( ( Template ) newSelection ) ; } } } private class EditorListener extends KeyAdapter { public void keyReleased ( KeyEvent e ) { if ( ! e . isActionKey ( ) ) onTemplateChange ( ) ; } } private class NewTemplateAction extends AbstractAction { private NewTemplateAction ( ) { super ( STR_NEW ) ; } public void actionPerformed ( ActionEvent e ) { onTemplateNew ( null , null ) ; } } private class DeleteTemplateAction extends AbstractAction { private DeleteTemplateAction ( ) { super ( STR_DELETE ) ; } public void actionPerformed ( ActionEvent e ) { onTemplateDelete ( ) ; } } private class CopyTemplateAction extends AbstractAction { private CopyTemplateAction ( ) { super ( STR_COPY ) ; } public void actionPerformed ( ActionEvent e ) { onTemplateCopy ( ) ; } } private class SaveTemplateAction extends AbstractAction { private SaveTemplateAction ( ) { super ( STR_SAVE ) ; } public void actionPerformed ( ActionEvent e ) { onTemplateSave ( ) ; } } private class RevertTemplateAction extends AbstractAction { private RevertTemplateAction ( ) { super ( STR_REVERT ) ; } public void actionPerformed ( ActionEvent e ) { onTemplateRevert ( ) ; } } } 