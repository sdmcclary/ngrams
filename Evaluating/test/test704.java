<<<<<<< HEAD
public class SnippetsView extends ViewPart implements SnippetListChangeListener { private StackLayout _layout ; private TreeViewer _viewer ; private String _textPattern = "" ; private Action _applyAction ; private Action _doubleClickAction ; private Action _editAction ; private Action _toggleAction ; private Action collapseAllAction ; private DrillDownAdapter drillDown ; private SnippetsViewLabelProvider snippetsViewLabelProvider ; private SnippetsViewContentProvider snippetsViewContentProvider ; public SnippetsView ( ) { } private void applySnippet ( Snippet snippet ) { IEditorPart activeEditor = getActiveEditor ( ) ; if ( activeEditor != null && activeEditor instanceof ITextEditor ) { final ITextEditor editor = ( ITextEditor ) activeEditor ; snippet . apply ( editor ) ; } } private void createActions ( ) { createApplyAction ( ) ; createDoubleClickAction ( ) ; createEditAction ( ) ; createToggleAction ( ) ; createCollapseAllAction ( ) ; drillDown = new DrillDownAdapter ( this . _viewer ) ; this . _viewer . addDoubleClickListener ( new IDoubleClickListener ( ) { public void doubleClick ( DoubleClickEvent event ) { _doubleClickAction . run ( ) ; } } ) ; } private void createCollapseAllAction ( ) { this . collapseAllAction = new Action ( Messages . SnippetsView_CollapseAll ) { public void run ( ) { if ( _viewer != null ) { _viewer . collapseAll ( ) ; } } } ; this . collapseAllAction . setToolTipText ( Messages . SnippetsView_CollapseAll ) ; this . collapseAllAction . setImageDescriptor ( SnippetsPlugin . getImageDescriptor ( "icons/collapseall.gif" ) ) ; } private void createApplyAction ( ) { this . _applyAction = new Action ( ) { public void run ( ) { ISelection selection = _viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof Snippet ) { applySnippet ( ( Snippet ) firstElement ) ; } } } ; this . _applyAction . setText ( Messages . SnippetsView_Apply_Snippet ) ; } private void createDoubleClickAction ( ) { this . _doubleClickAction = new Action ( ) { public void run ( ) { ISelection selection = _viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof String ) { toggleElementState ( firstElement ) ; } else if ( firstElement instanceof Snippet ) { applySnippet ( ( Snippet ) firstElement ) ; } } } ; } private void createEditAction ( ) { this . _editAction = new Action ( ) { public void run ( ) { ISelection selection = _viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof Snippet ) { editSnippet ( ( Snippet ) firstElement ) ; } } } ; this . _editAction . setText ( Messages . SnippetsView_Edit_Snippet ) ; } public void createPartControl ( Composite parent ) { this . _layout = new StackLayout ( ) ; parent . setLayout ( this . _layout ) ; Composite body = new Composite ( parent , SWT . NONE ) ; GridLayout gridLayout = new GridLayout ( ) ; gridLayout . verticalSpacing = 0 ; gridLayout . marginWidth = 0 ; gridLayout . marginHeight = 0 ; body . setLayout ( gridLayout ) ; Composite head = new Composite ( body , SWT . NONE ) ; this . _viewer = this . createTreeViewer ( body ) ; GridLayout gridLayout2 = new GridLayout ( 2 , false ) ; gridLayout2 . marginHeight = 5 ; gridLayout2 . verticalSpacing = 0 ; head . setLayout ( gridLayout2 ) ; Label l = new Label ( head , SWT . NONE ) ; l . setText ( Messages . SnippetsView_Filter ) ; final Text txt = new Text ( head , SWT . BORDER ) ; txt . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { _textPattern = txt . getText ( ) ; _viewer . getControl ( ) . setRedraw ( false ) ; _viewer . refresh ( ) ; _viewer . getControl ( ) . setRedraw ( true ) ; } } ) ; _viewer . addFilter ( new ViewerFilter ( ) { private int k = 0 ; public boolean select ( Viewer viewer , Object parentElement , Object element ) { if ( snippetsViewLabelProvider . getText ( element ) . contains ( _textPattern ) ) return true ; Object [ ] children = snippetsViewContentProvider . getChildren ( element ) ; for ( int a = 0 ; a < children . length ; a ++ ) { if ( select ( viewer , element , children [ a ] ) ) { if ( k <= 4 ) { k ++ ; _viewer . expandToLevel ( element , 2 ) ; k -- ; } return true ; } } return false ; } } ) ; txt . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; head . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; this . _layout . topControl = body ; this . _viewer . getControl ( ) . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; this . createActions ( ) ; this . hookContextMenu ( ) ; this . hookToolbarActions ( ) ; SnippetsStartup . init ( ) ; PreferenceUtils . registerBackgroundColorPreference ( _viewer . getControl ( ) , "com.aptana.ide.core.ui.background.color.snippetsView" ) ; PreferenceUtils . registerForegroundColorPreference ( _viewer . getControl ( ) , "com.aptana.ide.core.ui.foreground.color.snippetsView" ) ; SnippetsManager snippets = SnippetsManager . getInstance ( ) ; this . _viewer . setInput ( snippets ) ; snippets . addChangeListener ( this ) ; } private void hookToolbarActions ( ) { IActionBars bars = getViewSite ( ) . getActionBars ( ) ; IToolBarManager manager = bars . getToolBarManager ( ) ; drillDown . addNavigationActions ( manager ) ; manager . add ( new Separator ( ) ) ; manager . add ( collapseAllAction ) ; } public void dispose ( ) { super . dispose ( ) ; SnippetsManager snippets = SnippetsManager . getInstance ( ) ; snippets . removeChangeListener ( this ) ; } private void createToggleAction ( ) { this . _toggleAction = new Action ( ) { public void run ( ) { ISelection selection = _viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( firstElement instanceof String ) { toggleElementState ( firstElement ) ; } } } ; this . _toggleAction . setText ( Messages . SnippetsView_Expand_Collapse_Category ) ; } private TreeViewer createTreeViewer ( Composite parent ) { Tree tree = new Tree ( parent , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL ) ; TreeViewer viewer = new TreeViewer ( tree ) ; snippetsViewContentProvider = new SnippetsViewContentProvider ( ) ; viewer . setContentProvider ( snippetsViewContentProvider ) ; snippetsViewLabelProvider = new SnippetsViewLabelProvider ( ) ; viewer . setLabelProvider ( snippetsViewLabelProvider ) ; return viewer ; } private void editSnippet ( Snippet snippet ) { File file = snippet . getFile ( ) ; if ( file != null ) { WorkbenchHelper . openFile ( file , PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ) ; } } private void fillContextMenu ( IMenuManager manager , Object element ) { if ( element instanceof SnippetsManager . SnippetNode ) { manager . add ( this . _toggleAction ) ; } else if ( element instanceof Snippet ) { manager . add ( this . _applyAction ) ; manager . add ( this . _editAction ) ; } drillDown . addNavigationActions ( manager ) ; manager . add ( new Separator ( IWorkbenchActionConstants . MB_ADDITIONS ) ) ; } private IEditorPart getActiveEditor ( ) { class ActiveEditorRef { public IEditorPart activeEditor ; } final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; final ActiveEditorRef activeEditor = new ActiveEditorRef ( ) ; Display display = workbench . getDisplay ( ) ; IEditorPart result ; display . syncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchWindow window = workbench . getActiveWorkbenchWindow ( ) ; if ( window != null && window . getActivePage ( ) != null ) { activeEditor . activeEditor = window . getActivePage ( ) . getActiveEditor ( ) ; } } } ) ; result = activeEditor . activeEditor ; return result ; } private void hookContextMenu ( ) { MenuManager menuMgr = new MenuManager ( "#PopupMenu" ) ; menuMgr . setRemoveAllWhenShown ( true ) ; menuMgr . addMenuListener ( new IMenuListener ( ) { public void menuAboutToShow ( IMenuManager manager ) { ISelection selection = _viewer . getSelection ( ) ; Object firstElement = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; fillContextMenu ( manager , firstElement ) ; } } ) ; Menu menu = menuMgr . createContextMenu ( this . _viewer . getControl ( ) ) ; this . _viewer . getControl ( ) . setMenu ( menu ) ; this . getSite ( ) . registerContextMenu ( menuMgr , this . _viewer ) ; } public void listChanged ( final SnippetsManager list ) { IWorkbench workbench = PlatformUI . getWorkbench ( ) ; Display display = workbench . getDisplay ( ) ; display . syncExec ( new Runnable ( ) { public void run ( ) { if ( ! _viewer . getTree ( ) . isDisposed ( ) && _viewer . getContentProvider ( ) != null ) { _viewer . setInput ( list ) ; } } } ) ; } public void setFocus ( ) { } private void toggleElementState ( Object element ) { boolean state = this . _viewer . getExpandedState ( element ) ; if ( state ) { this . _viewer . setExpandedState ( element , false ) ; } else { this . _viewer . setExpandedState ( element , true ) ; } } } 
=======
public class StockQuoteDemo extends MIDlet implements CommandListener , Runnable { Form mainForm = new Form ( "StockQuotes" ) ; TextField symbolField = new TextField ( "Symbol" , "IBM" , 5 , TextField . ANY ) ; StringItem resultItem = new StringItem ( "" , "" ) ; Command getCommand = new Command ( "Get" , Command . SCREEN , 1 ) ; public StockQuoteDemo ( ) { mainForm . append ( symbolField ) ; mainForm . append ( resultItem ) ; mainForm . addCommand ( getCommand ) ; mainForm . setCommandListener ( this ) ; } public void startApp ( ) { Display . getDisplay ( this ) . setCurrent ( mainForm ) ; } public void pauseApp ( ) { } public void destroyApp ( boolean unconditional ) { } public void run ( ) { try { String symbol = symbolField . getString ( ) ; SoapObject rpc = new SoapObject ( "urn:xmethods-delayed-quotes" , "getQuote" ) ; rpc . addProperty ( "symbol" , symbol ) ; SoapSerializationEnvelope envelope = new SoapSerializationEnvelope ( SoapEnvelope . VER10 ) ; envelope . bodyOut = rpc ; resultItem . setLabel ( symbol ) ; HttpTransport ht = new HttpTransport ( "http://services.xmethods.net/soap" ) ; ht . call ( "urn:xmethods-delayed-quotes#getQuote" , envelope ) ; resultItem . setText ( "" + envelope . getResponse ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; resultItem . setLabel ( "Error:" ) ; resultItem . setText ( e . toString ( ) ) ; } } public void commandAction ( Command c , Displayable d ) { new Thread ( this ) . start ( ) ; } public static void main ( String [ ] argv ) { new StockQuoteDemo ( ) . startApp ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
