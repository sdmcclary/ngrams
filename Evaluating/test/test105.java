<<<<<<< HEAD
public class GUIEffects { private abstract class GUITimer extends Timer { public static final int FREQ = 100 ; private int curStep ; private Element element ; private int steps ; public GUITimer ( Widget widget , int steps ) { this . element = widget . getElement ( ) ; this . steps = steps ; curStep = 0 ; } protected abstract void doStep ( double pct ) ; public Element getElement ( ) { return element ; } public int getSteps ( ) { return steps ; } @ Override public void run ( ) { doStep ( curStep / ( double ) steps ) ; curStep ++ ; if ( curStep > steps ) { cancel ( ) ; } else { schedule ( FREQ ) ; } } } private class MoveTimer extends GUITimer { private int curX ; private int curY ; private int dx ; private int dy ; public MoveTimer ( Widget widget , int x , int y , int steps ) { super ( widget , steps ) ; this . dx = x / steps ; this . dy = y / steps ; this . curX = DOM . getIntStyleAttribute ( getElement ( ) , "left" ) ; this . curY = DOM . getIntStyleAttribute ( getElement ( ) , "top" ) ; } protected void doStep ( double pct ) { DOM . setIntStyleAttribute ( getElement ( ) , "left" , curX ) ; DOM . setIntStyleAttribute ( getElement ( ) , "top" , curY ) ; curX += dx ; curY += dy ; } } private class OpacityTimer extends GUITimer { private double diff ; private double start ; public OpacityTimer ( Widget widget , double from , double to , int steps ) { super ( widget , steps ) ; this . start = from ; this . diff = to - from ; } protected void doStep ( double pct ) { double cur = pct * diff + start ; String ieStr = "alpha(opacity = " + ( int ) ( cur * 100 ) + ")" ; DOM . setStyleAttribute ( getElement ( ) , "filter" , ieStr ) ; DOM . setStyleAttribute ( getElement ( ) , "-moz-opacity" , cur + "" ) ; DOM . setStyleAttribute ( getElement ( ) , "opacity" , cur + "" ) ; DOM . setStyleAttribute ( getElement ( ) , "-khtml-opacity" , cur + "" ) ; } } private static final int HIGHLIGHT_DURATION = 1000 ; private static GUIEffects singleInstance = new GUIEffects ( ) ; public static void appear ( Widget toAppear , int duration ) { opacity ( toAppear , .1 , 1.0 , duration ) ; } public static native void close ( ) ; public static void fade ( Widget w , int duration ) { opacity ( w , 1.0 , 0.0 , duration ) ; } public static void fadeAndRemove ( Widget w , int removeInX ) { fade ( w , 500 ) ; removeInXMilSecs ( w , removeInX ) ; } public static void fadeAndRemove ( final Widget w , int fadeInX , int removeInX ) { fade ( w , fadeInX ) ; removeInXMilSecs ( w , removeInX ) ; } public static void highlight ( Widget toHighlight ) { highlight ( toHighlight , "FF" , "FE" , "7F" , "FF" , "FF" , "FF" ) ; } private static void highlight ( Widget toHighlight , String sR , String sG , String sB , String eR , String eG , String eB ) { highlight ( toHighlight , Integer . parseInt ( sR , 16 ) , Integer . parseInt ( sG , 16 ) , Integer . parseInt ( sB , 16 ) , Integer . parseInt ( eR , 16 ) , Integer . parseInt ( eG , 16 ) , Integer . parseInt ( eB , 16 ) , HIGHLIGHT_DURATION ) ; } public static void highlight ( Widget toHighlight , String startColor , String endColor ) { Log . debug ( "start color: " + startColor ) ; Log . debug ( "end color: " + endColor ) ; final int startR = Integer . parseInt ( startColor . substring ( 0 , 2 ) , 16 ) ; final int endR = Integer . parseInt ( endColor . substring ( 0 , 2 ) , 16 ) ; final int startG = Integer . parseInt ( startColor . substring ( 2 , 4 ) , 16 ) ; final int endG = Integer . parseInt ( endColor . substring ( 2 , 4 ) , 16 ) ; final int startB = Integer . parseInt ( startColor . substring ( 4 , 6 ) , 16 ) ; final int endB = Integer . parseInt ( endColor . substring ( 4 , 6 ) , 16 ) ; highlight ( toHighlight , startR , startG , startB , endR , endG , endB , HIGHLIGHT_DURATION ) ; } public static void highlight ( Widget toHighlight , final int startR , final int startG , final int startB , int endR , int endG , int endB , int duration ) { int steps = duration / MoveTimer . FREQ ; final int diffR = endR - startR ; final int diffG = endG - startG ; final int diffB = endB - startB ; GUITimer mover = singleInstance . new GUITimer ( toHighlight , steps ) { @ Override protected void doStep ( double pct ) { int cR = ( int ) ( startR + diffR * pct ) ; int cG = ( int ) ( startG + diffG * pct ) ; int cB = ( int ) ( startB + diffB * pct ) ; StringBuffer sb = new StringBuffer ( "#" ) ; sb . append ( Integer . toHexString ( cR ) ) ; sb . append ( Integer . toHexString ( cG ) ) ; sb . append ( Integer . toHexString ( cB ) ) ; DOM . setStyleAttribute ( getElement ( ) , "backgroundColor" , sb . toString ( ) ) ; } } ; mover . schedule ( 100 ) ; } public static void move ( Widget toMove , int x , int y , int duration ) { int steps = duration / MoveTimer . FREQ ; MoveTimer mover = singleInstance . new MoveTimer ( toMove , x , y , steps ) ; mover . schedule ( 100 ) ; } public static void opacity ( Widget widget , double from , double to , int duration ) { int steps = duration / OpacityTimer . FREQ ; OpacityTimer opacity = singleInstance . new OpacityTimer ( widget , from , to , steps ) ; opacity . schedule ( 100 ) ; } public static void removeInXMilSecs ( final Widget w , int i ) { Timer t = new Timer ( ) { public void run ( ) { w . removeFromParent ( ) ; } } ; t . schedule ( i ) ; } } 
=======
class DataPattern extends StringPattern { private final Datatype dt ; private final Name dtName ; private final List < String > params ; DataPattern ( Datatype dt , Name dtName , List < String > params ) { super ( combineHashCode ( DATA_HASH_CODE , dt . hashCode ( ) ) ) ; this . dt = dt ; this . dtName = dtName ; this . params = params ; } boolean samePattern ( Pattern other ) { if ( other . getClass ( ) != this . getClass ( ) ) return false ; return dt . equals ( ( ( DataPattern ) other ) . dt ) ; } < T > T apply ( PatternFunction < T > f ) { return f . caseData ( this ) ; } Datatype getDatatype ( ) { return dt ; } Name getDatatypeName ( ) { return dtName ; } List < String > getParams ( ) { return Collections . unmodifiableList ( params ) ; } boolean allowsAnyString ( ) { return dt instanceof Datatype2 && ( ( Datatype2 ) dt ) . alwaysValid ( ) ; } void checkRestrictions ( int context , DuplicateAttributeDetector dad , Alphabet alpha ) throws RestrictionViolationException { switch ( context ) { case START_CONTEXT : throw new RestrictionViolationException ( "start_contains_data" ) ; } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
