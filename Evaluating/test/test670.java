public class SoapFault extends IOException { public String faultcode ; public String faultstring ; public String faultactor ; public Node detail ; public void parse ( XmlPullParser parser ) throws IOException , XmlPullParserException { parser . require ( XmlPullParser . START_TAG , SoapEnvelope . ENV , "Fault" ) ; while ( parser . nextTag ( ) == XmlPullParser . START_TAG ) { String name = parser . getName ( ) ; if ( name . equals ( "detail" ) ) { detail = new Node ( ) ; detail . parse ( parser ) ; continue ; } else if ( name . equals ( "faultcode" ) ) faultcode = parser . nextText ( ) ; else if ( name . equals ( "faultstring" ) ) faultstring = parser . nextText ( ) ; else if ( name . equals ( "faultactor" ) ) faultactor = parser . nextText ( ) ; else throw new RuntimeException ( "unexpected tag:" + name ) ; parser . require ( XmlPullParser . END_TAG , null , name ) ; } parser . require ( XmlPullParser . END_TAG , SoapEnvelope . ENV , "Fault" ) ; parser . nextTag ( ) ; } public void write ( XmlSerializer xw ) throws IOException { xw . startTag ( SoapEnvelope . ENV , "Fault" ) ; xw . startTag ( null , "faultcode" ) ; xw . text ( "" + faultcode ) ; xw . endTag ( null , "faultcode" ) ; xw . startTag ( null , "faultstring" ) ; xw . text ( "" + faultstring ) ; xw . endTag ( null , "faultstring" ) ; xw . startTag ( null , "detail" ) ; if ( detail != null ) detail . write ( xw ) ; xw . endTag ( null , "detail" ) ; xw . endTag ( SoapEnvelope . ENV , "Fault" ) ; } @ Override public String getMessage ( ) { return faultstring ; } public String toString ( ) { return "SoapFault - faultcode: '" + faultcode + "' faultstring: '" + faultstring + "' faultactor: '" + faultactor + "' detail: " + detail ; } } 