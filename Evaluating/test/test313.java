public class Quercus { private static L10N L = new L10N ( Quercus . class ) ; private static HashSet < String > _superGlobals = new HashSet < String > ( ) ; private static IniDefinitions _ini = new IniDefinitions ( ) ; private final PageManager _pageManager ; private final QuercusSessionManager _sessionManager ; private final ClassLoader _loader ; private ModuleContext _moduleContext ; private LruCache < String , UnicodeBuilderValue > _unicodeMap = new LruCache < String , UnicodeBuilderValue > ( 8 * 1024 ) ; private LruCache < String , ConstStringValue > _stringMap = new LruCache < String , ConstStringValue > ( 8 * 1024 ) ; private HashMap < String , ModuleInfo > _modules = new HashMap < String , ModuleInfo > ( ) ; private HashSet < ModuleStartupListener > _moduleStartupListeners = new HashSet < ModuleStartupListener > ( ) ; private HashSet < String > _extensionSet = new HashSet < String > ( ) ; private HashSet < String > _extensionSetLowerCase = new HashSet < String > ( ) ; private HashMap < String , AbstractFunction > _funMap = new HashMap < String , AbstractFunction > ( ) ; private HashMap < String , AbstractFunction > _lowerFunMap = new HashMap < String , AbstractFunction > ( ) ; private ConcurrentHashMap < String , JavaClassDef > _javaClassWrappers = new ConcurrentHashMap < String , JavaClassDef > ( ) ; private LruCache < String , String > _classNotFoundCache = new LruCache < String , String > ( 64 ) ; private HashMap < String , JavaClassDef > _lowerJavaClassWrappers = new HashMap < String , JavaClassDef > ( ) ; private final IniDefinitions _iniDefinitions = new IniDefinitions ( ) ; private Path _iniFile ; private HashMap < String , Value > _iniMap ; private HashMap < Value , Value > _serverEnvMap = new HashMap < Value , Value > ( ) ; private IntMap _classNameMap = new IntMap ( 8192 ) ; private String [ ] _classNames = new String [ 256 ] ; private ClassDef [ ] _classDefMap = new ClassDef [ 256 ] ; private QuercusClass [ ] _classCacheMap = new QuercusClass [ 256 ] ; private IntMap _constantNameMap = new IntMap ( 8192 ) ; private int [ ] _constantLowerMap = new int [ 256 ] ; private Value [ ] _constantNameList = new Value [ 256 ] ; private Value [ ] _constantMap = new Value [ 256 ] ; protected IntMap _functionNameMap = new IntMap ( 8192 ) ; private AbstractFunction [ ] _functionMap = new AbstractFunction [ 256 ] ; private LruCache < String , QuercusProgram > _evalCache = new LruCache < String , QuercusProgram > ( 4096 ) ; private int _includeCacheMax = 8192 ; private long _includeCacheTimeout = 10000L ; private TimedCache < IncludeKey , Path > _includeCache ; private long _defCacheHitCount ; private long _defCacheMissCount ; private ConcurrentHashMap < String , Object > _specialMap = new ConcurrentHashMap < String , Object > ( ) ; private String _scriptEncoding ; private String _phpVersion = "5.2.0" ; private String _mySqlVersion ; private StringValue _phpVersionValue ; private boolean _isStrict ; private boolean _isRequireSource ; private boolean _isConnectionPool = true ; private Boolean _isUnicodeSemantics ; private DataSource _database ; private ConcurrentHashMap < String , DataSource > _databaseMap = new ConcurrentHashMap < String , DataSource > ( ) ; private long _staticId ; private Path _pwd ; private Path _workDir ; private ServletContext _servletContext ; private boolean _isProduction ; public Quercus ( boolean isProduction ) { _loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; _moduleContext = getLocalContext ( ) ; _pageManager = createPageManager ( ) ; _pageManager . setAutoreloadingEnabled ( ! isProduction ) ; _sessionManager = createSessionManager ( ) ; _isProduction = isProduction ; } public Quercus ( ) { this ( true ) ; } public Path getPwd ( ) { if ( _pwd == null ) _pwd = new FilePath ( System . getProperty ( "user.dir" ) ) ; return _pwd ; } public void setPwd ( Path path ) { _pwd = path ; } public Path getWorkDir ( ) { if ( _workDir == null ) _workDir = getPwd ( ) . lookup ( "WEB-INF/work" ) ; return _workDir ; } public void setWorkDir ( Path workDir ) { _workDir = workDir ; } public String getCookieName ( ) { return "JSESSIONID" ; } public long getDependencyCheckInterval ( ) { return 2000L ; } public int getIncludeCacheMax ( ) { return _includeCacheMax ; } public void setIncludeCacheMax ( int cacheMax ) { _includeCacheMax = cacheMax ; } public void setIncludeCacheTimeout ( long timeout ) { _includeCacheTimeout = timeout ; } public long getIncludeCacheTimeout ( ) { return _includeCacheTimeout ; } public String getVersion ( ) { return "Open Source 4.0.0" ; } public String getVersionDate ( ) { return "20090301T2777" ; } public boolean isProfile ( ) { return false ; } protected PageManager createPageManager ( ) { return new PageManager ( this ) ; } protected QuercusSessionManager createSessionManager ( ) { return new QuercusSessionManager ( ) ; } public final ModuleContext getLocalContext ( ) { return getLocalContext ( _loader ) ; } public ModuleContext getLocalContext ( ClassLoader loader ) { if ( _moduleContext == null ) { synchronized ( this ) { if ( _moduleContext == null ) { _moduleContext = createModuleContext ( null , loader ) ; _moduleContext . init ( ) ; } } } return _moduleContext ; } protected ModuleContext createModuleContext ( ModuleContext parent , ClassLoader loader ) { return new ModuleContext ( this , parent , loader ) ; } public ModuleContext getModuleContext ( ) { return _moduleContext ; } public QuercusSessionManager getQuercusSessionManager ( ) { return _sessionManager ; } public boolean isCompile ( ) { return _pageManager . isCompile ( ) ; } public boolean isPro ( ) { return false ; } public boolean isResin ( ) { return false ; } public boolean isUnicodeSemantics ( ) { if ( _isUnicodeSemantics == null ) { _isUnicodeSemantics = Boolean . valueOf ( getIniBoolean ( "unicode.semantics" ) ) ; } return _isUnicodeSemantics . booleanValue ( ) ; } public boolean isAllowUrlInclude ( ) { return getIniBoolean ( "allow_url_include" ) ; } public boolean isAllowUrlFopen ( ) { return getIniBoolean ( "allow_url_fopen" ) ; } public void setCompile ( boolean isCompile ) { _pageManager . setCompile ( isCompile ) ; } public void setLazyCompile ( boolean isCompile ) { _pageManager . setLazyCompile ( isCompile ) ; } public void setCompileFailover ( boolean isCompileFailover ) { _pageManager . setCompileFailover ( isCompileFailover ) ; } public String getScriptEncoding ( ) { if ( _scriptEncoding != null ) return _scriptEncoding ; else if ( isUnicodeSemantics ( ) ) return "utf-8" ; else return "iso-8859-1" ; } public void setScriptEncoding ( String encoding ) { _scriptEncoding = encoding ; } public String getMysqlVersion ( ) { return _mySqlVersion ; } public void setMysqlVersion ( String version ) { _mySqlVersion = version ; } public String getPhpVersion ( ) { return _phpVersion ; } public void setPhpVersion ( String version ) { _phpVersion = version ; _phpVersionValue = null ; } public StringValue getPhpVersionValue ( ) { if ( _phpVersionValue == null ) { if ( isUnicodeSemantics ( ) ) _phpVersionValue = createUnicodeString ( _phpVersion ) ; else _phpVersionValue = createString ( _phpVersion ) ; } return _phpVersionValue ; } public void setServletContext ( ServletContext servletContext ) { _servletContext = servletContext ; } public ServletContext getServletContext ( ) { return _servletContext ; } public void setDatabase ( DataSource database ) { _database = database ; } public DataSource getDatabase ( ) { return _database ; } public DataSource findDatabase ( String driver , String url ) { if ( _database != null ) return _database ; else { try { String key = driver + ";" + url ; DataSource database = _databaseMap . get ( key ) ; if ( database != null ) return database ; ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; Class cls = loader . loadClass ( driver ) ; Object ds = cls . newInstance ( ) ; if ( ds instanceof DataSource ) database = ( DataSource ) ds ; else database = new JavaSqlDriverWrapper ( ( java . sql . Driver ) ds , url ) ; _databaseMap . put ( key , database ) ; return database ; } catch ( ClassNotFoundException e ) { throw new QuercusModuleException ( e ) ; } catch ( InstantiationException e ) { throw new QuercusModuleException ( e ) ; } catch ( IllegalAccessException e ) { throw new QuercusModuleException ( e ) ; } } } public void markForPoolRemoval ( Connection conn ) { } public Connection getConnection ( Connection conn ) { return conn ; } public java . sql . Statement getStatement ( java . sql . Statement stmt ) { return stmt ; } public void setStrict ( boolean isStrict ) { _isStrict = isStrict ; } public boolean isStrict ( ) { return _isStrict ; } public int getPageCacheSize ( ) { return _pageManager . getPageCacheSize ( ) ; } public void setPageCacheSize ( int size ) { _pageManager . setPageCacheSize ( size ) ; } public int getRegexpCacheSize ( ) { return RegexpModule . getRegexpCacheSize ( ) ; } public void setRegexpCacheSize ( int size ) { RegexpModule . setRegexpCacheSize ( size ) ; } public void setRequireSource ( boolean isRequireSource ) { _isRequireSource = isRequireSource ; } public boolean isRequireSource ( ) { return _isRequireSource ; } public void setConnectionPool ( boolean isEnable ) { _isConnectionPool = isEnable ; } public boolean isConnectionPool ( ) { return _isConnectionPool ; } public void addJavaClass ( String name , Class < ? > type ) throws ConfigException { try { if ( type . isAnnotationPresent ( ClassImplementation . class ) ) _moduleContext . introspectJavaImplClass ( name , type , null ) ; else _moduleContext . introspectJavaClass ( name , type , null , null ) ; } catch ( Exception e ) { throw ConfigException . create ( e ) ; } } public void addJavaClass ( String phpName , String className ) { Class type ; try { type = Class . forName ( className , false , _loader ) ; } catch ( ClassNotFoundException e ) { throw new QuercusRuntimeException ( L . l ( "`{0}' not valid: {1}" , className , e . toString ( ) ) , e ) ; } addJavaClass ( phpName , type ) ; } public void addImplClass ( String name , Class type ) throws ConfigException { throw new UnsupportedOperationException ( "XXX: need to merge with ModuleContext: " + name ) ; } public JavaClassDef getJavaClassDefinition ( Class type , String className ) { JavaClassDef def ; if ( _classNotFoundCache . get ( className ) != null ) return null ; def = _javaClassWrappers . get ( className ) ; if ( def == null ) { try { def = getModuleContext ( ) . getJavaClassDefinition ( type , className ) ; int id = getClassId ( className ) ; _classDefMap [ id ] = def ; _javaClassWrappers . put ( className , def ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new QuercusRuntimeException ( e ) ; } } def . init ( ) ; return def ; } public JavaClassDef getJavaClassDefinition ( String className ) { JavaClassDef def ; if ( _classNotFoundCache . get ( className ) != null ) return null ; def = _javaClassWrappers . get ( className ) ; if ( def == null ) { try { def = getModuleContext ( ) . getJavaClassDefinition ( className ) ; _javaClassWrappers . put ( className , def ) ; } catch ( RuntimeException e ) { _classNotFoundCache . put ( className , className ) ; throw e ; } catch ( Exception e ) { throw new QuercusRuntimeException ( e ) ; } } def . init ( ) ; return def ; } public ClassDef findJavaClassWrapper ( String name ) { ClassDef def = _javaClassWrappers . get ( name ) ; if ( def != null ) return def ; return _lowerJavaClassWrappers . get ( name . toLowerCase ( ) ) ; } public void setIniFile ( Path path ) { if ( path . canRead ( ) ) { Env env = new Env ( this ) ; Value result = FileModule . parse_ini_file ( env , path , false ) ; if ( result instanceof ArrayValue ) { ArrayValue array = ( ArrayValue ) result ; for ( Map . Entry < Value , Value > entry : array . entrySet ( ) ) { setIni ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) . toString ( ) ) ; } } _iniFile = path ; } } public Path getIniFile ( ) { return _iniFile ; } public IniDefinitions getIniDefinitions ( ) { return _iniDefinitions ; } public HashMap < String , Value > getIniMap ( boolean create ) { if ( _iniMap == null && create ) _iniMap = new HashMap < String , Value > ( ) ; return _iniMap ; } public void setIni ( String name , StringValue value ) { _iniDefinitions . get ( name ) . set ( this , value ) ; } public void setIni ( String name , String value ) { _iniDefinitions . get ( name ) . set ( this , value ) ; } public boolean getIniBoolean ( String name ) { return _iniDefinitions . get ( name ) . getAsBoolean ( this ) ; } public long getIniLong ( String name ) { return _iniDefinitions . get ( name ) . getAsLongValue ( this ) . toLong ( ) ; } public Value getIniValue ( String name ) { return _iniDefinitions . get ( name ) . getValue ( this ) ; } public void setServerEnv ( String name , String value ) { setServerEnv ( createString ( name ) , new ConstStringValue ( value ) ) ; } public void setServerEnv ( StringValue name , StringValue value ) { _serverEnvMap . put ( name , value ) ; } public Value getServerEnv ( StringValue name ) { return _serverEnvMap . get ( name ) ; } public HashMap < Value , Value > getServerEnvMap ( ) { return _serverEnvMap ; } public Path getIncludeCache ( StringValue include , String includePath , Path pwd , Path scriptPwd ) { IncludeKey key = new IncludeKey ( include , includePath , pwd , scriptPwd ) ; Path path = _includeCache . get ( key ) ; return path ; } public void putIncludeCache ( StringValue include , String includePath , Path pwd , Path scriptPwd , Path path ) { IncludeKey key = new IncludeKey ( include , includePath , pwd , scriptPwd ) ; _includeCache . put ( key , path ) ; } public long getDefCacheHitCount ( ) { return _defCacheHitCount ; } public long getDefCacheMissCount ( ) { return _defCacheMissCount ; } public void clearDefinitionCache ( ) { } public boolean includeExists ( Path path ) { return _pageManager . precompileExists ( path ) ; } public QuercusPage parse ( Path path ) throws IOException { return _pageManager . parse ( path ) ; } public QuercusPage parse ( Path path , String fileName , int line ) throws IOException { return _pageManager . parse ( path , fileName , line ) ; } public QuercusPage parse ( ReadStream is ) throws IOException { return new InterpretedPage ( QuercusParser . parse ( this , is ) ) ; } public QuercusProgram parseCode ( String code ) throws IOException { QuercusProgram program = _evalCache . get ( code ) ; if ( program == null ) { program = QuercusParser . parseEval ( this , code ) ; _evalCache . put ( code , program ) ; } return program ; } public QuercusProgram parseEvalExpr ( String code ) throws IOException { QuercusProgram program = _evalCache . get ( code ) ; if ( program == null ) { program = QuercusParser . parseEvalExpr ( this , code ) ; _evalCache . put ( code , program ) ; } return program ; } public AbstractFunction parseFunction ( String name , String args , String code ) throws IOException { return QuercusParser . parseFunction ( this , name , args , code ) ; } public AbstractFunction findFunction ( String name ) { AbstractFunction fun = _funMap . get ( name ) ; if ( ( fun == null ) && ! isStrict ( ) ) fun = _lowerFunMap . get ( name . toLowerCase ( ) ) ; return fun ; } public AbstractFunction findFunctionImpl ( String name ) { AbstractFunction fun = _funMap . get ( name ) ; return fun ; } public AbstractFunction findLowerFunctionImpl ( String lowerName ) { AbstractFunction fun = _lowerFunMap . get ( lowerName ) ; return fun ; } public ArrayValue getDefinedFunctions ( ) { ArrayValue internal = new ArrayValueImpl ( ) ; for ( String name : _funMap . keySet ( ) ) { internal . put ( name ) ; } return internal ; } public int getFunctionId ( String name ) { if ( ! isStrict ( ) ) name = name . toLowerCase ( ) ; int id = _functionNameMap . get ( name ) ; if ( id >= 0 ) return id ; synchronized ( _functionNameMap ) { id = _functionNameMap . get ( name ) ; if ( id >= 0 ) return id ; id = _functionNameMap . size ( ) ; extendFunctionMap ( name , id ) ; _functionNameMap . put ( name , id ) ; } return id ; } protected void extendFunctionMap ( String name , int id ) { if ( _functionMap . length <= id ) { AbstractFunction [ ] functionMap = new AbstractFunction [ id + 256 ] ; System . arraycopy ( _functionMap , 0 , functionMap , 0 , _functionMap . length ) ; _functionMap = functionMap ; } _functionMap [ id ] = new UndefinedFunction ( name ) ; } public int findFunctionId ( String name ) { if ( ! isStrict ( ) ) name = name . toLowerCase ( ) ; return _functionNameMap . get ( name ) ; } public int getFunctionIdCount ( ) { return _functionNameMap . size ( ) ; } public AbstractFunction [ ] getFunctionMap ( ) { return _functionMap ; } public int setFunction ( String name , AbstractFunction fun ) { int id = getFunctionId ( name ) ; _functionMap [ id ] = fun ; return id ; } public int getClassId ( String className ) { int id = _classNameMap . get ( className ) ; if ( id >= 0 ) return id ; synchronized ( _classNameMap ) { String name = className . toLowerCase ( ) ; id = _classNameMap . get ( name ) ; if ( id >= 0 ) { _classNameMap . put ( className , id ) ; return id ; } id = _classNameMap . size ( ) ; if ( _classDefMap . length <= id ) { String [ ] classNames = new String [ id + 256 ] ; System . arraycopy ( _classNames , 0 , classNames , 0 , _classNames . length ) ; _classNames = classNames ; ClassDef [ ] classDefMap = new ClassDef [ _classNames . length ] ; System . arraycopy ( _classDefMap , 0 , classDefMap , 0 , _classDefMap . length ) ; _classDefMap = classDefMap ; QuercusClass [ ] classCacheMap = new QuercusClass [ _classNames . length ] ; System . arraycopy ( _classCacheMap , 0 , classCacheMap , 0 , _classCacheMap . length ) ; _classCacheMap = classCacheMap ; } _classNames [ id ] = className ; _classNameMap . put ( className , id ) ; _classNameMap . put ( name , id ) ; } return id ; } public String getClassName ( int id ) { return _classNames [ id ] ; } public int findClassId ( String name ) { return _classNameMap . get ( name ) ; } public int getClassIdCount ( ) { return _classNameMap . size ( ) ; } public ClassDef [ ] getClassDefMap ( ) { return _classDefMap ; } public ClassDef getClassDef ( int id ) { return _classDefMap [ id ] ; } public QuercusClass [ ] getClassCacheMap ( ) { return _classCacheMap ; } public QuercusClass getCachedClass ( int id ) { return _classCacheMap [ id ] ; } public void setCachedClass ( int id , QuercusClass qClass ) { _classCacheMap [ id ] = qClass ; } public int getConstantId ( String name ) { return getConstantId ( new ConstStringValue ( name ) ) ; } public int getConstantId ( StringValue name ) { int id = _constantNameMap . get ( name ) ; if ( id >= 0 ) return id ; synchronized ( _constantNameMap ) { id = _constantNameMap . get ( name ) ; if ( id >= 0 ) return id ; id = _constantNameMap . size ( ) ; if ( _classDefMap . length <= id ) { Value [ ] constantMap = new Value [ id + 256 ] ; System . arraycopy ( _constantMap , 0 , constantMap , 0 , _constantMap . length ) ; _constantMap = constantMap ; Value [ ] constantNameList = new Value [ id + 256 ] ; System . arraycopy ( _constantNameList , 0 , constantNameList , 0 , _constantNameList . length ) ; _constantNameList = constantNameList ; int [ ] constantLowerMap = new int [ _constantMap . length ] ; System . arraycopy ( _constantLowerMap , 0 , constantLowerMap , 0 , _constantLowerMap . length ) ; _constantLowerMap = constantLowerMap ; } _constantNameList [ id ] = name ; int lowerId ; if ( ! name . equals ( name . toLowerCase ( ) ) ) lowerId = getConstantId ( name . toLowerCase ( ) ) ; else lowerId = id ; _constantLowerMap [ id ] = lowerId ; _constantNameMap . put ( name , id ) ; } return id ; } public int getConstantLower ( int id ) { return _constantLowerMap [ id ] ; } public Value getConstantName ( int id ) { return _constantNameList [ id ] ; } public Value [ ] getConstantMap ( ) { return _constantMap ; } public int getConstantIdCount ( ) { return _constantNameMap . size ( ) ; } public static boolean isSuperGlobal ( String name ) { return _superGlobals . contains ( name ) ; } public QuercusClass getStdClass ( ) { return _moduleContext . getStdClass ( ) ; } public ClassDef findClass ( String name ) { int id = getClassId ( name ) ; return _classDefMap [ id ] ; } public HashMap < String , ClassDef > getClassMap ( ) { throw new UnsupportedOperationException ( ) ; } public QuercusModule findModule ( String name ) { ModuleInfo moduleInfo = _modules . get ( name ) ; QuercusModule module = null ; if ( moduleInfo != null ) module = moduleInfo . getModule ( ) ; else module = getModuleContext ( ) . findModule ( name ) ; if ( module == null ) throw new IllegalStateException ( L . l ( "'{0}' is an unknown quercus module" , name ) ) ; return module ; } public HashSet < ModuleStartupListener > getModuleStartupListeners ( ) { return _moduleStartupListeners ; } public boolean isExtensionLoaded ( String name ) { return _extensionSet . contains ( name ) || _extensionSetLowerCase . contains ( name . toLowerCase ( ) ) ; } public HashSet < String > getLoadedExtensions ( ) { return _extensionSet ; } public Value getExtensionFuncs ( String name ) { ArrayValue value = null ; for ( ModuleInfo moduleInfo : _modules . values ( ) ) { Set < String > extensionSet = moduleInfo . getLoadedExtensions ( ) ; if ( extensionSet . contains ( name ) ) { for ( String functionName : moduleInfo . getFunctions ( ) . keySet ( ) ) { if ( value == null ) value = new ArrayValueImpl ( ) ; value . put ( functionName ) ; } } } if ( value != null ) return value ; else return BooleanValue . FALSE ; } public Collection < ModuleInfo > getModules ( ) { return _modules . values ( ) ; } public void init ( ) { initModules ( ) ; initClasses ( ) ; _workDir = getWorkDir ( ) ; _iniDefinitions . addAll ( _ini ) ; _includeCache = new TimedCache < IncludeKey , Path > ( getIncludeCacheMax ( ) , getIncludeCacheTimeout ( ) ) ; initLocal ( ) ; } public void addModule ( QuercusModule module ) { ModuleInfo info = new ModuleInfo ( _moduleContext , module . getClass ( ) . getName ( ) , module ) ; addModuleInfo ( info ) ; } private void initModules ( ) { for ( ModuleInfo info : _moduleContext . getModules ( ) ) { addModuleInfo ( info ) ; } } protected void addModuleInfo ( ModuleInfo info ) { _modules . put ( info . getName ( ) , info ) ; if ( info . getModule ( ) instanceof ModuleStartupListener ) _moduleStartupListeners . add ( ( ModuleStartupListener ) info . getModule ( ) ) ; for ( String ext : info . getLoadedExtensions ( ) ) { _extensionSet . add ( ext ) ; _extensionSetLowerCase . add ( ext . toLowerCase ( ) ) ; } Map < String , Value > map = info . getConstMap ( ) ; if ( map != null ) { for ( Map . Entry < String , Value > entry : map . entrySet ( ) ) { int id = getConstantId ( entry . getKey ( ) ) ; _constantMap [ id ] = entry . getValue ( ) ; } } _iniDefinitions . addAll ( info . getIniDefinitions ( ) ) ; for ( Map . Entry < String , AbstractFunction > entry : info . getFunctions ( ) . entrySet ( ) ) { String funName = entry . getKey ( ) ; AbstractFunction fun = entry . getValue ( ) ; _funMap . put ( funName , fun ) ; _lowerFunMap . put ( funName . toLowerCase ( ) , fun ) ; setFunction ( funName , fun ) ; } } private void initClasses ( ) { for ( Map . Entry < String , JavaClassDef > entry : _moduleContext . getWrapperMap ( ) . entrySet ( ) ) { String name = entry . getKey ( ) ; JavaClassDef def = entry . getValue ( ) ; _javaClassWrappers . put ( name , def ) ; _lowerJavaClassWrappers . put ( name . toLowerCase ( ) , def ) ; } for ( Map . Entry < String , ClassDef > entry : _moduleContext . getClassMap ( ) . entrySet ( ) ) { String name = entry . getKey ( ) ; ClassDef def = entry . getValue ( ) ; int id = getClassId ( name ) ; _classDefMap [ id ] = def ; } } public UnicodeBuilderValue createUnicodeString ( String name ) { UnicodeBuilderValue value = _unicodeMap . get ( name ) ; if ( value == null ) { value = new UnicodeBuilderValue ( name ) ; _unicodeMap . put ( name , value ) ; } return value ; } public StringValue createString ( String name ) { ConstStringValue value = _stringMap . get ( name ) ; if ( value == null ) { value = new ConstStringValue ( name ) ; _stringMap . put ( name , value ) ; } return value ; } public Value getConstant ( int id ) { return _constantMap [ id ] ; } public String createStaticName ( ) { return ( "s" + _staticId ++ ) . intern ( ) ; } public SessionArrayValue loadSession ( Env env , String sessionId ) { long now = System . currentTimeMillis ( ) ; SessionArrayValue session = _sessionManager . getSession ( env , sessionId , now ) ; if ( session == null ) session = _sessionManager . createSession ( env , sessionId , now ) ; return session ; } public void saveSession ( Env env , SessionArrayValue session ) { _sessionManager . saveSession ( env , session ) ; } public void destroySession ( String sessionId ) { _sessionManager . removeSession ( sessionId ) ; } public Object getSpecial ( String key ) { return _specialMap . get ( key ) ; } public void setSpecial ( String key , Object value ) { _specialMap . put ( key , value ) ; } public static Value objectToValue ( Object obj ) { if ( obj == null ) return NullValue . NULL ; else if ( Byte . class . equals ( obj . getClass ( ) ) || Short . class . equals ( obj . getClass ( ) ) || Integer . class . equals ( obj . getClass ( ) ) || Long . class . equals ( obj . getClass ( ) ) ) { return LongValue . create ( ( ( Number ) obj ) . longValue ( ) ) ; } else if ( Float . class . equals ( obj . getClass ( ) ) || Double . class . equals ( obj . getClass ( ) ) ) { return DoubleValue . create ( ( ( Number ) obj ) . doubleValue ( ) ) ; } else if ( String . class . equals ( obj . getClass ( ) ) ) { return new ConstStringValue ( ( String ) obj ) ; } else { return null ; } } protected void initLocal ( ) { StringBuilder sb = new StringBuilder ( "." ) ; setIni ( "include_path" , sb . toString ( ) ) ; } public void start ( ) { } public Env createEnv ( QuercusPage page , WriteStream out , HttpServletRequest request , HttpServletResponse response ) { return new Env ( this , page , out , request , response ) ; } public ExprFactory createExprFactory ( ) { return new ExprFactory ( ) ; } public void close ( ) { _sessionManager . close ( ) ; _pageManager . close ( ) ; } public static Value exnConstructor ( Env env , Value obj , String msg ) { if ( obj != null ) { obj . putField ( env , "message" , new UnicodeValueImpl ( msg ) ) ; } return NullValue . NULL ; } static class IncludeKey { private final StringValue _include ; private final String _includePath ; private final Path _pwd ; private final Path _scriptPwd ; IncludeKey ( StringValue include , String includePath , Path pwd , Path scriptPwd ) { _include = include ; _includePath = includePath ; _pwd = pwd ; _scriptPwd = scriptPwd ; } public int hashCode ( ) { int hash = 37 ; hash = 65537 * hash + _include . hashCode ( ) ; hash = 65537 * hash + _includePath . hashCode ( ) ; hash = 65537 * hash + _pwd . hashCode ( ) ; hash = 65537 * hash + _scriptPwd . hashCode ( ) ; return hash ; } public boolean equals ( Object o ) { if ( ! ( o instanceof IncludeKey ) ) return false ; IncludeKey key = ( IncludeKey ) o ; return ( _include . equals ( key . _include ) && _includePath . equals ( key . _includePath ) && _pwd . equals ( key . _pwd ) && _scriptPwd . equals ( key . _scriptPwd ) ) ; } } static { _superGlobals . add ( "GLOBALS" ) ; _superGlobals . add ( "_COOKIE" ) ; _superGlobals . add ( "_ENV" ) ; _superGlobals . add ( "_FILES" ) ; _superGlobals . add ( "_GET" ) ; _superGlobals . add ( "_POST" ) ; _superGlobals . add ( "_SERVER" ) ; _superGlobals . add ( "_SESSION" ) ; _superGlobals . add ( "_REQUEST" ) ; } public static final IniDefinition INI_INCLUDE_PATH = _ini . add ( "include_path" , "." , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_REGISTER_LONG_ARRAYS = _ini . add ( "register_long_arrays" , true , IniDefinition . PHP_INI_PERDIR ) ; public static final IniDefinition INI_ALWAYS_POPULATE_RAW_POST_DATA = _ini . add ( "always_populate_raw_post_data" , false , IniDefinition . PHP_INI_PERDIR ) ; public static final IniDefinition INI_UNICODE_SEMANTICS = _ini . add ( "unicode.semantics" , false , IniDefinition . PHP_INI_SYSTEM ) ; public static final IniDefinition INI_UNICODE_FALLBACK_ENCODING = _ini . add ( "unicode.fallback_encoding" , "utf-8" , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_UNICODE_FROM_ERROR_MODE = _ini . add ( "unicode.from_error_mode" , "2" , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_UNICODE_FROM_ERROR_SUBST_CHAR = _ini . add ( "unicode.from_error_subst_char" , "3f" , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_UNICODE_HTTP_INPUT_ENCODING = _ini . add ( "unicode.http_input_encoding" , null , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_UNICODE_OUTPUT_ENCODING = _ini . add ( "unicode.output_encoding" , null , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_UNICODE_RUNTIME_ENCODING = _ini . add ( "unicode.runtime_encoding" , null , IniDefinition . PHP_INI_ALL ) ; public static final IniDefinition INI_UNICODE_SCRIPT_ENCODING = _ini . add ( "unicode.script_encoding" , null , IniDefinition . PHP_INI_ALL ) ; } 