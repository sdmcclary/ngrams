public class ProfilesViewHelper { public static String [ ] addSDocFromJavaScriptSource ( File base , String text ) { URL baseFile = FileUtils . uriToURL ( CoreUIUtils . getURI ( base ) ) ; return addSDocFromJavaScriptSource ( baseFile , text ) ; } public static String [ ] addSDocFromJavaScriptSource ( URL base , String text ) { List < String > fileList = new ArrayList < String > ( ) ; int commentStart = text . indexOf ( "/*" ) ; while ( commentStart != - 1 ) { int commentEnd = text . indexOf ( "*/" , commentStart + 2 ) ; if ( commentEnd != - 1 ) { Pattern p = Pattern . compile ( "@sdoc\\s+([^\r\n]+)" ) ; Matcher matcher = p . matcher ( text ) ; String matchedString = "" ; while ( matcher . find ( ) ) { matchedString = matcher . group ( 1 ) ; } if ( matchedString != "" ) { String filename = matchedString . trim ( ) ; if ( filename . charAt ( 0 ) != '/' || filename . indexOf ( ":" ) == - 1 ) { filename = CoreUIUtils . joinURI ( base , filename ) ; } fileList . add ( CoreUIUtils . getURI ( filename ) ) ; } commentStart = text . indexOf ( "/*" , commentEnd + 2 ) ; } else { break ; } } return fileList . toArray ( new String [ fileList . size ( ) ] ) ; } public static String [ ] addScriptTagsFromHTMLSource ( File base , String text , IParseState parseState ) { URL baseFile = FileUtils . uriToURL ( CoreUIUtils . getURI ( base ) ) ; return addScriptTagsFromHTMLSource ( baseFile , text , parseState ) ; } public static String [ ] addScriptTagsFromHTMLSource ( URL base , String text , IParseState parseState ) { List < String > fileList = new ArrayList < String > ( ) ; IParseNode results = parseState . getParseResults ( ) ; IParseNode [ ] current = results . getChildren ( ) ; IQueue queue = new ArrayQueue ( ) ; List < String > srcs = new ArrayList < String > ( ) ; for ( int i = 0 ; i < current . length ; i ++ ) { queue . enqueue ( current [ i ] ) ; } while ( queue . size ( ) > 0 ) { IParseNode node = ( IParseNode ) queue . dequeue ( ) ; IParseNode [ ] children = node . getChildren ( ) ; for ( int i = 0 ; i < children . length ; i ++ ) { IParseNode child = children [ i ] ; if ( "script" . equals ( child . getText ( ) ) ) { boolean hasFile = false ; String filename = child . getAttribute ( "src" ) ; filename = makeHttpUrl ( filename ) ; String aSrc = "" ; for ( int j = 0 ; j < srcs . size ( ) ; j ++ ) { aSrc = srcs . get ( j ) ; if ( aSrc == filename ) { hasFile = true ; break ; } } if ( hasFile == false ) { srcs . add ( filename ) ; } } else { queue . enqueue ( child ) ; } } } for ( int i = 0 ; i < srcs . size ( ) ; i ++ ) { String src = srcs . get ( i ) ; if ( src != null && src . length ( ) > 0 ) { String source = StringUtils . trimStringQuotes ( src ) ; source = stripQuerystring ( source ) ; if ( ! CoreUIUtils . isURI ( source ) && source . charAt ( 0 ) != '/' ) { source = CoreUIUtils . joinURI ( base , source ) ; } String uri = CoreUIUtils . getURI ( source ) ; fileList . add ( uri ) ; String sdocFile = findScriptDocFile ( uri ) ; if ( sdocFile != null ) { fileList . add ( CoreUIUtils . getURI ( sdocFile ) ) ; } URL url = FileUtils . uriToURL ( uri ) ; if ( url != null ) { String [ ] subFiles = addScriptFromJavaScriptSource ( url ) ; fileList . addAll ( Arrays . asList ( subFiles ) ) ; } } } return fileList . toArray ( new String [ fileList . size ( ) ] ) ; } public static String [ ] addSDocFromJavaScriptSource ( URL url ) { URL basePath = getBasePath ( url ) ; try { String text = FileUtils . readContent ( url ) ; if ( text != null ) { return addSDocFromJavaScriptSource ( basePath , text ) ; } else { return new String [ 0 ] ; } } catch ( IOException ex ) { return new String [ 0 ] ; } } public static URL getBasePath ( URL url ) { return CoreUIUtils . trimURLSegments ( url , 1 ) ; } public static URL getBasePath ( String uri ) { URI uri2 ; try { uri2 = new URI ( uri ) ; URL url = uri2 . toURL ( ) ; return getBasePath ( url ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; return null ; } catch ( URISyntaxException e ) { e . printStackTrace ( ) ; return null ; } } public static String [ ] addScriptFromJavaScriptSource ( URL url ) { URL basePath = getBasePath ( url ) ; String text ; try { text = FileUtils . readContent ( url ) ; if ( text != null ) { return addScriptFromJavaScriptSource ( basePath , text ) ; } } catch ( IOException e ) { return new String [ 0 ] ; } return new String [ 0 ] ; } public static String [ ] addScriptFromJavaScriptSource ( File base , String text ) { URL baseFile = FileUtils . uriToURL ( CoreUIUtils . getURI ( base ) ) ; return addScriptFromJavaScriptSource ( baseFile , text ) ; } public static String [ ] addScriptFromJavaScriptSource ( URL base , String text ) { List < String > fileList = new ArrayList < String > ( ) ; Pattern pattern = Pattern . compile ( "^MochiKit\\.MochiKit\\.SUBMODULES\\s*=\\s*\\[[\\r\\n]+([^\\]]+)\\]" , Pattern . MULTILINE ) ; Matcher matcher = pattern . matcher ( text ) ; String names = "" ; while ( matcher . find ( ) ) { names = matcher . group ( 1 ) ; } pattern = Pattern . compile ( "\"([^\"]+)\"" ) ; matcher = pattern . matcher ( names ) ; List < String > mochikitNames = new ArrayList < String > ( ) ; while ( matcher . find ( ) ) { mochikitNames . add ( matcher . group ( 1 ) ) ; } String [ ] sdocs = ProfilesViewHelper . addSDocFromJavaScriptSource ( base , text ) ; fileList . addAll ( Arrays . asList ( sdocs ) ) ; for ( int i = 0 ; i < mochikitNames . size ( ) ; i ++ ) { String source = CoreUIUtils . joinURI ( base , mochikitNames . get ( i ) + ".js" ) ; fileList . add ( CoreUIUtils . getURI ( source ) ) ; URL u = FileUtils . uriToURL ( source ) ; if ( u != null ) { String [ ] subFiles = addSDocFromJavaScriptSource ( u ) ; fileList . addAll ( Arrays . asList ( subFiles ) ) ; } String sdocFile = findScriptDocFile ( source ) ; if ( sdocFile != null ) { fileList . add ( CoreUIUtils . getURI ( sdocFile ) ) ; } } return fileList . toArray ( new String [ fileList . size ( ) ] ) ; } public static String findScriptDocFile ( String fileName ) { String baseName = CoreUIUtils . getURI ( FileUtils . stripExtension ( fileName ) ) ; String sdocName = baseName + ".sdoc" ; URL sdocURL = FileUtils . uriToURL ( sdocName ) ; if ( isValidURL ( sdocURL ) ) { return sdocURL . toString ( ) ; } else { return null ; } } public static String stripQuerystring ( String source ) { int tmp = source . indexOf ( "?" ) ; if ( tmp > - 1 ) { source = source . substring ( 0 , tmp ) ; } return source ; } public static boolean isValidURL ( URL url ) { if ( url == null ) { return false ; } try { if ( FileUtils . isFileURL ( url ) ) { File file = FileUtils . urlToFile ( url ) ; return file . exists ( ) && file . isFile ( ) && file . canRead ( ) ; } else { InputStream is = url . openStream ( ) ; is . close ( ) ; return true ; } } catch ( IOException e ) { return false ; } } public static String makeHttpUrl ( String url ) { if ( url != null && url . startsWith ( "//" ) ) { return "http:" + url ; } else { return url ; } } } 