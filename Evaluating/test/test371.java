class SchemaReaderImpl extends AbstractSchemaReader { private static final PropertyId < ? > [ ] supportedPropertyIds = { ValidateProperty . ERROR_HANDLER , ValidateProperty . ENTITY_RESOLVER , } ; public Schema createSchema ( SAXSource source , PropertyMap properties ) throws IOException , SAXException , IncorrectSchemaException { SymbolTable symbolTable = new SymbolTable ( ) ; XMLGrammarPreparser preparser = new XMLGrammarPreparser ( symbolTable ) ; XMLGrammarPool grammarPool = new XMLGrammarPoolImpl ( ) ; preparser . registerPreparser ( XMLGrammarDescription . XML_SCHEMA , null ) ; preparser . setGrammarPool ( grammarPool ) ; ErrorHandler eh = properties . get ( ValidateProperty . ERROR_HANDLER ) ; SAXXMLErrorHandler xeh = new SAXXMLErrorHandler ( eh ) ; preparser . setErrorHandler ( xeh ) ; EntityResolver er = properties . get ( ValidateProperty . ENTITY_RESOLVER ) ; if ( er != null ) preparser . setEntityResolver ( new EntityResolverWrapper ( er ) ) ; try { preparser . preparseGrammar ( XMLGrammarDescription . XML_SCHEMA , toXMLInputSource ( source . getInputSource ( ) ) ) ; Name attributeOwner = properties . get ( WrapProperty . ATTRIBUTE_OWNER ) ; if ( attributeOwner != null ) { Reader r = new StringReader ( createWrapper ( attributeOwner ) ) ; preparser . preparseGrammar ( XMLGrammarDescription . XML_SCHEMA , new XMLInputSource ( null , null , null , r , null ) ) ; } } catch ( XNIException e ) { throw ValidatorImpl . toSAXException ( e ) ; } if ( xeh . getHadError ( ) ) throw new IncorrectSchemaException ( ) ; return new SchemaImpl ( new SynchronizedSymbolTable ( symbolTable ) , new CachingParserPool . SynchronizedGrammarPool ( grammarPool ) , properties , supportedPropertyIds ) ; } public Option getOption ( String uri ) { return null ; } static private String createWrapper ( Name attributeOwner ) { return "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"" + "    targetNamespace=\"" + attributeOwner . getNamespaceUri ( ) + "\">" + "  <xs:element name=\"" + attributeOwner . getLocalName ( ) + "\">" + "    <xs:complexType><xs:anyAttribute processContents=\"strict\"/></xs:complexType>" + "  </xs:element>" + "</xs:schema>" ; } private static XMLInputSource toXMLInputSource ( InputSource in ) { XMLInputSource xin = new XMLInputSource ( in . getPublicId ( ) , in . getSystemId ( ) , null ) ; xin . setByteStream ( in . getByteStream ( ) ) ; xin . setCharacterStream ( in . getCharacterStream ( ) ) ; xin . setEncoding ( in . getEncoding ( ) ) ; return xin ; } } 