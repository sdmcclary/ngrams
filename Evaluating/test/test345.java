<<<<<<< HEAD
public class MysqlModule extends AbstractQuercusModule { private static final Logger log = Log . open ( MysqlModule . class ) ; private static final L10N L = new L10N ( MysqlModule . class ) ; public static final int MYSQL_ASSOC = JdbcResultResource . FETCH_ASSOC ; public static final int MYSQL_NUM = JdbcResultResource . FETCH_NUM ; public static final int MYSQL_BOTH = JdbcResultResource . FETCH_BOTH ; public static final int MYSQL_USE_RESULT = 0x0 ; public static final int MYSQL_STORE_RESULT = 0x1 ; private static final StringValue SV_NAME = new ConstStringValue ( "name" ) ; private static final StringValue SV_TABLE = new ConstStringValue ( "table" ) ; private static final StringValue SV_DEF = new ConstStringValue ( "def" ) ; private static final StringValue SV_MAX_LENGTH = new ConstStringValue ( "max_length" ) ; private static final StringValue SV_NOT_NULL = new ConstStringValue ( "not_null" ) ; private static final StringValue SV_PRIMARY_KEY = new ConstStringValue ( "primary_key" ) ; private static final StringValue SV_MULTIPLE_KEY = new ConstStringValue ( "multiple_key" ) ; private static final StringValue SV_UNIQUE_KEY = new ConstStringValue ( "unique_key" ) ; private static final StringValue SV_NUMERIC = new ConstStringValue ( "numeric" ) ; private static final StringValue SV_BLOB = new ConstStringValue ( "blob" ) ; private static final StringValue SV_TYPE = new ConstStringValue ( "type" ) ; private static final StringValue SV_UNSIGNED = new ConstStringValue ( "unsigned" ) ; private static final StringValue SV_ZEROFILL = new ConstStringValue ( "zerofill" ) ; public MysqlModule ( ) { } public String [ ] getLoadedExtensions ( ) { return new String [ ] { "mysql" } ; } public static int mysql_affected_rows ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . affected_rows ( ) ; } public static Value mysql_info ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . info ( env ) ; } public static boolean mysql_change_user ( Env env , StringValue user , StringValue pass , @ Optional StringValue database , @ Optional Mysqli conn ) { return false ; } public static StringValue mysql_client_encoding ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . client_encoding ( env ) ; } public static boolean mysql_close ( Env env , @ Optional Mysqli conn ) { boolean isEnvConn = false ; if ( conn == null ) { conn = ( Mysqli ) env . getSpecialValue ( "caucho.mysql" ) ; isEnvConn = true ; } if ( conn == null ) { env . warning ( L . l ( "no MySQL-Link resource supplied" ) ) ; return false ; } if ( isEnvConn || env . getSpecialValue ( "caucho.mysql" ) != null ) env . removeSpecialValue ( "caucho.mysql" ) ; if ( conn . isConnected ( ) ) { conn . close ( env ) ; return true ; } else { env . warning ( L . l ( "connection is either not connected or is already closed" ) ) ; return false ; } } public static boolean mysql_create_db ( Env env , @ NotNull StringValue name , @ Optional Mysqli conn ) { if ( name . length ( ) == 0 ) return false ; if ( conn == null ) conn = getConnection ( env ) ; Statement stmt = null ; try { try { Connection sqlConn = conn . validateConnection ( ) . getConnection ( env ) ; if ( sqlConn == null ) return false ; stmt = sqlConn . createStatement ( ) ; stmt . setEscapeProcessing ( false ) ; stmt . executeUpdate ( "CREATE DATABASE " + name . toString ( ) ) ; } finally { if ( stmt != null ) stmt . close ( ) ; } } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } return true ; } public static boolean mysql_data_seek ( Env env , @ NotNull MysqliResult result , int rowNumber ) { if ( result == null ) return false ; if ( result . seek ( env , rowNumber ) ) { return true ; } else { env . warning ( L . l ( "Offset {0} is invalid for MySQL (or the query data is unbuffered)" , rowNumber ) ) ; return false ; } } public static Value mysql_db_name ( Env env , @ NotNull MysqliResult result , int row , @ Optional ( "0" ) Value field ) { if ( result == null ) return BooleanValue . FALSE ; return mysql_result ( env , result , row , field ) ; } public static Value mysql_dbname ( Env env , @ NotNull MysqliResult result , int row ) { return mysql_db_name ( env , result , row , env . createStringOld ( "0" ) ) ; } public static Value mysql_result ( Env env , @ NotNull MysqliResult result , int row , @ Optional ( "0" ) Value field ) { if ( result == null ) return BooleanValue . FALSE ; return result . getResultField ( env , row , field ) ; } public static boolean mysql_drop_db ( Env env , @ NotNull StringValue databaseName , @ Optional Mysqli conn ) { if ( databaseName . length ( ) == 0 ) return false ; Value value = mysql_query ( env , env . createStringOld ( "DROP DATABASE " + databaseName ) , conn ) ; return ( value != null && value . toBoolean ( ) ) ; } public static boolean mysql_dropdb ( Env env , @ NotNull StringValue databaseName , @ Optional Mysqli conn ) { return mysql_drop_db ( env , databaseName , conn ) ; } public static int mysql_errno ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; StringValue error = conn . error ( env ) ; int errno = conn . errno ( ) ; if ( errno != 0 ) return errno ; else if ( error . length ( ) != 0 ) return 2006 ; else return 0 ; } public static StringValue mysql_error ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . error ( env ) ; } public static StringValue mysql_escape_string ( Env env , Value val ) { StringValue unescapedString = val . toStringValue ( env ) ; StringValue sb = unescapedString . createStringBuilder ( ) ; int len = unescapedString . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char ch = unescapedString . charAt ( i ) ; switch ( ch ) { case 0 : sb . append ( '\\' ) ; sb . append ( 0 ) ; break ; case '\n' : sb . append ( '\\' ) ; sb . append ( 'n' ) ; break ; case '\r' : sb . append ( '\\' ) ; sb . append ( 'r' ) ; break ; case '\\' : sb . append ( '\\' ) ; sb . append ( '\\' ) ; break ; case '\'' : sb . append ( '\\' ) ; sb . append ( '\'' ) ; break ; case '"' : sb . append ( '\\' ) ; sb . append ( '"' ) ; break ; case 0x1A : sb . append ( '\\' ) ; sb . append ( 'Z' ) ; break ; default : sb . append ( ch ) ; } } return sb ; } public static StringValue mysql_real_escape_string ( Env env , Value val , @ Optional Mysqli conn ) { StringValue unescapedString = val . toStringValue ( env ) ; if ( conn == null ) conn = getConnection ( env ) ; return conn . real_escape_string ( unescapedString ) ; } public static Value mysql_fetch_array ( Env env , @ NotNull MysqliResult result , @ Optional ( "MYSQL_BOTH" ) int type ) { if ( result == null ) return BooleanValue . FALSE ; Value value = result . fetch_array ( env , type ) ; if ( value != null ) return value ; else return BooleanValue . FALSE ; } @ ReturnNullAsFalse public static ArrayValue mysql_fetch_assoc ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return null ; return result . fetch_array ( env , MYSQL_ASSOC ) ; } public static Value mysql_fetch_field ( Env env , @ NotNull MysqliResult result , @ Optional ( "-1" ) int fieldOffset ) { if ( result == null ) return BooleanValue . FALSE ; try { if ( fieldOffset == - 1 ) { fieldOffset = result . field_tell ( env ) ; result . setFieldOffset ( fieldOffset + 1 ) ; } ResultSetMetaData md = result . getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { return BooleanValue . FALSE ; } int jdbcField = fieldOffset + 1 ; int jdbcColumnType = md . getColumnType ( jdbcField ) ; String catalogName = md . getCatalogName ( jdbcField ) ; String tableName = md . getTableName ( jdbcField ) ; String schemaName = md . getSchemaName ( jdbcField ) ; String columnName = md . getColumnName ( jdbcField ) ; String columnLabel = md . getColumnLabel ( jdbcField ) ; if ( schemaName == null || "" . equals ( schemaName ) ) schemaName = tableName ; if ( ( tableName == null || "" . equals ( tableName ) ) && result . isLastSqlDescribe ( ) ) tableName = "COLUMNS" ; JdbcColumnMetaData columnMd = null ; JdbcConnectionResource conn = getConnection ( env ) . validateConnection ( ) ; JdbcTableMetaData tableMd = conn . getTableMetaData ( catalogName , null , tableName ) ; if ( tableMd != null ) columnMd = tableMd . getColumn ( columnName ) ; int maxLength = 0 ; int notNull = md . isNullable ( jdbcField ) == ResultSetMetaData . columnNullable ? 0 : 1 ; int numeric = JdbcColumnMetaData . isNumeric ( jdbcColumnType ) ? 1 : 0 ; int blob = JdbcColumnMetaData . isBlob ( jdbcColumnType ) ? 1 : 0 ; String type = result . getFieldType ( fieldOffset , jdbcColumnType ) ; int unsigned = md . isSigned ( jdbcField ) ? 0 : numeric ; if ( jdbcColumnType == Types . BOOLEAN || jdbcColumnType == Types . BIT ) unsigned = 0 ; else if ( jdbcColumnType == Types . DECIMAL ) numeric = 1 ; int zerofill = 0 ; int primaryKey = 0 ; int multipleKey = 0 ; int uniqueKey = 0 ; if ( columnMd != null ) { zerofill = columnMd . isZeroFill ( ) ? 1 : 0 ; primaryKey = columnMd . isPrimaryKey ( ) ? 1 : 0 ; uniqueKey = columnMd . isUnique ( ) ? 1 : 0 ; } else notNull = 1 ; ObjectValue fieldResult = env . createObject ( ) ; fieldResult . putThisField ( env , SV_NAME , env . createString ( columnLabel , "UTF-8" ) ) ; fieldResult . putThisField ( env , SV_TABLE , env . createString ( tableName , "UTF-8" ) ) ; fieldResult . putThisField ( env , SV_DEF , env . getEmptyString ( ) ) ; fieldResult . putThisField ( env , SV_MAX_LENGTH , LongValue . create ( maxLength ) ) ; fieldResult . putThisField ( env , SV_NOT_NULL , LongValue . create ( notNull ) ) ; fieldResult . putThisField ( env , SV_PRIMARY_KEY , LongValue . create ( primaryKey ) ) ; fieldResult . putThisField ( env , SV_MULTIPLE_KEY , LongValue . create ( multipleKey ) ) ; fieldResult . putThisField ( env , SV_UNIQUE_KEY , LongValue . create ( uniqueKey ) ) ; fieldResult . putThisField ( env , SV_NUMERIC , LongValue . create ( numeric ) ) ; fieldResult . putThisField ( env , SV_BLOB , LongValue . create ( blob ) ) ; fieldResult . putThisField ( env , SV_TYPE , env . createString ( type , "UTF-8" ) ) ; fieldResult . putThisField ( env , SV_UNSIGNED , LongValue . create ( unsigned ) ) ; fieldResult . putThisField ( env , SV_ZEROFILL , LongValue . create ( zerofill ) ) ; return fieldResult ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public static Value mysql_query ( Env env , StringValue sql , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . query ( env , sql , MYSQL_STORE_RESULT ) ; } public static Value mysql_fetch_lengths ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return BooleanValue . FALSE ; return result . fetch_lengths ( ) ; } public static Value mysql_fetch_object ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return BooleanValue . FALSE ; Value value = result . fetch_object ( env ) ; if ( value . isNull ( ) ) value = BooleanValue . FALSE ; return value ; } @ ReturnNullAsFalse public static ArrayValue mysql_fetch_row ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return null ; return result . fetch_row ( env ) ; } public static Value mysql_field_flags ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { if ( result == null ) return BooleanValue . FALSE ; Value fieldName = result . getFieldName ( env , fieldOffset ) ; if ( fieldName == BooleanValue . FALSE ) return BooleanValue . FALSE ; Value fieldTable = result . getFieldTable ( env , fieldOffset ) ; Value fieldJdbcType = result . getJdbcType ( fieldOffset ) ; String fieldMysqlType = result . getMysqlType ( fieldOffset ) ; if ( ( fieldTable == BooleanValue . FALSE ) || ( fieldJdbcType == BooleanValue . FALSE ) || ( fieldMysqlType == null ) ) return BooleanValue . FALSE ; String sql = "SHOW FULL COLUMNS FROM " + fieldTable . toString ( ) + " LIKE \'" + fieldName . toString ( ) + "\'" ; Mysqli conn = getConnection ( env ) ; Value resultV = conn . validateConnection ( ) . realQuery ( env , sql ) ; Object metaResult = resultV . toJavaObject ( ) ; if ( metaResult instanceof MysqliResult ) return ( ( MysqliResult ) metaResult ) . getFieldFlagsImproved ( env , fieldJdbcType . toInt ( ) , fieldMysqlType ) ; return BooleanValue . FALSE ; } public static Value mysql_field_name ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { if ( result == null ) return BooleanValue . FALSE ; return result . getFieldName ( env , fieldOffset ) ; } public static Value mysql_fieldname ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { return mysql_field_name ( env , result , fieldOffset ) ; } public static boolean mysql_field_seek ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { if ( result == null ) return false ; return result . field_seek ( env , fieldOffset ) ; } public static Value mysql_field_table ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { if ( result == null ) return BooleanValue . FALSE ; return result . getFieldTable ( env , fieldOffset ) ; } public static Value mysql_fieldtable ( Env env , @ NotNull MysqliResult result , int fieldOffset ) { return mysql_field_table ( env , result , fieldOffset ) ; } public static Value mysql_field_type ( Env env , @ NotNull MysqliResult result , Value fieldOffset ) { if ( result == null ) { return NullValue . NULL ; } if ( ! fieldOffset . isset ( ) ) return NullValue . NULL ; return result . getFieldType ( env , fieldOffset . toInt ( ) ) ; } public static Value mysql_fieldtype ( Env env , @ NotNull MysqliResult result , Value fieldOffset ) { return mysql_field_type ( env , result , fieldOffset ) ; } public static Value mysql_field_len ( Env env , @ NotNull MysqliResult result , @ Optional ( "0" ) int fieldOffset ) { if ( result == null ) return BooleanValue . FALSE ; return result . getFieldLength ( env , fieldOffset ) ; } public static boolean mysql_free_result ( @ NotNull MysqliResult result ) { if ( result == null ) return false ; result . close ( ) ; return true ; } public static boolean mysql_freeresult ( @ NotNull MysqliResult result ) { return mysql_free_result ( result ) ; } public static StringValue mysql_get_client_info ( Env env ) { return Mysqli . getClientInfo ( env ) ; } public static StringValue mysql_get_host_info ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . get_host_info ( env ) ; } public static int mysql_get_proto_info ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . get_proto_info ( ) ; } public static Value mysql_get_server_info ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) { conn = getConnection ( env ) ; } if ( conn != null && conn . isConnected ( ) ) return conn . get_server_info ( env ) ; else return NullValue . NULL ; } public static Value mysql_insert_id ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . insert_id ( env ) ; } public static Value mysql_list_dbs ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return mysql_query ( env , env . createStringOld ( "SELECT SCHEMA_NAME AS 'Database' FROM information_schema.SCHEMATA" ) , conn ) ; } public static Value mysql_list_fields ( Env env , String database , StringValue tableName , @ Optional Mysqli conn ) { if ( database == null || database . length ( ) == 0 ) return BooleanValue . FALSE ; if ( tableName . length ( ) == 0 ) return BooleanValue . FALSE ; return mysql_db_query ( env , database , env . createStringOld ( "SELECT * FROM " + tableName + " WHERE NULL" ) , conn ) ; } public static Value mysql_listfields ( Env env , String databaseName , StringValue tableName , @ Optional Mysqli conn ) { return mysql_list_fields ( env , databaseName , tableName , conn ) ; } public static Value mysql_db_query ( Env env , String databaseName , StringValue query , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; if ( ! conn . select_db ( databaseName ) ) return BooleanValue . FALSE ; return conn . query ( env , query , 1 ) ; } public static boolean mysql_select_db ( Env env , String dbName , @ Optional Mysqli conn ) { if ( dbName == null || dbName . length ( ) == 0 ) return false ; if ( conn == null ) return getConnection ( env , dbName ) . select_db ( dbName ) ; else return conn . select_db ( dbName ) ; } public static Object mysql_list_tables ( Env env , StringValue databaseName , @ Optional Mysqli conn ) { return mysql_query ( env , env . createStringOld ( "SHOW TABLES FROM " + databaseName ) , conn ) ; } public static Value mysql_num_fields ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return BooleanValue . FALSE ; return LongValue . create ( result . num_fields ( ) ) ; } public static Value mysql_numfields ( Env env , @ NotNull MysqliResult result ) { return mysql_num_fields ( env , result ) ; } public static Value mysql_num_rows ( Env env , @ NotNull MysqliResult result ) { if ( result == null ) return BooleanValue . FALSE ; return LongValue . create ( result . num_rows ( ) ) ; } public static Value mysql_numrows ( Env env , @ NotNull MysqliResult result ) { return mysql_num_rows ( env , result ) ; } public static Value mysql_pconnect ( Env env , @ Optional StringValue server , @ Optional StringValue user , @ Optional StringValue password , @ Optional boolean newLink , @ Optional int flags ) { Value value = mysql_connect ( env , server , user , password , newLink , flags ) ; Mysqli conn = ( Mysqli ) env . getSpecialValue ( "caucho.mysql" ) ; if ( conn != null && conn . isConnected ( ) ) conn . setPersistent ( ) ; return value ; } public static Value mysql_connect ( Env env , @ Optional StringValue host , @ Optional StringValue userName , @ Optional StringValue password , @ Optional boolean isNewLink , @ Optional int flags ) { int port = 3306 ; String socketStr = "" ; String hostStr = host . toString ( ) ; int length = host . length ( ) ; if ( length == 0 ) { hostStr = env . getIniString ( "mysql.default_host" ) ; if ( hostStr == null ) hostStr = "localhost" ; } int sepIndex = hostStr . indexOf ( ':' ) ; if ( sepIndex > - 1 ) { String tmp ; String portStr ; tmp = hostStr ; hostStr = tmp . substring ( 0 , sepIndex ) ; if ( hostStr . length ( ) == 0 ) { hostStr = "localhost" ; } sepIndex ++ ; tmp = tmp . substring ( sepIndex ) ; if ( ( tmp . length ( ) > 0 ) && ( tmp . charAt ( 0 ) != '/' ) ) { sepIndex = tmp . indexOf ( ':' ) ; if ( sepIndex > - 1 ) { portStr = tmp . substring ( 0 , sepIndex ) ; sepIndex ++ ; socketStr = tmp . substring ( sepIndex ) ; } else { portStr = tmp ; } try { port = Integer . parseInt ( portStr ) ; } catch ( NumberFormatException ex ) { } } else { socketStr = tmp ; } } Mysqli mysqli = new Mysqli ( env , hostStr , userName . toString ( ) , password . toString ( ) , "" , port , socketStr , flags , null , null , isNewLink ) ; if ( ! mysqli . isConnected ( ) ) return BooleanValue . FALSE ; Value value = env . wrapJava ( mysqli ) ; env . setSpecialValue ( "caucho.mysql" , mysqli ) ; return value ; } public static boolean mysql_ping ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . ping ( env ) ; } public static Value mysql_stat ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; Value result = conn . stat ( env ) ; return result == BooleanValue . FALSE ? NullValue . NULL : result ; } public static Value mysql_tablename ( Env env , @ NotNull MysqliResult result , int i ) { if ( result == null ) return BooleanValue . FALSE ; return result . getResultField ( env , i , LongValue . ZERO ) ; } public static Object mysql_unbuffered_query ( Env env , @ NotNull StringValue name , @ Optional Mysqli conn ) { return mysql_query ( env , name , conn ) ; } public static Value mysql_thread_id ( Env env , @ Optional Mysqli conn ) { if ( conn == null ) conn = getConnection ( env ) ; return conn . thread_id ( env ) ; } private static Mysqli getConnection ( Env env ) { return getConnection ( env , "" ) ; } private static Mysqli getConnection ( Env env , String db ) { Mysqli conn = ( Mysqli ) env . getSpecialValue ( "caucho.mysql" ) ; if ( conn != null ) return conn ; conn = new Mysqli ( env , env . getEmptyString ( ) , env . getEmptyString ( ) , env . getEmptyString ( ) , db , 3306 , env . getEmptyString ( ) ) ; env . setSpecialValue ( "caucho.mysql" , conn ) ; return conn ; } } 
=======
public class SchematronProperty { private SchematronProperty ( ) { } public static final StringPropertyId PHASE = new StringPropertyId ( "PHASE" ) ; static public class PhaseOption extends StringOption { private PhaseOption ( ) { super ( PHASE ) ; } public String normalize ( String value ) throws OptionArgumentFormatException { value = value . trim ( ) ; if ( ! value . equals ( "#ALL" ) && ! Naming . isNcname ( value ) ) throw new OptionArgumentFormatException ( ) ; return value ; } } public static final StringOption PHASE_OPTION = new PhaseOption ( ) ; public static final FlagPropertyId DIAGNOSE = new FlagPropertyId ( "DIAGNOSE" ) ; public static Option getOption ( String uri ) { if ( ! uri . startsWith ( SchemaReader . BASE_URI ) ) return null ; uri = uri . substring ( SchemaReader . BASE_URI . length ( ) ) ; if ( uri . equals ( "diagnose" ) ) return new FlagOption ( DIAGNOSE ) ; if ( uri . equals ( "phase" ) ) return PHASE_OPTION ; return null ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
