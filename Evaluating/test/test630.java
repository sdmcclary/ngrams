<<<<<<< HEAD
public abstract class TableViewerEditor extends FieldEditor { public static class ColumnsDescription { private ColumnLayoutData [ ] columns ; private String [ ] headers ; private boolean drawLines ; public ColumnsDescription ( ColumnLayoutData [ ] columns , String [ ] headers , boolean drawLines ) { this . columns = columns ; this . headers = headers ; this . drawLines = drawLines ; } public ColumnsDescription ( String [ ] headers , boolean drawLines ) { this ( createColumnWeightData ( headers . length ) , headers , drawLines ) ; } public ColumnsDescription ( int nColumns , boolean drawLines ) { this ( createColumnWeightData ( nColumns ) , null , drawLines ) ; } private static ColumnLayoutData [ ] createColumnWeightData ( int nColumns ) { ColumnLayoutData [ ] data = new ColumnLayoutData [ nColumns ] ; for ( int i = 0 ; i < nColumns ; i ++ ) { data [ i ] = new ColumnWeightData ( 1 ) ; } return data ; } } private TableViewer fTable ; protected Control fTableControl ; private ColumnsDescription fTableColumns ; private ListViewerAdapter fListViewerAdapter ; private Composite buttonBox ; protected List < Object > fElements ; private Button addButton ; private Button editButton ; private Button removeButton ; private SelectionListener selectionListener ; protected TableViewerEditor ( String labelText , Composite parent ) { init ( "" , labelText ) ; fListViewerAdapter = new ListViewerAdapter ( ) ; fElements = new ArrayList ( 10 ) ; fTableColumns = createTableColumns ( ) ; createControl ( parent ) ; } protected ColumnsDescription createTableColumns ( ) { return null ; } protected abstract ITableLabelProvider createLabelProvider ( ) ; private void addPressed ( ) { setPresentsDefaultValue ( false ) ; Object input = createObject ( ) ; if ( input != null ) { addElement ( input ) ; } } private void editPressed ( ) { setPresentsDefaultValue ( false ) ; Object toEdit = getSelectedElements ( ) . get ( 0 ) ; Object input = editObject ( toEdit ) ; if ( input != null ) { replaceElement ( toEdit , input ) ; } } protected abstract Object editObject ( Object toEdit ) ; private void replaceElement ( Object oldElement , Object newElement ) throws IllegalArgumentException { int idx = fElements . indexOf ( oldElement ) ; if ( idx != - 1 ) { fElements . set ( idx , newElement ) ; if ( isOkToUse ( fTableControl ) ) { List selected = getSelectedElements ( ) ; if ( selected . remove ( oldElement ) ) { selected . add ( newElement ) ; } fTable . refresh ( ) ; selectElements ( new StructuredSelection ( selected ) ) ; } selectionChanged ( ) ; } else { throw new IllegalArgumentException ( ) ; } } private void selectElements ( ISelection selection ) { if ( isOkToUse ( fTableControl ) ) { fTable . setSelection ( selection , true ) ; } } public boolean addElement ( Object element ) { return addElement ( element , fElements . size ( ) ) ; } public boolean addElement ( Object element , int index ) { if ( fElements . contains ( element ) ) { return false ; } fElements . add ( index , element ) ; if ( isOkToUse ( fTableControl ) ) { fTable . refresh ( ) ; fTable . setSelection ( new StructuredSelection ( element ) ) ; } selectionChanged ( ) ; return true ; } protected void adjustForNumColumns ( int numColumns ) { Control control = getLabelControl ( ) ; ( ( GridData ) control . getLayoutData ( ) ) . horizontalSpan = numColumns ; ( ( GridData ) fTableControl . getLayoutData ( ) ) . horizontalSpan = numColumns - 1 ; } private void createButtons ( Composite box ) { addButton = createPushButton ( box , "ListEditor.add" ) ; editButton = createPushButton ( box , "TableViewerEditor.edit" ) ; editButton . setText ( "&Edit..." ) ; removeButton = createPushButton ( box , "ListEditor.remove" ) ; } private Button createPushButton ( Composite parent , String key ) { Button button = new Button ( parent , SWT . PUSH ) ; button . setText ( JFaceResources . getString ( key ) ) ; button . setFont ( parent . getFont ( ) ) ; GridData data = new GridData ( GridData . FILL_HORIZONTAL ) ; int widthHint = convertHorizontalDLUsToPixels ( button , IDialogConstants . BUTTON_WIDTH ) ; data . widthHint = Math . max ( widthHint , button . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; button . setLayoutData ( data ) ; button . addSelectionListener ( getSelectionListener ( ) ) ; return button ; } public void createSelectionListener ( ) { selectionListener = new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { Widget widget = event . widget ; if ( widget == addButton ) { addPressed ( ) ; } else if ( widget == editButton ) { editPressed ( ) ; } else if ( widget == removeButton ) { removePressed ( ) ; } else if ( widget == fTable . getTable ( ) ) { selectionChanged ( ) ; } } } ; } protected void doFillIntoGrid ( Composite parent , int numColumns ) { Control control = getLabelControl ( parent ) ; GridData gd = new GridData ( ) ; gd . horizontalSpan = numColumns ; control . setLayoutData ( gd ) ; Control list = getListControl ( parent ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . verticalAlignment = GridData . FILL ; gd . horizontalSpan = numColumns - 1 ; gd . grabExcessHorizontalSpace = true ; list . setLayoutData ( gd ) ; buttonBox = getButtonBoxControl ( parent ) ; gd = new GridData ( ) ; gd . verticalAlignment = GridData . BEGINNING ; buttonBox . setLayoutData ( gd ) ; } protected abstract void doLoad ( ) ; public void removeAllElements ( ) { if ( fElements . size ( ) > 0 ) { fElements . clear ( ) ; if ( isOkToUse ( fTableControl ) ) { fTable . refresh ( ) ; } selectionChanged ( ) ; } } protected abstract void doLoadDefault ( ) ; protected void doStore ( ) { Map < String , String > s = createPrefMap ( fElements ) ; if ( s != null ) { for ( Map . Entry < String , String > entry : s . entrySet ( ) ) getPreferenceStore ( ) . setValue ( entry . getKey ( ) , entry . getValue ( ) ) ; } } protected abstract Map < String , String > createPrefMap ( List < Object > elements ) ; public Composite getButtonBoxControl ( Composite parent ) { if ( buttonBox == null ) { buttonBox = new Composite ( parent , SWT . NULL ) ; GridLayout layout = new GridLayout ( ) ; layout . marginWidth = 0 ; buttonBox . setLayout ( layout ) ; createButtons ( buttonBox ) ; buttonBox . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent event ) { addButton = null ; editButton = null ; removeButton = null ; buttonBox = null ; } } ) ; } else { checkParent ( buttonBox , parent ) ; } selectionChanged ( ) ; return buttonBox ; } public Control getListControl ( Composite parent ) { if ( fTableControl == null ) { if ( fTableColumns == null ) { fTable = createTableViewer ( parent ) ; Table tableControl = fTable . getTable ( ) ; fTableControl = tableControl ; tableControl . setLayout ( new TableLayout ( ) ) ; } else { TableLayoutComposite composite = new TableLayoutComposite ( parent , SWT . NONE ) ; fTableControl = composite ; fTable = createTableViewer ( composite ) ; Table tableControl = fTable . getTable ( ) ; tableControl . setHeaderVisible ( fTableColumns . headers != null ) ; tableControl . setLinesVisible ( fTableColumns . drawLines ) ; ColumnLayoutData [ ] columns = fTableColumns . columns ; for ( int i = 0 ; i < columns . length ; i ++ ) { composite . addColumnData ( columns [ i ] ) ; TableColumn column = new TableColumn ( tableControl , SWT . NONE ) ; if ( fTableColumns . headers != null ) { column . setText ( fTableColumns . headers [ i ] ) ; } } } fTable . getTable ( ) . addKeyListener ( new KeyAdapter ( ) { public void keyPressed ( KeyEvent e ) { if ( e . character == SWT . DEL && e . stateMask == 0 ) { removePressed ( ) ; } } } ) ; fTable . setContentProvider ( fListViewerAdapter ) ; fTable . setLabelProvider ( createLabelProvider ( ) ) ; fTable . addSelectionChangedListener ( fListViewerAdapter ) ; fTable . addDoubleClickListener ( fListViewerAdapter ) ; fTable . setInput ( this ) ; } return fTableControl ; } protected TableViewer createTableViewer ( Composite parent ) { Table table = new Table ( parent , getTableStyle ( ) ) ; return new TableViewer ( table ) ; } protected int getTableStyle ( ) { int style = SWT . BORDER | SWT . MULTI | SWT . H_SCROLL | SWT . V_SCROLL ; if ( fTableColumns != null ) { style |= SWT . FULL_SELECTION ; } return style ; } protected abstract Object createObject ( ) ; public int getNumberOfControls ( ) { return 3 ; } private SelectionListener getSelectionListener ( ) { if ( selectionListener == null ) { createSelectionListener ( ) ; } return selectionListener ; } protected Shell getShell ( ) { if ( addButton == null ) { return null ; } return addButton . getShell ( ) ; } private void removePressed ( ) { setPresentsDefaultValue ( false ) ; removeElements ( getSelectedElements ( ) ) ; } public List getSelectedElements ( ) { List result = new ArrayList ( ) ; if ( isOkToUse ( fTableControl ) ) { ISelection selection = fTable . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { Iterator iter = ( ( IStructuredSelection ) selection ) . iterator ( ) ; while ( iter . hasNext ( ) ) { result . add ( iter . next ( ) ) ; } } } return result ; } protected final boolean isOkToUse ( Control control ) { return ( control != null ) && ( Display . getCurrent ( ) != null ) && ! control . isDisposed ( ) ; } public void removeElement ( Object element ) throws IllegalArgumentException { if ( fElements . remove ( element ) ) { if ( isOkToUse ( fTableControl ) ) { fTable . remove ( element ) ; } selectionChanged ( ) ; } else { throw new IllegalArgumentException ( ) ; } } public void removeElements ( List elements ) { if ( elements . size ( ) > 0 ) { fElements . removeAll ( elements ) ; if ( isOkToUse ( fTableControl ) ) { fTable . remove ( elements . toArray ( ) ) ; } selectionChanged ( ) ; } } protected void selectionChanged ( ) { removeButton . setEnabled ( ! fTable . getSelection ( ) . isEmpty ( ) ) ; } public void setFocus ( ) { if ( fTable != null ) { fTableControl . setFocus ( ) ; } } public void setEnabled ( boolean enabled , Composite parent ) { super . setEnabled ( enabled , parent ) ; getListControl ( parent ) . setEnabled ( enabled ) ; addButton . setEnabled ( enabled ) ; editButton . setEnabled ( enabled ) ; removeButton . setEnabled ( enabled ) ; } protected Button getAddButton ( ) { return addButton ; } protected Button getEditButton ( ) { return editButton ; } protected Button getRemoveButton ( ) { return removeButton ; } protected TableViewer getTableViewer ( ) { return fTable ; } private class ListViewerAdapter implements IStructuredContentProvider , ISelectionChangedListener , IDoubleClickListener { public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } public boolean isDeleted ( Object element ) { return false ; } public void dispose ( ) { } public Object [ ] getElements ( Object obj ) { return fElements . toArray ( ) ; } public void selectionChanged ( SelectionChangedEvent event ) { doListSelected ( event ) ; } public void doubleClick ( DoubleClickEvent event ) { doDoubleClick ( event ) ; } } public void doDoubleClick ( DoubleClickEvent event ) { } public void doListSelected ( SelectionChangedEvent event ) { } } 
=======
public class Rectangle extends AbstractInt { public static final Rectangle THE_INSTANCE = new Rectangle ( ) ; private Rectangle ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { List < CharSequenceWithOffset > list = split ( literal , ',' ) ; if ( list . size ( ) != 4 ) { throw newDatatypeException ( "A rectangle must have four comma-separated integers." ) ; } for ( CharSequenceWithOffset item : list ) { checkInt ( item . getSequence ( ) , item . getOffset ( ) ) ; } if ( Integer . parseInt ( list . get ( 0 ) . getSequence ( ) . toString ( ) ) >= Integer . parseInt ( list . get ( 2 ) . getSequence ( ) . toString ( ) ) ) { throw newDatatypeException ( "The first integer must be less than the third." ) ; } if ( Integer . parseInt ( list . get ( 1 ) . getSequence ( ) . toString ( ) ) >= Integer . parseInt ( list . get ( 3 ) . getSequence ( ) . toString ( ) ) ) { throw newDatatypeException ( "The second integer must be less than the fourth." ) ; } } @ Override public String getName ( ) { return "rectangle" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
