<<<<<<< HEAD
public class SearchFeed extends AbstractFeed { private static final int MAXIMUM_ARTICLES_LIMIT = Integer . MAX_VALUE ; private static final ArticleDateComparator articleDateComparator ; public static final String PROP_ARTICLES_LIMIT = "articlesLimit" ; public static final String PROP_QUERY = "query" ; public static final String PROP_DEDUP_ENABLED = "dedupEnabled" ; public static final String PROP_DEDUP_FROM = "dedupFrom" ; public static final String PROP_DEDUP_TO = "dedupTo" ; public static final String PROP_DEDUP_UPDATED = "dedupUpdated" ; private final List < IArticle > articles ; private String baseTitle ; private int articlesLimit ; private Query query ; private boolean dedupEnabled ; private int dedupFrom ; private int dedupTo ; private SearchFeed . ArticlesListener articlesListener ; static { articleDateComparator = new NoDupArticleDateComparator ( ) ; } public SearchFeed ( ) { articles = new ArrayList < IArticle > ( ) ; articlesListener = new ArticlesListener ( ) ; super . setCustomViewModeEnabled ( true ) ; dedupEnabled = false ; dedupFrom = 0 ; dedupTo = 0 ; } public synchronized IArticle getArticleAt ( int index ) { return articles . get ( index ) ; } public synchronized int getArticlesCount ( ) { return Math . min ( articles . size ( ) , articlesLimit ) ; } public int getOwnArticlesCount ( ) { return 0 ; } public IArticle [ ] getArticles ( ) { int visibleArticlesCount ; IArticle [ ] fullList ; synchronized ( this ) { visibleArticlesCount = getArticlesCount ( ) ; fullList = articles . toArray ( new IArticle [ articles . size ( ) ] ) ; } IArticle [ ] cropped = new IArticle [ visibleArticlesCount ] ; System . arraycopy ( fullList , 0 , cropped , 0 , visibleArticlesCount ) ; return cropped ; } public String getTitle ( ) { return baseTitle ; } public String getBaseTitle ( ) { return baseTitle ; } public void setBaseTitle ( String aTitle ) { String oldTitle = getTitle ( ) ; baseTitle = aTitle ; firePropertyChanged ( IFeed . PROP_TITLE , oldTitle , getTitle ( ) ) ; } public int getArticlesLimit ( ) { return articlesLimit ; } public synchronized void setArticlesLimit ( int anArticlesLimit ) { if ( anArticlesLimit < 0 ) throw new IllegalArgumentException ( Strings . error ( "limit.should.be.non.negative" ) ) ; if ( anArticlesLimit > MAXIMUM_ARTICLES_LIMIT ) anArticlesLimit = MAXIMUM_ARTICLES_LIMIT ; int oldLimit = articlesLimit ; articlesLimit = anArticlesLimit ; if ( isVisible ( oldLimit ) ) { int end = Math . min ( articles . size ( ) , articlesLimit ) ; for ( int i = oldLimit ; i < end ; i ++ ) { fireArticleAdded ( getArticleAt ( i ) ) ; } } else { int size = articles . size ( ) ; for ( int i = size - 1 ; i >= articlesLimit ; i -- ) { fireArticleRemoved ( getArticleAt ( i ) ) ; } } firePropertyChanged ( PROP_ARTICLES_LIMIT , new Integer ( oldLimit ) , new Integer ( articlesLimit ) ) ; } public Query getQuery ( ) { return query ; } public void setQuery ( Query aQuery ) { if ( query == null || ! query . equals ( aQuery ) ) { Query oldQuery = query ; query = aQuery ; firePropertyChanged ( PROP_QUERY , oldQuery , query , true , false ) ; } } public String getMatchKey ( ) { return "SF" + ( query == null ? null : query . serializeToString ( ) ) ; } public synchronized void addArticleIfMatching ( IArticle anArticle ) { if ( anArticle == null ) throw new NullPointerException ( Strings . error ( "unspecified.article" ) ) ; if ( query != null && query . match ( anArticle ) && ! isDuplicate ( anArticle ) ) { int articleIndex = Collections . binarySearch ( articles , anArticle , articleDateComparator ) ; if ( articleIndex < 0 ) { int insertionIndex = - articleIndex - 1 ; addArticle ( anArticle , insertionIndex ) ; } } } private boolean isDuplicate ( IArticle anArticle ) { return dedupEnabled && isDuplicate ( anArticle , dedupFrom , dedupTo , articles ) ; } private void addArticle ( IArticle anArticle , int insertionIndex ) { int unread = getUnreadArticlesCount ( ) ; articles . add ( insertionIndex , anArticle ) ; anArticle . addListener ( articlesListener ) ; if ( isVisible ( insertionIndex ) ) { fireArticleAdded ( anArticle ) ; if ( articles . size ( ) > articlesLimit ) removeArticle ( getArticleAt ( articlesLimit ) ) ; } int newUnread = getUnreadArticlesCount ( ) ; if ( unread != newUnread ) firePropertyChanged ( PROP_UNREAD_ARTICLES_COUNT , new Integer ( unread ) , new Integer ( getUnreadArticlesCount ( ) ) ) ; } private boolean isVisible ( int index ) { return index < articlesLimit ; } public synchronized void removeArticle ( IArticle anArticle ) { int unread = getUnreadArticlesCount ( ) ; if ( articles . remove ( anArticle ) ) { anArticle . removeListener ( articlesListener ) ; fireArticleRemoved ( anArticle ) ; int newUnread = getUnreadArticlesCount ( ) ; if ( unread != newUnread ) firePropertyChanged ( PROP_UNREAD_ARTICLES_COUNT , new Integer ( unread ) , new Integer ( newUnread ) ) ; } } public synchronized void reviewArticlesTakenFrom ( IFeed feed ) { int count = articles . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { int index = count - i - 1 ; IArticle article = getArticleAt ( index ) ; if ( feed == null || article . getFeed ( ) == feed ) reviewArticle ( article ) ; } } private void reviewArticle ( IArticle aArticle ) { if ( ! query . match ( aArticle ) || isDuplicate ( aArticle ) ) { int index = articles . indexOf ( aArticle ) ; removeArticle ( aArticle ) ; if ( isVisible ( index ) && articles . size ( ) >= articlesLimit ) { fireArticleAdded ( getArticleAt ( articlesLimit - 1 ) ) ; } } } public void unregisterListeners ( ) { for ( IArticle article : articles ) article . removeListener ( articlesListener ) ; } private class ArticlesListener implements IArticleListener { public void propertyChanged ( IArticle article , String property , Object oldValue , Object newValue ) { if ( ! AbstractArticle . PROP_ID . equals ( property ) ) { synchronized ( SearchFeed . this ) { reviewArticle ( article ) ; } } if ( IArticle . PROP_READ . equals ( property ) ) { boolean readNow = ( Boolean ) newValue ; int unread = getUnreadArticlesCount ( ) ; firePropertyChanged ( PROP_UNREAD_ARTICLES_COUNT , new Integer ( readNow ? unread + 1 : unread - 1 ) , new Integer ( unread ) ) ; } } } private static class NoDupArticleDateComparator extends ArticleDateComparator { public NoDupArticleDateComparator ( ) { super ( true ) ; } @ Override public int compare ( IArticle o1 , IArticle o2 ) { int result = super . compare ( o1 , o2 ) ; if ( result == 0 ) { result = new Integer ( o1 . hashCode ( ) ) . compareTo ( o2 . hashCode ( ) ) ; } return result ; } } public boolean isDedupEnabled ( ) { return dedupEnabled ; } public void setDedupEnabled ( boolean flag ) { boolean old = dedupEnabled ; if ( old == flag ) return ; dedupEnabled = flag ; firePropertyChanged ( PROP_DEDUP_ENABLED , old , flag , true , false ) ; } public int getDedupFrom ( ) { return dedupFrom ; } public void setDedupFrom ( int word ) { int old = dedupFrom ; dedupFrom = word ; firePropertyChanged ( PROP_DEDUP_FROM , old , word , true , false ) ; } public int getDedupTo ( ) { return dedupTo ; } public void setDedupTo ( int word ) { int old = dedupTo ; dedupTo = word ; firePropertyChanged ( PROP_DEDUP_TO , old , word , true , false ) ; } public void setDedupProperties ( boolean enabled , int from , int to ) { setDedupProperties ( enabled , from , to , true ) ; } public void setDedupProperties ( boolean enabled , int from , int to , boolean fireEvent ) { boolean oldEnabled = isDedupEnabled ( ) ; int oldFrom = getDedupFrom ( ) ; int oldTo = getDedupTo ( ) ; setDedupEnabled ( enabled ) ; setDedupFrom ( from ) ; setDedupTo ( to ) ; if ( fireEvent && ( oldEnabled != isDedupEnabled ( ) || oldFrom != getDedupFrom ( ) || oldTo != getDedupTo ( ) ) ) { firePropertyChanged ( PROP_DEDUP_UPDATED , false , true ) ; } } } 
=======
class NameFormatter { static String format ( Name name ) { String localName = name . getLocalName ( ) ; String namespaceUri = name . getNamespaceUri ( ) ; if ( namespaceUri . equals ( "" ) ) return SchemaBuilderImpl . localizer . message ( "name_absent_namespace" , localName ) ; else return SchemaBuilderImpl . localizer . message ( "name_with_namespace" , namespaceUri , localName ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
