<<<<<<< HEAD
public class LocalConnectionPropertyDialog extends TitleAreaDialog implements IPropertyDialog { private static final String DEFAULT_NAME = "New Local Shortcut" ; private LocalConnectionPoint localConnectionPoint ; private boolean isNew = false ; private Text nameText ; private Text localPathText ; private Button browseButton ; private Image titleImage ; private ModifyListener modifyListener ; public LocalConnectionPropertyDialog ( Shell parentShell ) { super ( parentShell ) ; } public void setPropertySource ( Object element ) { localConnectionPoint = null ; if ( element instanceof LocalConnectionPoint ) { localConnectionPoint = ( LocalConnectionPoint ) element ; } } public Object getPropertySource ( ) { return localConnectionPoint ; } private String getConnectionPointType ( ) { return LocalConnectionPoint . TYPE ; } @ Override protected Control createDialogArea ( Composite parent ) { Composite dialogArea = ( Composite ) super . createDialogArea ( parent ) ; titleImage = IOUIPlugin . getImageDescriptor ( "/icons/full/wizban/local.png" ) . createImage ( ) ; dialogArea . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { if ( titleImage != null ) { setTitleImage ( null ) ; titleImage . dispose ( ) ; titleImage = null ; } } } ) ; setTitleImage ( titleImage ) ; if ( localConnectionPoint != null ) { setTitle ( "Edit the Local Shortcut" ) ; getShell ( ) . setText ( "Edit Local Shortcut" ) ; } else { setTitle ( "Create a Local Shortcut" ) ; getShell ( ) . setText ( "New Local Shortcut" ) ; } Composite container = new Composite ( dialogArea , SWT . NONE ) ; container . setLayoutData ( GridDataFactory . fillDefaults ( ) . grab ( true , true ) . create ( ) ) ; container . setLayout ( GridLayoutFactory . swtDefaults ( ) . margins ( convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_MARGIN ) , convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_MARGIN ) ) . spacing ( convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_SPACING ) , convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ) . numColumns ( 3 ) . create ( ) ) ; Label label = new Label ( container , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( new PixelConverter ( label ) . convertHorizontalDLUsToPixels ( IDialogConstants . LABEL_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label . setText ( StringUtils . makeFormLabel ( "Shortcut Name" ) ) ; nameText = new Text ( container , SWT . SINGLE | SWT . BORDER ) ; nameText . setLayoutData ( GridDataFactory . fillDefaults ( ) . hint ( convertHorizontalDLUsToPixels ( IDialogConstants . ENTRY_FIELD_WIDTH ) , SWT . DEFAULT ) . span ( 2 , 1 ) . grab ( true , false ) . create ( ) ) ; label = new Label ( container , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( new PixelConverter ( label ) . convertHorizontalDLUsToPixels ( IDialogConstants . LABEL_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label . setText ( StringUtils . makeFormLabel ( "Local Path" ) ) ; localPathText = new Text ( container , SWT . SINGLE | SWT . BORDER ) ; localPathText . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( convertHorizontalDLUsToPixels ( IDialogConstants . ENTRY_FIELD_WIDTH ) , SWT . DEFAULT ) . grab ( true , false ) . create ( ) ) ; browseButton = new Button ( container , SWT . PUSH ) ; browseButton . setText ( '&' + StringUtils . ellipsify ( CoreStrings . BROWSE ) ) ; browseButton . setLayoutData ( GridDataFactory . fillDefaults ( ) . hint ( Math . max ( new PixelConverter ( browseButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , browseButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) , SWT . DEFAULT ) . create ( ) ) ; addListeners ( ) ; browseButton . addSelectionListener ( new SelectionAdapter ( ) { @ Override public void widgetSelected ( SelectionEvent e ) { browseFileSystem ( ) ; } } ) ; if ( localConnectionPoint == null ) { try { localConnectionPoint = ( LocalConnectionPoint ) CoreIOPlugin . getConnectionPointManager ( ) . createConnectionPoint ( getConnectionPointType ( ) ) ; localConnectionPoint . setName ( DEFAULT_NAME ) ; isNew = true ; } catch ( CoreException e ) { IdeLog . logError ( IOUIPlugin . getDefault ( ) , "Create new connection failed" , e ) ; close ( ) ; } } loadPropertiesFrom ( localConnectionPoint ) ; return dialogArea ; } protected void addListeners ( ) { if ( modifyListener == null ) { modifyListener = new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { validate ( ) ; } } ; } nameText . addModifyListener ( modifyListener ) ; localPathText . addModifyListener ( modifyListener ) ; } protected void removeListeners ( ) { if ( modifyListener != null ) { nameText . removeModifyListener ( modifyListener ) ; localPathText . removeModifyListener ( modifyListener ) ; } } @ Override protected void okPressed ( ) { if ( ! isValid ( ) ) { return ; } if ( savePropertiesTo ( localConnectionPoint ) ) { } if ( isNew ) { CoreIOPlugin . getConnectionPointManager ( ) . addConnectionPoint ( localConnectionPoint ) ; } super . okPressed ( ) ; } @ Override protected Control createContents ( Composite parent ) { try { return super . createContents ( parent ) ; } finally { validate ( ) ; } } protected void loadPropertiesFrom ( LocalConnectionPoint connectionPoint ) { removeListeners ( ) ; try { nameText . setText ( valueOrEmpty ( connectionPoint . getName ( ) ) ) ; IPath path = connectionPoint . getPath ( ) ; localPathText . setText ( path != null ? path . toPortableString ( ) : StringUtils . EMPTY ) ; } finally { addListeners ( ) ; } } protected boolean savePropertiesTo ( LocalConnectionPoint connectionPoint ) { boolean updated = false ; String name = nameText . getText ( ) ; if ( ! name . equals ( connectionPoint . getName ( ) ) ) { connectionPoint . setName ( name ) ; updated = true ; } IPath path = Path . fromPortableString ( localPathText . getText ( ) ) ; if ( ! path . equals ( connectionPoint . getPath ( ) ) ) { connectionPoint . setPath ( path ) ; updated = true ; } return updated ; } private void browseFileSystem ( ) { DirectoryDialog dlg = new DirectoryDialog ( getShell ( ) ) ; dlg . setFilterPath ( localPathText . getText ( ) ) ; String path = dlg . open ( ) ; if ( path != null ) { localPathText . setText ( Path . fromOSString ( path ) . toPortableString ( ) ) ; if ( DEFAULT_NAME . equals ( nameText . getText ( ) ) ) { nameText . setText ( Path . fromOSString ( path ) . lastSegment ( ) ) ; } } } public void validate ( ) { boolean valid = isValid ( ) ; getButton ( OK ) . setEnabled ( valid ) ; } public boolean isValid ( ) { String message = null ; if ( nameText . getText ( ) . length ( ) == 0 ) { message = "Please specify shortcut name" ; } else { File file = Path . fromPortableString ( localPathText . getText ( ) ) . toFile ( ) ; if ( ! file . exists ( ) || ! file . isDirectory ( ) ) { message = "The location doesn't exist" ; } } if ( message != null ) { setErrorMessage ( message ) ; } else { setErrorMessage ( null ) ; setMessage ( null ) ; return true ; } return false ; } protected static String valueOrEmpty ( String value ) { if ( value != null ) { return value ; } return StringUtils . EMPTY ; } } 
=======
public class BarrageProvider { private static final String TAG = "BarrageProvider" ; public static final int TYPE_ALL = 0 ; public static final int TYPE_RUNNING = 1 ; public static final int TYPE_PAUSED = 2 ; public static final int TYPE_QUEUED = 3 ; public static final int TYPE_DRAFT = 4 ; public static final int TYPE_TEMPLATE = 5 ; private static final String DEFAULT_SORT_ORDER = "priority DESC" ; public static final Uri CONTENT_URI = Uri . parse ( "content://barrage" ) ; public interface TextBasedBarrageColumns { public static final String BARRAGE_ID = "barrage_id" ; public static final String TYPE = "type" ; public static final String ADDRESS = "address" ; public static final String BODY = "body" ; public static final String DATE = "date" ; public static final String COUNT = "count" ; public static final String PRIORITY = "priority" ; } public static final Cursor query ( ContentResolver cr , String [ ] projection ) { return cr . query ( CONTENT_URI , projection , null , null , DEFAULT_SORT_ORDER ) ; } public static final Cursor query ( ContentResolver cr , String [ ] projection , String where , String orderBy ) { return cr . query ( CONTENT_URI , projection , where , null , orderBy == null ? DEFAULT_SORT_ORDER : orderBy ) ; } public static Uri addBarrageToUri ( ContentResolver cr , Uri uri , String address , String body , Long date , int count ) { return addBarrageToUri ( cr , uri , address , body , date , count , - 1L ) ; } public static Uri addBarrageToUri ( ContentResolver cr , Uri uri , String address , String body , Long date , int count , long barrageId ) { ContentValues values = new ContentValues ( 5 ) ; values . put ( TextBasedBarrageColumns . ADDRESS , address ) ; values . put ( TextBasedBarrageColumns . BODY , body ) ; if ( date != null ) values . put ( TextBasedBarrageColumns . DATE , date ) ; values . put ( TextBasedBarrageColumns . COUNT , count ) ; if ( barrageId != - 1L ) values . put ( TextBasedBarrageColumns . BARRAGE_ID , barrageId ) ; return cr . insert ( uri , values ) ; } public static boolean moveBarrageToFolder ( Context context , Uri uri , int folder ) { if ( ( uri == null ) || ! validFolder ( folder ) ) { return false ; } ContentValues values = new ContentValues ( 1 ) ; values . put ( TextBasedBarrageColumns . TYPE , folder ) ; return ( 1 == SqliteWrapper . update ( context , context . getContentResolver ( ) , uri , values , null , null ) ) ; } public static boolean validFolder ( int folder ) { return ( ( folder == TYPE_RUNNING ) || ( folder == TYPE_QUEUED ) || ( folder == TYPE_DRAFT ) || ( folder == TYPE_PAUSED ) ) ; } public static final class Running implements BaseColumns , TextBasedBarrageColumns { public static final Uri CONTENT_URI = Uri . parse ( "content://barrage/running" ) ; public static final String DEFAULT_SORT = "date DESC" ; public static Uri addBarrage ( ContentResolver cr , String address , String body , Long date , int count ) { return addBarrageToUri ( cr , CONTENT_URI , address , body , date , count ) ; } } public static final class Paused implements BaseColumns , TextBasedBarrageColumns { public static final Uri CONTENT_URI = Uri . parse ( "content://barrage/paused" ) ; public static final String DEFAULT_SORT = "date DESC" ; public static Uri addBarrage ( ContentResolver cr , String address , String body , Long date , int count ) { return addBarrageToUri ( cr , CONTENT_URI , address , body , date , count ) ; } } public static final class Draft implements BaseColumns , TextBasedBarrageColumns { public static final Uri CONTENT_URI = Uri . parse ( "content://barrage/draft" ) ; public static final String DEFAULT_SORT = "date DESC" ; public static Uri addBarrage ( ContentResolver cr , String address , String body , Long date , int count ) { return addBarrageToUri ( cr , CONTENT_URI , address , body , date , count ) ; } } public static final class Queued implements BaseColumns , TextBasedBarrageColumns { public static final Uri CONTENT_URI = Uri . parse ( "content://barrage/queued" ) ; public static final String DEFAULT_SORT = "date DESC" ; public static Uri addBarrage ( ContentResolver cr , String address , String body , Long date , int count ) { return addBarrageToUri ( cr , CONTENT_URI , address , body , date , count ) ; } } public static final class All implements BaseColumns , TextBasedBarrageColumns { public static final Uri CONTENT_URI = Uri . parse ( "content://barrage/all" ) ; public static final String DEFAULT_SORT = "date DESC" ; public static Uri addBarrage ( ContentResolver cr , String address , String body , Long date , int count ) { return addBarrageToUri ( cr , CONTENT_URI , address , body , date , count ) ; } } public static final class Intents { public static final String BARRAGE_STARTED = "com.jakewharton.smsbarrage.BARRAGE_STARTED" ; public static final String BARRAGE_PAUSED = "com.jakewharton.smsbarrage.BARRAGE_PAUSED" ; public static final String BARRAGE_RESUMED = "com.jakewharton.smsbarrage.BARRAGE_RESUMED" ; public static final String BARRAGE_COMPLETED = "com.jakewharton.smsbarrage.BARRAGE_COMPLETED" ; public static final String BARRAGE_QUEUED = "com.jakewharton.smsbarrage.BARRAGE_QUEUED" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
