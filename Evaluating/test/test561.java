public final class MarkerManager { private static final MarkerInfo [ ] NO_MARKER_INFO = new MarkerInfo [ 0 ] ; private static MarkerManager instance ; private MarkerTypeDefinitionCache cache = new MarkerTypeDefinitionCache ( ) ; private long nextMarkerId = 0 ; private Map resources = new HashMap ( ) ; private ListenerList listeners = new ListenerList ( ) ; private IMarker rootMarker ; private Map currentDeltas = null ; private Object lock = new Object ( ) ; public static MarkerManager getInstance ( ) { if ( instance == null ) { instance = new MarkerManager ( ) ; } return instance ; } private MarkerManager ( ) { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; try { rootMarker = workspace . getRoot ( ) . createMarker ( "com.aptana.ide.internal.core.resources.ExternalResourcesMarker" ) ; } catch ( CoreException e ) { IdeLog . logError ( AptanaCorePlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } if ( rootMarker != null ) { workspace . addResourceChangeListener ( new IResourceChangeListener ( ) { public void resourceChanged ( IResourceChangeEvent event ) { handleResourceChanged ( ) ; } } , IResourceChangeEvent . PRE_BUILD ) ; } } public MarkerInfo findMarkerInfo ( IUniformResource resource , long id ) { ResourceInfo info = getResourceInfo ( resource ) ; if ( info == null ) { return null ; } MarkerSet markers = info . getMarkers ( false ) ; if ( markers == null ) { return null ; } return ( MarkerInfo ) markers . get ( id ) ; } public void add ( IUniformResource resource , MarkerInfo marker ) throws CoreException { ResourceInfo info = getResourceInfo ( resource ) ; if ( info == null ) { info = createResourceInfo ( resource ) ; } MarkerSet markers = info . getMarkers ( true ) ; if ( markers == null ) { markers = new MarkerSet ( 1 ) ; } basicAdd ( resource , markers , marker ) ; if ( ! markers . isEmpty ( ) ) { info . setMarkers ( markers ) ; } IMarkerSetElement [ ] changes = new IMarkerSetElement [ 1 ] ; changes [ 0 ] = new MarkerDelta ( IResourceDelta . ADDED , resource , marker ) ; changedMarkers ( resource , changes ) ; } public boolean isPersistent ( MarkerInfo info ) { if ( ! cache . isPersistent ( info . getType ( ) ) ) { return false ; } Object isTransient = info . getAttribute ( IMarker . TRANSIENT ) ; return isTransient == null || ! ( isTransient instanceof Boolean ) || ! ( ( Boolean ) isTransient ) . booleanValue ( ) ; } public void removeMarker ( IUniformResource resource , long id ) throws CoreException { MarkerInfo marker = findMarkerInfo ( resource , id ) ; if ( marker == null ) { return ; } ResourceInfo info = getResourceInfo ( resource ) ; MarkerSet markers = info . getMarkers ( true ) ; int size = markers . size ( ) ; markers . remove ( marker ) ; info . setMarkers ( markers . size ( ) == 0 ? null : markers ) ; if ( markers . size ( ) != size ) { IMarkerSetElement [ ] changes = new IMarkerSetElement [ ] { new MarkerDelta ( IResourceDelta . REMOVED , resource , marker ) } ; changedMarkers ( resource , changes ) ; } } public void changedMarkers ( IUniformResource resource , IMarkerSetElement [ ] changes ) throws CoreException { if ( changes == null || changes . length == 0 ) { return ; } URI uri = resource . getURI ( ) ; synchronized ( lock ) { if ( currentDeltas == null ) { currentDeltas = new HashMap ( ) ; } MarkerSet previousChanges = ( MarkerSet ) currentDeltas . get ( uri ) ; MarkerSet result = MarkerDelta . merge ( previousChanges , changes ) ; if ( result . size ( ) == 0 ) { currentDeltas . remove ( uri ) ; } else { currentDeltas . put ( uri , result ) ; } } if ( rootMarker != null ) { rootMarker . setAttribute ( "updateId" , rootMarker . getAttribute ( "updateId" , 0 ) + 1 ) ; } } public boolean isSubtype ( String type , String superType ) { return cache . isSubtype ( type , superType ) ; } public MarkerInfo [ ] findMarkersInfo ( IUniformResource resource , String type , boolean includeSubtypes ) { ArrayList result = new ArrayList ( ) ; ResourceInfo info = getResourceInfo ( resource ) ; if ( info == null ) { return NO_MARKER_INFO ; } MarkerSet markers = info . getMarkers ( false ) ; if ( markers == null ) { return NO_MARKER_INFO ; } IMarkerSetElement [ ] elements = markers . elements ( ) ; for ( int i = 0 ; i < elements . length ; ++ i ) { MarkerInfo marker = ( MarkerInfo ) elements [ i ] ; if ( type == null ) { result . add ( marker ) ; } else { if ( includeSubtypes ) { if ( isSubtype ( marker . getType ( ) , type ) ) { result . add ( marker ) ; } } else { if ( marker . getType ( ) . equals ( type ) ) { result . add ( marker ) ; } } } } if ( result . size ( ) == 0 ) { return NO_MARKER_INFO ; } return ( MarkerInfo [ ] ) result . toArray ( new MarkerInfo [ result . size ( ) ] ) ; } private ResourceInfo getResourceInfo ( IUniformResource resource ) { return ( ResourceInfo ) resources . get ( resource . getURI ( ) ) ; } private ResourceInfo createResourceInfo ( IUniformResource resource ) { ResourceInfo info = new ResourceInfo ( ) ; resources . put ( resource . getURI ( ) , info ) ; return info ; } private void basicAdd ( IUniformResource resource , MarkerSet markers , MarkerInfo newMarker ) throws CoreException { if ( newMarker . getId ( ) != MarkerInfo . UNDEFINED_ID ) { throw new CoreException ( new Status ( IStatus . ERROR , AptanaCorePlugin . ID , IStatus . OK , Messages . MarkerManager_MarkerIDIsDefined , null ) ) ; } newMarker . setId ( nextMarkerId ( ) ) ; markers . add ( newMarker ) ; } private long nextMarkerId ( ) { return nextMarkerId ++ ; } public void addResourceChangeListener ( IUniformResourceChangeListener listener ) { listeners . add ( listener ) ; } public void removeResourceChangeListener ( IUniformResourceChangeListener listener ) { listeners . remove ( listener ) ; } public void externalResourceChanged ( IUniformResource resource ) { handleResourceChanged ( ) ; } private void handleResourceChanged ( ) { if ( currentDeltas == null ) { return ; } MarkerSet [ ] markers ; synchronized ( lock ) { markers = ( MarkerSet [ ] ) currentDeltas . values ( ) . toArray ( new MarkerSet [ currentDeltas . size ( ) ] ) ; currentDeltas = null ; } Object [ ] list = listeners . getListeners ( ) ; for ( int j = 0 ; j < markers . length ; ++ j ) { IMarkerDelta [ ] deltas = new IMarkerDelta [ markers [ j ] . size ( ) ] ; markers [ j ] . copyInto ( deltas ) ; IUniformResource resource = null ; if ( deltas . length > 0 && deltas [ 0 ] instanceof MarkerDelta ) { resource = ( ( MarkerDelta ) deltas [ 0 ] ) . getUniformResource ( ) ; } UniformResourceChangeEvent event = new UniformResourceChangeEvent ( this , resource , deltas ) ; for ( int i = 0 ; i < list . length ; ++ i ) { try { ( ( IUniformResourceChangeListener ) list [ i ] ) . resourceChanged ( event ) ; } catch ( Exception e ) { IdeLog . logError ( AptanaCorePlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } } } } } 