public class BloggingPreferencesPanel extends JPanel { private final BloggingPreferences originalPrefs ; private final BloggingPreferences prefs ; private final BlogDetailsPreferencesPanel pnlBlogDetails ; private JComboBox cbBlogs ; private JButton btnAdd ; private JButton btnDelete ; private boolean ptbAdvanced ; public BloggingPreferencesPanel ( JDialog parent , ValueModel trigger , BloggingPreferences preferences ) { ptbAdvanced = GlobalController . SINGLETON . getFeatureManager ( ) . isPtbAdvanced ( ) ; originalPrefs = preferences ; prefs = preferences . createClone ( ) ; trigger . addValueChangeListener ( new PropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent evt ) { Object newValue = evt . getNewValue ( ) ; if ( Boolean . TRUE . equals ( newValue ) ) { originalPrefs . copyFrom ( prefs ) ; PostToBlogAction . update ( ) ; FeedLinkPostToBlogAction . update ( ) ; } } } ) ; Component tfWording = ComponentsFactory . createWrappedMultilineLabel ( Strings . message ( "ptb.prefs.wording" ) ) ; Dimension btnSize = new Dimension ( 21 , 21 ) ; btnAdd = new JButton ( new AddAction ( ) ) ; btnAdd . setPreferredSize ( btnSize ) ; btnDelete = new JButton ( new DeleteAction ( ) ) ; btnDelete . setPreferredSize ( btnSize ) ; pnlBlogDetails = new BlogDetailsPreferencesPanel ( parent ) ; cbBlogs = new JComboBox ( ) ; cbBlogs . addItemListener ( new BlogSelectionListener ( ) ) ; onBlogSelected ( null ) ; populateListAndSelect ( prefs . getDefaultBlog ( ) ) ; BBFormBuilder builder = new BBFormBuilder ( "max(p;100dlu), 2dlu, p, 2dlu, p, 2dlu, p, 0:grow" , this ) ; builder . setDefaultDialogBorder ( ) ; builder . append ( tfWording , 8 ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( buildPostTextEditorOptionsPanel ( ) , 8 ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( cbBlogs , btnAdd ) ; builder . append ( btnDelete ) ; builder . append ( UifUtilities . makePublisherPlanIcon ( ! ptbAdvanced ) ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( pnlBlogDetails , 8 ) ; } private Component buildPostTextEditorOptionsPanel ( ) { JLabel lbPostEditor = new JLabel ( Strings . message ( "ptb.prefs.editor.label" ) ) ; ValueModel orientMdl = new PropertyAdapter ( new EditorModeFilter ( ) , BloggingPreferences . PROP_RICH_EDITOR , true ) ; JRadioButton rbRichEditor = BasicComponentFactory . createRadioButton ( orientMdl , true , Strings . message ( "ptb.prefs.editor.rich" ) ) ; rbRichEditor . setToolTipText ( Strings . message ( "ptb.prefs.editor.rich.tt" ) ) ; JRadioButton rbPlainEditor = BasicComponentFactory . createRadioButton ( orientMdl , false , Strings . message ( "ptb.prefs.editor.plain" ) ) ; rbPlainEditor . setToolTipText ( Strings . message ( "ptb.prefs.editor.plain.tt" ) ) ; lbPostEditor . setEnabled ( ptbAdvanced ) ; rbRichEditor . setEnabled ( ptbAdvanced ) ; rbPlainEditor . setEnabled ( ptbAdvanced ) ; BBFormBuilder builder = new BBFormBuilder ( "max(60dlu;p), 4dlu, p, 2dlu, p, 2dlu, p" ) ; builder . append ( lbPostEditor ) ; builder . append ( rbRichEditor ) ; builder . append ( rbPlainEditor ) ; builder . append ( UifUtilities . makePublisherPlanIcon ( ! ptbAdvanced ) ) ; return builder . getPanel ( ) ; } private void onBlogSelected ( TargetBlog targetBlog ) { btnDelete . setEnabled ( targetBlog != null ) ; if ( ! ptbAdvanced ) btnAdd . setEnabled ( targetBlog == null ) ; pnlBlogDetails . setBlogPreferences ( targetBlog ) ; } private void populateListAndSelect ( TargetBlog targetBlog ) { List blogs = prefs . getBlogs ( ) ; if ( blogs . size ( ) > 0 ) { Object sel = targetBlog == null ? cbBlogs . getSelectedItem ( ) : targetBlog ; for ( int i = 0 ; i < blogs . size ( ) ; i ++ ) cbBlogs . addItem ( blogs . get ( i ) ) ; if ( sel != null ) cbBlogs . setSelectedItem ( sel ) ; } checkDropDownAndUpdateStatus ( ) ; } private void checkDropDownAndUpdateStatus ( ) { if ( cbBlogs . getItemCount ( ) == 0 ) { cbBlogs . addItem ( Strings . message ( "ptb.prefs.no.blogs" ) ) ; cbBlogs . setEnabled ( false ) ; } else { cbBlogs . setEnabled ( true ) ; } } private class AddAction extends AbstractAction { public AddAction ( ) { super ( null , ResourceUtils . getIcon ( "add.icon" ) ) ; } public void actionPerformed ( ActionEvent e ) { if ( cbBlogs . getItemCount ( ) == 1 && cbBlogs . getItemAt ( 0 ) instanceof String ) { cbBlogs . removeAllItems ( ) ; cbBlogs . setEnabled ( true ) ; } TargetBlog targetBlog = new TargetBlog ( ) ; targetBlog . setTitle ( "Blog" ) ; targetBlog . setApiType ( WeblogAPIs . getDefaultWeblogAPI ( ) ) ; prefs . addBlog ( targetBlog ) ; cbBlogs . addItem ( targetBlog ) ; cbBlogs . setSelectedItem ( targetBlog ) ; } } private class DeleteAction extends AbstractAction { public DeleteAction ( ) { super ( null , ResourceUtils . getIcon ( "delete.icon" ) ) ; } public void actionPerformed ( ActionEvent e ) { TargetBlog targetBlog = ( TargetBlog ) cbBlogs . getSelectedItem ( ) ; if ( targetBlog != null ) { cbBlogs . removeItem ( targetBlog ) ; prefs . removeBlog ( targetBlog ) ; checkDropDownAndUpdateStatus ( ) ; } } } private class BlogSelectionListener implements ItemListener { public void itemStateChanged ( ItemEvent e ) { Object sel = cbBlogs . getSelectedItem ( ) ; TargetBlog targetBlog = sel instanceof TargetBlog ? ( TargetBlog ) sel : null ; prefs . setDefaultBlog ( targetBlog ) ; onBlogSelected ( targetBlog ) ; } } public class EditorModeFilter { private final PropertyChangeSupport pcs = new PropertyChangeSupport ( this ) ; public boolean isRichEditor ( ) { return ! ptbAdvanced || prefs . isRichEditor ( ) ; } public void setRichEditor ( boolean rich ) { boolean old = prefs . isRichEditor ( ) ; prefs . setRichEditor ( rich ) ; pcs . firePropertyChange ( BloggingPreferences . PROP_RICH_EDITOR , old , rich ) ; } public void addPropertyChangeListener ( PropertyChangeListener l ) { pcs . addPropertyChangeListener ( l ) ; } public void removePropertyChangeListener ( PropertyChangeListener l ) { pcs . removePropertyChangeListener ( l ) ; } } } 