<<<<<<< HEAD
public class MainActivity extends Activity { private final static String TAG = "MainActivity" ; private final static String DEV_EMAIL = "neil.loknath+syncmypix@gmail.com" ; private final static int SOCIAL_NETWORK_LOGIN = 0 ; private final int MENU_LOGOUT = 3 ; private final int MENU_LOG = 5 ; private final int DELETE_DIALOG = 1 ; private final int ABOUT_DIALOG = 2 ; private final int CONFIRM_DIALOG = 3 ; private final int DELETING = 4 ; private WeakReference < SyncService > mSyncService ; private boolean mSyncServiceBound = false ; private ImageButton mDeleteButton ; private ImageButton mHelpButton ; PhotoStore ps = null ; public byte [ ] cropPhoto = null ; Facebook fbClient = null ; static MainActivity sMainActivity ; public static MainActivity GetInstance ( ) { return sMainActivity ; } public PhotoStore GetPhotoStore ( ) { return ps ; } public static Class < FacebookSyncService > getSyncSource ( Context context ) { return FacebookSyncService . class ; } public static < T extends SyncService > boolean isLoggedInFromSyncSource ( Context context , Class < T > source ) { try { Method m = source . getMethod ( "isLoggedIn" , Context . class ) ; return ( Boolean ) m . invoke ( null , context ) ; } catch ( SecurityException e ) { e . printStackTrace ( ) ; } catch ( NoSuchMethodException e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return false ; } boolean loggedIn = false ; @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . main ) ; sMainActivity = this ; if ( ! getSharedPreferences ( SettingsActivity . PREFS_NAME , 0 ) . getBoolean ( "do_not_show_about" , false ) ) { showDialog ( ABOUT_DIALOG ) ; } final MainActivity self = this ; ImageButton sync = ( ImageButton ) findViewById ( R . id . syncButton ) ; sync . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { String key = getResources ( ) . getString ( R . string . facebook_api_key ) ; fbClient = new Facebook ( key ) ; if ( ! loggedIn || fbClient . getAccessToken ( ) == null ) { loggedIn = true ; fbClient . authorize ( self , new DialogListener ( ) { public void onComplete ( Bundle values ) { sync ( ) ; } public void onFacebookError ( FacebookError error ) { try { loggedIn = false ; Toast . makeText ( self , "Error on facebook sync again!" , Toast . LENGTH_SHORT ) . show ( ) ; fbClient . logout ( self ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } public void onError ( DialogError e ) { try { loggedIn = false ; Toast . makeText ( self , "Error on facebook sync again!" , Toast . LENGTH_SHORT ) . show ( ) ; fbClient . logout ( self ) ; } catch ( MalformedURLException e1 ) { e1 . printStackTrace ( ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } } public void onCancel ( ) { loggedIn = false ; } } ) ; } else sync ( ) ; } } ) ; ImageButton settings = ( ImageButton ) findViewById ( R . id . settingsButton ) ; settings . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { Intent i = new Intent ( getApplicationContext ( ) , SettingsActivity . class ) ; startActivity ( i ) ; } } ) ; ImageButton results = ( ImageButton ) findViewById ( R . id . resultsButton ) ; results . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { showResults ( ) ; } } ) ; ImageButton about = ( ImageButton ) findViewById ( R . id . aboutButton ) ; about . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { showDialog ( ABOUT_DIALOG ) ; } } ) ; mHelpButton = ( ImageButton ) findViewById ( R . id . help ) ; mHelpButton . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { Intent i = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . help_link ) ) ) ; startActivity ( i ) ; } } ) ; mDeleteButton = ( ImageButton ) findViewById ( R . id . delete ) ; mDeleteButton . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { showDialog ( DELETE_DIALOG ) ; loggedIn = false ; if ( fbClient != null ) try { fbClient . logout ( self ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } ) ; } @ Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( resultCode != Activity . RESULT_OK ) { return ; } switch ( requestCode ) { case SOCIAL_NETWORK_LOGIN : sync ( ) ; break ; } } private void logout ( ) { Utils . setString ( getSharedPreferences ( SettingsActivity . PREFS_NAME , 0 ) , "session_key" , null ) ; Utils . setString ( getSharedPreferences ( SettingsActivity . PREFS_NAME , 0 ) , "secret" , null ) ; Utils . setString ( getSharedPreferences ( SettingsActivity . PREFS_NAME , 0 ) , "uid" , null ) ; } private void sendLog ( ) { final LogCollector collector = new LogCollector ( ) ; collector . setNotifier ( new LogCollectorNotifier ( ) { public void onComplete ( ) { if ( collector == null ) { return ; } collector . appendMessage ( getString ( R . string . main_logMsg ) ) ; String log = collector . getLog ( ) ; if ( log != null ) { Intent emailIntent = new Intent ( android . content . Intent . ACTION_SEND ) ; emailIntent . setType ( "text/html" ) ; emailIntent . putExtra ( android . content . Intent . EXTRA_EMAIL , new String [ ] { DEV_EMAIL } ) ; emailIntent . putExtra ( android . content . Intent . EXTRA_SUBJECT , getString ( R . string . app_name ) + " Log" ) ; emailIntent . putExtra ( android . content . Intent . EXTRA_TEXT , log ) ; startActivity ( Intent . createChooser ( emailIntent , "Send Log via" ) ) ; } } public void onError ( ) { Toast . makeText ( getApplicationContext ( ) , R . string . main_error_Logerror , Toast . LENGTH_LONG ) . show ( ) ; } } ) ; collector . collect ( ) ; } private void sync ( ) { if ( ! Utils . hasInternetConnection ( getApplicationContext ( ) ) ) { Toast . makeText ( getApplicationContext ( ) , R . string . syncservice_networkerror , Toast . LENGTH_LONG ) . show ( ) ; return ; } SyncService service = null ; if ( mSyncService != null ) { service = mSyncService . get ( ) ; } if ( service == null || ! service . isExecuting ( ) ) { startService ( new Intent ( getApplicationContext ( ) , getSyncSource ( getApplicationContext ( ) ) ) ) ; startActivity ( new Intent ( getApplicationContext ( ) , SyncProgressActivity . class ) ) ; } } private void showResults ( ) { Intent i = new Intent ( getApplicationContext ( ) , SyncResultsActivity . class ) ; i . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_REORDER_TO_FRONT ) ; startActivity ( i ) ; } @ Override protected void onStart ( ) { super . onStart ( ) ; if ( ! mSyncServiceBound ) { Intent i = new Intent ( getApplicationContext ( ) , getSyncSource ( getApplicationContext ( ) ) ) ; mSyncServiceBound = bindService ( i , mSyncServiceConn , Context . BIND_AUTO_CREATE ) ; } } @ Override protected void onStop ( ) { super . onStop ( ) ; if ( mSyncServiceBound ) { Log . d ( TAG , "unbinding service" ) ; unbindService ( mSyncServiceConn ) ; mSyncServiceBound = false ; } } @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; Log . d ( TAG , "onDestroy" ) ; mSyncServiceConn = null ; } @ Override protected void finalize ( ) throws Throwable { super . finalize ( ) ; Log . d ( TAG , "FINALIZED" ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuItem item ; item = menu . add ( 0 , MENU_LOGOUT , 0 , R . string . main_logoutButton ) ; item . setIcon ( android . R . drawable . ic_menu_close_clear_cancel ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_LOGOUT : logout ( ) ; return true ; case MENU_LOG : sendLog ( ) ; return true ; } return false ; } @ Override protected Dialog onCreateDialog ( int id ) { switch ( id ) { case ABOUT_DIALOG : return createAboutDialog ( ) ; case CONFIRM_DIALOG : ConfirmSyncDialog dialog = new ConfirmSyncDialog ( this ) ; dialog . setProceedButtonListener ( new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { sync ( ) ; } } ) ; dialog . setCancelButtonListener ( null ) ; return dialog ; case DELETE_DIALOG : AlertDialog . Builder deleteBuilder = new AlertDialog . Builder ( this ) ; deleteBuilder . setTitle ( R . string . syncresults_deleteDialog ) . setIcon ( android . R . drawable . ic_dialog_alert ) . setMessage ( R . string . syncresults_deleteDialog_msg ) . setCancelable ( false ) . setPositiveButton ( "Yes" , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { removeDialog ( DELETE_DIALOG ) ; showDialog ( DELETING ) ; SyncMyPixDbHelper dbHelper = new SyncMyPixDbHelper ( getApplicationContext ( ) ) ; dbHelper . deleteAllPictures ( new DbHelperNotifier ( ) { public void onUpdateComplete ( ) { runOnUiThread ( new Runnable ( ) { public void run ( ) { dismissDialog ( DELETING ) ; Toast . makeText ( getApplicationContext ( ) , R . string . syncresults_deleted , Toast . LENGTH_LONG ) . show ( ) ; } } ) ; } } ) ; } } ) . setNegativeButton ( "No" , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int id ) { removeDialog ( DELETE_DIALOG ) ; } } ) ; AlertDialog delete = deleteBuilder . create ( ) ; return delete ; case DELETING : ProgressDialog deleting = new ProgressDialog ( this ) ; deleting . setCancelable ( false ) ; deleting . setMessage ( getString ( R . string . syncresults_deletingDialog ) ) ; deleting . setProgressStyle ( ProgressDialog . STYLE_SPINNER ) ; return deleting ; } return super . onCreateDialog ( id ) ; } private Dialog createAboutDialog ( ) { PackageManager pm = getPackageManager ( ) ; PackageInfo pi ; String version = null ; try { pi = pm . getPackageInfo ( getPackageName ( ) , 0 ) ; version = pi . versionName ; } catch ( NameNotFoundException e ) { e . printStackTrace ( ) ; } Dialog about = new Dialog ( this ) ; about . requestWindowFeature ( Window . FEATURE_NO_TITLE ) ; about . setContentView ( R . layout . about ) ; LinearLayout layout = ( LinearLayout ) about . findViewById ( R . id . about_layout ) ; if ( version != null ) { TextView versionView = new TextView ( getBaseContext ( ) ) ; versionView . setText ( " Version " + version ) ; versionView . setTextSize ( 10 ) ; layout . addView ( versionView , 1 ) ; } Button ok = ( Button ) about . findViewById ( R . id . ok ) ; ok . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { removeDialog ( ABOUT_DIALOG ) ; } } ) ; final MainActivity self = this ; Button donate = ( Button ) about . findViewById ( R . id . donate ) ; donate . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { removeDialog ( ABOUT_DIALOG ) ; Intent i = new Intent ( getApplicationContext ( ) , DonateActivity . class ) ; startActivity ( i ) ; } } ) ; CheckBox show = ( CheckBox ) about . findViewById ( R . id . do_not_show_about ) ; show . setChecked ( getSharedPreferences ( SettingsActivity . PREFS_NAME , 0 ) . getBoolean ( "do_not_show_about" , false ) ) ; show . setOnCheckedChangeListener ( new OnCheckedChangeListener ( ) { public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { Utils . setBoolean ( getSharedPreferences ( SettingsActivity . PREFS_NAME , 0 ) , "do_not_show_about" , isChecked ) ; } } ) ; return about ; } private ServiceConnection mSyncServiceConn = new ServiceConnection ( ) { public void onServiceConnected ( ComponentName className , IBinder service ) { Log . d ( TAG , "onServiceConnected" ) ; mSyncService = new WeakReference < SyncService > ( ( ( SyncService . LocalBinder ) service ) . getService ( ) ) ; if ( mSyncService != null ) { SyncService s = mSyncService . get ( ) ; if ( s != null && s . isExecuting ( ) ) { Intent i = new Intent ( s . getApplicationContext ( ) , SyncProgressActivity . class ) ; i . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_REORDER_TO_FRONT ) ; startActivity ( i ) ; } } } public void onServiceDisconnected ( ComponentName className ) { Log . d ( TAG , "onServiceDisconnected" ) ; mSyncService = null ; } } ; public Facebook GetFacebookClient ( ) { return fbClient ; } } 
=======
public class Charset extends AbstractDatatype { public static final Charset THE_INSTANCE = new Charset ( ) ; public Charset ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { if ( literal . length ( ) == 0 ) { throw newDatatypeException ( "The empty string is not a valid character encoding name." ) ; } for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; if ( ! ( ( c >= '0' && c <= '9' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'Z' ) || c == '-' || c == '!' || c == '#' || c == '$' || c == '%' || c == '&' || c == '\'' || c == '+' || c == '_' || c == '`' || c == '{' || c == '}' || c == '~' || c == '^' ) ) { throw newDatatypeException ( "Value contained " , c , ", which is not a valid character in an encoding name." ) ; } } String encodingName = literal . toString ( ) ; encodingName = toAsciiLowerCase ( encodingName ) ; if ( "replacement" . equals ( encodingName ) || ! CharsetData . isPreferred ( encodingName ) ) { String preferred = CharsetData . preferredForLabel ( encodingName ) ; if ( preferred == null || "replacement" . equals ( preferred ) ) { throw newDatatypeException ( "“" + encodingName + "” is not a valid character encoding name." ) ; } throw newDatatypeException ( "“" + encodingName + "” is not a preferred encoding name." + " The preferred label for this encoding is “" + preferred + "”." ) ; } } @ Override public String getName ( ) { return "encoding name" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
