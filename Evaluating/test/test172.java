public final class ThemeSupport { private static final Logger LOG = Logger . getLogger ( ThemeSupport . class . getName ( ) ) ; private static final char ZIP_SEPARATOR = '/' ; private static final String THEMES_INDEX = "resources/themes/index.txt" ; private static List < ITheme > themes ; private static ITheme defaultTheme ; private static String currentOS ; private static final String KEY_NAME = "name" ; private static final String KEY_TITLE = "title" ; private static final String KEY_HIDDEN = "hidden" ; private ThemeSupport ( ) { } public static synchronized List < ITheme > getThemes ( ) { if ( themes == null ) themes = loadThemes ( ) ; return themes ; } public static synchronized ITheme getDefaultTheme ( ) { if ( defaultTheme == null ) defaultTheme = loadDefaultTheme ( ) ; return defaultTheme ; } public static ITheme getThemeByName ( String name ) { for ( ITheme theme : getThemes ( ) ) if ( theme . getName ( ) . equals ( name ) ) return theme ; return null ; } private static List < ITheme > loadThemes ( ) { ITheme aDefaultTheme = getDefaultTheme ( ) ; return loadThemes ( aDefaultTheme ) ; } private static List < ITheme > loadThemes ( ITheme aDefaultTheme ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Calling loadThemes (" + aDefaultTheme + ")" ) ; } URL [ ] themesUrls = getThemesUrls ( ) ; List < ITheme > someThemes = new ArrayList < ITheme > ( themesUrls . length ) ; for ( URL themeUrl : themesUrls ) { ITheme theme = loadTheme ( themeUrl , aDefaultTheme ) ; if ( theme != null ) someThemes . add ( theme ) ; } return someThemes ; } private static ITheme loadDefaultTheme ( ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Calling LoadDefaultTheme()" ) ; } return loadTheme ( getThemeUrl ( "default.theme" ) , new LAFTheme ( ) ) ; } private static ITheme loadTheme ( URL themeUrl , ITheme aDefaultTheme ) { if ( themeUrl == null ) throw new IllegalArgumentException ( Strings . error ( "unspecified.theme.url" ) ) ; String os = getCurrentOS ( ) ; ITheme theme ; try { Properties properties = new Properties ( ) ; properties . load ( themeUrl . openStream ( ) ) ; theme = createTheme ( properties , aDefaultTheme , os ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( Strings . error ( "invalid.theme.url" ) ) ; } return theme ; } static ITheme createTheme ( Properties aProperties , ITheme aDefaultTheme , String aOs ) { if ( aDefaultTheme == null ) throw new IllegalArgumentException ( Strings . error ( "unspecified.default.theme" ) ) ; if ( aProperties == null ) throw new IllegalArgumentException ( Strings . error ( "unspecified.properties" ) ) ; if ( aOs == null ) throw new IllegalArgumentException ( Strings . error ( "unspecified.os" ) ) ; String name = aProperties . getProperty ( KEY_NAME ) ; String title = aProperties . getProperty ( KEY_TITLE ) ; String hidden = aProperties . getProperty ( KEY_HIDDEN ) ; ITheme theme = null ; boolean isHidden = name == null || title == null || isInList ( hidden , aOs ) ; if ( ! isHidden ) { aProperties = preProcessProperties ( aProperties , aOs ) ; theme = new Theme ( name , title , aProperties , aDefaultTheme ) ; } return theme ; } static Properties preProcessProperties ( Properties aProperties , String aOs ) { final Set keySet = aProperties . keySet ( ) ; final String [ ] keys = ( String [ ] ) keySet . toArray ( new String [ keySet . size ( ) ] ) ; aOs = "." + aOs ; int suffixLength = aOs . length ( ) ; for ( String key : keys ) { if ( key . endsWith ( aOs ) ) { String baseKey = key . substring ( 0 , key . length ( ) - suffixLength ) ; aProperties . setProperty ( baseKey , aProperties . getProperty ( key ) ) ; } } return aProperties ; } private static boolean isInList ( String list , String str ) { if ( list == null ) return false ; str = str . toLowerCase ( ) ; StringTokenizer tokenizer = new StringTokenizer ( list , "," ) ; boolean found = false ; while ( ! found && tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) . trim ( ) . toLowerCase ( ) ; found = token . equals ( str ) ; } return found ; } private static URL getThemeUrl ( String themeFileName ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Calling getThemeUrl(" + themeFileName + ")" ) ; } return ResourceUtils . getURL ( "resources/themes/" + themeFileName ) ; } private static synchronized String getCurrentOS ( ) { if ( currentOS == null ) currentOS = detectCurrentOS ( ) ; return currentOS ; } private static String detectCurrentOS ( ) { String os = "mac" ; String propOsName = System . getProperty ( "os.name" ) ; if ( Pattern . compile ( "linux" , Pattern . CASE_INSENSITIVE ) . matcher ( propOsName ) . find ( ) ) { os = "linux" ; } else if ( Pattern . compile ( "windows" , Pattern . CASE_INSENSITIVE ) . matcher ( propOsName ) . find ( ) ) { os = "windows" ; } return os ; } private static URL [ ] getThemesUrls ( ) { List < URL > themesUrlsList = new ArrayList < URL > ( ) ; String directoryName = getDirectoryName ( THEMES_INDEX ) ; InputStream in = null ; try { in = ResourceUtils . getInputStream ( THEMES_INDEX ) ; if ( null == in ) return new URL [ 0 ] ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; try { String line ; do { line = reader . readLine ( ) ; if ( line != null ) { line = line . trim ( ) ; if ( line . length ( ) > 0 ) themesUrlsList . add ( ResourceUtils . getURL ( directoryName + line ) ) ; } } while ( line != null ) ; reader . close ( ) ; } catch ( IOException e ) { LOG . log ( Level . WARNING , MessageFormat . format ( Strings . error ( "failed.to.read.tips.index" ) , THEMES_INDEX ) , e ) ; } } finally { try { if ( in != null ) in . close ( ) ; } catch ( IOException e1 ) { } } return themesUrlsList . toArray ( new URL [ themesUrlsList . size ( ) ] ) ; } private static String getDirectoryName ( String filename ) { int lastSeparatorIndex = filename . lastIndexOf ( ZIP_SEPARATOR ) ; return ( lastSeparatorIndex == - 1 ) ? "" : filename . substring ( 0 , lastSeparatorIndex + 1 ) ; } public static void addTheme ( URL themeURL ) { getThemes ( ) . add ( loadTheme ( themeURL , getDefaultTheme ( ) ) ) ; } public static class FontsComboBoxModel extends DefaultComboBoxModel { private static final java . util . List fontFamilies ; static { GraphicsEnvironment ge = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; fontFamilies = Arrays . asList ( ge . getAvailableFontFamilyNames ( ) ) ; } public int getSize ( ) { return fontFamilies . size ( ) ; } public Object getElementAt ( int index ) { return fontFamilies . get ( index ) ; } public int getIndexOf ( Object anObject ) { return fontFamilies . indexOf ( anObject ) ; } } public static class ThemesComboBoxModel extends DefaultComboBoxModel { public int getSize ( ) { return getThemes ( ) . size ( ) ; } public Object getElementAt ( int index ) { return getThemes ( ) . get ( index ) ; } public int getIndexOf ( Object anObject ) { return getThemes ( ) . indexOf ( anObject ) ; } } } 