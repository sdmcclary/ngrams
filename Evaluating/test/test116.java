public class NavigatorAdv extends ControllerAdapter { private static final Logger LOG = Logger . getLogger ( NavigatorAdv . class . getName ( ) ) ; private GuideModel navigationModel ; private GuideModel viewModel ; private final GuidesListModel guidesListModel ; private GuidesSet guidesSet ; private IGuide selectedGuide ; private IFeed selectedFeed ; public NavigatorAdv ( GuideModel aNavigationModel , GuidesListModel guidesListModel ) { navigationModel = aNavigationModel ; this . guidesListModel = guidesListModel ; viewModel = null ; } public void setViewModel ( GuideModel aViewModel ) { viewModel = aViewModel ; } public void setGuidesSet ( GuidesSet set ) { guidesSet = set ; } public synchronized void guideSelected ( IGuide guide ) { selectedGuide = guide ; selectedFeed = null ; } public synchronized void feedSelected ( IFeed feed ) { selectedFeed = feed ; } public synchronized Destination getDestination ( NavigationInfoKey key ) { Destination dest ; if ( key instanceof NavigationInfoKey . Next ) { boolean unreadOnly = key == NavigationInfoKey . NEXT_UNREAD ; dest = recalcNext ( unreadOnly ) ; } else { boolean unreadOnly = key == NavigationInfoKey . PREV_UNREAD ; dest = recalcPrev ( unreadOnly ) ; } return dest ; } private synchronized Destination recalcNext ( boolean unreadOnly ) { IFeed destFeed = null ; IFeed feed ; IGuide guide ; GuideModel model ; feed = selectedFeed ; guide = selectedGuide ; if ( guide == null ) return null ; int pass = 0 ; while ( destFeed == null && pass < 2 ) { if ( guide != null && isVisible ( guide ) ) { model = getModel ( guide ) ; feed = getNextInGuide ( model , feed , unreadOnly ) ; } if ( feed != null ) { destFeed = feed ; } else { if ( guide == selectedGuide ) pass ++ ; guide = getNextGuide ( guide ) ; } } return destFeed == null ? null : new Destination ( guide , destFeed ) ; } private synchronized Destination recalcPrev ( boolean unreadOnly ) { IFeed destFeed = null ; IFeed feed ; IGuide guide ; GuideModel model ; feed = selectedFeed ; guide = selectedGuide ; if ( guide == null ) return null ; int pass = 0 ; while ( destFeed == null && pass < 2 ) { if ( guide != null && isVisible ( guide ) ) { model = getModel ( guide ) ; feed = getPrevInGuide ( model , feed , unreadOnly ) ; } if ( feed != null ) { destFeed = feed ; } else { if ( guide == selectedGuide ) pass ++ ; guide = getPrevGuide ( guide ) ; } } return destFeed == null ? null : new Destination ( guide , destFeed ) ; } private boolean isVisible ( IGuide guide ) { return guidesListModel == null || guidesListModel . indexOf ( guide ) != - 1 ; } private GuideModel getModel ( IGuide guide ) { GuideModel model ; if ( guide == selectedGuide && viewModel != null ) { model = viewModel ; } else { model = navigationModel ; navigationModel . setGuide ( guide ) ; } return model ; } IFeed getNextInGuide ( GuideModel model , IFeed currentFeed , boolean unreadOnly ) { int size = model . getSize ( ) ; int index = currentFeed == null ? - 1 : model . indexOf ( currentFeed ) ; IFeed next = null ; if ( currentFeed != null && index == - 1 ) { LOG . log ( Level . SEVERE , MessageFormat . format ( Strings . error ( "feed.does.not.belong.to.model.feed" ) , currentFeed ) ) ; } else { for ( int i = index + 1 ; next == null && i < size ; i ++ ) { next = ( IFeed ) model . getElementAt ( i ) ; if ( ! isFeedMatching ( next , unreadOnly , getArticleFilter ( ) ) ) next = null ; } } return next ; } IFeed getPrevInGuide ( GuideModel model , IFeed currentFeed , boolean unreadOnly ) { int size = model . getSize ( ) ; int index = currentFeed == null ? size : model . indexOf ( currentFeed ) ; IFeed prev = null ; if ( currentFeed != null && index == - 1 ) { LOG . log ( Level . SEVERE , MessageFormat . format ( Strings . error ( "feed.does.not.belong.to.model.feed" ) , currentFeed ) ) ; } else { for ( int i = index - 1 ; prev == null && i >= 0 ; i -- ) { prev = ( IFeed ) model . getElementAt ( i ) ; if ( ! isFeedMatching ( prev , unreadOnly , getArticleFilter ( ) ) ) prev = null ; } } return prev ; } static boolean isFeedMatching ( IFeed feed , boolean unreadOnly , int filter ) { boolean hasVisibleArticles = false ; int count = feed . getArticlesCount ( ) ; if ( count > 0 ) { if ( filter == IFeedDisplayConstants . FILTER_UNREAD ) { hasVisibleArticles = feed . getUnreadArticlesCount ( ) > 0 ; } else if ( filter == IFeedDisplayConstants . FILTER_ALL ) { hasVisibleArticles = ! unreadOnly || feed . getUnreadArticlesCount ( ) > 0 ; } else { for ( int i = 0 ; ! hasVisibleArticles && i < count ; i ++ ) { IArticle article = feed . getArticleAt ( i ) ; if ( ! unreadOnly || ! article . isRead ( ) ) { switch ( filter ) { case IFeedDisplayConstants . FILTER_PINNED : hasVisibleArticles = article . isPinned ( ) ; break ; case IFeedDisplayConstants . FILTER_NEGATIVE : hasVisibleArticles = article . isNegative ( ) ; break ; case IFeedDisplayConstants . FILTER_POSITIVE : hasVisibleArticles = article . isPositive ( ) ; break ; case IFeedDisplayConstants . FILTER_NON_NEGATIVE : hasVisibleArticles = ! article . isNegative ( ) ; break ; } } } } } return hasVisibleArticles ; } IGuide getNextGuide ( IGuide currentGuide ) { IGuide next = currentGuide ; if ( guidesSet == null ) { LOG . warning ( Strings . error ( "guide.set.not.registered" ) ) ; } else { next = nextGuide ( currentGuide ) ; } return next ; } private IGuide nextGuide ( IGuide aCurrentGuide ) { int index = aCurrentGuide == null ? - 1 : guidesSet . indexOf ( aCurrentGuide ) ; int next = index + 1 ; int size = guidesSet . getGuidesCount ( ) ; return guidesSet . getGuideAt ( next >= size ? 0 : next ) ; } IGuide getPrevGuide ( IGuide currentGuide ) { IGuide prev = currentGuide ; if ( guidesSet == null ) { LOG . warning ( Strings . error ( "guide.set.not.registered" ) ) ; } else { prev = prevChannelGuide ( currentGuide ) ; } return prev ; } private IGuide prevChannelGuide ( IGuide aCurrentGuide ) { int size = guidesSet . getGuidesCount ( ) ; int index = aCurrentGuide == null ? size : guidesSet . indexOf ( aCurrentGuide ) ; int prev = index - 1 ; return guidesSet . getGuideAt ( prev < 0 ? size - 1 : prev ) ; } private static int getArticleFilter ( ) { return GlobalModel . SINGLETON . getGlobalRenderingSettings ( ) . getArticleFilter ( ) ; } public static class Destination { public IGuide guide ; public IFeed feed ; public Destination ( IGuide aGuide , IFeed aFeed ) { guide = aGuide ; feed = aFeed ; } } public static interface NavigationInfoKey { NavigationInfoKey NEXT = new Next ( ) ; NavigationInfoKey NEXT_UNREAD = new Next ( ) ; NavigationInfoKey PREV = new Prev ( ) ; NavigationInfoKey PREV_UNREAD = new Prev ( ) ; static final class Next implements NavigationInfoKey { } static final class Prev implements NavigationInfoKey { } } } 