public class GuideListCellRenderer extends JPanel implements ListCellRenderer { public static final int CELL_MARGIN_TOP = 4 ; public static final int CELL_MARGIN_BOTTOM = 4 ; public static final int CELL_MARGIN_LEFT = 0 ; public static final int CELL_MARGIN_RIGHT = 1 ; private static final float GUIDE_LABEL_FONT_SIZE = 10f ; private static final Border BORDER_NO_FOCUS = BorderFactory . createEmptyBorder ( 1 , 1 , 1 , 1 ) ; private GuidesPanel . UnreadController unreadController ; private IGuideCellRenderer renderer ; public GuideListCellRenderer ( GuidesPanel . UnreadController anUnreadController ) { unreadController = anUnreadController ; updateRendererAndLayout ( ) ; } public void onIconSizeChange ( ) { updateRendererAndLayout ( ) ; } public void updateRendererAndLayout ( ) { boolean largeIcon = RenderingManager . isBigIconInGuides ( ) && RenderingManager . isShowIconInGuides ( ) ; if ( renderer == null || ( largeIcon && renderer instanceof SmallIconGuideCellRenderer ) || ( ! largeIcon && renderer instanceof LargeIconGuideCellRenderer ) ) { renderer = largeIcon ? new LargeIconGuideCellRenderer ( ) : new SmallIconGuideCellRenderer ( ) ; } updateLayout ( ) ; } private void updateLayout ( ) { renderer . showUnreadButton ( RenderingManager . isShowUnreadInGuides ( ) ) ; renderer . showIcon ( RenderingManager . isShowIconInGuides ( ) ) ; renderer . showText ( RenderingManager . isShowTextInGuides ( ) ) ; } public Component getListCellRendererComponent ( final JList list , final Object value , final int index , final boolean isSelected , final boolean cellHasFocus ) { IGuide cg = ( IGuide ) value ; String textName = cg . getTitle ( ) ; renderer . setText ( textName ) ; final String iconKey = cg . getIconKey ( ) == null ? ResourceID . ICON_GUIDE_DEFAULT_KEY : cg . getIconKey ( ) ; ImageIcon icon = IconSource . getIcon ( iconKey ) ; if ( icon == null ) icon = IconSource . getIcon ( ResourceID . ICON_GUIDE_DEFAULT_KEY ) ; renderer . setIcon ( icon ) ; renderer . setUnreadCount ( unreadController . deferCalcUnreadStats ( cg ) ) ; Color background = isSelected ? RenderingManager . getFeedsListSelectedBackground ( ) : RenderingManager . getFeedsListBackground ( index % 2 == 0 ) ; Color foreground = GuideDisplayModeManager . getInstance ( ) . getColor ( cg , isSelected ) ; if ( foreground == null || isSelected ) { foreground = RenderingManager . getFeedsListForeground ( isSelected ) ; } renderer . setColors ( background , foreground ) ; Border border = GlobalModel . SINGLETON . getSelectedGuide ( ) == value && list . isFocusOwner ( ) ? UIManager . getBorder ( "List.focusCellHighlightBorder" ) : BORDER_NO_FOCUS ; renderer . setBorder ( border ) ; return renderer . getComponent ( ) ; } public int getRequiredHeight ( ) { renderer . setText ( "ty" ) ; renderer . setIcon ( IconSource . getIcon ( ResourceID . ICON_GUIDE_DEFAULT_KEY ) ) ; return renderer . getComponent ( ) . getPreferredSize ( ) . height ; } public int getUnreadButtonYOffset ( ) { return renderer . getUnreadButtonYOffset ( ) ; } private static interface IGuideCellRenderer { void setText ( String text ) ; void setIcon ( ImageIcon icon ) ; void setUnreadCount ( int unread ) ; void setColors ( Color background , Color foreground ) ; void setBorder ( Border border ) ; void showUnreadButton ( boolean show ) ; void showIcon ( boolean show ) ; void showText ( boolean show ) ; Component getComponent ( ) ; int getUnreadButtonYOffset ( ) ; } private static class LargeIconGuideCellRenderer extends JPanel implements IGuideCellRenderer { private static final String COLS = MessageFormat . format ( "{0}px, center:0:grow, right:p, {1}px" , CELL_MARGIN_LEFT , CELL_MARGIN_RIGHT ) ; private static final String ROWS = MessageFormat . format ( "{0}px, p, {1}px" , CELL_MARGIN_TOP , CELL_MARGIN_BOTTOM ) ; private JLabel iconLabel ; private UnreadButton unreadButton ; private boolean iconVisible ; private boolean textVisible ; public LargeIconGuideCellRenderer ( ) { iconLabel = new JLabel ( ResourceUtils . getIcon ( ResourceID . ICON_GUIDE_DEFAULT_KEY ) ) ; iconLabel . setFont ( iconLabel . getFont ( ) . deriveFont ( GUIDE_LABEL_FONT_SIZE ) ) ; iconLabel . setHorizontalTextPosition ( SwingConstants . CENTER ) ; iconLabel . setVerticalTextPosition ( SwingConstants . BOTTOM ) ; iconLabel . setAlignmentY ( CENTER_ALIGNMENT ) ; iconLabel . setIconTextGap ( 1 ) ; unreadButton = new UnreadButton ( ) ; init ( ) ; } private void init ( ) { setLayout ( new FormLayout ( COLS , ROWS ) ) ; CellConstraints cc = new CellConstraints ( ) ; add ( iconLabel , cc . xyw ( 2 , 2 , 2 ) ) ; add ( unreadButton , cc . xy ( 3 , 2 , "center,top" ) ) ; } public int getUnreadButtonYOffset ( ) { return 0 ; } public Component getComponent ( ) { return this ; } public void setColors ( Color background , Color foreground ) { setBackground ( background ) ; setForeground ( foreground ) ; iconLabel . setForeground ( foreground ) ; } public void setIcon ( ImageIcon icon ) { iconLabel . setIcon ( iconVisible ? icon : null ) ; } public void setText ( String text ) { iconLabel . setText ( textVisible ? text : null ) ; } public void setUnreadCount ( int unread ) { unreadButton . init ( unread ) ; } public void showUnreadButton ( boolean show ) { unreadButton . setVisible ( show ) ; } public void showIcon ( boolean show ) { iconVisible = show ; } public void showText ( boolean show ) { textVisible = show ; } } private static class SmallIconGuideCellRenderer extends JPanel implements IGuideCellRenderer { private static final String COLS = MessageFormat . format ( "{0}px, 4px, p, 4px, left:0:grow, 4px, p, {1}px" , CELL_MARGIN_LEFT , CELL_MARGIN_RIGHT ) ; private static final String ROWS = MessageFormat . format ( "{0}px, p, {1}px" , CELL_MARGIN_TOP , CELL_MARGIN_BOTTOM ) ; private final ScalingIcon icon ; private final JLabel text ; private final UnreadButton unreadButton ; private final int unreadButtonYOffset ; public SmallIconGuideCellRenderer ( ) { icon = new ScalingIcon ( new Dimension ( 16 , 16 ) ) ; text = new JLabel ( ) ; text . setFont ( text . getFont ( ) . deriveFont ( GUIDE_LABEL_FONT_SIZE ) ) ; unreadButton = new UnreadButton ( ) ; unreadButtonYOffset = ( 16 - unreadButton . getSize ( ) . height ) / 2 ; setLayout ( new FormLayout ( COLS , ROWS ) ) ; CellConstraints cc = new CellConstraints ( ) ; add ( icon , cc . xy ( 3 , 2 ) ) ; add ( text , cc . xy ( 5 , 2 ) ) ; add ( unreadButton , cc . xy ( 7 , 2 ) ) ; } public int getUnreadButtonYOffset ( ) { return icon . isVisible ( ) ? unreadButtonYOffset : 0 ; } public Component getComponent ( ) { return this ; } public void setColors ( Color background , Color foreground ) { setBackground ( background ) ; setForeground ( foreground ) ; text . setForeground ( foreground ) ; } public void setIcon ( ImageIcon anIcon ) { icon . setIcon ( anIcon ) ; } public void setText ( String aText ) { text . setText ( aText ) ; } public void setUnreadCount ( int unread ) { unreadButton . init ( unread ) ; } public void showUnreadButton ( boolean show ) { unreadButton . setVisible ( show ) ; } public void showIcon ( boolean show ) { icon . setVisible ( show ) ; } public void showText ( boolean show ) { text . setVisible ( show ) ; } } private static class ScalingIcon extends JComponent { private final Dimension dimensions ; private ImageIcon icon ; public ScalingIcon ( Dimension aDimensions ) { dimensions = aDimensions ; icon = null ; } public Dimension getPreferredSize ( ) { return dimensions ; } public void setIcon ( ImageIcon anIcon ) { icon = anIcon ; repaint ( ) ; } public void paint ( Graphics g ) { if ( icon != null ) { Image image = icon . getImage ( ) ; image = image . getScaledInstance ( dimensions . width , dimensions . height , Image . SCALE_SMOOTH ) ; g . drawImage ( image , 0 , 0 , null ) ; } } } } 