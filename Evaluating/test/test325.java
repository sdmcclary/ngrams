<<<<<<< HEAD
public class ServerArrayValue extends ArrayValueImpl { private static final long serialVersionUID = 1L ; private static final StringValue SERVER_ADDR_V = new ConstStringValue ( "SERVER_ADDR" ) ; private static final StringValue SERVER_NAME_V = new ConstStringValue ( "SERVER_NAME" ) ; private static final StringValue SERVER_PORT_V = new ConstStringValue ( "SERVER_PORT" ) ; private static final StringValue REMOTE_HOST_V = new ConstStringValue ( "REMOTE_HOST" ) ; private static final StringValue REMOTE_ADDR_V = new ConstStringValue ( "REMOTE_ADDR" ) ; private static final StringValue REMOTE_PORT_V = new ConstStringValue ( "REMOTE_PORT" ) ; private static final StringValue DOCUMENT_ROOT_V = new ConstStringValue ( "DOCUMENT_ROOT" ) ; private static final StringValue SERVER_SOFTWARE_V = new ConstStringValue ( "SERVER_SOFTWARE" ) ; private static final StringValue SERVER_PROTOCOL_V = new ConstStringValue ( "SERVER_PROTOCOL" ) ; private static final StringValue REQUEST_METHOD_V = new ConstStringValue ( "REQUEST_METHOD" ) ; private static final StringValue QUERY_STRING_V = new ConstStringValue ( "QUERY_STRING" ) ; private static final StringValue REQUEST_URI_V = new ConstStringValue ( "REQUEST_URI" ) ; private static final StringValue SCRIPT_NAME_V = new ConstStringValue ( "SCRIPT_NAME" ) ; private static final StringValue SCRIPT_FILENAME_V = new ConstStringValue ( "SCRIPT_FILENAME" ) ; private static final StringValue PATH_INFO_V = new ConstStringValue ( "PATH_INFO" ) ; private static final StringValue PATH_TRANSLATED_V = new ConstStringValue ( "PATH_TRANSLATED" ) ; private static final StringValue PHP_SELF_V = new ConstStringValue ( "PHP_SELF" ) ; private static final StringValue PHP_AUTH_USER_V = new ConstStringValue ( "PHP_AUTH_USER" ) ; private static final StringValue AUTH_TYPE_V = new ConstStringValue ( "AUTH_TYPE" ) ; private static final StringValue HTTPS_V = new ConstStringValue ( "HTTPS" ) ; private static final StringValue HTTP_HOST_V = new ConstStringValue ( "HTTP_HOST" ) ; private final Env _env ; private boolean _isFilled ; public ServerArrayValue ( Env env ) { _env = env ; } public Object toObject ( ) { return null ; } public ArrayValue append ( Value key , Value value ) { if ( ! _isFilled ) fillMap ( ) ; return super . append ( key , value ) ; } public Value put ( Value value ) { if ( ! _isFilled ) fillMap ( ) ; return super . put ( value ) ; } public Value get ( Value key ) { if ( ! _isFilled ) fillMap ( ) ; return super . get ( key ) ; } public Var getRef ( Value key ) { if ( ! _isFilled ) fillMap ( ) ; return super . getRef ( key ) ; } public Value copy ( ) { if ( ! _isFilled ) fillMap ( ) ; return new ArrayValueImpl ( this ) ; } public Set < Map . Entry < Value , Value > > entrySet ( ) { if ( ! _isFilled ) fillMap ( ) ; return super . entrySet ( ) ; } public void put ( String key , String value ) { if ( ! _isFilled ) fillMap ( ) ; super . put ( _env . createString ( key , _env . getHttpInputEncoding ( ) ) , _env . createString ( value , _env . getHttpInputEncoding ( ) ) ) ; } public void print ( Env env ) { env . print ( "Array" ) ; } private void fillMap ( ) { if ( _isFilled ) return ; _isFilled = true ; for ( Map . Entry < String , String > entry : System . getenv ( ) . entrySet ( ) ) { super . put ( _env . createString ( entry . getKey ( ) , null ) , _env . createString ( entry . getValue ( ) , null ) ) ; } for ( Map . Entry < Value , Value > entry : _env . getQuercus ( ) . getServerEnvMap ( ) . entrySet ( ) ) { super . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } HttpServletRequest request = _env . getRequest ( ) ; if ( request != null ) { super . put ( SERVER_ADDR_V , _env . createStringOld ( request . getLocalAddr ( ) ) ) ; super . put ( SERVER_NAME_V , _env . createStringOld ( request . getServerName ( ) ) ) ; super . put ( SERVER_PORT_V , LongValue . create ( request . getServerPort ( ) ) ) ; super . put ( REMOTE_HOST_V , _env . createStringOld ( request . getRemoteHost ( ) ) ) ; super . put ( REMOTE_ADDR_V , _env . createStringOld ( request . getRemoteAddr ( ) ) ) ; super . put ( REMOTE_PORT_V , LongValue . create ( request . getRemotePort ( ) ) ) ; super . put ( SERVER_SOFTWARE_V , _env . createStringOld ( "Apache PHP Quercus(" + _env . getQuercus ( ) . getVersion ( ) + ")" ) ) ; super . put ( SERVER_PROTOCOL_V , _env . createStringOld ( request . getProtocol ( ) ) ) ; super . put ( REQUEST_METHOD_V , _env . createStringOld ( request . getMethod ( ) ) ) ; String queryString = QuercusRequestAdapter . getPageQueryString ( request ) ; String requestURI = QuercusRequestAdapter . getPageURI ( request ) ; String servletPath = QuercusRequestAdapter . getPageServletPath ( request ) ; String pathInfo = QuercusRequestAdapter . getPagePathInfo ( request ) ; String contextPath = QuercusRequestAdapter . getPageContextPath ( request ) ; if ( queryString != null ) { super . put ( QUERY_STRING_V , _env . createString ( queryString , _env . getHttpInputEncoding ( ) ) ) ; } String root = _env . getServletContext ( ) . getRealPath ( "/" ) ; if ( root . indexOf ( '\\' ) >= 0 ) { root = root . replace ( '\\' , '/' ) ; root = '/' + root ; } super . put ( DOCUMENT_ROOT_V , _env . createString ( root , null ) ) ; super . put ( SCRIPT_NAME_V , _env . createString ( contextPath + servletPath , null ) ) ; if ( queryString != null ) requestURI = requestURI + '?' + queryString ; super . put ( REQUEST_URI_V , _env . createStringOld ( requestURI ) ) ; super . put ( SCRIPT_FILENAME_V , _env . createString ( _env . getServletContext ( ) . getRealPath ( servletPath ) , null ) ) ; if ( pathInfo != null ) { super . put ( PATH_INFO_V , _env . createString ( pathInfo , _env . getHttpInputEncoding ( ) ) ) ; super . put ( PATH_TRANSLATED_V , _env . createString ( _env . getServletContext ( ) . getRealPath ( pathInfo ) , null ) ) ; } if ( request . isSecure ( ) ) super . put ( HTTPS_V , _env . createStringOld ( "on" ) ) ; if ( pathInfo == null ) super . put ( PHP_SELF_V , _env . createString ( contextPath + servletPath , null ) ) ; else super . put ( PHP_SELF_V , _env . createString ( contextPath + servletPath + pathInfo , null ) ) ; if ( request . getAuthType ( ) != null ) { super . put ( AUTH_TYPE_V , _env . createStringOld ( request . getAuthType ( ) ) ) ; if ( request . getRemoteUser ( ) != null ) { super . put ( PHP_AUTH_USER_V , _env . createString ( request . getRemoteUser ( ) , _env . getHttpInputEncoding ( ) ) ) ; } } Enumeration e = request . getHeaderNames ( ) ; while ( e . hasMoreElements ( ) ) { String key = ( String ) e . nextElement ( ) ; String value = request . getHeader ( key ) ; if ( key . equalsIgnoreCase ( "Host" ) ) { super . put ( HTTP_HOST_V , _env . createStringOld ( value ) ) ; } else { super . put ( convertHttpKey ( key ) , _env . createStringOld ( value ) ) ; } } } } private StringValue convertHttpKey ( String key ) { StringValue sb = _env . createUnicodeBuilder ( ) ; sb . append ( "HTTP_" ) ; int len = key . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char ch = key . charAt ( i ) ; if ( Character . isLowerCase ( ch ) ) sb . append ( Character . toUpperCase ( ch ) ) ; else if ( ch == '-' ) sb . append ( '_' ) ; else sb . append ( ch ) ; } return sb ; } private Object writeReplace ( ) { if ( ! _isFilled ) fillMap ( ) ; return new ArrayValueImpl ( this ) ; } } 
=======
class KeyRefConstraint extends KeyConstraint { private final Pattern ref ; static class RefSelectionHandler extends SelectedValueHandler { private final KeyIndex index ; RefSelectionHandler ( KeyConstraint . KeyIndex index ) { this . index = index ; } void select ( ErrorContext ec , Locator locator , Object value , String representation ) { KeyInfo info = index . lookupCreate ( value ) ; if ( info . firstKeyLocator == null ) { if ( info . pendingRefLocators == null ) info . pendingRefLocators = new Vector ( ) ; if ( locator == null ) locator = ec . saveLocator ( ) ; info . pendingRefLocators . addElement ( locator ) ; } if ( info . representation == null ) info . representation = representation ; } public void selectComplete ( ErrorContext ec ) { for ( Enumeration e = index . keys ( ) ; e . hasMoreElements ( ) ; ) { Object key = e . nextElement ( ) ; KeyInfo info = index . lookupCreate ( key ) ; if ( info . pendingRefLocators == null ) continue ; for ( int i = 0 , len = info . pendingRefLocators . size ( ) ; i < len ; i ++ ) { Locator loc = ( Locator ) info . pendingRefLocators . elementAt ( i ) ; ec . error ( loc , "undefined_key" , info . representation ) ; } } } } KeyRefConstraint ( Pattern key , Pattern ref ) { super ( key ) ; this . ref = ref ; } void activate ( PatternManager pm , KeyIndex index ) { super . activate ( pm , index ) ; pm . registerPattern ( ref , new ValueSelectionHandler ( new RefSelectionHandler ( index ) ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
