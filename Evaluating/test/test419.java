<<<<<<< HEAD
public class TimesheetActivity extends ListActivity { TimesheetDatabase m_db ; Cursor m_task_cursor ; SimpleCursorAdapter m_ca ; public static final int ADD_TASK_MENU_ITEM = Menu . FIRST ; public static final int DELETE_TASK_MENU_ITEM = Menu . FIRST + 1 ; public static final int LIST_ENTRIES_MENU_ITEM = Menu . FIRST + 2 ; public static final int EDIT_TASK_MENU_ITEM = Menu . FIRST + 3 ; public static final int PREFERENCES_MENU_ITEM = Menu . FIRST + 4 ; private static final int ACTIVITY_CREATE = 0 ; private static final int ACTIVITY_EDIT = 1 ; @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ; m_db = new TimesheetDatabase ( this ) ; m_task_cursor = m_db . getTasks ( prefs . getBoolean ( "alphabetise_tasks" , false ) ) ; startManagingCursor ( m_task_cursor ) ; setContentView ( R . layout . main ) ; m_ca = new SimpleCursorAdapter ( this , android . R . layout . simple_list_item_single_choice , m_task_cursor , new String [ ] { "title" } , new int [ ] { android . R . id . text1 } ) ; m_ca . registerDataSetObserver ( new DataSetObserver ( ) { public void onChanged ( ) { updateCheckedItem ( ) ; } } ) ; setListAdapter ( m_ca ) ; getListView ( ) . setChoiceMode ( ListView . CHOICE_MODE_SINGLE ) ; registerForContextMenu ( getListView ( ) ) ; if ( ! prefs . contains ( "alphabetise_tasks" ) ) { prefs . edit ( ) . putBoolean ( "alphabetise_tasks" , false ) ; } if ( ! prefs . contains ( "weekly_billable_only" ) ) { prefs . edit ( ) . putBoolean ( "weekly_billable_only" , true ) ; } if ( ! prefs . contains ( "week_start" ) ) { prefs . edit ( ) . putString ( "week_start" , "2" ) ; } if ( ! prefs . contains ( "default_email" ) ) { prefs . edit ( ) . putString ( "default_email" , "" ) ; } prefs . edit ( ) . commit ( ) ; updateCheckedItem ( ) ; } @ Override protected void onDestroy ( ) { m_task_cursor . close ( ) ; m_db . close ( ) ; super . onDestroy ( ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { boolean result = super . onCreateOptionsMenu ( menu ) ; menu . add ( Menu . NONE , ADD_TASK_MENU_ITEM , Menu . NONE , "Add Task" ) . setIcon ( android . R . drawable . ic_menu_add ) ; menu . add ( Menu . NONE , LIST_ENTRIES_MENU_ITEM , Menu . NONE , "List Entries" ) . setIcon ( android . R . drawable . ic_menu_info_details ) ; menu . add ( Menu . NONE , PREFERENCES_MENU_ITEM , Menu . NONE , "Preferences" ) . setIcon ( android . R . drawable . ic_menu_preferences ) ; return result ; } @ Override public void onListItemClick ( ListView lv , View v , int position , long id ) { if ( id == m_db . getCurrentTaskId ( ) ) { m_db . completeCurrentTask ( ) ; getListView ( ) . clearChoices ( ) ; getListView ( ) . requestLayout ( ) ; } else { m_db . changeTask ( id ) ; } startService ( new Intent ( this , TimesheetAppWidgetProvider . UpdateService . class ) ) ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case ADD_TASK_MENU_ITEM : addTask ( ) ; return true ; case LIST_ENTRIES_MENU_ITEM : listEntries ( ) ; return true ; case PREFERENCES_MENU_ITEM : preferences ( ) ; return true ; } return false ; } @ Override public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; menu . add ( Menu . NONE , EDIT_TASK_MENU_ITEM , Menu . NONE , "Edit Task" ) ; menu . add ( Menu . NONE , DELETE_TASK_MENU_ITEM , Menu . NONE , "Delete Task" ) ; } @ Override public boolean onContextItemSelected ( MenuItem item ) { AdapterContextMenuInfo info = ( AdapterContextMenuInfo ) item . getMenuInfo ( ) ; switch ( item . getItemId ( ) ) { case EDIT_TASK_MENU_ITEM : Intent i = new Intent ( this , TaskEditActivity . class ) ; i . putExtra ( "_id" , info . id ) ; startActivityForResult ( i , ACTIVITY_EDIT ) ; return true ; case DELETE_TASK_MENU_ITEM : m_db . deleteTask ( info . id ) ; m_task_cursor . requery ( ) ; startService ( new Intent ( this , TimesheetAppWidgetProvider . UpdateService . class ) ) ; return true ; } return false ; } private void addTask ( ) { Intent i = new Intent ( this , TaskEditActivity . class ) ; startActivityForResult ( i , ACTIVITY_CREATE ) ; } private void listEntries ( ) { Intent i = new Intent ( this , TimeEntriesActivity . class ) ; startActivity ( i ) ; } private void preferences ( ) { Intent i = new Intent ( this , TimesheetPreferences . class ) ; startActivity ( i ) ; } public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( resultCode == RESULT_OK ) { m_task_cursor . requery ( ) ; startService ( new Intent ( this , TimesheetAppWidgetProvider . UpdateService . class ) ) ; } } private void updateCheckedItem ( ) { long current_id = m_db . getCurrentTaskId ( ) ; if ( current_id == 0 ) { getListView ( ) . clearChoices ( ) ; } else { int count = getListView ( ) . getCount ( ) ; for ( int i = 0 ; i < count ; ++ i ) { if ( m_ca . getItemId ( i ) == current_id ) { getListView ( ) . setItemChecked ( i , true ) ; } } } } } 
=======
public final class TextContentChecker extends Checker { private final LinkedList < DatatypeStreamingValidator > stack = new LinkedList < DatatypeStreamingValidator > ( ) ; private boolean inEmptyTitleOrOption = false ; public TextContentChecker ( ) { super ( ) ; } private DatatypeStreamingValidator streamingValidatorFor ( String uri , String localName , Attributes atts ) { if ( "http://www.w3.org/1999/xhtml" . equals ( uri ) ) { if ( "time" . equals ( localName ) ) { if ( atts . getIndex ( "" , "datetime" ) < 0 ) { return TimeDatetime . THE_INSTANCE . createStreamingValidator ( null ) ; } } if ( "script" . equals ( localName ) ) { if ( atts . getIndex ( "" , "src" ) < 0 ) { return Script . THE_INSTANCE . createStreamingValidator ( null ) ; } else { return ScriptDocumentation . THE_INSTANCE . createStreamingValidator ( null ) ; } } else if ( "style" . equals ( localName ) || "textarea" . equals ( localName ) || "title" . equals ( localName ) ) { return CdoCdcPair . THE_INSTANCE . createStreamingValidator ( null ) ; } } return null ; } public void characters ( char [ ] ch , int start , int length ) throws SAXException { inEmptyTitleOrOption = false ; for ( DatatypeStreamingValidator dsv : stack ) { if ( dsv != null ) { dsv . addCharacters ( ch , start , length ) ; } } } public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( inEmptyTitleOrOption && "http://www.w3.org/1999/xhtml" . equals ( uri ) && "title" . equals ( localName ) ) { err ( "Element “title” must not be empty." ) ; inEmptyTitleOrOption = false ; } else if ( inEmptyTitleOrOption && "http://www.w3.org/1999/xhtml" . equals ( uri ) && "option" . equals ( localName ) ) { err ( "Element “option” without " + "attribute “label” must not be empty." ) ; inEmptyTitleOrOption = false ; } DatatypeStreamingValidator dsv = stack . removeLast ( ) ; if ( dsv != null ) { try { dsv . checkValid ( ) ; } catch ( DatatypeException e ) { String msg = e . getMessage ( ) ; if ( msg == null ) { err ( "The text content of element “" + localName + "” from namespace “" + uri + "” was not in the required format." ) ; } else { if ( "time" . equals ( localName ) ) { try { errBadTextContent ( e , TimeDatetime . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } else if ( "script" . equals ( localName ) ) { assert e instanceof Html5DatatypeException : "Not an Html5DatatypeException" ; Html5DatatypeException ex5 = ( Html5DatatypeException ) e ; if ( Script . class . equals ( ex5 . getDatatypeClass ( ) ) ) { try { errBadTextContent ( e , Script . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { throw new RuntimeException ( e ) ; } } else { try { errBadTextContent ( e , ScriptDocumentation . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } } else if ( "style" . equals ( localName ) ) { try { errBadTextContent ( e , CdoCdcPair . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } else if ( "textarea" . equals ( localName ) || "title" . equals ( localName ) ) { try { warnBadTextContent ( e , CdoCdcPair . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } else { err ( "The text content of element “" + localName + "” was not in the required format: " + msg . split ( ": " ) [ 1 ] ) ; } } } } } private void errBadTextContent ( DatatypeException e , Class < ? > datatypeClass , String localName , String uri ) throws SAXException , ClassNotFoundException { if ( getErrorHandler ( ) != null ) { Html5DatatypeException ex5 = ( Html5DatatypeException ) e ; boolean warning = ex5 . isWarning ( ) ? true : false ; DatatypeMismatchException dme = new DatatypeMismatchException ( "The text content of element “" + localName + "” was not in the required format: " + e . getMessage ( ) . split ( ": " ) [ 1 ] , getDocumentLocator ( ) , datatypeClass , warning ) ; getErrorHandler ( ) . error ( dme ) ; } } private void warnBadTextContent ( DatatypeException e , Class < ? > datatypeClass , String localName , String uri ) throws SAXException , ClassNotFoundException { if ( getErrorHandler ( ) != null ) { DatatypeMismatchException dme = new DatatypeMismatchException ( "Possible problem in text content of element “" + localName + "”: " + e . getMessage ( ) . split ( ": " ) [ 1 ] , getDocumentLocator ( ) , datatypeClass , true ) ; getErrorHandler ( ) . error ( dme ) ; } } public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { stack . addLast ( streamingValidatorFor ( uri , localName , atts ) ) ; if ( "http://www.w3.org/1999/xhtml" . equals ( uri ) && ( "title" . equals ( localName ) ) || ( "option" . equals ( localName ) && atts . getIndex ( "" , "label" ) < 0 ) ) { inEmptyTitleOrOption = true ; } } public void reset ( ) { stack . clear ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
