public final class TextContentChecker extends Checker { private final LinkedList < DatatypeStreamingValidator > stack = new LinkedList < DatatypeStreamingValidator > ( ) ; private boolean inEmptyTitleOrOption = false ; public TextContentChecker ( ) { super ( ) ; } private DatatypeStreamingValidator streamingValidatorFor ( String uri , String localName , Attributes atts ) { if ( "http://www.w3.org/1999/xhtml" . equals ( uri ) ) { if ( "time" . equals ( localName ) ) { if ( atts . getIndex ( "" , "datetime" ) < 0 ) { return TimeDatetime . THE_INSTANCE . createStreamingValidator ( null ) ; } } if ( "script" . equals ( localName ) ) { if ( atts . getIndex ( "" , "src" ) < 0 ) { return Script . THE_INSTANCE . createStreamingValidator ( null ) ; } else { return ScriptDocumentation . THE_INSTANCE . createStreamingValidator ( null ) ; } } else if ( "style" . equals ( localName ) || "textarea" . equals ( localName ) || "title" . equals ( localName ) ) { return CdoCdcPair . THE_INSTANCE . createStreamingValidator ( null ) ; } } return null ; } public void characters ( char [ ] ch , int start , int length ) throws SAXException { inEmptyTitleOrOption = false ; for ( DatatypeStreamingValidator dsv : stack ) { if ( dsv != null ) { dsv . addCharacters ( ch , start , length ) ; } } } public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( inEmptyTitleOrOption && "http://www.w3.org/1999/xhtml" . equals ( uri ) && "title" . equals ( localName ) ) { err ( "Element “title” must not be empty." ) ; inEmptyTitleOrOption = false ; } else if ( inEmptyTitleOrOption && "http://www.w3.org/1999/xhtml" . equals ( uri ) && "option" . equals ( localName ) ) { err ( "Element “option” without " + "attribute “label” must not be empty." ) ; inEmptyTitleOrOption = false ; } DatatypeStreamingValidator dsv = stack . removeLast ( ) ; if ( dsv != null ) { try { dsv . checkValid ( ) ; } catch ( DatatypeException e ) { String msg = e . getMessage ( ) ; if ( msg == null ) { err ( "The text content of element “" + localName + "” from namespace “" + uri + "” was not in the required format." ) ; } else { if ( "time" . equals ( localName ) ) { try { errBadTextContent ( e , TimeDatetime . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } else if ( "script" . equals ( localName ) ) { assert e instanceof Html5DatatypeException : "Not an Html5DatatypeException" ; Html5DatatypeException ex5 = ( Html5DatatypeException ) e ; if ( Script . class . equals ( ex5 . getDatatypeClass ( ) ) ) { try { errBadTextContent ( e , Script . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { throw new RuntimeException ( e ) ; } } else { try { errBadTextContent ( e , ScriptDocumentation . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } } else if ( "style" . equals ( localName ) ) { try { errBadTextContent ( e , CdoCdcPair . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } else if ( "textarea" . equals ( localName ) || "title" . equals ( localName ) ) { try { warnBadTextContent ( e , CdoCdcPair . class , localName , uri ) ; } catch ( ClassNotFoundException ce ) { } } else { err ( "The text content of element “" + localName + "” was not in the required format: " + msg . split ( ": " ) [ 1 ] ) ; } } } } } private void errBadTextContent ( DatatypeException e , Class < ? > datatypeClass , String localName , String uri ) throws SAXException , ClassNotFoundException { if ( getErrorHandler ( ) != null ) { Html5DatatypeException ex5 = ( Html5DatatypeException ) e ; boolean warning = ex5 . isWarning ( ) ? true : false ; DatatypeMismatchException dme = new DatatypeMismatchException ( "The text content of element “" + localName + "” was not in the required format: " + e . getMessage ( ) . split ( ": " ) [ 1 ] , getDocumentLocator ( ) , datatypeClass , warning ) ; getErrorHandler ( ) . error ( dme ) ; } } private void warnBadTextContent ( DatatypeException e , Class < ? > datatypeClass , String localName , String uri ) throws SAXException , ClassNotFoundException { if ( getErrorHandler ( ) != null ) { DatatypeMismatchException dme = new DatatypeMismatchException ( "Possible problem in text content of element “" + localName + "”: " + e . getMessage ( ) . split ( ": " ) [ 1 ] , getDocumentLocator ( ) , datatypeClass , true ) ; getErrorHandler ( ) . error ( dme ) ; } } public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { stack . addLast ( streamingValidatorFor ( uri , localName , atts ) ) ; if ( "http://www.w3.org/1999/xhtml" . equals ( uri ) && ( "title" . equals ( localName ) ) || ( "option" . equals ( localName ) && atts . getIndex ( "" , "label" ) < 0 ) ) { inEmptyTitleOrOption = true ; } } public void reset ( ) { stack . clear ( ) ; } } 