<<<<<<< HEAD
public class FTPManagerComposite implements SelectionListener , ISiteConnectionListener , ConnectionPointComposite . Client { public static interface Listener { public void siteConnectionChanged ( ISiteConnection site ) ; } private Composite fMain ; private ComboViewer fSitesViewer ; private Button fEditButton ; private Button fSaveAsButton ; private ConnectionPointComposite fSource ; private ConnectionPointComposite fTarget ; private Button fTransferSyncButton ; private Button fTransferRightButton ; private Button fTransferLeftButton ; private ISiteConnection fSelectedSite ; private List < Listener > fListeners ; private ConnectionPointComposite focusedConnection ; public FTPManagerComposite ( Composite parent ) { fListeners = new ArrayList < Listener > ( ) ; fMain = createControl ( parent ) ; SyncingPlugin . getSiteConnectionManager ( ) . addListener ( this ) ; } public void addListener ( Listener listener ) { if ( ! fListeners . contains ( listener ) ) { fListeners . add ( listener ) ; } } public void removeListener ( Listener listener ) { fListeners . remove ( listener ) ; } public void dispose ( ) { fSelectedSite = null ; fListeners . clear ( ) ; SyncingPlugin . getSiteConnectionManager ( ) . removeListener ( this ) ; } public Control getControl ( ) { return fMain ; } public void setFocus ( ) { fMain . setFocus ( ) ; } public void setSelectedSite ( ISiteConnection siteConnection ) { if ( siteConnection == fSelectedSite ) { return ; } fSelectedSite = siteConnection ; if ( siteConnection == null ) { fSitesViewer . setSelection ( StructuredSelection . EMPTY ) ; fSource . setConnectionPoint ( null ) ; fTarget . setConnectionPoint ( null ) ; } else { if ( siteConnection == DefaultSiteConnection . getInstance ( ) ) { fSitesViewer . setInput ( new ISiteConnection [ ] { siteConnection } ) ; } else { fSitesViewer . setInput ( SyncingPlugin . getSiteConnectionManager ( ) . getSiteConnections ( ) ) ; } fSitesViewer . setSelection ( new StructuredSelection ( siteConnection ) ) ; fSource . setConnectionPoint ( siteConnection . getSource ( ) ) ; fTarget . setConnectionPoint ( siteConnection . getDestination ( ) ) ; } fireSiteConnectionChanged ( fSelectedSite ) ; } public void widgetDefaultSelected ( SelectionEvent e ) { } public void widgetSelected ( SelectionEvent e ) { Object source = e . getSource ( ) ; if ( source == fEditButton ) { SiteConnectionsEditorDialog dlg = new SiteConnectionsEditorDialog ( fMain . getShell ( ) ) ; dlg . setSelection ( ( ISiteConnection ) ( ( IStructuredSelection ) fSitesViewer . getSelection ( ) ) . getFirstElement ( ) ) ; dlg . open ( ) ; } else if ( source == fSaveAsButton ) { saveAs ( ) ; } else if ( source == fTransferSyncButton ) { syncSourceToDestination ( ) ; } else if ( source == fTransferRightButton ) { transferSourceToDestination ( ) ; } else if ( source == fTransferLeftButton ) { transferDestinationToSource ( ) ; } } public void siteConnectionChanged ( final SiteConnectionEvent event ) { switch ( event . getKind ( ) ) { case SiteConnectionEvent . POST_ADD : case SiteConnectionEvent . POST_DELETE : if ( fMain . isDisposed ( ) ) { return ; } fMain . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { if ( fSelectedSite != DefaultSiteConnection . getInstance ( ) ) { ISelection selection = fSitesViewer . getSelection ( ) ; fSitesViewer . setInput ( SyncingPlugin . getSiteConnectionManager ( ) . getSiteConnections ( ) ) ; fSitesViewer . setSelection ( selection ) ; } } } ) ; break ; case SiteConnectionEvent . POST_CHANGE : if ( fMain . isDisposed ( ) ) { return ; } fMain . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { ISiteConnection siteConnection = event . getSiteConnection ( ) ; fSource . setConnectionPoint ( siteConnection . getSource ( ) ) ; fTarget . setConnectionPoint ( siteConnection . getDestination ( ) ) ; } } ) ; break ; } } public void transfer ( ConnectionPointComposite source ) { if ( source == fSource ) { transferSourceToDestination ( ) ; } else if ( source == fTarget ) { transferDestinationToSource ( ) ; } } protected Composite createControl ( Composite parent ) { Composite main = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . verticalSpacing = 0 ; main . setLayout ( layout ) ; Composite top = createSiteInfo ( main ) ; top . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; Composite middle = createSitePresentation ( main ) ; middle . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; return main ; } private Composite createSiteInfo ( Composite parent ) { Composite main = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( 4 , false ) ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; main . setLayout ( layout ) ; Label label = new Label ( main , SWT . NONE ) ; label . setText ( Messages . FTPManagerComposite_LBL_Sites ) ; fSitesViewer = new ComboViewer ( main , SWT . READ_ONLY ) ; fSitesViewer . setContentProvider ( new ArrayContentProvider ( ) ) ; fSitesViewer . setLabelProvider ( new SitesLabelProvider ( ) ) ; fSitesViewer . setInput ( SyncingPlugin . getSiteConnectionManager ( ) . getSiteConnections ( ) ) ; fSitesViewer . getControl ( ) . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( 250 , SWT . DEFAULT ) . create ( ) ) ; fSitesViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { setSelectedSite ( ( ISiteConnection ) ( ( IStructuredSelection ) event . getSelection ( ) ) . getFirstElement ( ) ) ; } } ) ; fEditButton = new Button ( main , SWT . PUSH ) ; fEditButton . setText ( StringUtils . ellipsify ( CoreStrings . EDIT ) ) ; fEditButton . setToolTipText ( Messages . FTPManagerComposite_TTP_Edit ) ; fEditButton . addSelectionListener ( this ) ; fSaveAsButton = new Button ( main , SWT . PUSH ) ; fSaveAsButton . setText ( StringUtils . ellipsify ( Messages . FTPManagerComposite_LBL_SaveAs ) ) ; fSaveAsButton . setToolTipText ( Messages . FTPManagerComposite_TTP_SaveAs ) ; fSaveAsButton . addSelectionListener ( this ) ; return main ; } private Composite createSitePresentation ( Composite parent ) { final Composite main = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( 5 , false ) ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; layout . horizontalSpacing = 0 ; main . setLayout ( layout ) ; fSource = new ConnectionPointComposite ( main , Messages . FTPManagerComposite_LBL_Source , this ) ; fSource . getControl ( ) . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; fSource . addTreeFocusListener ( new FocusListener ( ) { public void focusLost ( FocusEvent e ) { focusedConnection = null ; } public void focusGained ( FocusEvent e ) { focusedConnection = fSource ; } } ) ; final Sash leftSash = new Sash ( main , SWT . VERTICAL ) ; leftSash . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , true ) ) ; final Composite directions = new Composite ( main , SWT . NONE ) ; layout = new GridLayout ( ) ; layout . marginHeight = 0 ; directions . setLayout ( layout ) ; directions . setLayoutData ( new GridData ( SWT . CENTER , SWT . FILL , false , true ) ) ; fTransferRightButton = new Button ( directions , SWT . NONE ) ; fTransferRightButton . setImage ( PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImage ( ISharedImages . IMG_TOOL_FORWARD ) ) ; fTransferRightButton . setToolTipText ( Messages . FTPManagerComposite_TTP_TransferRight ) ; fTransferRightButton . setLayoutData ( new GridData ( SWT . CENTER , SWT . END , true , true ) ) ; fTransferRightButton . addSelectionListener ( this ) ; fTransferLeftButton = new Button ( directions , SWT . NONE ) ; fTransferLeftButton . setImage ( PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImage ( ISharedImages . IMG_TOOL_BACK ) ) ; fTransferLeftButton . setToolTipText ( Messages . FTPManagerComposite_TTP_TransferLeft ) ; fTransferLeftButton . setLayoutData ( new GridData ( SWT . CENTER , SWT . BEGINNING , true , true ) ) ; fTransferLeftButton . addSelectionListener ( this ) ; fTransferSyncButton = new Button ( directions , SWT . NONE ) ; fTransferSyncButton . setImage ( SyncingUIPlugin . getImage ( "icons/full/obj16/sync_both.gif" ) ) ; fTransferSyncButton . setToolTipText ( "Synchronizes the files on the right with those on the left" ) ; fTransferSyncButton . setLayoutData ( new GridData ( SWT . CENTER , SWT . BEGINNING , true , true ) ) ; fTransferSyncButton . addSelectionListener ( this ) ; final Sash rightSash = new Sash ( main , SWT . VERTICAL ) ; rightSash . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , true ) ) ; fTarget = new ConnectionPointComposite ( main , Messages . FTPManagerComposite_LBL_Target , this ) ; fTarget . getControl ( ) . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; fTarget . addTreeFocusListener ( new FocusListener ( ) { public void focusLost ( FocusEvent e ) { focusedConnection = null ; } public void focusGained ( FocusEvent e ) { focusedConnection = fTarget ; } } ) ; leftSash . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { if ( event . detail != SWT . DRAG ) { layout ( ) ; } } private void layout ( ) { Rectangle overallBounds = main . getBounds ( ) ; Rectangle leftSashBounds = leftSash . getBounds ( ) ; Rectangle middleBounds = directions . getBounds ( ) ; Rectangle rightSashBounds = rightSash . getBounds ( ) ; fSource . getControl ( ) . setBounds ( 0 , 0 , leftSashBounds . x , overallBounds . height ) ; int x = leftSashBounds . x + leftSashBounds . width ; directions . setBounds ( x , 0 , middleBounds . width , overallBounds . height ) ; x += middleBounds . width ; rightSash . setBounds ( x , 0 , rightSashBounds . width , overallBounds . height ) ; x += rightSashBounds . width ; fTarget . getControl ( ) . setBounds ( x , 0 , overallBounds . width - x , overallBounds . height ) ; } } ) ; rightSash . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { if ( event . detail != SWT . DRAG ) { layout ( ) ; } } private void layout ( ) { Rectangle overallBounds = main . getBounds ( ) ; Rectangle leftSashBounds = leftSash . getBounds ( ) ; Rectangle middleBounds = directions . getBounds ( ) ; Rectangle rightSashBounds = rightSash . getBounds ( ) ; int x = rightSashBounds . x + rightSashBounds . width ; fTarget . getControl ( ) . setBounds ( x , 0 , overallBounds . width - x , overallBounds . height ) ; x = rightSashBounds . x - middleBounds . width ; directions . setBounds ( x , 0 , middleBounds . width , overallBounds . height ) ; x -= leftSashBounds . width ; leftSash . setBounds ( x , 0 , leftSashBounds . width , overallBounds . height ) ; fSource . getControl ( ) . setBounds ( 0 , 0 , x , overallBounds . height ) ; } } ) ; return main ; } private void saveAs ( ) { ISiteConnection selection = ( ISiteConnection ) ( ( IStructuredSelection ) fSitesViewer . getSelection ( ) ) . getFirstElement ( ) ; String initialValue = StringUtils . EMPTY ; if ( selection != null ) { initialValue = "Copy of " + selection . getName ( ) ; } InputDialog dialog = new InputDialog ( fMain . getShell ( ) , Messages . FTPManagerComposite_NameInput_Title , Messages . FTPManagerComposite_NameInput_Message , initialValue , new IInputValidator ( ) { public String isValid ( String newText ) { if ( newText . length ( ) == 0 ) { return Messages . FTPManagerComposite_ERR_EmptyName ; } for ( ISiteConnection i : SyncingPlugin . getSiteConnectionManager ( ) . getSiteConnections ( ) ) { if ( newText . equals ( i . getName ( ) ) ) { return MessageFormat . format ( Messages . FTPManagerComposite_ERR_NameExists , newText ) ; } } return null ; } } ) ; if ( dialog . open ( ) != Window . OK ) { return ; } String name = dialog . getValue ( ) ; SiteConnection newSite = null ; if ( fSelectedSite != null ) { try { newSite = ( SiteConnection ) SyncingPlugin . getSiteConnectionManager ( ) . cloneSiteConnection ( fSelectedSite ) ; } catch ( CoreException e ) { UIUtils . showErrorMessage ( Messages . FTPManagerComposite_ERR_CreateNewSiteFailed , e ) ; return ; } } else { newSite = ( SiteConnection ) SyncingPlugin . getSiteConnectionManager ( ) . createSiteConnection ( ) ; } newSite . setName ( name ) ; SyncingPlugin . getSiteConnectionManager ( ) . addSiteConnection ( newSite ) ; EditorUtils . openConnectionEditor ( newSite ) ; } private void syncSourceToDestination ( ) { ISiteConnection selection = ( ISiteConnection ) ( ( IStructuredSelection ) fSitesViewer . getSelection ( ) ) . getFirstElement ( ) ; IConnectionPoint source = selection . getSource ( ) ; IConnectionPoint dest = selection . getDestination ( ) ; ConnectionPointSyncPair cpsp = new ConnectionPointSyncPair ( source , dest ) ; SmartSyncDialog dialog ; try { if ( focusedConnection == null ) { IFileStore sourceStore = SyncUtils . getFileStore ( fSource . getCurrentInput ( ) ) ; IFileStore targetStore = SyncUtils . getFileStore ( fTarget . getCurrentInput ( ) ) ; dialog = new SmartSyncDialog ( CoreUIUtils . getActiveShell ( ) , source , dest , sourceStore , targetStore , source . getName ( ) , dest . getName ( ) ) ; } else { IFileStore [ ] sourceStores = SyncUtils . getFileStores ( focusedConnection . getSelectedElements ( ) ) ; dialog = new SmartSyncDialog ( CoreUIUtils . getActiveShell ( ) , cpsp , sourceStores ) ; } dialog . open ( ) ; dialog . setHandler ( new SyncEventHandlerAdapter ( ) { public void syncDone ( VirtualFileSyncPair item ) { IOUIPlugin . refreshNavigatorView ( fSource . getCurrentInput ( ) ) ; IOUIPlugin . refreshNavigatorView ( fTarget . getCurrentInput ( ) ) ; CoreUIUtils . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { fSource . refresh ( ) ; fTarget . refresh ( ) ; } } ) ; } } ) ; } catch ( CoreException e ) { ErrorDialog . openError ( CoreUIUtils . getActiveShell ( ) , "Error opening Synchronize dialog" , "Unable to open synchronize dialog. It appears either the source or destination endpoint is invalid" , e . getStatus ( ) ) ; } } private void transferSourceToDestination ( ) { UploadAction action = new UploadAction ( ) ; action . setActivePart ( null , CoreUIUtils . getActivePart ( ) ) ; action . setSelectedSite ( fSelectedSite ) ; action . setSelection ( new StructuredSelection ( fSource . getSelectedElements ( ) ) ) ; action . setSourceRoot ( SyncUtils . getFileStore ( fSource . getCurrentInput ( ) ) ) ; action . setDestinationRoot ( SyncUtils . getFileStore ( fTarget . getCurrentInput ( ) ) ) ; action . addJobListener ( new JobChangeAdapter ( ) { @ Override public void done ( IJobChangeEvent event ) { if ( event . getResult ( ) == Status . CANCEL_STATUS ) { return ; } IOUIPlugin . refreshNavigatorView ( fTarget . getCurrentInput ( ) ) ; CoreUIUtils . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { fTarget . refresh ( ) ; } } ) ; } } ) ; action . run ( null ) ; } private void transferDestinationToSource ( ) { DownloadAction action = new DownloadAction ( ) ; action . setActivePart ( null , CoreUIUtils . getActivePart ( ) ) ; action . setSelectedSite ( fSelectedSite ) ; action . setSelection ( new StructuredSelection ( fTarget . getSelectedElements ( ) ) , false ) ; action . setSourceRoot ( SyncUtils . getFileStore ( fSource . getCurrentInput ( ) ) ) ; action . setDestinationRoot ( SyncUtils . getFileStore ( fTarget . getCurrentInput ( ) ) ) ; action . addJobListener ( new JobChangeAdapter ( ) { @ Override public void done ( IJobChangeEvent event ) { if ( event . getResult ( ) == Status . CANCEL_STATUS ) { return ; } IOUIPlugin . refreshNavigatorView ( fSource . getCurrentInput ( ) ) ; CoreUIUtils . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { fSource . refresh ( ) ; } } ) ; } } ) ; action . run ( null ) ; } private void fireSiteConnectionChanged ( ISiteConnection site ) { for ( Listener listener : fListeners ) { listener . siteConnectionChanged ( site ) ; } } private class SitesLabelProvider extends LabelProvider { @ Override public String getText ( Object element ) { if ( element instanceof ISiteConnection ) { return ( ( ISiteConnection ) element ) . getName ( ) ; } return super . getText ( element ) ; } } } 
=======
public class Regex { public static final Pattern TOP_LEVEL_DOMAIN_PATTERN = Pattern . compile ( "((aero|arpa|asia|a[cdefgilmnoqrstuwxz])" + "|(biz|b[abdefghijmnorstvwyz])" + "|(cat|com|coop|c[acdfghiklmnoruvxyz])" + "|d[ejkmoz]" + "|(edu|e[cegrstu])" + "|f[ijkmor]" + "|(gov|g[abdefghilmnpqrstuwy])" + "|h[kmnrtu]" + "|(info|int|i[delmnoqrst])" + "|(jobs|j[emop])" + "|k[eghimnrwyz]" + "|l[abcikrstuvy]" + "|(mil|mobi|museum|m[acdghklmnopqrstuvwxyz])" + "|(name|net|n[acefgilopruz])" + "|(org|om)" + "|(pro|p[aefghklmnrstwy])" + "|qa" + "|r[eouw]" + "|s[abcdeghijklmnortuvyz]" + "|(tel|travel|t[cdfghjklmnoprtvwz])" + "|u[agkmsyz]" + "|v[aceginu]" + "|w[fs]" + "|y[etu]" + "|z[amw])" ) ; public static final Pattern WEB_URL_PATTERN = Pattern . compile ( "((?:(http|https|Http|Https):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)" + "\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2}))+(?:\\:(?:[a-zA-Z0-9\\$\\-\\_" + "\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2}))+)?\\@)?)?" + "((?:(?:[a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+" + "(?:" + "(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])" + "|(?:biz|b[abdefghijmnorstvwyz])" + "|(?:cat|com|coop|c[acdfghiklmnoruvxyz])" + "|d[ejkmoz]" + "|(?:edu|e[cegrstu])" + "|f[ijkmor]" + "|(?:gov|g[abdefghilmnpqrstuwy])" + "|h[kmnrtu]" + "|(?:info|int|i[delmnoqrst])" + "|(?:jobs|j[emop])" + "|k[eghimnrwyz]" + "|l[abcikrstuvy]" + "|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])" + "|(?:name|net|n[acefgilopruz])" + "|(?:org|om)" + "|(?:pro|p[aefghklmnrstwy])" + "|qa" + "|r[eouw]" + "|s[abcdeghijklmnortuvyz]" + "|(?:tel|travel|t[cdfghjklmnoprtvwz])" + "|u[agkmsyz]" + "|v[aceginu]" + "|w[fs]" + "|y[etu]" + "|z[amw]))" + "|(?:(?:25[0-5]|2[0-4]" + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]" + "|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]" + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}" + "|[1-9][0-9]|[0-9])))" + "(?:\\:\\d{1,5})?)" + "(\\/(?:(?:[a-zA-Z0-9\\;\\/\\?\\:\\@\\&\\=\\#\\~" + "\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?" + "(?:\\b|$)" ) ; public static final Pattern IP_ADDRESS_PATTERN = Pattern . compile ( "((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4]" + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]" + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}" + "|[1-9][0-9]|[0-9]))" ) ; public static final Pattern DOMAIN_NAME_PATTERN = Pattern . compile ( "(((([a-zA-Z0-9][a-zA-Z0-9\\-]*)*[a-zA-Z0-9]\\.)+" + TOP_LEVEL_DOMAIN_PATTERN + ")|" + IP_ADDRESS_PATTERN + ")" ) ; public static final Pattern EMAIL_ADDRESS_PATTERN = Pattern . compile ( "[a-zA-Z0-9\\+\\.\\_\\%\\-]+" + "\\@" + "[a-zA-Z0-9][a-zA-Z0-9\\-]*" + "(" + "\\." + "[a-zA-Z0-9][a-zA-Z0-9\\-]*" + ")+" ) ; public static final Pattern PHONE_PATTERN = Pattern . compile ( "(\\+[0-9]+[\\- \\.]*)?" + "(\\([0-9]+\\)[\\- \\.]*)?" + "([0-9][0-9\\- \\.][0-9\\- \\.]+[0-9])" ) ; public static final String concatGroups ( Matcher matcher ) { StringBuilder b = new StringBuilder ( ) ; final int numGroups = matcher . groupCount ( ) ; for ( int i = 1 ; i <= numGroups ; i ++ ) { String s = matcher . group ( i ) ; System . err . println ( "Group(" + i + ") : " + s ) ; if ( s != null ) { b . append ( s ) ; } } return b . toString ( ) ; } public static final String digitsAndPlusOnly ( Matcher matcher ) { StringBuilder buffer = new StringBuilder ( ) ; String matchingRegion = matcher . group ( ) ; for ( int i = 0 , size = matchingRegion . length ( ) ; i < size ; i ++ ) { char character = matchingRegion . charAt ( i ) ; if ( character == '+' || Character . isDigit ( character ) ) { buffer . append ( character ) ; } } return buffer . toString ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
