public class JavaTypes { private static final char ENCLOSING_TYPE_SEPARATOR = '.' ; public static final String TEST_INTERFACE_NAME = "junit.framework.Test" ; private static final String TEST_ANNOTATION_NAME = "Test" ; static final String TEST_ANNOTATION_FULL_NAME = "org.junit.Test" ; public static boolean isTest ( IType type ) throws JavaModelException { ITypeHierarchy typeHier = type . newSupertypeHierarchy ( null ) ; IType [ ] superInterfaces = typeHier . getAllInterfaces ( ) ; for ( int i = 0 ; i < superInterfaces . length ; i ++ ) { if ( superInterfaces [ i ] . getFullyQualifiedName ( ENCLOSING_TYPE_SEPARATOR ) . equals ( TEST_INTERFACE_NAME ) ) return true ; } IMethod [ ] methods = type . getMethods ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { IMethod method = methods [ i ] ; IAnnotation [ ] annotations = method . getAnnotations ( ) ; for ( int j = 0 ; j < annotations . length ; j ++ ) { IAnnotation annotation = annotations [ j ] ; if ( annotation . getElementName ( ) . equals ( TEST_ANNOTATION_NAME ) || annotation . getElementName ( ) . equals ( TEST_ANNOTATION_FULL_NAME ) ) { return true ; } } } ICompilationUnit compilationUnit = type . getCompilationUnit ( ) ; IImportDeclaration importDeclaration = compilationUnit . getImport ( TEST_ANNOTATION_FULL_NAME ) ; return importDeclaration . exists ( ) ; } } 