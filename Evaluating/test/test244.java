<<<<<<< HEAD
public class SoapObject implements KvmSerializable { protected String namespace ; protected String name ; protected Vector properties = new Vector ( ) ; protected Vector attributes = new Vector ( ) ; public SoapObject ( String namespace , String name ) { this . namespace = namespace ; this . name = name ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof SoapObject ) ) return false ; SoapObject otherSoapObject = ( SoapObject ) obj ; int numProperties = properties . size ( ) ; if ( numProperties != otherSoapObject . properties . size ( ) ) return false ; int numAttributes = attributes . size ( ) ; if ( numAttributes != otherSoapObject . attributes . size ( ) ) return false ; try { for ( int propIndex = 0 ; propIndex < numProperties ; propIndex ++ ) { PropertyInfo thisProp = ( PropertyInfo ) this . properties . elementAt ( propIndex ) ; Object thisPropValue = thisProp . getValue ( ) ; Object otherPropValue = otherSoapObject . getProperty ( thisProp . getName ( ) ) ; if ( ! thisPropValue . equals ( otherPropValue ) ) { return false ; } } for ( int attribIndex = 0 ; attribIndex < numAttributes ; attribIndex ++ ) { AttributeInfo thisAttrib = ( AttributeInfo ) this . properties . elementAt ( attribIndex ) ; Object thisAttribValue = thisAttrib . getValue ( ) ; Object otherAttribValue = otherSoapObject . getProperty ( thisAttrib . getName ( ) ) ; if ( ! thisAttribValue . equals ( otherAttribValue ) ) { return false ; } } } catch ( Exception e ) { return false ; } return true ; } public String getName ( ) { return name ; } public String getNamespace ( ) { return namespace ; } public Object getProperty ( int index ) { return ( ( PropertyInfo ) properties . elementAt ( index ) ) . getValue ( ) ; } public Object getProperty ( String name ) { for ( int i = 0 ; i < properties . size ( ) ; i ++ ) { if ( name . equals ( ( ( PropertyInfo ) properties . elementAt ( i ) ) . getName ( ) ) ) return getProperty ( i ) ; } throw new RuntimeException ( "illegal property: " + name ) ; } public int getPropertyCount ( ) { return properties . size ( ) ; } public void getAttributeInfo ( int index , AttributeInfo attributeInfo ) { AttributeInfo p = ( AttributeInfo ) attributes . elementAt ( index ) ; attributeInfo . name = p . name ; attributeInfo . namespace = p . namespace ; attributeInfo . flags = p . flags ; attributeInfo . type = p . type ; attributeInfo . elementType = p . elementType ; attributeInfo . value = p . getValue ( ) ; } public Object getAttribute ( int index ) { return ( ( AttributeInfo ) attributes . elementAt ( index ) ) . getValue ( ) ; } public Object getAttribute ( String name ) { for ( int i = 0 ; i < attributes . size ( ) ; i ++ ) { if ( name . equals ( ( ( AttributeInfo ) attributes . elementAt ( i ) ) . getName ( ) ) ) return getAttribute ( i ) ; } throw new RuntimeException ( "illegal property: " + name ) ; } public int getAttributeCount ( ) { return attributes . size ( ) ; } public void getPropertyInfo ( int index , Hashtable properties , PropertyInfo propertyInfo ) { getPropertyInfo ( index , propertyInfo ) ; } public void getPropertyInfo ( int index , PropertyInfo propertyInfo ) { PropertyInfo p = ( PropertyInfo ) properties . elementAt ( index ) ; propertyInfo . name = p . name ; propertyInfo . namespace = p . namespace ; propertyInfo . flags = p . flags ; propertyInfo . type = p . type ; propertyInfo . elementType = p . elementType ; } public SoapObject newInstance ( ) { SoapObject o = new SoapObject ( namespace , name ) ; for ( int propIndex = 0 ; propIndex < properties . size ( ) ; propIndex ++ ) { PropertyInfo propertyInfo = ( PropertyInfo ) properties . elementAt ( propIndex ) ; o . addProperty ( propertyInfo ) ; } for ( int attribIndex = 0 ; attribIndex < attributes . size ( ) ; attribIndex ++ ) { AttributeInfo attributeInfo = ( AttributeInfo ) attributes . elementAt ( attribIndex ) ; o . addAttribute ( attributeInfo ) ; } return o ; } public void setProperty ( int index , Object value ) { ( ( PropertyInfo ) properties . elementAt ( index ) ) . setValue ( value ) ; } public SoapObject addProperty ( String name , Object value ) { PropertyInfo propertyInfo = new PropertyInfo ( ) ; propertyInfo . name = name ; propertyInfo . type = value == null ? PropertyInfo . OBJECT_CLASS : value . getClass ( ) ; propertyInfo . value = value ; return addProperty ( propertyInfo ) ; } public SoapObject addProperty ( PropertyInfo propertyInfo , Object value ) { propertyInfo . setValue ( value ) ; addProperty ( propertyInfo ) ; return this ; } public SoapObject addProperty ( PropertyInfo propertyInfo ) { properties . addElement ( propertyInfo ) ; return this ; } public SoapObject addAttribute ( String name , Object value ) { AttributeInfo attributeInfo = new AttributeInfo ( ) ; attributeInfo . name = name ; attributeInfo . type = value == null ? PropertyInfo . OBJECT_CLASS : value . getClass ( ) ; attributeInfo . value = value ; return addAttribute ( attributeInfo ) ; } public SoapObject addAttribute ( AttributeInfo attributeInfo ) { attributes . addElement ( attributeInfo ) ; return this ; } public String toString ( ) { StringBuffer buf = new StringBuffer ( "" + name + "{" ) ; for ( int i = 0 ; i < getPropertyCount ( ) ; i ++ ) { buf . append ( "" + ( ( PropertyInfo ) properties . elementAt ( i ) ) . getName ( ) + "=" + getProperty ( i ) + "; " ) ; } buf . append ( "}" ) ; return buf . toString ( ) ; } } 
=======
public class AutoSchemaReader extends AbstractSchemaReader { private final SchemaReceiverFactory srf ; public AutoSchemaReader ( ) { this ( new SchemaReceiverLoader ( ) ) ; } public AutoSchemaReader ( SchemaReceiverFactory srf ) { this . srf = srf == null ? new SchemaReceiverLoader ( ) : srf ; } public Schema createSchema ( SAXSource source , PropertyMap properties ) throws IOException , SAXException , IncorrectSchemaException { if ( properties . get ( SchemaReceiverFactory . PROPERTY ) != srf ) { PropertyMapBuilder builder = new PropertyMapBuilder ( properties ) ; builder . put ( SchemaReceiverFactory . PROPERTY , srf ) ; properties = builder . toPropertyMap ( ) ; } SAXResolver resolver = ResolverFactory . createResolver ( properties ) ; InputSource in = resolver . open ( source . getInputSource ( ) ) ; InputSource in2 = new InputSource ( ) ; in2 . setSystemId ( in . getSystemId ( ) ) ; in2 . setPublicId ( in . getPublicId ( ) ) ; in2 . setEncoding ( in . getEncoding ( ) ) ; Rewindable rewindable ; if ( in . getCharacterStream ( ) != null ) { RewindableReader rewindableReader = new RewindableReader ( in . getCharacterStream ( ) ) ; in . setCharacterStream ( rewindableReader ) ; in2 . setCharacterStream ( rewindableReader ) ; rewindable = rewindableReader ; } else { InputStream byteStream = in . getByteStream ( ) ; RewindableInputStream rewindableByteStream = new RewindableInputStream ( byteStream ) ; in . setByteStream ( rewindableByteStream ) ; in2 . setByteStream ( rewindableByteStream ) ; rewindable = rewindableByteStream ; } SchemaReceiver sr = new AutoSchemaReceiver ( properties , rewindable ) ; XMLReader xr = source . getXMLReader ( ) ; if ( xr == null ) xr = resolver . createXMLReader ( ) ; ErrorHandler eh = properties . get ( ValidateProperty . ERROR_HANDLER ) ; if ( eh != null ) xr . setErrorHandler ( eh ) ; SchemaFuture sf = sr . installHandlers ( xr ) ; try { try { xr . parse ( in ) ; return sf . getSchema ( ) ; } catch ( ReparseException e ) { rewindable . rewind ( ) ; rewindable . willNotRewind ( ) ; return e . reparse ( new SAXSource ( xr , in2 ) ) ; } finally { rewindable . willNotRewind ( ) ; } } catch ( SAXException e ) { Exception nested = e . getException ( ) ; if ( nested instanceof RuntimeException ) sf . unwrapException ( ( RuntimeException ) nested ) ; throw e ; } catch ( RuntimeException e ) { throw sf . unwrapException ( e ) ; } } public Option getOption ( String uri ) { return srf . getOption ( uri ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
