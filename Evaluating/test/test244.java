public class SoapObject implements KvmSerializable { protected String namespace ; protected String name ; protected Vector properties = new Vector ( ) ; protected Vector attributes = new Vector ( ) ; public SoapObject ( String namespace , String name ) { this . namespace = namespace ; this . name = name ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof SoapObject ) ) return false ; SoapObject otherSoapObject = ( SoapObject ) obj ; int numProperties = properties . size ( ) ; if ( numProperties != otherSoapObject . properties . size ( ) ) return false ; int numAttributes = attributes . size ( ) ; if ( numAttributes != otherSoapObject . attributes . size ( ) ) return false ; try { for ( int propIndex = 0 ; propIndex < numProperties ; propIndex ++ ) { PropertyInfo thisProp = ( PropertyInfo ) this . properties . elementAt ( propIndex ) ; Object thisPropValue = thisProp . getValue ( ) ; Object otherPropValue = otherSoapObject . getProperty ( thisProp . getName ( ) ) ; if ( ! thisPropValue . equals ( otherPropValue ) ) { return false ; } } for ( int attribIndex = 0 ; attribIndex < numAttributes ; attribIndex ++ ) { AttributeInfo thisAttrib = ( AttributeInfo ) this . properties . elementAt ( attribIndex ) ; Object thisAttribValue = thisAttrib . getValue ( ) ; Object otherAttribValue = otherSoapObject . getProperty ( thisAttrib . getName ( ) ) ; if ( ! thisAttribValue . equals ( otherAttribValue ) ) { return false ; } } } catch ( Exception e ) { return false ; } return true ; } public String getName ( ) { return name ; } public String getNamespace ( ) { return namespace ; } public Object getProperty ( int index ) { return ( ( PropertyInfo ) properties . elementAt ( index ) ) . getValue ( ) ; } public Object getProperty ( String name ) { for ( int i = 0 ; i < properties . size ( ) ; i ++ ) { if ( name . equals ( ( ( PropertyInfo ) properties . elementAt ( i ) ) . getName ( ) ) ) return getProperty ( i ) ; } throw new RuntimeException ( "illegal property: " + name ) ; } public int getPropertyCount ( ) { return properties . size ( ) ; } public void getAttributeInfo ( int index , AttributeInfo attributeInfo ) { AttributeInfo p = ( AttributeInfo ) attributes . elementAt ( index ) ; attributeInfo . name = p . name ; attributeInfo . namespace = p . namespace ; attributeInfo . flags = p . flags ; attributeInfo . type = p . type ; attributeInfo . elementType = p . elementType ; attributeInfo . value = p . getValue ( ) ; } public Object getAttribute ( int index ) { return ( ( AttributeInfo ) attributes . elementAt ( index ) ) . getValue ( ) ; } public Object getAttribute ( String name ) { for ( int i = 0 ; i < attributes . size ( ) ; i ++ ) { if ( name . equals ( ( ( AttributeInfo ) attributes . elementAt ( i ) ) . getName ( ) ) ) return getAttribute ( i ) ; } throw new RuntimeException ( "illegal property: " + name ) ; } public int getAttributeCount ( ) { return attributes . size ( ) ; } public void getPropertyInfo ( int index , Hashtable properties , PropertyInfo propertyInfo ) { getPropertyInfo ( index , propertyInfo ) ; } public void getPropertyInfo ( int index , PropertyInfo propertyInfo ) { PropertyInfo p = ( PropertyInfo ) properties . elementAt ( index ) ; propertyInfo . name = p . name ; propertyInfo . namespace = p . namespace ; propertyInfo . flags = p . flags ; propertyInfo . type = p . type ; propertyInfo . elementType = p . elementType ; } public SoapObject newInstance ( ) { SoapObject o = new SoapObject ( namespace , name ) ; for ( int propIndex = 0 ; propIndex < properties . size ( ) ; propIndex ++ ) { PropertyInfo propertyInfo = ( PropertyInfo ) properties . elementAt ( propIndex ) ; o . addProperty ( propertyInfo ) ; } for ( int attribIndex = 0 ; attribIndex < attributes . size ( ) ; attribIndex ++ ) { AttributeInfo attributeInfo = ( AttributeInfo ) attributes . elementAt ( attribIndex ) ; o . addAttribute ( attributeInfo ) ; } return o ; } public void setProperty ( int index , Object value ) { ( ( PropertyInfo ) properties . elementAt ( index ) ) . setValue ( value ) ; } public SoapObject addProperty ( String name , Object value ) { PropertyInfo propertyInfo = new PropertyInfo ( ) ; propertyInfo . name = name ; propertyInfo . type = value == null ? PropertyInfo . OBJECT_CLASS : value . getClass ( ) ; propertyInfo . value = value ; return addProperty ( propertyInfo ) ; } public SoapObject addProperty ( PropertyInfo propertyInfo , Object value ) { propertyInfo . setValue ( value ) ; addProperty ( propertyInfo ) ; return this ; } public SoapObject addProperty ( PropertyInfo propertyInfo ) { properties . addElement ( propertyInfo ) ; return this ; } public SoapObject addAttribute ( String name , Object value ) { AttributeInfo attributeInfo = new AttributeInfo ( ) ; attributeInfo . name = name ; attributeInfo . type = value == null ? PropertyInfo . OBJECT_CLASS : value . getClass ( ) ; attributeInfo . value = value ; return addAttribute ( attributeInfo ) ; } public SoapObject addAttribute ( AttributeInfo attributeInfo ) { attributes . addElement ( attributeInfo ) ; return this ; } public String toString ( ) { StringBuffer buf = new StringBuffer ( "" + name + "{" ) ; for ( int i = 0 ; i < getPropertyCount ( ) ; i ++ ) { buf . append ( "" + ( ( PropertyInfo ) properties . elementAt ( i ) ) . getName ( ) + "=" + getProperty ( i ) + "; " ) ; } buf . append ( "}" ) ; return buf . toString ( ) ; } } 