public abstract class AbstractInt extends AbstractDatatype { protected AbstractInt ( ) { super ( ) ; } protected void checkInt ( CharSequence literal , int offset ) throws DatatypeException { if ( literal . length ( ) == 0 ) { throw newDatatypeException ( "The empty string is not a valid integer." ) ; } char c = literal . charAt ( 0 ) ; if ( ! ( c == '-' || isAsciiDigit ( c ) ) ) { throw newDatatypeException ( 0 , "Expected a minus sign or a digit but saw " , c , " instead." ) ; } for ( int i = 1 ; i < literal . length ( ) ; i ++ ) { c = literal . charAt ( i ) ; if ( ! isAsciiDigit ( c ) ) { throw newDatatypeException ( offset + i , "Expected a digit but saw " , c , " instead." ) ; } } } protected void checkIntNonNegative ( CharSequence literal , int offset ) throws DatatypeException { if ( literal . length ( ) == 0 ) { throw newDatatypeException ( "The empty string is not a valid non-negative integer." ) ; } for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; if ( ! isAsciiDigit ( c ) ) { throw newDatatypeException ( offset + i , "Expected a digit but saw " , c , " instead." ) ; } } } protected void checkIntPositive ( CharSequence literal , int offset ) throws DatatypeException { if ( literal . length ( ) == 0 ) { throw newDatatypeException ( "The empty string is not a valid positive integer." ) ; } boolean zero = true ; for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; if ( ! isAsciiDigit ( c ) ) { throw newDatatypeException ( offset + i , "Expected a digit but saw " , c , " instead." ) ; } if ( c != '0' ) { zero = false ; } } if ( zero ) { throw newDatatypeException ( "Zero is not a positive integer." ) ; } } } 