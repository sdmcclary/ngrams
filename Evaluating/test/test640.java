<<<<<<< HEAD
public class UnifiedViewer extends ProjectionViewer implements IUnifiedViewer { private boolean hotkeyActivated = false ; private TextPresentation presentation ; protected Map < String , ITextTripleClickStrategy > fTripleClickStrategies ; protected TripleClickConnector fTripleClickStrategyConnector ; public UnifiedViewer ( Composite parent , IVerticalRuler ruler , IOverviewRuler overviewRuler , boolean showsAnnotationOverview , int styles ) { super ( parent , ruler , overviewRuler , showsAnnotationOverview , styles ) ; } protected Layout createLayout ( ) { return new RulerLayout ( 0 ) ; } protected void shift ( boolean useDefaultPrefixes , boolean right ) { shift ( useDefaultPrefixes , right , false ) ; } protected StyledText createTextWidget ( Composite parent , int styles ) { return new StyledText ( parent , styles ) { boolean swap = false ; public void setLineBackground ( int startLine , int lineCount , Color background ) { swap = true ; super . setLineBackground ( startLine , lineCount , background ) ; swap = false ; } public boolean isListening ( int eventType ) { if ( swap && eventType == 3001 ) { return false ; } return super . isListening ( eventType ) ; } public void invokeAction ( int action ) { if ( getWordWrap ( ) && ST . LINE_DOWN == action ) { int previous = getCaretOffset ( ) ; super . invokeAction ( action ) ; if ( previous == getCaretOffset ( ) ) { int line = getLineAtOffset ( previous ) ; if ( line + 1 < getLineCount ( ) ) { setCaretOffset ( getOffsetAtLine ( line + 1 ) ) ; } } } else { super . invokeAction ( action ) ; } } } ; } protected void shift ( boolean useDefaultPrefixes , boolean right , boolean ignoreWhitespace ) { if ( fUndoManager != null ) { fUndoManager . beginCompoundChange ( ) ; } setRedraw ( false ) ; startSequentialRewriteMode ( true ) ; IDocument d = getDocument ( ) ; Map partitioners = null ; try { Point selection = getSelectedRange ( ) ; IRegion block = getTextBlockFromSelection ( selection ) ; ITypedRegion [ ] regions = TextUtilities . computePartitioning ( d , getDocumentPartitioning ( ) , block . getOffset ( ) , block . getLength ( ) , false ) ; int lineCount = 0 ; int [ ] lines = new int [ regions . length * 2 ] ; for ( int i = 0 , j = 0 ; i < regions . length ; i ++ , j += 2 ) { lines [ j ] = getFirstCompleteLineOfRegion ( regions [ i ] ) ; int length = regions [ i ] . getLength ( ) ; int offset = regions [ i ] . getOffset ( ) + length ; if ( length > 0 ) { offset -- ; } lines [ j + 1 ] = ( lines [ j ] == - 1 ? - 1 : d . getLineOfOffset ( offset ) ) ; lineCount += lines [ j + 1 ] - lines [ j ] + 1 ; } if ( lineCount >= 20 ) { partitioners = TextUtilities . removeDocumentPartitioners ( d ) ; } IPositionUpdater positionUpdater = new ShiftPositionUpdater ( SHIFTING ) ; Position rememberedSelection = new Position ( selection . x , selection . y ) ; d . addPositionCategory ( SHIFTING ) ; d . addPositionUpdater ( positionUpdater ) ; try { d . addPosition ( SHIFTING , rememberedSelection ) ; } catch ( BadPositionCategoryException ex ) { } Map map = ( useDefaultPrefixes ? fDefaultPrefixChars : fIndentChars ) ; for ( int i = 0 , j = 0 ; i < regions . length ; i ++ , j += 2 ) { String [ ] prefixes = ( String [ ] ) selectContentTypePlugin ( regions [ i ] . getType ( ) , map ) ; if ( prefixes != null && prefixes . length > 0 && lines [ j ] >= 0 && lines [ j + 1 ] >= 0 ) { if ( right ) { shiftRight ( lines [ j ] , lines [ j + 1 ] , prefixes [ 0 ] , d ) ; } else { shiftLeft ( lines [ j ] , lines [ j + 1 ] , prefixes , ignoreWhitespace , d ) ; } } } setSelectedRange ( rememberedSelection . getOffset ( ) , rememberedSelection . getLength ( ) ) ; try { d . removePositionUpdater ( positionUpdater ) ; d . removePositionCategory ( SHIFTING ) ; } catch ( BadPositionCategoryException ex ) { } } catch ( BadLocationException x ) { } finally { if ( partitioners != null ) { TextUtilities . addDocumentPartitioners ( d , partitioners ) ; } stopSequentialRewriteMode ( ) ; setRedraw ( true ) ; if ( fUndoManager != null ) { fUndoManager . endCompoundChange ( ) ; } } } public static void shiftRight ( int startLine , int endLine , String prefix , IDocument document ) { try { while ( startLine <= endLine ) { document . replace ( document . getLineOffset ( startLine ++ ) , 0 , prefix ) ; } } catch ( BadLocationException x ) { if ( TRACE_ERRORS ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , "TextViewer.shiftRight: BadLocationException" , x ) ; } } } public static void shiftLeft ( int startLine , int endLine , String [ ] prefixes , boolean ignoreWhitespace , IDocument document ) { try { IRegion [ ] occurrences = new IRegion [ endLine - startLine + 1 ] ; for ( int i = 0 ; i < occurrences . length ; i ++ ) { IRegion line = document . getLineInformation ( startLine + i ) ; String text = document . get ( line . getOffset ( ) , line . getLength ( ) ) ; int index = - 1 ; int [ ] found = TextUtilities . indexOf ( prefixes , text , 0 ) ; if ( found [ 0 ] != - 1 ) { if ( ignoreWhitespace ) { String s = document . get ( line . getOffset ( ) , found [ 0 ] ) ; s = s . trim ( ) ; if ( s . length ( ) == 0 ) { index = line . getOffset ( ) + found [ 0 ] ; } } else if ( found [ 0 ] == 0 ) { index = line . getOffset ( ) ; } } if ( index > - 1 ) { int length = prefixes [ found [ 1 ] ] . length ( ) ; if ( length == 0 && ! ignoreWhitespace && line . getLength ( ) > 0 ) { occurrences [ i ] = new Region ( index , 0 ) ; } else { occurrences [ i ] = new Region ( index , length ) ; } } else { occurrences [ i ] = new Region ( index , 0 ) ; } } int decrement = 0 ; for ( int i = 0 ; i < occurrences . length ; i ++ ) { IRegion r = occurrences [ i ] ; if ( r . getLength ( ) == 0 ) { continue ; } document . replace ( r . getOffset ( ) - decrement , r . getLength ( ) , StringUtils . EMPTY ) ; decrement += r . getLength ( ) ; } } catch ( BadLocationException x ) { if ( TRACE_ERRORS ) { Trace . info ( "TextViewer.shiftLeft: BadLocationException" ) ; } } } private IRegion getTextBlockFromSelection ( Point selection ) { try { IDocument document = getDocument ( ) ; IRegion line = document . getLineInformationOfOffset ( selection . x ) ; int length = selection . y == 0 ? line . getLength ( ) : selection . y + ( selection . x - line . getOffset ( ) ) ; return new Region ( line . getOffset ( ) , length ) ; } catch ( BadLocationException x ) { } return null ; } private int getFirstCompleteLineOfRegion ( IRegion region ) { try { IDocument d = getDocument ( ) ; int startLine = d . getLineOfOffset ( region . getOffset ( ) ) ; int offset = d . getLineOffset ( startLine ) ; if ( offset >= region . getOffset ( ) ) { return startLine ; } offset = d . getLineOffset ( startLine + 1 ) ; return ( offset > region . getOffset ( ) + region . getLength ( ) ? - 1 : startLine + 1 ) ; } catch ( BadLocationException x ) { } return - 1 ; } private Object selectContentTypePlugin ( String type , Map plugins ) { if ( plugins == null ) { return null ; } return plugins . get ( type ) ; } static class ShiftPositionUpdater extends DefaultPositionUpdater { protected ShiftPositionUpdater ( String category ) { super ( category ) ; } protected void adaptToInsert ( ) { int myStart = fPosition . offset ; int myEnd = fPosition . offset + fPosition . length - 1 ; myEnd = Math . max ( myStart , myEnd ) ; int yoursStart = fOffset ; int yoursEnd = fOffset + fReplaceLength - 1 ; yoursEnd = Math . max ( yoursStart , yoursEnd ) ; if ( myEnd < yoursStart ) { return ; } if ( myStart <= yoursStart ) { fPosition . length += fReplaceLength ; return ; } if ( myStart > yoursStart ) { fPosition . offset += fReplaceLength ; } } } public boolean isHotkeyActivated ( ) { return hotkeyActivated ; } public void setHotkeyActivated ( boolean value ) { hotkeyActivated = value ; } public void closeContentAssist ( ) { if ( fContentAssistant != null && fContentAssistant instanceof IUnifiedContentAssistant ) { ( ( IUnifiedContentAssistant ) fContentAssistant ) . hide ( ) ; } } public void activatePlugins ( ) { super . activatePlugins ( ) ; } public void setTextTripleClickStrategy ( ITextTripleClickStrategy strategy , String contentType ) { if ( strategy != null ) { if ( fTripleClickStrategies == null ) { fTripleClickStrategies = new HashMap < String , ITextTripleClickStrategy > ( ) ; } fTripleClickStrategies . put ( contentType , strategy ) ; } else if ( fTripleClickStrategies != null ) { fTripleClickStrategies . remove ( contentType ) ; } } public void configure ( SourceViewerConfiguration configuration ) { super . configure ( configuration ) ; if ( configuration instanceof UnifiedConfiguration ) { UnifiedConfiguration conf = ( UnifiedConfiguration ) configuration ; String [ ] types = configuration . getConfiguredContentTypes ( this ) ; for ( int i = 0 ; i < types . length ; i ++ ) { String t = types [ i ] ; setTextTripleClickStrategy ( conf . getTripleClickStrategy ( this , t ) , t ) ; } } activateTripleClickStrategies ( ) ; } private void activateTripleClickStrategies ( ) { if ( fTripleClickStrategies != null && ! fTripleClickStrategies . isEmpty ( ) && fTripleClickStrategyConnector == null ) { fTripleClickStrategyConnector = new TripleClickConnector ( ) { @ Override public void mouseTripleClick ( MouseEvent e ) { ITextTripleClickStrategy s = ( ITextTripleClickStrategy ) selectContentTypePlugin ( getSelectedRange ( ) . x , fTripleClickStrategies ) ; s . tripleClicked ( UnifiedViewer . this ) ; } } ; getTextWidget ( ) . addMouseListener ( fTripleClickStrategyConnector ) ; } } public void changeTextPresentation ( TextPresentation presentation , boolean controlRedraw ) { super . changeTextPresentation ( presentation , controlRedraw ) ; this . presentation = presentation ; } public TextPresentation getTextPresentation ( ) { return presentation ; } } 
=======
public class XmlName extends AbstractDatatype { public static boolean isNameStart ( char c ) { return ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'À' && c <= 'Ö' ) || ( c >= 'Ø' && c <= 'ö' ) || ( c >= 'ø' && c <= 'ÿ' ) || ( c >= 'Ā' && c <= 'ı' ) || ( c >= 'Ĵ' && c <= 'ľ' ) || ( c >= 'Ł' && c <= 'ň' ) || ( c >= 'Ŋ' && c <= 'ž' ) || ( c >= 'ƀ' && c <= 'ǃ' ) || ( c >= 'Ǎ' && c <= 'ǰ' ) || ( c >= 'Ǵ' && c <= 'ǵ' ) || ( c >= 'Ǻ' && c <= 'ȗ' ) || ( c >= 'ɐ' && c <= 'ʨ' ) || ( c >= 'ʻ' && c <= 'ˁ' ) || ( c == 'Ά' ) || ( c >= 'Έ' && c <= 'Ί' ) || ( c == 'Ό' ) || ( c >= 'Ύ' && c <= 'Ρ' ) || ( c >= 'Σ' && c <= 'ώ' ) || ( c >= 'ϐ' && c <= 'ϖ' ) || ( c == 'Ϛ' ) || ( c == 'Ϝ' ) || ( c == 'Ϟ' ) || ( c == 'Ϡ' ) || ( c >= 'Ϣ' && c <= 'ϳ' ) || ( c >= 'Ё' && c <= 'Ќ' ) || ( c >= 'Ў' && c <= 'я' ) || ( c >= 'ё' && c <= 'ќ' ) || ( c >= 'ў' && c <= 'ҁ' ) || ( c >= 'Ґ' && c <= 'ӄ' ) || ( c >= 'Ӈ' && c <= 'ӈ' ) || ( c >= 'Ӌ' && c <= 'ӌ' ) || ( c >= 'Ӑ' && c <= 'ӫ' ) || ( c >= 'Ӯ' && c <= 'ӵ' ) || ( c >= 'Ӹ' && c <= 'ӹ' ) || ( c >= 'Ա' && c <= 'Ֆ' ) || ( c == 'ՙ' ) || ( c >= 'ա' && c <= 'ֆ' ) || ( c >= 'א' && c <= 'ת' ) || ( c >= 'װ' && c <= 'ײ' ) || ( c >= 'ء' && c <= 'غ' ) || ( c >= 'ف' && c <= 'ي' ) || ( c >= 'ٱ' && c <= 'ڷ' ) || ( c >= 'ں' && c <= 'ھ' ) || ( c >= 'ۀ' && c <= 'ێ' ) || ( c >= 'ې' && c <= 'ۓ' ) || ( c == 'ە' ) || ( c >= 'ۥ' && c <= 'ۦ' ) || ( c >= 'अ' && c <= 'ह' ) || ( c == 'ऽ' ) || ( c >= 'क़' && c <= 'ॡ' ) || ( c >= 'অ' && c <= 'ঌ' ) || ( c >= 'এ' && c <= 'ঐ' ) || ( c >= 'ও' && c <= 'ন' ) || ( c >= 'প' && c <= 'র' ) || ( c == 'ল' ) || ( c >= 'শ' && c <= 'হ' ) || ( c >= 'ড়' && c <= 'ঢ়' ) || ( c >= 'য়' && c <= 'ৡ' ) || ( c >= 'ৰ' && c <= 'ৱ' ) || ( c >= 'ਅ' && c <= 'ਊ' ) || ( c >= 'ਏ' && c <= 'ਐ' ) || ( c >= 'ਓ' && c <= 'ਨ' ) || ( c >= 'ਪ' && c <= 'ਰ' ) || ( c >= 'ਲ' && c <= 'ਲ਼' ) || ( c >= 'ਵ' && c <= 'ਸ਼' ) || ( c >= 'ਸ' && c <= 'ਹ' ) || ( c >= 'ਖ਼' && c <= 'ੜ' ) || ( c == 'ਫ਼' ) || ( c >= 'ੲ' && c <= 'ੴ' ) || ( c >= 'અ' && c <= 'ઋ' ) || ( c == 'ઍ' ) || ( c >= 'એ' && c <= 'ઑ' ) || ( c >= 'ઓ' && c <= 'ન' ) || ( c >= 'પ' && c <= 'ર' ) || ( c >= 'લ' && c <= 'ળ' ) || ( c >= 'વ' && c <= 'હ' ) || ( c == 'ઽ' ) || ( c == 'ૠ' ) || ( c >= 'ଅ' && c <= 'ଌ' ) || ( c >= 'ଏ' && c <= 'ଐ' ) || ( c >= 'ଓ' && c <= 'ନ' ) || ( c >= 'ପ' && c <= 'ର' ) || ( c >= 'ଲ' && c <= 'ଳ' ) || ( c >= 'ଶ' && c <= 'ହ' ) || ( c == 'ଽ' ) || ( c >= 'ଡ଼' && c <= 'ଢ଼' ) || ( c >= 'ୟ' && c <= 'ୡ' ) || ( c >= 'அ' && c <= 'ஊ' ) || ( c >= 'எ' && c <= 'ஐ' ) || ( c >= 'ஒ' && c <= 'க' ) || ( c >= 'ங' && c <= 'ச' ) || ( c == 'ஜ' ) || ( c >= 'ஞ' && c <= 'ட' ) || ( c >= 'ண' && c <= 'த' ) || ( c >= 'ந' && c <= 'ப' ) || ( c >= 'ம' && c <= 'வ' ) || ( c >= 'ஷ' && c <= 'ஹ' ) || ( c >= 'అ' && c <= 'ఌ' ) || ( c >= 'ఎ' && c <= 'ఐ' ) || ( c >= 'ఒ' && c <= 'న' ) || ( c >= 'ప' && c <= 'ళ' ) || ( c >= 'వ' && c <= 'హ' ) || ( c >= 'ౠ' && c <= 'ౡ' ) || ( c >= 'ಅ' && c <= 'ಌ' ) || ( c >= 'ಎ' && c <= 'ಐ' ) || ( c >= 'ಒ' && c <= 'ನ' ) || ( c >= 'ಪ' && c <= 'ಳ' ) || ( c >= 'ವ' && c <= 'ಹ' ) || ( c == 'ೞ' ) || ( c >= 'ೠ' && c <= 'ೡ' ) || ( c >= 'അ' && c <= 'ഌ' ) || ( c >= 'എ' && c <= 'ഐ' ) || ( c >= 'ഒ' && c <= 'ന' ) || ( c >= 'പ' && c <= 'ഹ' ) || ( c >= 'ൠ' && c <= 'ൡ' ) || ( c >= 'ก' && c <= 'ฮ' ) || ( c == 'ะ' ) || ( c >= 'า' && c <= 'ำ' ) || ( c >= 'เ' && c <= 'ๅ' ) || ( c >= 'ກ' && c <= 'ຂ' ) || ( c == 'ຄ' ) || ( c >= 'ງ' && c <= 'ຈ' ) || ( c == 'ຊ' ) || ( c == 'ຍ' ) || ( c >= 'ດ' && c <= 'ທ' ) || ( c >= 'ນ' && c <= 'ຟ' ) || ( c >= 'ມ' && c <= 'ຣ' ) || ( c == 'ລ' ) || ( c == 'ວ' ) || ( c >= 'ສ' && c <= 'ຫ' ) || ( c >= 'ອ' && c <= 'ຮ' ) || ( c == 'ະ' ) || ( c >= 'າ' && c <= 'ຳ' ) || ( c == 'ຽ' ) || ( c >= 'ເ' && c <= 'ໄ' ) || ( c >= 'ཀ' && c <= 'ཇ' ) || ( c >= 'ཉ' && c <= 'ཀྵ' ) || ( c >= 'Ⴀ' && c <= 'Ⴥ' ) || ( c >= 'ა' && c <= 'ჶ' ) || ( c == 'ᄀ' ) || ( c >= 'ᄂ' && c <= 'ᄃ' ) || ( c >= 'ᄅ' && c <= 'ᄇ' ) || ( c == 'ᄉ' ) || ( c >= 'ᄋ' && c <= 'ᄌ' ) || ( c >= 'ᄎ' && c <= 'ᄒ' ) || ( c == 'ᄼ' ) || ( c == 'ᄾ' ) || ( c == 'ᅀ' ) || ( c == 'ᅌ' ) || ( c == 'ᅎ' ) || ( c == 'ᅐ' ) || ( c >= 'ᅔ' && c <= 'ᅕ' ) || ( c == 'ᅙ' ) || ( c >= 'ᅟ' && c <= 'ᅡ' ) || ( c == 'ᅣ' ) || ( c == 'ᅥ' ) || ( c == 'ᅧ' ) || ( c == 'ᅩ' ) || ( c >= 'ᅭ' && c <= 'ᅮ' ) || ( c >= 'ᅲ' && c <= 'ᅳ' ) || ( c == 'ᅵ' ) || ( c == 'ᆞ' ) || ( c == 'ᆨ' ) || ( c == 'ᆫ' ) || ( c >= 'ᆮ' && c <= 'ᆯ' ) || ( c >= 'ᆷ' && c <= 'ᆸ' ) || ( c == 'ᆺ' ) || ( c >= 'ᆼ' && c <= 'ᇂ' ) || ( c == 'ᇫ' ) || ( c == 'ᇰ' ) || ( c == 'ᇹ' ) || ( c >= 'Ḁ' && c <= 'ẛ' ) || ( c >= 'Ạ' && c <= 'ỹ' ) || ( c >= 'ἀ' && c <= 'ἕ' ) || ( c >= 'Ἐ' && c <= 'Ἕ' ) || ( c >= 'ἠ' && c <= 'ὅ' ) || ( c >= 'Ὀ' && c <= 'Ὅ' ) || ( c >= 'ὐ' && c <= 'ὗ' ) || ( c == 'Ὑ' ) || ( c == 'Ὓ' ) || ( c == 'Ὕ' ) || ( c >= 'Ὗ' && c <= 'ώ' ) || ( c >= 'ᾀ' && c <= 'ᾴ' ) || ( c >= 'ᾶ' && c <= 'ᾼ' ) || ( c == 'ι' ) || ( c >= 'ῂ' && c <= 'ῄ' ) || ( c >= 'ῆ' && c <= 'ῌ' ) || ( c >= 'ῐ' && c <= 'ΐ' ) || ( c >= 'ῖ' && c <= 'Ί' ) || ( c >= 'ῠ' && c <= 'Ῥ' ) || ( c >= 'ῲ' && c <= 'ῴ' ) || ( c >= 'ῶ' && c <= 'ῼ' ) || ( c == 'Ω' ) || ( c >= 'K' && c <= 'Å' ) || ( c == '℮' ) || ( c >= 'ↀ' && c <= 'ↂ' ) || ( c >= 'ぁ' && c <= 'ゔ' ) || ( c >= 'ァ' && c <= 'ヺ' ) || ( c >= 'ㄅ' && c <= 'ㄬ' ) || ( c >= '가' && c <= '힣' ) || ( c >= '一' && c <= '龥' ) || ( c == '〇' ) || ( c >= '〡' && c <= '〩' ) || ( c == '_' ) || ( c == ':' ) ) ; } public static boolean isNameTrail ( char c ) { return ( ( c >= '0' && c <= '9' ) || ( c >= '٠' && c <= '٩' ) || ( c >= '۰' && c <= '۹' ) || ( c >= '०' && c <= '९' ) || ( c >= '০' && c <= '৯' ) || ( c >= '੦' && c <= '੯' ) || ( c >= '૦' && c <= '૯' ) || ( c >= '୦' && c <= '୯' ) || ( c >= '௧' && c <= '௯' ) || ( c >= '౦' && c <= '౯' ) || ( c >= '೦' && c <= '೯' ) || ( c >= '൦' && c <= '൯' ) || ( c >= '๐' && c <= '๙' ) || ( c >= '໐' && c <= '໙' ) || ( c >= '༠' && c <= '༩' ) || ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'À' && c <= 'Ö' ) || ( c >= 'Ø' && c <= 'ö' ) || ( c >= 'ø' && c <= 'ÿ' ) || ( c >= 'Ā' && c <= 'ı' ) || ( c >= 'Ĵ' && c <= 'ľ' ) || ( c >= 'Ł' && c <= 'ň' ) || ( c >= 'Ŋ' && c <= 'ž' ) || ( c >= 'ƀ' && c <= 'ǃ' ) || ( c >= 'Ǎ' && c <= 'ǰ' ) || ( c >= 'Ǵ' && c <= 'ǵ' ) || ( c >= 'Ǻ' && c <= 'ȗ' ) || ( c >= 'ɐ' && c <= 'ʨ' ) || ( c >= 'ʻ' && c <= 'ˁ' ) || ( c == 'Ά' ) || ( c >= 'Έ' && c <= 'Ί' ) || ( c == 'Ό' ) || ( c >= 'Ύ' && c <= 'Ρ' ) || ( c >= 'Σ' && c <= 'ώ' ) || ( c >= 'ϐ' && c <= 'ϖ' ) || ( c == 'Ϛ' ) || ( c == 'Ϝ' ) || ( c == 'Ϟ' ) || ( c == 'Ϡ' ) || ( c >= 'Ϣ' && c <= 'ϳ' ) || ( c >= 'Ё' && c <= 'Ќ' ) || ( c >= 'Ў' && c <= 'я' ) || ( c >= 'ё' && c <= 'ќ' ) || ( c >= 'ў' && c <= 'ҁ' ) || ( c >= 'Ґ' && c <= 'ӄ' ) || ( c >= 'Ӈ' && c <= 'ӈ' ) || ( c >= 'Ӌ' && c <= 'ӌ' ) || ( c >= 'Ӑ' && c <= 'ӫ' ) || ( c >= 'Ӯ' && c <= 'ӵ' ) || ( c >= 'Ӹ' && c <= 'ӹ' ) || ( c >= 'Ա' && c <= 'Ֆ' ) || ( c == 'ՙ' ) || ( c >= 'ա' && c <= 'ֆ' ) || ( c >= 'א' && c <= 'ת' ) || ( c >= 'װ' && c <= 'ײ' ) || ( c >= 'ء' && c <= 'غ' ) || ( c >= 'ف' && c <= 'ي' ) || ( c >= 'ٱ' && c <= 'ڷ' ) || ( c >= 'ں' && c <= 'ھ' ) || ( c >= 'ۀ' && c <= 'ێ' ) || ( c >= 'ې' && c <= 'ۓ' ) || ( c == 'ە' ) || ( c >= 'ۥ' && c <= 'ۦ' ) || ( c >= 'अ' && c <= 'ह' ) || ( c == 'ऽ' ) || ( c >= 'क़' && c <= 'ॡ' ) || ( c >= 'অ' && c <= 'ঌ' ) || ( c >= 'এ' && c <= 'ঐ' ) || ( c >= 'ও' && c <= 'ন' ) || ( c >= 'প' && c <= 'র' ) || ( c == 'ল' ) || ( c >= 'শ' && c <= 'হ' ) || ( c >= 'ড়' && c <= 'ঢ়' ) || ( c >= 'য়' && c <= 'ৡ' ) || ( c >= 'ৰ' && c <= 'ৱ' ) || ( c >= 'ਅ' && c <= 'ਊ' ) || ( c >= 'ਏ' && c <= 'ਐ' ) || ( c >= 'ਓ' && c <= 'ਨ' ) || ( c >= 'ਪ' && c <= 'ਰ' ) || ( c >= 'ਲ' && c <= 'ਲ਼' ) || ( c >= 'ਵ' && c <= 'ਸ਼' ) || ( c >= 'ਸ' && c <= 'ਹ' ) || ( c >= 'ਖ਼' && c <= 'ੜ' ) || ( c == 'ਫ਼' ) || ( c >= 'ੲ' && c <= 'ੴ' ) || ( c >= 'અ' && c <= 'ઋ' ) || ( c == 'ઍ' ) || ( c >= 'એ' && c <= 'ઑ' ) || ( c >= 'ઓ' && c <= 'ન' ) || ( c >= 'પ' && c <= 'ર' ) || ( c >= 'લ' && c <= 'ળ' ) || ( c >= 'વ' && c <= 'હ' ) || ( c == 'ઽ' ) || ( c == 'ૠ' ) || ( c >= 'ଅ' && c <= 'ଌ' ) || ( c >= 'ଏ' && c <= 'ଐ' ) || ( c >= 'ଓ' && c <= 'ନ' ) || ( c >= 'ପ' && c <= 'ର' ) || ( c >= 'ଲ' && c <= 'ଳ' ) || ( c >= 'ଶ' && c <= 'ହ' ) || ( c == 'ଽ' ) || ( c >= 'ଡ଼' && c <= 'ଢ଼' ) || ( c >= 'ୟ' && c <= 'ୡ' ) || ( c >= 'அ' && c <= 'ஊ' ) || ( c >= 'எ' && c <= 'ஐ' ) || ( c >= 'ஒ' && c <= 'க' ) || ( c >= 'ங' && c <= 'ச' ) || ( c == 'ஜ' ) || ( c >= 'ஞ' && c <= 'ட' ) || ( c >= 'ண' && c <= 'த' ) || ( c >= 'ந' && c <= 'ப' ) || ( c >= 'ம' && c <= 'வ' ) || ( c >= 'ஷ' && c <= 'ஹ' ) || ( c >= 'అ' && c <= 'ఌ' ) || ( c >= 'ఎ' && c <= 'ఐ' ) || ( c >= 'ఒ' && c <= 'న' ) || ( c >= 'ప' && c <= 'ళ' ) || ( c >= 'వ' && c <= 'హ' ) || ( c >= 'ౠ' && c <= 'ౡ' ) || ( c >= 'ಅ' && c <= 'ಌ' ) || ( c >= 'ಎ' && c <= 'ಐ' ) || ( c >= 'ಒ' && c <= 'ನ' ) || ( c >= 'ಪ' && c <= 'ಳ' ) || ( c >= 'ವ' && c <= 'ಹ' ) || ( c == 'ೞ' ) || ( c >= 'ೠ' && c <= 'ೡ' ) || ( c >= 'അ' && c <= 'ഌ' ) || ( c >= 'എ' && c <= 'ഐ' ) || ( c >= 'ഒ' && c <= 'ന' ) || ( c >= 'പ' && c <= 'ഹ' ) || ( c >= 'ൠ' && c <= 'ൡ' ) || ( c >= 'ก' && c <= 'ฮ' ) || ( c == 'ะ' ) || ( c >= 'า' && c <= 'ำ' ) || ( c >= 'เ' && c <= 'ๅ' ) || ( c >= 'ກ' && c <= 'ຂ' ) || ( c == 'ຄ' ) || ( c >= 'ງ' && c <= 'ຈ' ) || ( c == 'ຊ' ) || ( c == 'ຍ' ) || ( c >= 'ດ' && c <= 'ທ' ) || ( c >= 'ນ' && c <= 'ຟ' ) || ( c >= 'ມ' && c <= 'ຣ' ) || ( c == 'ລ' ) || ( c == 'ວ' ) || ( c >= 'ສ' && c <= 'ຫ' ) || ( c >= 'ອ' && c <= 'ຮ' ) || ( c == 'ະ' ) || ( c >= 'າ' && c <= 'ຳ' ) || ( c == 'ຽ' ) || ( c >= 'ເ' && c <= 'ໄ' ) || ( c >= 'ཀ' && c <= 'ཇ' ) || ( c >= 'ཉ' && c <= 'ཀྵ' ) || ( c >= 'Ⴀ' && c <= 'Ⴥ' ) || ( c >= 'ა' && c <= 'ჶ' ) || ( c == 'ᄀ' ) || ( c >= 'ᄂ' && c <= 'ᄃ' ) || ( c >= 'ᄅ' && c <= 'ᄇ' ) || ( c == 'ᄉ' ) || ( c >= 'ᄋ' && c <= 'ᄌ' ) || ( c >= 'ᄎ' && c <= 'ᄒ' ) || ( c == 'ᄼ' ) || ( c == 'ᄾ' ) || ( c == 'ᅀ' ) || ( c == 'ᅌ' ) || ( c == 'ᅎ' ) || ( c == 'ᅐ' ) || ( c >= 'ᅔ' && c <= 'ᅕ' ) || ( c == 'ᅙ' ) || ( c >= 'ᅟ' && c <= 'ᅡ' ) || ( c == 'ᅣ' ) || ( c == 'ᅥ' ) || ( c == 'ᅧ' ) || ( c == 'ᅩ' ) || ( c >= 'ᅭ' && c <= 'ᅮ' ) || ( c >= 'ᅲ' && c <= 'ᅳ' ) || ( c == 'ᅵ' ) || ( c == 'ᆞ' ) || ( c == 'ᆨ' ) || ( c == 'ᆫ' ) || ( c >= 'ᆮ' && c <= 'ᆯ' ) || ( c >= 'ᆷ' && c <= 'ᆸ' ) || ( c == 'ᆺ' ) || ( c >= 'ᆼ' && c <= 'ᇂ' ) || ( c == 'ᇫ' ) || ( c == 'ᇰ' ) || ( c == 'ᇹ' ) || ( c >= 'Ḁ' && c <= 'ẛ' ) || ( c >= 'Ạ' && c <= 'ỹ' ) || ( c >= 'ἀ' && c <= 'ἕ' ) || ( c >= 'Ἐ' && c <= 'Ἕ' ) || ( c >= 'ἠ' && c <= 'ὅ' ) || ( c >= 'Ὀ' && c <= 'Ὅ' ) || ( c >= 'ὐ' && c <= 'ὗ' ) || ( c == 'Ὑ' ) || ( c == 'Ὓ' ) || ( c == 'Ὕ' ) || ( c >= 'Ὗ' && c <= 'ώ' ) || ( c >= 'ᾀ' && c <= 'ᾴ' ) || ( c >= 'ᾶ' && c <= 'ᾼ' ) || ( c == 'ι' ) || ( c >= 'ῂ' && c <= 'ῄ' ) || ( c >= 'ῆ' && c <= 'ῌ' ) || ( c >= 'ῐ' && c <= 'ΐ' ) || ( c >= 'ῖ' && c <= 'Ί' ) || ( c >= 'ῠ' && c <= 'Ῥ' ) || ( c >= 'ῲ' && c <= 'ῴ' ) || ( c >= 'ῶ' && c <= 'ῼ' ) || ( c == 'Ω' ) || ( c >= 'K' && c <= 'Å' ) || ( c == '℮' ) || ( c >= 'ↀ' && c <= 'ↂ' ) || ( c >= 'ぁ' && c <= 'ゔ' ) || ( c >= 'ァ' && c <= 'ヺ' ) || ( c >= 'ㄅ' && c <= 'ㄬ' ) || ( c >= '가' && c <= '힣' ) || ( c >= '一' && c <= '龥' ) || ( c == '〇' ) || ( c >= '〡' && c <= '〩' ) || ( c == '_' ) || ( c == ':' ) || ( c == '.' ) || ( c == '-' ) || ( c >= '̀' && c <= 'ͅ' ) || ( c >= '͠' && c <= '͡' ) || ( c >= '҃' && c <= '҆' ) || ( c >= '֑' && c <= '֡' ) || ( c >= '֣' && c <= 'ֹ' ) || ( c >= 'ֻ' && c <= 'ֽ' ) || ( c == 'ֿ' ) || ( c >= 'ׁ' && c <= 'ׂ' ) || ( c == 'ׄ' ) || ( c >= 'ً' && c <= 'ْ' ) || ( c == 'ٰ' ) || ( c >= 'ۖ' && c <= 'ۜ' ) || ( c >= '۝' && c <= '۟' ) || ( c >= '۠' && c <= 'ۤ' ) || ( c >= 'ۧ' && c <= 'ۨ' ) || ( c >= '۪' && c <= 'ۭ' ) || ( c >= 'ँ' && c <= 'ः' ) || ( c == '़' ) || ( c >= 'ा' && c <= 'ौ' ) || ( c == '्' ) || ( c >= '॑' && c <= '॔' ) || ( c >= 'ॢ' && c <= 'ॣ' ) || ( c >= 'ঁ' && c <= 'ঃ' ) || ( c == '়' ) || ( c == 'া' ) || ( c == 'ি' ) || ( c >= 'ী' && c <= 'ৄ' ) || ( c >= 'ে' && c <= 'ৈ' ) || ( c >= 'ো' && c <= '্' ) || ( c == 'ৗ' ) || ( c >= 'ৢ' && c <= 'ৣ' ) || ( c == 'ਂ' ) || ( c == '਼' ) || ( c == 'ਾ' ) || ( c == 'ਿ' ) || ( c >= 'ੀ' && c <= 'ੂ' ) || ( c >= 'ੇ' && c <= 'ੈ' ) || ( c >= 'ੋ' && c <= '੍' ) || ( c >= 'ੰ' && c <= 'ੱ' ) || ( c >= 'ઁ' && c <= 'ઃ' ) || ( c == '઼' ) || ( c >= 'ા' && c <= 'ૅ' ) || ( c >= 'ે' && c <= 'ૉ' ) || ( c >= 'ો' && c <= '્' ) || ( c >= 'ଁ' && c <= 'ଃ' ) || ( c == '଼' ) || ( c >= 'ା' && c <= 'ୃ' ) || ( c >= 'େ' && c <= 'ୈ' ) || ( c >= 'ୋ' && c <= '୍' ) || ( c >= 'ୖ' && c <= 'ୗ' ) || ( c >= 'ஂ' && c <= 'ஃ' ) || ( c >= 'ா' && c <= 'ூ' ) || ( c >= 'ெ' && c <= 'ை' ) || ( c >= 'ொ' && c <= '்' ) || ( c == 'ௗ' ) || ( c >= 'ఁ' && c <= 'ః' ) || ( c >= 'ా' && c <= 'ౄ' ) || ( c >= 'ె' && c <= 'ై' ) || ( c >= 'ొ' && c <= '్' ) || ( c >= 'ౕ' && c <= 'ౖ' ) || ( c >= 'ಂ' && c <= 'ಃ' ) || ( c >= 'ಾ' && c <= 'ೄ' ) || ( c >= 'ೆ' && c <= 'ೈ' ) || ( c >= 'ೊ' && c <= '್' ) || ( c >= 'ೕ' && c <= 'ೖ' ) || ( c >= 'ം' && c <= 'ഃ' ) || ( c >= 'ാ' && c <= 'ൃ' ) || ( c >= 'െ' && c <= 'ൈ' ) || ( c >= 'ൊ' && c <= '്' ) || ( c == 'ൗ' ) || ( c == 'ั' ) || ( c >= 'ิ' && c <= 'ฺ' ) || ( c >= '็' && c <= '๎' ) || ( c == 'ັ' ) || ( c >= 'ິ' && c <= 'ູ' ) || ( c >= 'ົ' && c <= 'ຼ' ) || ( c >= '່' && c <= 'ໍ' ) || ( c >= '༘' && c <= '༙' ) || ( c == '༵' ) || ( c == '༷' ) || ( c == '༹' ) || ( c == '༾' ) || ( c == '༿' ) || ( c >= 'ཱ' && c <= '྄' ) || ( c >= '྆' && c <= 'ྋ' ) || ( c >= 'ྐ' && c <= 'ྕ' ) || ( c == 'ྗ' ) || ( c >= 'ྙ' && c <= 'ྭ' ) || ( c >= 'ྱ' && c <= 'ྷ' ) || ( c == 'ྐྵ' ) || ( c >= '⃐' && c <= '⃜' ) || ( c == '⃡' ) || ( c >= '〪' && c <= '〯' ) || ( c == '゙' ) || ( c == '゚' ) || ( c == '·' ) || ( c == 'ː' ) || ( c == 'ˑ' ) || ( c == '·' ) || ( c == 'ـ' ) || ( c == 'ๆ' ) || ( c == 'ໆ' ) || ( c == '々' ) || ( c >= '〱' && c <= '〵' ) || ( c >= 'ゝ' && c <= 'ゞ' ) || ( c >= 'ー' && c <= 'ヾ' ) ) ; } public static boolean isName ( CharSequence str ) { if ( str == null ) { return false ; } else { int len = str . length ( ) ; switch ( len ) { case 0 : return false ; case 1 : return XmlName . isNameStart ( str . charAt ( 0 ) ) ; default : if ( ! XmlName . isNameStart ( str . charAt ( 0 ) ) ) { return false ; } for ( int i = 1 ; i < len ; i ++ ) { if ( ! XmlName . isNameTrail ( str . charAt ( i ) ) ) { return false ; } } } return true ; } } public static final XmlName THE_INSTANCE = new XmlName ( ) ; private XmlName ( ) { } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { if ( ! isName ( literal ) ) { throw newDatatypeException ( "Not a valid XML 1.0 name." ) ; } } @ Override public String getName ( ) { return "XML name" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
