<<<<<<< HEAD
public class StartPageTrimWidget extends AbstractWorkbenchTrimWidget { private static final String HOME_ICON = "icons/aptana_home.png" ; private static final String UP_ARROW = "icons/up_arrow.png" ; private static final String DOWN_ARROW = "icons/down_arrow.png" ; private Composite displayArea ; private Link accountNameLabel ; private Cursor hand ; private User user ; public StartPageTrimWidget ( ) { user = AptanaUser . getSignedInUser ( ) ; user . addListener ( new IModelListener ( ) { public void modelChanged ( IModifiableObject object ) { CoreUIUtils . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { updateLabel ( ) ; } } ) ; } } ) ; IntroPlugin . getDefault ( ) . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . addPerspectiveListener ( new PerspectiveAdapter ( ) { public void perspectiveActivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { if ( displayArea != null && ! displayArea . isDisposed ( ) ) { displayArea . setVisible ( WebPerspectiveFactory . isValidAptanaPerspective ( perspective ) ) ; } } } ) ; } private void updateLabel ( ) { if ( accountNameLabel == null || accountNameLabel . isDisposed ( ) ) { return ; } if ( user . getUsername ( ) != null && user . getUsername ( ) . length ( ) > 0 ) { accountNameLabel . setText ( "<a>" + user . getUsername ( ) + "</a>" ) ; accountNameLabel . setToolTipText ( user . getUsername ( ) + " @ " + Messages . StartPageTrimWidget_MyAptana ) ; } else { accountNameLabel . setText ( "<a>" + Messages . StartPageTrimWidget_SignIn + "</a>" ) ; accountNameLabel . setToolTipText ( Messages . StartPageTrimWidget_MyAptana ) ; } adjustLink ( ) ; } public void dispose ( ) { if ( displayArea != null && ! displayArea . isDisposed ( ) ) { displayArea . dispose ( ) ; } } private void loadMenu ( Menu menu ) { ActionUtils . buildMenu ( menu , PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ) ; } private void signIn ( ) { AptanaSignInDialog dialog = new AptanaSignInDialog ( CoreUIUtils . getActiveShell ( ) ) ; dialog . open ( ) ; } private void adjustLink ( ) { GridData anlData = ( GridData ) accountNameLabel . getLayoutData ( ) ; int size = accountNameLabel . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) . x + 5 ; if ( size > 120 ) { size = 120 ; GC gc = new GC ( accountNameLabel ) ; int width = gc . getFontMetrics ( ) . getAverageCharWidth ( ) ; int dotsSize = gc . stringExtent ( "..." ) . x ; int remaining = size - dotsSize ; int charCount = remaining / width ; String label = accountNameLabel . getText ( ) ; if ( label . length ( ) > charCount ) { accountNameLabel . setText ( label . substring ( 0 , charCount ) + "...</a>" ) ; } gc . dispose ( ) ; } anlData . widthHint = size ; displayArea . layout ( true , true ) ; displayArea . getParent ( ) . layout ( true , true ) ; } public void fill ( Composite parent , int oldSide , final int newSide ) { if ( hand == null || hand . isDisposed ( ) ) { hand = new Cursor ( Display . getDefault ( ) , SWT . CURSOR_HAND ) ; } if ( displayArea == null || displayArea . isDisposed ( ) ) { displayArea = new Composite ( parent , SWT . NONE ) ; displayArea . setToolTipText ( Messages . StartPageTrimWidget_MyAptana ) ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; displayArea . setLayout ( layout ) ; final Composite main = new Composite ( displayArea , SWT . NONE ) ; main . setToolTipText ( Messages . StartPageTrimWidget_MyAptana ) ; layout = new GridLayout ( 3 , false ) ; layout . marginHeight = 2 ; layout . marginWidth = 0 ; layout . marginLeft = 5 ; main . setLayout ( layout ) ; GridData gridData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; gridData . widthHint = 170 ; main . setLayoutData ( gridData ) ; Label cloudIcon = new Label ( main , SWT . LEFT ) ; cloudIcon . setCursor ( hand ) ; cloudIcon . setImage ( IntroPlugin . getImage ( HOME_ICON ) ) ; cloudIcon . addMouseListener ( new MouseAdapter ( ) { public void mouseDown ( MouseEvent e ) { ShowMyAptanaAction . openEditor ( ) ; } } ) ; cloudIcon . setToolTipText ( Messages . StartPageTrimWidget_MyAptana ) ; accountNameLabel = new Link ( main , SWT . NONE ) ; accountNameLabel . setLayoutData ( new GridData ( SWT . FILL , SWT . CENTER , false , true ) ) ; accountNameLabel . setToolTipText ( Messages . StartPageTrimWidget_MyAptana ) ; accountNameLabel . setText ( "<a>" + Messages . StartPageTrimWidget_SignIn + "</a>" ) ; accountNameLabel . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { if ( AptanaUser . getSignedInUser ( ) . hasCredentials ( ) ) { ShowMyAptanaAction . openEditor ( ) ; } else { signIn ( ) ; } } } ) ; updateLabel ( ) ; final ToolBar arrowBar = new ToolBar ( main , SWT . WRAP ) ; ToolItem arrowItem = new ToolItem ( arrowBar , SWT . PUSH ) ; if ( newSide == SWT . BOTTOM ) { arrowItem . setImage ( IntroPlugin . getImage ( UP_ARROW ) ) ; } else { arrowItem . setImage ( IntroPlugin . getImage ( DOWN_ARROW ) ) ; } arrowItem . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { Rectangle rect = arrowBar . getBounds ( ) ; Point pt = new Point ( rect . x , rect . y ) ; pt = main . toDisplay ( pt ) ; Menu menu = new Menu ( main ) ; menu . setLocation ( pt ) ; loadMenu ( menu ) ; menu . setVisible ( true ) ; } } ) ; IWorkbenchPage page = CoreUIPlugin . getActivePage ( ) ; if ( page != null && page . getPerspective ( ) != null ) { displayArea . setVisible ( WebPerspectiveFactory . isValidAptanaPerspective ( page . getPerspective ( ) ) ) ; } } } } 
=======
public class Address { private String localName ; private String domain ; public Address ( String localName , String domain ) { this . localName = localName ; this . domain = domain ; } public static Address parse ( String str ) throws IllegalArgumentException { int atPos = str . indexOf ( '@' ) ; if ( atPos == - 1 ) { return new Address ( null , str ) ; } else { return new Address ( str . substring ( 0 , atPos ) , str . substring ( atPos + 1 ) ) ; } } public String getDomain ( ) { return domain ; } public String getLocalName ( ) { return localName == null ? "" : localName ; } public String toString ( ) { return localName == null ? domain : localName + "@" + domain ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
