<<<<<<< HEAD
@ SuppressWarnings ( "restriction" ) public class SchedulerStartup extends BaseTimingStartup { public SchedulerStartup ( ) { } @ Override public String getStartupName ( ) { return "SchedulerStartup" ; } @ Override protected void startup ( ) { scheduleCheckForReleaseMessage ( ) ; scheduleCheckForNewsMessage ( ) ; scheduleCheckForAnnouncements ( ) ; startupDone ( ) ; } private void scheduleCheckForReleaseMessage ( ) { boolean doNotCheckForReleaseMessage = Boolean . getBoolean ( "DO_NOT_CHECK_FOR_RELEASE_MESSAGE" ) ; if ( doNotCheckForReleaseMessage ) { return ; } final IPreferenceStore prefs = UpdateUIActivator . getDefault ( ) . getPreferenceStore ( ) ; final String releaseMessageURLPrefix = prefs . getString ( IPreferenceConstants . RELEASE_MESSAGE_URL_PREFIX ) ; Job job = new Job ( "Check for new release message" ) { @ Override protected IStatus run ( IProgressMonitor monitor ) { try { final URL releaseMessageURL = new URL ( System . getProperty ( "RELEASE_MESSAGE_URL_OVERRIDE" , releaseMessageURLPrefix + getCoreUIVersion ( ) + "/message.html" ) ) ; URLConnection urlConnection = null ; try { urlConnection = releaseMessageURL . openConnection ( ) ; } catch ( IOException ioe ) { logError ( ioe ) ; } if ( urlConnection instanceof HttpURLConnection ) { HttpURLConnection httpURLConnection = ( HttpURLConnection ) urlConnection ; try { httpURLConnection . setConnectTimeout ( 1000 ) ; httpURLConnection . setUseCaches ( false ) ; httpURLConnection . addRequestProperty ( "Cache-Control" , "no-cache" ) ; httpURLConnection . setRequestMethod ( "HEAD" ) ; if ( httpURLConnection . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) { boolean showMessage = true ; long lastModified = httpURLConnection . getLastModified ( ) ; if ( lastModified == 0 ) { } else { long lastLastModified = prefs . getLong ( releaseMessageURL . toString ( ) ) ; if ( lastLastModified >= lastModified ) { showMessage = false ; } } prefs . setValue ( releaseMessageURL . toString ( ) , lastModified ) ; if ( showMessage ) { CoreUIUtils . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchPage page = CoreUIPlugin . getActivePage ( ) ; if ( page != null ) { try { page . openEditor ( new WebBrowserEditorInput ( releaseMessageURL , IWorkbenchBrowserSupport . PERSISTENT ) , ExternalWebBrowserEditor . ID , false ) ; } catch ( PartInitException e ) { CoreUIUtils . openBrowserURL ( releaseMessageURL . toExternalForm ( ) ) ; } } } } ) ; } } } catch ( IOException e ) { logError ( e ) ; } finally { httpURLConnection . disconnect ( ) ; } } } catch ( MalformedURLException e ) { logError ( e ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } private void scheduleCheckForNewsMessage ( ) { boolean doNotCheckForReleaseMessage = Boolean . getBoolean ( "DO_NOT_CHECK_FOR_NEWS_MESSAGE" ) ; if ( doNotCheckForReleaseMessage ) { return ; } final IPreferenceStore prefs = UpdateUIActivator . getDefault ( ) . getPreferenceStore ( ) ; String newsMessageURLPrefix = prefs . getString ( IPreferenceConstants . NEWS_MESSAGE_URL_PREFIX ) ; final String newsMessageBaseURL = System . getProperty ( "NEWS_MESSAGE_URL_OVERRIDE" , newsMessageURLPrefix + "news.php" ) ; Job job = new Job ( "Check for new news message" ) { @ Override protected IStatus run ( IProgressMonitor monitor ) { try { final URL newsMessageURL = new URL ( newsMessageBaseURL + getParamsString ( ) ) ; URLConnection urlConnection = null ; try { urlConnection = newsMessageURL . openConnection ( ) ; } catch ( IOException ioe ) { logError ( ioe ) ; } if ( urlConnection instanceof HttpURLConnection ) { HttpURLConnection httpURLConnection = ( HttpURLConnection ) urlConnection ; try { httpURLConnection . setConnectTimeout ( 1000 ) ; httpURLConnection . setUseCaches ( false ) ; httpURLConnection . addRequestProperty ( "Cache-Control" , "no-cache" ) ; httpURLConnection . setRequestMethod ( "HEAD" ) ; if ( httpURLConnection . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) { boolean showMessage = true ; long lastModified = httpURLConnection . getLastModified ( ) ; if ( lastModified == 0 ) { } else { long lastLastModified = prefs . getLong ( newsMessageBaseURL ) ; if ( lastLastModified >= lastModified ) { showMessage = false ; } } prefs . setValue ( newsMessageBaseURL , lastModified ) ; if ( showMessage ) { CoreUIUtils . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchPage page = CoreUIPlugin . getActivePage ( ) ; if ( page != null ) { try { page . openEditor ( new WebBrowserEditorInput ( newsMessageURL , IWorkbenchBrowserSupport . PERSISTENT ) , ExternalWebBrowserEditor . ID , false ) ; } catch ( PartInitException e ) { CoreUIUtils . openBrowserURL ( newsMessageURL . toExternalForm ( ) ) ; } } } } ) ; } } } catch ( IOException e ) { logError ( e ) ; } finally { httpURLConnection . disconnect ( ) ; } } } catch ( MalformedURLException e ) { logError ( e ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } private static final String HEADER_WIDTH = "Width" ; private static final String HEADER_HEIGHT = "Height" ; private void scheduleCheckForAnnouncements ( ) { boolean doNotCheckForReleaseMessage = Boolean . getBoolean ( "DO_NOT_CHECK_FOR_NEWS_MESSAGE" ) ; if ( doNotCheckForReleaseMessage ) { return ; } final IPreferenceStore prefs = UpdateUIActivator . getDefault ( ) . getPreferenceStore ( ) ; boolean b_neverShow = prefs . getBoolean ( IPreferenceConstants . NEVER_SHOW_ANNOUNCEMENTS ) ; if ( b_neverShow ) { return ; } String announcementURLPrefix = prefs . getString ( IPreferenceConstants . ANNOUNCEMENT_URL_PREFIX ) ; final String announceBaseURL = System . getProperty ( "ANNOUNCEMENT_URL_OVERRIDE" , announcementURLPrefix + "announce.php" ) ; Job job = new Job ( "Check for new announcement" ) { @ Override protected IStatus run ( IProgressMonitor monitor ) { try { getAnnouncement ( new URL ( announceBaseURL + getParamsString ( ) ) ) ; } catch ( MalformedURLException e ) { logError ( e ) ; } return Status . OK_STATUS ; } private void getAnnouncement ( final URL url ) { URLConnection urlConnection = null ; try { urlConnection = url . openConnection ( ) ; } catch ( IOException ioe ) { logError ( ioe ) ; } if ( urlConnection instanceof HttpURLConnection ) { HttpURLConnection httpURLConnection = ( HttpURLConnection ) urlConnection ; try { httpURLConnection . setConnectTimeout ( 1000 ) ; httpURLConnection . setUseCaches ( false ) ; httpURLConnection . addRequestProperty ( "Cache-Control" , "no-cache" ) ; httpURLConnection . setRequestMethod ( "HEAD" ) ; if ( httpURLConnection . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) { boolean showMessage = true ; long lastModified = httpURLConnection . getLastModified ( ) ; if ( lastModified == 0 ) { } else { boolean neverShowThisAgain = prefs . getBoolean ( IPreferenceConstants . NEVER_SHOW_THIS_ANNOUNCEMENT ) ; if ( neverShowThisAgain ) { long lastLastModified = prefs . getLong ( IPreferenceConstants . NEVER_SHOW_THIS_ANNOUNCEMENT_LAST_LAST_MODIFIED ) ; if ( lastModified <= lastLastModified ) { showMessage = false ; } } } prefs . setValue ( IPreferenceConstants . NEVER_SHOW_THIS_ANNOUNCEMENT_LAST_LAST_MODIFIED , lastModified ) ; String strHeight = httpURLConnection . getHeaderField ( HEADER_HEIGHT ) ; String strWidth = httpURLConnection . getHeaderField ( HEADER_WIDTH ) ; final int height = ( strHeight != null ) ? Integer . parseInt ( strHeight ) : 300 ; final int width = ( strWidth != null ) ? Integer . parseInt ( strWidth ) : 300 ; if ( showMessage ) { UIJob uiJob = new UIJob ( "Show Aptana Announcement" ) { @ Override public IStatus runInUIThread ( IProgressMonitor monitor ) { IWorkbenchPage page = CoreUIPlugin . getActivePage ( ) ; if ( page != null ) { BrowserDialog dialog = new BrowserDialog ( CoreUIUtils . getActiveShell ( ) , url . toString ( ) , height , width ) ; dialog . open ( ) ; } return Status . OK_STATUS ; } } ; uiJob . setSystem ( true ) ; uiJob . setRule ( MutexJobRule . getInstance ( ) ) ; uiJob . schedule ( ) ; } } } catch ( IOException e ) { logError ( e ) ; } finally { httpURLConnection . disconnect ( ) ; } } } } ; job . setSystem ( true ) ; job . schedule ( ) ; } private static void logError ( Exception e ) { IdeLog . logInfo ( UpdateUIActivator . getDefault ( ) , e . getLocalizedMessage ( ) , e ) ; } private static String getCoreUIVersion ( ) { Version version = new Version ( PluginUtils . getPluginVersion ( CoreUIPlugin . getDefault ( ) ) ) ; return MessageFormat . format ( "{0}.{1}.{2}.{3}" , version . getMajor ( ) , version . getMinor ( ) , version . getMicro ( ) , version . getQualifier ( ) ) ; } private static String getCoreUIVersionDetailsString ( ) { Version version = new Version ( PluginUtils . getPluginVersion ( CoreUIPlugin . getDefault ( ) ) ) ; return MessageFormat . format ( "coreui_major={0}&coreui_minor={1}&coreui_micro={2}&coreui_qualifier={3}" , version . getMajor ( ) , version . getMinor ( ) , version . getMicro ( ) , version . getQualifier ( ) ) ; } private static String getParamsString ( ) { StringBuilder paramsString = new StringBuilder ( "?" ) ; paramsString . append ( getCoreUIVersionDetailsString ( ) ) ; paramsString . append ( "&appName=" ) . append ( getAppName ( ) ) ; paramsString . append ( "&osgi_framework=" ) . append ( System . getProperty ( "osgi.framework.version" ) ) ; paramsString . append ( "&os=" ) . append ( Platform . getOS ( ) ) ; paramsString . append ( "&arch=" ) . append ( Platform . getOSArch ( ) ) ; return paramsString . toString ( ) ; } private static String getAppName ( ) { String commands = System . getProperty ( "eclipse.commands" ) ; int indexOfNameArg = commands . indexOf ( "-name\n" ) ; String subCommands = commands . substring ( indexOfNameArg + 6 ) ; int indexOfNextNewline = subCommands . indexOf ( "\n" ) ; String nameArg = subCommands . substring ( 0 , indexOfNextNewline ) ; return nameArg ; } } 
=======
public class BarrageHeaderView extends RelativeLayout { private static final String TAG = "BarrageHeaderView" ; private BarrageHeader mBarrageHeader ; private TextView mName ; private TextView mStatus ; private TextView mCounts ; private TextView mPercent ; private ProgressBar mProgress ; public BarrageHeaderView ( Context context ) { super ( context ) ; } public BarrageHeaderView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; } @ Override protected void onFinishInflate ( ) { super . onFinishInflate ( ) ; mName = ( TextView ) findViewById ( R . id . name ) ; mStatus = ( TextView ) findViewById ( R . id . status ) ; mCounts = ( TextView ) findViewById ( R . id . counts ) ; mPercent = ( TextView ) findViewById ( R . id . percent ) ; mProgress = ( ProgressBar ) findViewById ( R . id . progress ) ; } public void bind ( String name , String counts ) { mName . setText ( name ) ; mStatus . setVisibility ( INVISIBLE ) ; mCounts . setText ( counts ) ; mProgress . setVisibility ( INVISIBLE ) ; mPercent . setVisibility ( INVISIBLE ) ; } public void bind ( Context context , BarrageHeader header ) { mBarrageHeader = header ; mName . setText ( header . getName ( ) ) ; switch ( header . getStatus ( ) ) { case BarrageHeader . STATUS_RUNNING : mStatus . setTextColor ( Color . GREEN ) ; mStatus . setText ( "Running" ) ; updateProgress ( header . getCountCurrent ( ) , header . getCountTotal ( ) ) ; break ; case BarrageHeader . STATUS_PAUSED : mStatus . setTextColor ( Color . YELLOW ) ; mStatus . setText ( "Paused" ) ; updateProgress ( header . getCountCurrent ( ) , header . getCountTotal ( ) ) ; break ; case BarrageHeader . STATUS_QUEUED : mStatus . setTextColor ( Color . GRAY ) ; mStatus . setText ( "Queued" ) ; mCounts . setText ( "Starts: 03/14/2009 03:14PM" ) ; mProgress . setVisibility ( INVISIBLE ) ; mPercent . setVisibility ( INVISIBLE ) ; break ; case BarrageHeader . STATUS_DRAFT : mStatus . setTextColor ( Color . RED ) ; mStatus . setText ( "Draft" ) ; updateProgress ( 0 , header . getCountTotal ( ) ) ; break ; } } private void updateProgress ( int current , int total ) { mCounts . setText ( String . format ( "%1$d/%2$d" , current , total ) ) ; mPercent . setText ( String . format ( "%1$2d%2$%" , ( current * 100 / total ) ) ) ; mProgress . setMax ( total ) ; mProgress . setProgress ( current ) ; } public BarrageHeader getHeader ( ) { return mBarrageHeader ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
