<<<<<<< HEAD
public final class ActionsMonitor extends ControllerAdapter { private final ConnectionState connectionState ; private final IFeedListener taggingFeedListener ; private boolean initFinished ; private IGuide selectedGuide ; private IFeed selectedFeed ; private IArticle selectedArticle ; private ActionsMonitor ( GlobalController aController , ConnectionState aConnectionState ) { connectionState = aConnectionState ; taggingFeedListener = new TaggingFeedListener ( ) ; aController . addControllerListener ( this ) ; if ( aController . isInitializationFinished ( ) ) initializationFinished ( ) ; connectionState . addPropertyChangeListener ( new ConnectionStateListener ( ) ) ; GlobalModel model = aController . getModel ( ) ; guideSelected ( model == null ? null : model . getSelectedGuide ( ) ) ; feedSelected ( model == null ? null : model . getSelectedFeed ( ) ) ; articleSelected ( model == null ? null : model . getSelectedArticle ( ) ) ; } public static void start ( GlobalController aController , ConnectionState aConnectionState ) { new ActionsMonitor ( aController , aConnectionState ) ; } public synchronized void guideSelected ( IGuide guide ) { selectedGuide = guide ; if ( UifUtilities . isEDT ( ) ) { updateGuideActions ( selectedGuide , initFinished ) ; } else { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { updateGuideActions ( selectedGuide , initFinished ) ; } } ) ; } } public synchronized void articleSelected ( IArticle article ) { selectedArticle = article ; if ( UifUtilities . isEDT ( ) ) { updateArticleActions ( selectedArticle , initFinished ) ; } else { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { updateArticleActions ( selectedArticle , initFinished ) ; } } ) ; } } public void feedSelected ( IFeed feed ) { if ( selectedFeed != null ) selectedFeed . removeListener ( taggingFeedListener ) ; selectedFeed = feed ; if ( selectedFeed != null ) selectedFeed . addListener ( taggingFeedListener ) ; if ( UifUtilities . isEDT ( ) ) { updateFeedActions ( selectedFeed , initFinished ) ; } else { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { updateFeedActions ( selectedFeed , initFinished ) ; } } ) ; } } public synchronized void initializationFinished ( ) { initFinished = true ; if ( UifUtilities . isEDT ( ) ) { initFinished0 ( ) ; } else { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { initFinished0 ( ) ; } } ) ; } } private void initFinished0 ( ) { updateGuideActions ( selectedGuide , initFinished ) ; updateFeedActions ( selectedFeed , initFinished ) ; AddGuideAction . getInstance ( ) . setEnabled ( true ) ; AddDirectFeedAction . getInstance ( ) . setEnabled ( true ) ; AddSmartFeedAction . getInstance ( ) . setEnabled ( true ) ; ImportGuidesAction . getInstance ( ) . setEnabled ( true ) ; SortGuidesByTitleAction . getInstance ( ) . setEnabled ( true ) ; SearchAction . getInstance ( ) . setEnabled ( true ) ; WhatsHotAction . getInstance ( ) . setEnabled ( true ) ; DatabaseCompactAction . getInstance ( ) . setEnabled ( true ) ; DatabaseBackupAction . getInstance ( ) . setEnabled ( true ) ; } private void updateGuideActions ( IGuide aSelectedGuide , boolean aInitFinished ) { final boolean b = aSelectedGuide != null && aInitFinished ; final GuidesSet cgs = GlobalModel . SINGLETON . getGuidesSet ( ) ; final int index = b ? cgs . indexOf ( aSelectedGuide ) : - 1 ; final int size = cgs . getGuidesCount ( ) ; final boolean hasChannels = b && aSelectedGuide . getFeedsCount ( ) > 0 ; GuidePropertiesAction . getInstance ( ) . setEnabled ( b ) ; DeleteGuideAction . getInstance ( ) . setEnabled ( b ) ; UpdateGuideAction . getInstance ( ) . setEnabled ( b ) ; UpdateAllGuidesAction . getInstance ( ) . setEnabled ( size > 0 ) ; MarkGuideReadAction . getInstance ( ) . setEnabled ( hasChannels ) ; MarkGuideUnreadAction . getInstance ( ) . setEnabled ( hasChannels ) ; MarkAllGuidesReadAction . getInstance ( ) . setEnabled ( size > 0 ) ; MarkAllGuidesUnreadAction . getInstance ( ) . setEnabled ( size > 0 ) ; MergeGuidesAction . getInstance ( ) . setEnabled ( b && size > 1 ) ; final boolean hasGuides = aInitFinished && ( size > 0 ) ; GotoNextArticleAction . getInstance ( ) . setEnabled ( hasGuides ) ; GotoNextUnreadAction . getInstance ( ) . setEnabled ( hasGuides ) ; GotoNextUnreadInNextFeedAction . getInstance ( ) . setEnabled ( hasGuides ) ; GotoPreviousArticleAction . getInstance ( ) . setEnabled ( hasGuides ) ; GotoPreviousUnreadAction . getInstance ( ) . setEnabled ( hasGuides ) ; ExportGuidesAction . getInstance ( ) . setEnabled ( hasGuides ) ; GotoNextGuideWithUnreadAction . getInstance ( ) . setEnabled ( hasGuides ) ; PostToBlogAction . update ( ) ; FeedLinkPostToBlogAction . update ( ) ; } private void updateFeedActions ( IFeed aSelectedFeed , boolean aInitFinished ) { final boolean b = aSelectedFeed != null ; final boolean bInited = b && aInitFinished ; MarkFeedAsReadAction . getInstance ( ) . setEnabled ( bInited ) ; MarkFeedAsUnreadAction . getInstance ( ) . setEnabled ( bInited ) ; DeleteFeedAction . getInstance ( ) . setEnabled ( bInited ) ; ShowFeedPropertiesAction . getInstance ( ) . setEnabled ( bInited ) ; RatingLowAction . getInstance ( ) . setEnabled ( bInited ) ; RatingHighAction . getInstance ( ) . setEnabled ( bInited ) ; UpdateSelectedFeedsAction . getInstance ( ) . setEnabled ( bInited ) ; DiscoverInFeedsAction . getInstance ( ) . setEnabled ( bInited ) ; PostToBlogAction . update ( ) ; FeedLinkPostToBlogAction . update ( ) ; boolean isDirect = aSelectedFeed instanceof DirectFeed ; OpenBlogHomeAction . getInstance ( ) . setEnabled ( b && isDirect && ( ( DirectFeed ) aSelectedFeed ) . getSiteURL ( ) != null ) ; updateTaggingActions ( ) ; int mode = DeleteFeedAction . DELETE ; if ( aSelectedFeed != null && ( aSelectedFeed instanceof DirectFeed ) && selectedGuide != null && ! selectedGuide . hasDirectLinkWith ( aSelectedFeed ) ) { mode = ( ( DirectFeed ) aSelectedFeed ) . isDisabled ( ) ? DeleteFeedAction . ENABLE : DeleteFeedAction . DISABLE ; } DeleteFeedAction . getInstance ( ) . setMode ( mode ) ; CycleViewModeForwardAction . getInstance ( ) . setEnabled ( bInited ) ; CycleViewModeBackwardAction . getInstance ( ) . setEnabled ( bInited ) ; } private void updateArticleActions ( IArticle aSelectedArticle , boolean aInitFinished ) { final boolean b = aSelectedArticle != null ; final boolean bInited = b && aInitFinished ; ShowArticlePropertiesAction . getInstance ( ) . setEnabled ( b ) ; final boolean articleUrlPresent = ( b && aSelectedArticle . getLink ( ) != null ) ; BrowseArticleAction . getInstance ( ) . setEnabled ( articleUrlPresent ) ; ArticleLinkCopyAction . getInstance ( ) . setEnabled ( articleUrlPresent ) ; ArticleLinkSendAction . getInstance ( ) . setEnabled ( articleUrlPresent ) ; MarkArticleReadAction . getInstance ( ) . setEnabled ( bInited ) ; MarkArticleUnreadAction . getInstance ( ) . setEnabled ( bInited ) ; PinUnpinArticleAction . getInstance ( ) . setEnabled ( bInited ) ; PostToBlogAction . update ( ) ; TweetThisAction . getInstance ( ) . setEnabled ( bInited ) ; FeedLinkPostToBlogAction . update ( ) ; DiscoverInArticlesAction . getInstance ( ) . setEnabled ( bInited ) ; SaveImageAction . getInstance ( ) . setEnabled ( b ) ; updateTaggingActions ( ) ; } private void updateTaggingActions ( ) { boolean taggableArticle = selectedArticle != null && ( selectedArticle instanceof StandardArticle ) && ( ( StandardArticle ) selectedArticle ) . getTaggableLink ( ) != null ; boolean taggableFeed = selectedFeed != null && ( selectedFeed instanceof DirectFeed ) && ( ( DirectFeed ) selectedFeed ) . getTaggableLink ( ) != null ; ShowArticleTagsAction . getInstance ( ) . setEnabled ( taggableArticle ) ; ShowFeedTagsAction . getInstance ( ) . setEnabled ( taggableFeed ) ; SelectiveShowTagsAction . getInstance ( ) . setEnabled ( taggableFeed || taggableArticle ) ; } private void onConnectionChange ( boolean isOnline ) { } private void onServiceAvailabilityChange ( final boolean isServiceAccessible ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { CheckForUpdatesAction . getInstance ( ) . setEnabled ( isServiceAccessible ) ; SendFeedbackAction . getInstance ( ) . setEnabled ( isServiceAccessible ) ; ShowServiceDialogAction . getInstance ( ) . setEnabled ( isServiceAccessible ) ; SyncInAction . getInstance ( ) . setEnabled ( isServiceAccessible ) ; SyncOutAction . getInstance ( ) . setEnabled ( isServiceAccessible ) ; SyncFullAction . getInstance ( ) . setEnabled ( isServiceAccessible ) ; } } ) ; } private class TaggingFeedListener extends FeedAdapter { public void propertyChanged ( IFeed feed , String property , Object oldValue , Object newValue ) { if ( DirectFeed . PROP_XML_URL . equals ( property ) ) updateTaggingActions ( ) ; } } private class ConnectionStateListener implements PropertyChangeListener { public void propertyChange ( PropertyChangeEvent evt ) { String prop = evt . getPropertyName ( ) ; if ( ConnectionState . PROP_ONLINE . equals ( prop ) ) { onConnectionChange ( connectionState . isOnline ( ) ) ; } else { onServiceAvailabilityChange ( connectionState . isServiceAccessible ( ) ) ; } } } } 
=======
public interface IdTypeMap { int getIdType ( Name elementName , Name attributeName ) ; } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
