<<<<<<< HEAD
public class Database { Log log = LogFactory . getLog ( Database . class ) ; private final String name ; private int documentCount ; private int updateSeq ; private Session session ; private static final String VIEW = "/_view/" ; private static final String DESIGN = "_design/" ; private static final String UPDATE = "/_update/" ; Database ( JSONObject json , Session session ) { name = json . getString ( "db_name" ) ; documentCount = json . getInt ( "doc_count" ) ; updateSeq = json . getInt ( "update_seq" ) ; this . session = session ; } public String getName ( ) { return name ; } public int getDocumentCount ( ) { return documentCount ; } public int getUpdateSeq ( ) { return updateSeq ; } public ViewResults getAllDocuments ( ) { return view ( new View ( "_all_docs" ) , false ) ; } public ViewResults getAllDesignDocuments ( ) { View v = new View ( "_all_docs" ) ; v . startKey = "%22_design%2F%22" ; v . endKey = "%22_design0%22" ; v . includeDocs = Boolean . TRUE ; return view ( v , false ) ; } public ViewResults getAllDocumentsWithCount ( int count ) { View v = new View ( "_all_docs" ) ; v . setCount ( count ) ; return view ( v , false ) ; } public ViewResults getAllDocuments ( int revision ) { return view ( new View ( "_all_docs_by_seq?startkey=" + revision ) , false ) ; } public ViewResults view ( View view ) { return view ( view , true ) ; } private ViewResults view ( final View view , final boolean isPermanentView ) { String url = null ; if ( isPermanentView ) { String [ ] elements = view . getFullName ( ) . split ( "/" ) ; url = this . name + "/" + ( ( elements . length < 2 ) ? elements [ 0 ] : DESIGN + elements [ 0 ] + VIEW + elements [ 1 ] ) ; } else { url = this . name + "/" + view . getFullName ( ) ; } CouchResponse resp = session . get ( url , view . getQueryString ( ) ) ; if ( resp . isOk ( ) ) { ViewResults results = new ViewResults ( view , resp . getBodyAsJSONObject ( ) ) ; results . setDatabase ( this ) ; return results ; } return null ; } public ViewResults view ( String fullname ) { return view ( new View ( fullname ) , true ) ; } public ViewResults adhoc ( String function ) { return adhoc ( new AdHocView ( function ) ) ; } public ViewResults adhoc ( final AdHocView view ) { String adHocBody = new JSONStringer ( ) . object ( ) . key ( "map" ) . value ( JSONUtils . stringSerializedFunction ( view . getFunction ( ) ) ) . endObject ( ) . toString ( ) ; CouchResponse resp = session . post ( name + "/_temp_view" , adHocBody , view . getQueryString ( ) ) ; if ( resp . isOk ( ) ) { ViewResults results = new ViewResults ( view , resp . getBodyAsJSONObject ( ) ) ; results . setDatabase ( this ) ; return results ; } else { log . warn ( "Error executing view - " + resp . getErrorId ( ) + " " + resp . getErrorReason ( ) ) ; } return null ; } public void saveDocument ( Document doc , String docId ) throws IOException { CouchResponse resp ; if ( docId == null || docId . equals ( "" ) ) { resp = session . post ( name , doc . getJSONObject ( ) . toString ( ) ) ; } else { resp = session . put ( name + "/" + urlEncodePath ( docId ) , doc . getJSONObject ( ) . toString ( ) ) ; } if ( resp . isOk ( ) ) { try { if ( doc . getId ( ) == null || doc . getId ( ) . equals ( "" ) ) { doc . setId ( resp . getBodyAsJSONObject ( ) . getString ( "id" ) ) ; } doc . setRev ( resp . getBodyAsJSONObject ( ) . getString ( "rev" ) ) ; } catch ( JSONException e ) { e . printStackTrace ( ) ; } doc . setDatabase ( this ) ; } else { log . warn ( "Error adding document - " + resp . getErrorId ( ) + " " + resp . getErrorReason ( ) ) ; System . err . println ( "RESP: " + resp ) ; } } public void saveDocument ( Document doc ) throws IOException { saveDocument ( doc , doc . getId ( ) ) ; } public void bulkSaveDocuments ( Document [ ] documents ) throws IOException { CouchResponse resp = null ; resp = session . post ( name + "/_bulk_docs" , new JSONObject ( ) . accumulate ( "docs" , documents ) . toString ( ) ) ; if ( resp . isOk ( ) ) { final JSONArray respJsonArray = resp . getBodyAsJSONArray ( ) ; JSONObject respObj = null ; String id = null ; String rev = null ; for ( int i = 0 ; i < documents . length ; i ++ ) { respObj = respJsonArray . getJSONObject ( i ) ; id = respObj . getString ( "id" ) ; rev = respObj . getString ( "rev" ) ; if ( StringUtils . isBlank ( documents [ i ] . getId ( ) ) ) { documents [ i ] . setId ( id ) ; documents [ i ] . setRev ( rev ) ; } else if ( StringUtils . isNotBlank ( documents [ i ] . getId ( ) ) && documents [ i ] . getId ( ) . equals ( id ) ) { documents [ i ] . setRev ( rev ) ; } else { log . warn ( "returned bulk save array in incorrect order, saved documents do not have updated rev or ids" ) ; } documents [ i ] . setDatabase ( this ) ; } } else { log . warn ( "Error bulk saving documents - " + resp . getErrorId ( ) + " " + resp . getErrorReason ( ) ) ; } } public Document getDocument ( String id ) throws IOException { return getDocument ( id , null , false ) ; } public Document getDocumentWithRevisions ( String id ) throws IOException { return getDocument ( id , null , true ) ; } public Document getDocument ( String id , String revision ) throws IOException { return getDocument ( id , revision , false ) ; } public Document getDocument ( String id , String revision , boolean showRevisions ) throws IOException { CouchResponse resp ; Document doc = null ; if ( revision != null && showRevisions ) { resp = session . get ( name + "/" + urlEncodePath ( id ) , "rev=" + revision + "&full=true" ) ; } else if ( revision != null && ! showRevisions ) { resp = session . get ( name + "/" + urlEncodePath ( id ) , "rev=" + revision ) ; } else if ( revision == null && showRevisions ) { resp = session . get ( name + "/" + urlEncodePath ( id ) , "revs=true" ) ; } else { resp = session . get ( name + "/" + urlEncodePath ( id ) ) ; } if ( resp . isOk ( ) ) { doc = new Document ( resp . getBodyAsJSONObject ( ) ) ; doc . setDatabase ( this ) ; } else { log . warn ( "Error getting document - " + resp . getErrorId ( ) + " " + resp . getErrorReason ( ) ) ; } return doc ; } public boolean deleteDocument ( Document d ) throws IOException { if ( StringUtils . isBlank ( d . getId ( ) ) ) { throw new IllegalArgumentException ( "cannot delete document, doc id is empty" ) ; } CouchResponse resp = session . delete ( name + "/" + urlEncodePath ( d . getId ( ) ) + "?rev=" + d . getRev ( ) ) ; if ( resp . isOk ( ) ) { return true ; } else { log . warn ( "Error deleting document - " + resp . getErrorId ( ) + " " + resp . getErrorReason ( ) ) ; return false ; } } public String getAttachment ( String id , String attachment ) throws IOException { CouchResponse resp = session . get ( name + "/" + urlEncodePath ( id ) + "/" + attachment ) ; return resp . getBody ( ) ; } public String putAttachment ( String id , String fname , String ctype , String attachment ) throws IOException { CouchResponse resp = session . put ( name + "/" + urlEncodePath ( id ) + "/" + fname , ctype , attachment ) ; return resp . getBody ( ) ; } public boolean updateDocument ( Update update ) { if ( ( update == null ) || ( update . getDocId ( ) == null ) || ( update . getDocId ( ) . equals ( "" ) ) ) { return false ; } String url = null ; String [ ] elements = update . getName ( ) . split ( "/" ) ; url = this . name + "/" + ( ( elements . length < 2 ) ? elements [ 0 ] : DESIGN + elements [ 0 ] + UPDATE + elements [ 1 ] ) + "/" + update . getDocId ( ) ; if ( update . getMethodPOST ( ) ) { try { CouchResponse resp = session . post ( url , "application/x-www-form-urlencoded" , update . getURLFormEncodedString ( ) , null ) ; return resp . isOk ( ) ; } catch ( Exception e ) { return false ; } } else { try { CouchResponse resp = session . put ( url , null , null , update . getQueryString ( ) ) ; return resp . isOk ( ) ; } catch ( Exception e ) { return false ; } } } public String updateDocumentWithResponse ( Update update ) { if ( ( update == null ) || ( update . getDocId ( ) == null ) || ( update . getDocId ( ) . equals ( "" ) ) ) { return "" ; } String url = null ; String [ ] elements = update . getName ( ) . split ( "/" ) ; url = this . name + "/" + ( ( elements . length < 2 ) ? elements [ 0 ] : DESIGN + elements [ 0 ] + UPDATE + elements [ 1 ] ) + "/" + update . getDocId ( ) ; if ( update . getMethodPOST ( ) ) { try { CouchResponse resp = session . post ( url , "application/x-www-form-urlencoded" , update . getURLFormEncodedString ( ) , null ) ; return resp . getBody ( ) ; } catch ( Exception e ) { return null ; } } else { try { CouchResponse resp = session . put ( url , null , null , update . getQueryString ( ) ) ; return resp . getBody ( ) ; } catch ( Exception e ) { return null ; } } } } 
=======
public final class DebugChecker extends Checker { public DebugChecker ( ) { super ( ) ; } @ Override public void characters ( char [ ] ch , int start , int length ) throws SAXException { StringBuilder buf = new StringBuilder ( ) ; buf . append ( "Characters: “" ) ; buf . append ( ch , start , length ) ; buf . append ( "”." ) ; warn ( buf . toString ( ) ) ; } @ Override public void endDocument ( ) throws SAXException { } @ Override public void endElement ( String uri , String localName , String qName ) throws SAXException { warn ( "EndElement: “" + localName + "” from namespace “" + uri + "”." ) ; } @ Override public void endPrefixMapping ( String prefix ) throws SAXException { warn ( "EndPrefixMapping: “" + prefix + "”." ) ; } @ Override public void processingInstruction ( String target , String data ) throws SAXException { warn ( "ProcessingInstruction: “" + target + "”, “" + data + "”." ) ; } @ Override public void skippedEntity ( String name ) throws SAXException { warn ( "SkippedEntity: “" + name + "”." ) ; } @ Override public void startDocument ( ) throws SAXException { } @ Override public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { warn ( "StartElement: “" + localName + "” from namespace “" + uri + "”." ) ; int len = atts . getLength ( ) ; for ( int i = 0 ; i < len ; i ++ ) { warn ( "Attribute: “" + atts . getLocalName ( i ) + "”" + ( "" . equals ( atts . getURI ( i ) ) ? "" : "from namespace “" + atts . getURI ( i ) + "”" ) + " has value: “" + atts . getValue ( i ) + "”." ) ; } } @ Override public void startPrefixMapping ( String prefix , String uri ) throws SAXException { warn ( "StartPrefixMapping: “" + prefix + "”, “" + uri + "”." ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
