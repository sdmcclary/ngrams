<<<<<<< HEAD
public class CompiledObjectValue extends ObjectValue implements Serializable { private static final long serialVersionUID = 1L ; private static final Value [ ] NULL_FIELDS = new Value [ 0 ] ; public Value [ ] _fields ; private ObjectExtValue _object ; public CompiledObjectValue ( QuercusClass cl ) { super ( cl ) ; int size = cl . getFieldSize ( ) ; if ( size != 0 ) _fields = new Value [ cl . getFieldSize ( ) ] ; else _fields = NULL_FIELDS ; } @ Override public int getSize ( ) { int size = 0 ; for ( int i = 0 ; i < _fields . length ; i ++ ) { if ( _fields [ i ] != UnsetValue . UNSET ) size ++ ; } if ( _object != null ) size += _object . getSize ( ) ; return size ; } @ Override public Value getField ( Env env , StringValue key ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) return _fields [ index ] . toValue ( ) ; } if ( _object != null ) { return _object . getField ( env , key ) ; } else return UnsetValue . UNSET ; } @ Override public Var getFieldRef ( Env env , StringValue key ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { Var var = _fields [ index ] . toRefVar ( ) ; _fields [ index ] = var ; return var ; } } if ( _object == null ) _object = new ObjectExtValue ( _quercusClass ) ; return _object . getFieldRef ( env , key ) ; } @ Override public Value getFieldArg ( Env env , StringValue key , boolean isTop ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { Var var = _fields [ index ] . toRefVar ( ) ; _fields [ index ] = var ; return var ; } } if ( _object == null ) _object = new ObjectExtValue ( _quercusClass ) ; return _object . getFieldArg ( env , key , isTop ) ; } @ Override public Value getFieldArgRef ( Env env , StringValue key ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { Var var = _fields [ index ] . toRefVar ( ) ; _fields [ index ] = var ; return var ; } } if ( _object == null ) _object = new ObjectExtValue ( _quercusClass ) ; return _object . getFieldArgRef ( env , key ) ; } @ Override public Value getFieldArray ( Env env , StringValue key ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { _fields [ index ] = _fields [ index ] . toAutoArray ( ) ; return _fields [ index ] ; } } if ( _object == null ) _object = new ObjectExtValue ( _quercusClass ) ; return _object . getFieldArray ( env , key ) ; } @ Override public Value getFieldObject ( Env env , StringValue key ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { _fields [ index ] = _fields [ index ] . toAutoObject ( env ) ; return _fields [ index ] ; } } if ( _object == null ) _object = new ObjectExtValue ( _quercusClass ) ; return _object . getFieldObject ( env , key ) ; } @ Override public Value putField ( Env env , StringValue key , Value value ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { _fields [ index ] = _fields [ index ] . set ( value ) ; return value ; } } if ( _object == null ) _object = new ObjectExtValue ( _quercusClass ) ; return _object . putField ( env , key , value ) ; } @ Override public void unsetField ( StringValue key ) { if ( _fields . length > 0 ) { int index = _quercusClass . findFieldIndex ( key ) ; if ( index >= 0 ) { _fields [ index ] = UnsetValue . UNSET ; return ; } } if ( _object != null ) _object . unsetField ( key ) ; } @ Override public AbstractFunction findFunction ( String methodName ) { return _quercusClass . findFunction ( methodName ) ; } public Value callMethod ( Env env , String methodName , Expr [ ] args ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this , args ) ; } public Value callMethod ( Env env , String methodName , Value [ ] args ) { AbstractFunction fun = _quercusClass . findFunction ( methodName ) ; if ( fun != null ) return fun . callMethod ( env , this , args ) ; else return env . error ( L . l ( "Call to undefined method {0}::{1}()" , _quercusClass . getName ( ) , methodName ) ) ; } public Value callMethod ( Env env , String methodName ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this ) ; } public Value callMethod ( Env env , String methodName , Value a0 ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this , a0 ) ; } public Value callMethod ( Env env , String methodName , Value a0 , Value a1 ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this , a0 , a1 ) ; } public Value callMethod ( Env env , String methodName , Value a0 , Value a1 , Value a2 ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this , a0 , a1 , a2 ) ; } public Value callMethod ( Env env , String methodName , Value a0 , Value a1 , Value a2 , Value a3 ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this , a0 , a1 , a2 , a3 ) ; } public Value callMethod ( Env env , String methodName , Value a0 , Value a1 , Value a2 , Value a3 , Value a4 ) { return _quercusClass . getFunction ( methodName ) . callMethod ( env , this , a0 , a1 , a2 , a3 , a4 ) ; } public Value callMethodRef ( Env env , String methodName , Expr [ ] args ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , args ) ; } public Value callMethodRef ( Env env , String methodName , Value [ ] args ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , args ) ; } public Value callMethodRef ( Env env , String methodName ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this ) ; } public Value callMethodRef ( Env env , String methodName , Value a0 ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , a0 ) ; } public Value callMethodRef ( Env env , String methodName , Value a0 , Value a1 ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , a0 , a1 ) ; } public Value callMethodRef ( Env env , String methodName , Value a0 , Value a1 , Value a2 ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , a0 , a1 , a2 ) ; } public Value callMethodRef ( Env env , String methodName , Value a0 , Value a1 , Value a2 , Value a3 ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , a0 , a1 , a2 , a3 ) ; } public Value callMethodRef ( Env env , String methodName , Value a0 , Value a1 , Value a2 , Value a3 , Value a4 ) { return _quercusClass . getFunction ( methodName ) . callMethodRef ( env , this , a0 , a1 , a2 , a3 , a4 ) ; } @ Override public Value callClassMethod ( Env env , AbstractFunction fun , Value [ ] args ) { Value oldThis = env . getThis ( ) ; try { env . setThis ( this ) ; return fun . call ( env , args ) ; } finally { env . setThis ( oldThis ) ; } } @ Override public Value getObject ( Env env ) { return this ; } @ Override public Value copy ( ) { return this ; } @ Override public Value copy ( Env env , IdentityHashMap < Value , Value > map ) { Value oldValue = map . get ( this ) ; if ( oldValue != null ) return oldValue ; return this ; } @ Override public Value clone ( ) { throw new UnsupportedOperationException ( ) ; } @ Override public void serialize ( Env env , StringBuilder sb , SerializeMap map ) { sb . append ( "O:" ) ; sb . append ( _quercusClass . getName ( ) . length ( ) ) ; sb . append ( ":\"" ) ; sb . append ( _quercusClass . getName ( ) ) ; sb . append ( "\":" ) ; sb . append ( getSize ( ) ) ; sb . append ( ":{" ) ; ArrayList < StringValue > names = _quercusClass . getFieldNames ( ) ; if ( names != null ) { for ( int i = 0 ; i < names . size ( ) ; i ++ ) { StringValue key = names . get ( i ) ; if ( _fields [ i ] == UnsetValue . UNSET ) continue ; sb . append ( "s:" ) ; sb . append ( key . length ( ) ) ; sb . append ( ":\"" ) ; sb . append ( key ) ; sb . append ( "\";" ) ; _fields [ i ] . serialize ( env , sb , map ) ; } } if ( _object != null ) { for ( Map . Entry < Value , Value > mapEntry : _object . sortedEntrySet ( ) ) { ObjectExtValue . Entry entry = ( ObjectExtValue . Entry ) mapEntry ; StringValue key = entry . getKey ( ) . toStringValue ( env ) ; sb . append ( "s:" ) ; sb . append ( key . length ( ) ) ; sb . append ( ":\"" ) ; sb . append ( key ) ; sb . append ( "\";" ) ; entry . getValue ( ) . serialize ( env , sb , map ) ; } } sb . append ( "}" ) ; } @ Override public StringValue toReprString ( Env env ) { AbstractFunction fun = _quercusClass . findFunction ( "__toString" ) ; if ( fun != null ) return fun . callMethod ( env , this , new Expr [ 0 ] ) . toReprString ( env ) ; else return env . createUnicodeBuilder ( ) . append ( _quercusClass . getName ( ) ) . append ( "[]" ) ; } @ Override public void print ( Env env ) { env . print ( toReprString ( env ) ) ; } @ Override public Value toArray ( ) { ArrayValue array = new ArrayValueImpl ( ) ; for ( Map . Entry < Value , Value > entry : entrySet ( ) ) { array . put ( entry . getKey ( ) . toStringValue ( ) , entry . getValue ( ) ) ; } return array ; } @ Override public Value toObject ( Env env ) { return this ; } @ Override public Object toJavaObject ( ) { return this ; } @ Override public Set < ? extends Map . Entry < Value , Value > > entrySet ( ) { throw new UnsupportedOperationException ( ) ; } public Set < ? extends Map . Entry < Value , Value > > sortedEntrySet ( ) { throw new UnsupportedOperationException ( ) ; } @ Override public String toString ( ) { return "CompiledObjectValue@" + System . identityHashCode ( this ) + "[" + _quercusClass . getName ( ) + "]" ; } private void writeObject ( ObjectOutputStream out ) throws IOException { out . writeObject ( _fields ) ; out . writeObject ( _object ) ; out . writeObject ( _quercusClass . getName ( ) ) ; } private void readObject ( ObjectInputStream in ) throws ClassNotFoundException , IOException { _fields = ( Value [ ] ) in . readObject ( ) ; _object = ( ObjectExtValue ) in . readObject ( ) ; Env env = Env . getInstance ( ) ; String name = ( String ) in . readObject ( ) ; QuercusClass cl = env . findClass ( name ) ; if ( cl != null ) { setQuercusClass ( cl ) ; } else { cl = env . getQuercus ( ) . getStdClass ( ) ; setQuercusClass ( cl ) ; setIncompleteObjectName ( name ) ; } } } 
=======
class UnwrapAction extends ResultAction { UnwrapAction ( ModeUsage modeUsage ) { super ( modeUsage ) ; } void perform ( ContentHandler handler , SectionState state ) { state . addChildMode ( getModeUsage ( ) , handler ) ; } ResultAction changeCurrentMode ( Mode mode ) { return new UnwrapAction ( getModeUsage ( ) . changeCurrentMode ( mode ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
