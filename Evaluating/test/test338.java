class SchemaReceiverImpl implements SchemaReceiver { private final String PICL_SCHEMA = "picl.rnc" ; private Schema piclSchema = null ; private final PropertyMap properties ; SchemaReceiverImpl ( PropertyMap properties ) { this . properties = SinglePropertyMap . newInstance ( ValidateProperty . ERROR_HANDLER , properties . get ( ValidateProperty . ERROR_HANDLER ) ) ; } public SchemaFuture installHandlers ( XMLReader xr ) throws SAXException { SchemaParser parser = new SchemaParser ( properties , getPiclSchema ( ) ) ; xr . setContentHandler ( parser ) ; return parser ; } private Schema getPiclSchema ( ) throws SAXException { if ( piclSchema == null ) { String className = SchemaReceiverImpl . class . getName ( ) ; String resourceName = className . substring ( 0 , className . lastIndexOf ( '.' ) ) . replace ( '.' , '/' ) + "/resources/" + PICL_SCHEMA ; URL nrlSchemaUrl = getResource ( resourceName ) ; try { piclSchema = CompactSchemaReader . getInstance ( ) . createSchema ( new InputSource ( nrlSchemaUrl . toString ( ) ) , properties ) ; } catch ( IncorrectSchemaException e ) { throw new SAXException ( "unexpected internal error in RNC schema for picl" ) ; } catch ( IOException e ) { throw new SAXException ( e ) ; } } return piclSchema ; } private static URL getResource ( String resourceName ) { ClassLoader cl = SchemaReceiverImpl . class . getClassLoader ( ) ; if ( cl == null ) return ClassLoader . getSystemResource ( resourceName ) ; else return cl . getResource ( resourceName ) ; } } 