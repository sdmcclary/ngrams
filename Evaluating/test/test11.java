<<<<<<< HEAD
final class GitOptionsPanelController extends OptionsPanelController implements ActionListener { private GitPanel panel ; private final PropertyChangeSupport pcs = new PropertyChangeSupport ( this ) ; private boolean changed ; public GitOptionsPanelController ( ) { panel = new GitPanel ( this ) ; String tooltip = NbBundle . getMessage ( GitPanel . class , "GitPanel.annotationTextField.toolTipText" , GitAnnotator . LABELS ) ; panel . annotationTextField . setToolTipText ( tooltip ) ; panel . addButton . addActionListener ( this ) ; } public void update ( ) { getPanel ( ) . load ( ) ; changed = false ; } public void applyChanges ( ) { if ( ! validateFields ( ) ) { return ; } getPanel ( ) . store ( ) ; HtmlFormatter . getInstance ( ) . refresh ( ) ; Git . getInstance ( ) . refreshAllAnnotations ( ) ; changed = false ; } public void cancel ( ) { } public boolean isValid ( ) { return getPanel ( ) . valid ( ) ; } public boolean isChanged ( ) { return changed ; } public HelpCtx getHelpCtx ( ) { return new HelpCtx ( GitOptionsPanelController . class ) ; } public JComponent getComponent ( Lookup masterLookup ) { return getPanel ( ) ; } public void addPropertyChangeListener ( PropertyChangeListener l ) { pcs . addPropertyChangeListener ( l ) ; } public void removePropertyChangeListener ( PropertyChangeListener l ) { pcs . removePropertyChangeListener ( l ) ; } public void actionPerformed ( ActionEvent evt ) { if ( evt . getSource ( ) == panel . addButton ) { onAddClick ( ) ; } } private Boolean validateFields ( ) { String username = panel . emailTextField . getText ( ) ; if ( ! GitModuleConfig . getDefault ( ) . isUserNameValid ( username ) ) { JOptionPane . showMessageDialog ( null , NbBundle . getMessage ( GitPanel . class , "MSG_WARN_USER_NAME_TEXT" ) , NbBundle . getMessage ( GitPanel . class , "MSG_WARN_FIELD_TITLE" ) , JOptionPane . WARNING_MESSAGE ) ; return false ; } return true ; } private GitPanel getPanel ( ) { if ( panel == null ) { panel = new GitPanel ( this ) ; } return panel ; } void changed ( ) { if ( ! changed ) { changed = true ; pcs . firePropertyChange ( OptionsPanelController . PROP_CHANGED , false , true ) ; } pcs . firePropertyChange ( OptionsPanelController . PROP_VALID , null , null ) ; } private class LabelVariable { private String description ; private String variable ; public LabelVariable ( String variable , String description ) { this . description = description ; this . variable = variable ; } @ Override public String toString ( ) { return description ; } public String getDescription ( ) { return description ; } public String getVariable ( ) { return variable ; } } private void onAddClick ( ) { LabelsPanel labelsPanel = new LabelsPanel ( ) ; List < LabelVariable > variables = new ArrayList < LabelVariable > ( GitAnnotator . LABELS . length ) ; for ( int i = 0 ; i < GitAnnotator . LABELS . length ; i ++ ) { LabelVariable variable = new LabelVariable ( GitAnnotator . LABELS [ i ] , "{" + GitAnnotator . LABELS [ i ] + "} - " + NbBundle . getMessage ( GitPanel . class , "GitPanel.label." + GitAnnotator . LABELS [ i ] ) ) ; variables . add ( variable ) ; } labelsPanel . labelsList . setListData ( variables . toArray ( new LabelVariable [ variables . size ( ) ] ) ) ; String title = NbBundle . getMessage ( GitPanel . class , "GitPanel.labelVariables.title" ) ; String acsd = NbBundle . getMessage ( GitPanel . class , "GitPanel.labelVariables.acsd" ) ; DialogDescriptor dialogDescriptor = new DialogDescriptor ( labelsPanel , title ) ; dialogDescriptor . setModal ( true ) ; dialogDescriptor . setValid ( true ) ; final Dialog dialog = DialogDisplayer . getDefault ( ) . createDialog ( dialogDescriptor ) ; dialog . getAccessibleContext ( ) . setAccessibleDescription ( acsd ) ; labelsPanel . labelsList . addMouseListener ( new MouseAdapter ( ) { @ Override public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) == 2 ) { dialog . setVisible ( false ) ; } } } ) ; dialog . setVisible ( true ) ; if ( DialogDescriptor . OK_OPTION . equals ( dialogDescriptor . getValue ( ) ) ) { Object [ ] selection = labelsPanel . labelsList . getSelectedValues ( ) ; String variable = "" ; for ( int i = 0 ; i < selection . length ; i ++ ) { variable += "{" + ( ( LabelVariable ) selection [ i ] ) . getVariable ( ) + "}" ; } String annotation = panel . annotationTextField . getText ( ) ; int pos = panel . annotationTextField . getCaretPosition ( ) ; if ( pos < 0 ) { pos = annotation . length ( ) ; } StringBuffer sb = new StringBuffer ( annotation . length ( ) + variable . length ( ) ) ; sb . append ( annotation . substring ( 0 , pos ) ) ; sb . append ( variable ) ; if ( pos < annotation . length ( ) ) { sb . append ( annotation . substring ( pos , annotation . length ( ) ) ) ; } panel . annotationTextField . setText ( sb . toString ( ) ) ; panel . annotationTextField . requestFocus ( ) ; panel . annotationTextField . setCaretPosition ( pos + variable . length ( ) ) ; } } private void onManageClick ( ) { final PropertiesPanel panel = new PropertiesPanel ( ) ; final PropertiesTable propTable ; propTable = new PropertiesTable ( panel . labelForTable , PropertiesTable . PROPERTIES_COLUMNS , new String [ ] { PropertiesTableModel . COLUMN_NAME_VALUE } ) ; panel . setPropertiesTable ( propTable ) ; JComponent component = propTable . getComponent ( ) ; panel . propsPanel . setLayout ( new BorderLayout ( ) ) ; panel . propsPanel . add ( component , BorderLayout . CENTER ) ; GitExtProperties gitProperties = new GitExtProperties ( panel , propTable , null ) ; DialogDescriptor dd = new DialogDescriptor ( panel , NbBundle . getMessage ( GitOptionsPanelController . class , "CTL_PropertiesDialog_Title" , null ) , true , null ) ; final JButton okButton = new JButton ( NbBundle . getMessage ( GitOptionsPanelController . class , "CTL_Properties_Action_OK" ) ) ; okButton . getAccessibleContext ( ) . setAccessibleDescription ( NbBundle . getMessage ( GitOptionsPanelController . class , "CTL_Properties_Action_OK" ) ) ; final JButton cancelButton = new JButton ( NbBundle . getMessage ( GitOptionsPanelController . class , "CTL_Properties_Action_Cancel" ) ) ; cancelButton . getAccessibleContext ( ) . setAccessibleDescription ( NbBundle . getMessage ( GitOptionsPanelController . class , "CTL_Properties_Action_Cancel" ) ) ; dd . setOptions ( new Object [ ] { okButton , cancelButton } ) ; dd . setHelpCtx ( new HelpCtx ( GitOptionsPanelController . class ) ) ; panel . putClientProperty ( "contentTitle" , null ) ; panel . putClientProperty ( "DialogDescriptor" , dd ) ; Dialog dialog = DialogDisplayer . getDefault ( ) . createDialog ( dd ) ; dialog . getAccessibleContext ( ) . setAccessibleDescription ( NbBundle . getMessage ( GitOptionsPanelController . class , "CTL_PropertiesDialog_Title" ) ) ; dialog . pack ( ) ; dialog . setVisible ( true ) ; if ( dd . getValue ( ) == okButton ) { gitProperties . setProperties ( ) ; } } } 
=======
class MinLengthRestrictDatatype extends ValueRestrictDatatype { private final int length ; private final Measure measure ; MinLengthRestrictDatatype ( DatatypeBase base , int length ) { super ( base ) ; this . measure = base . getMeasure ( ) ; this . length = length ; } void checkRestriction ( Object obj ) throws DatatypeException { int actualLength = measure . getLength ( obj ) ; if ( actualLength < length ) throw new DatatypeException ( localizer ( ) . message ( "min_length_violation" , new Object [ ] { getDescriptionForRestriction ( ) , length , actualLength } ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
