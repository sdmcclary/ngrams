<<<<<<< HEAD
@ SuppressWarnings ( "restriction" ) public class P2Eclipse36PluginManager extends AbstractPluginManager { public P2Eclipse36PluginManager ( ) { } public boolean addUpdateSite ( URL siteURL ) { try { URI siteURI = siteURL . toURI ( ) ; ProvisioningUI ui = ProvUIActivator . getDefault ( ) . getProvisioningUI ( ) ; URI [ ] existingMetaRepos = ui . getRepositoryTracker ( ) . getKnownRepositories ( null ) ; if ( contains ( existingMetaRepos , siteURI ) ) { return false ; } ui . getRepositoryTracker ( ) . addRepository ( siteURI , null , null ) ; return true ; } catch ( Exception e ) { } return false ; } public void removeUpdateSite ( URL siteURL ) { try { URI siteURI = siteURL . toURI ( ) ; ProvisioningUI ui = ProvUIActivator . getDefault ( ) . getProvisioningUI ( ) ; ui . getRepositoryTracker ( ) . removeRepositories ( new URI [ ] { siteURI } , null ) ; } catch ( Exception e ) { } } public void checkForUpdates ( boolean immediate ) { if ( ! immediate ) { AutomaticUpdatePlugin . getDefault ( ) . getScheduler ( ) . earlyStartup ( ) ; return ; } IPreferenceStore prefs = AutomaticUpdatePlugin . getDefault ( ) . getPreferenceStore ( ) ; boolean wasEnabled = prefs . getBoolean ( PreferenceConstants . PREF_AUTO_UPDATE_ENABLED ) ; String oldSchedule = prefs . getString ( PreferenceConstants . PREF_AUTO_UPDATE_SCHEDULE ) ; prefs . setValue ( PreferenceConstants . PREF_AUTO_UPDATE_ENABLED , true ) ; prefs . setValue ( PreferenceConstants . PREF_AUTO_UPDATE_SCHEDULE , PreferenceConstants . PREF_UPDATE_ON_STARTUP ) ; AutomaticUpdatePlugin . getDefault ( ) . savePreferences ( ) ; AutomaticUpdatePlugin . getDefault ( ) . getScheduler ( ) . earlyStartup ( ) ; prefs . setValue ( PreferenceConstants . PREF_AUTO_UPDATE_ENABLED , wasEnabled ) ; prefs . setValue ( PreferenceConstants . PREF_AUTO_UPDATE_SCHEDULE , oldSchedule ) ; AutomaticUpdatePlugin . getDefault ( ) . savePreferences ( ) ; } public IStatus install ( final IPlugin [ ] plugins , IProgressMonitor monitor ) throws PluginManagerException { if ( monitor == null ) { monitor = new NullProgressMonitor ( ) ; } if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } String profileId = IProfileRegistry . SELF ; IInstallableUnit [ ] toInstall = getInstallationUnits ( plugins , profileId ) ; if ( toInstall . length <= 0 ) { throw new PluginManagerException ( P2Eclipse36Messages . P2PluginManager_ERR_MSG_No_installable_units_found ) ; } if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } Collection < IInstallableUnit > units = Arrays . asList ( toInstall ) ; ProvisioningUI ui = ProvUIActivator . getDefault ( ) . getProvisioningUI ( ) ; InstallOperation op = ui . getInstallOperation ( units , getURIs ( plugins ) ) ; ui . openInstallWizard ( units , op , null ) ; return Status . OK_STATUS ; } private URI [ ] getURIs ( IPlugin [ ] plugins ) { List < URI > uris = new ArrayList < URI > ( ) ; for ( IPlugin plugin : plugins ) { try { uris . add ( plugin . getURL ( ) . toURI ( ) ) ; } catch ( URISyntaxException e ) { IdeLog . logError ( Activator . getDefault ( ) , e . getMessage ( ) , e ) ; } } return uris . toArray ( new URI [ 0 ] ) ; } public IStatus uninstall ( IPlugin plugin , IProgressMonitor monitor ) throws PluginManagerException { if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } IQueryResult < IInstallableUnit > result = null ; try { IQuery < IInstallableUnit > query = QueryUtil . createIUQuery ( getFeatureGroupName ( plugin ) , Version . parseVersion ( plugin . getVersion ( ) ) ) ; IProfile profile = getProfile ( IProfileRegistry . SELF ) ; result = profile . query ( query , monitor ) ; } catch ( CoreException e ) { IdeLog . logError ( Activator . getDefault ( ) , e . getMessage ( ) , e ) ; } if ( result == null || result . isEmpty ( ) ) { throw new PluginManagerException ( P2Eclipse36Messages . P2PluginManager_ERR_MSG_No_installable_units_found ) ; } final IInstallableUnit [ ] ius = result . toArray ( IInstallableUnit . class ) ; if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } ProvisioningUI ui = ProvUIActivator . getDefault ( ) . getProvisioningUI ( ) ; Collection < IInstallableUnit > units = Arrays . asList ( ius ) ; UninstallOperation op = ui . getUninstallOperation ( units , null ) ; ui . openUninstallWizard ( units , op , null ) ; return Status . OK_STATUS ; } protected static IProfile getProfile ( String self ) { IProfileRegistry profileRegistry = getProfileRegistry ( ) ; if ( profileRegistry == null ) return null ; return profileRegistry . getProfile ( self ) ; } private static boolean contains ( URI [ ] existingMetaRepos , URI updateSiteURI ) { if ( existingMetaRepos == null ) { return false ; } for ( int i = 0 ; i < existingMetaRepos . length ; ++ i ) { if ( existingMetaRepos [ i ] . equals ( updateSiteURI ) ) { return true ; } } return false ; } private static IInstallableUnit [ ] getInstallationUnits ( final IPlugin [ ] plugins , final String profileId ) throws PluginManagerException { final List < IInstallableUnit > units = new ArrayList < IInstallableUnit > ( ) ; IRunnableWithProgress runnable = new IRunnableWithProgress ( ) { public void run ( IProgressMonitor monitor ) throws InvocationTargetException , InterruptedException { SubMonitor sub = SubMonitor . convert ( monitor , plugins . length * 4 ) ; sub . setTaskName ( P2Eclipse36Messages . P2PluginManager_Locating_selected_features_job_title ) ; try { for ( IPlugin plugin : plugins ) { URI siteURL = plugin . getURL ( ) . toURI ( ) ; IMetadataRepositoryManager manager = getMetadataRepositoryManager ( ) ; IMetadataRepository repo = manager . loadRepository ( siteURL , sub . newChild ( 1 ) ) ; if ( repo == null ) { throw new ProvisionException ( P2Eclipse36Messages . P2PluginManager_ERR_MSG_Metadata_repo_not_found + siteURL ) ; } if ( ! manager . isEnabled ( siteURL ) ) { manager . setEnabled ( siteURL , true ) ; } IArtifactRepositoryManager artifactManager = getArtifactRepositoryManager ( ) ; IArtifactRepository artifactRepo = artifactManager . loadRepository ( siteURL , sub . newChild ( 1 ) ) ; if ( artifactRepo == null ) { throw new ProvisionException ( P2Eclipse36Messages . P2PluginManager_ERR_MSG_Artifact_repo_not_found + siteURL ) ; } if ( ! artifactManager . isEnabled ( siteURL ) ) { artifactManager . setEnabled ( siteURL , true ) ; } IQuery < IInstallableUnit > query = QueryUtil . createIUQuery ( getFeatureGroupName ( plugin ) ) ; query = QueryUtil . createLatestQuery ( query ) ; IQueryResult < IInstallableUnit > roots = repo . query ( query , sub . newChild ( 2 ) ) ; if ( roots . isEmpty ( ) ) { if ( monitor . isCanceled ( ) ) { return ; } IProfile profile = getProfile ( profileId ) ; if ( profile == null ) { profile = getFirstProfile ( ) ; } roots = profile . query ( query , sub . newChild ( 2 ) ) ; } units . addAll ( roots . toUnmodifiableSet ( ) ) ; } } catch ( Exception e ) { throw new InvocationTargetException ( e ) ; } finally { sub . done ( ) ; } } } ; try { new ProgressMonitorDialog ( Display . getDefault ( ) . getActiveShell ( ) ) . run ( true , true , runnable ) ; } catch ( InterruptedException e ) { } catch ( InvocationTargetException e ) { throw new PluginManagerException ( P2Eclipse36Messages . ProfileModificationAction_UnexpectedError , e . getCause ( ) ) ; } return units . toArray ( new IInstallableUnit [ units . size ( ) ] ) ; } protected static IArtifactRepositoryManager getArtifactRepositoryManager ( ) { return ( IArtifactRepositoryManager ) getAgent ( ) . getService ( IArtifactRepositoryManager . SERVICE_NAME ) ; } protected static IMetadataRepositoryManager getMetadataRepositoryManager ( ) { return ( IMetadataRepositoryManager ) getAgent ( ) . getService ( IMetadataRepositoryManager . SERVICE_NAME ) ; } private static IProvisioningAgent getAgent ( ) { return ( IProvisioningAgent ) ServiceHelper . getService ( Activator . getContext ( ) , IProvisioningAgent . SERVICE_NAME ) ; } protected static IProfileRegistry getProfileRegistry ( ) { return ( IProfileRegistry ) getAgent ( ) . getService ( IProfileRegistry . SERVICE_NAME ) ; } private static String getFeatureGroupName ( IPlugin plugin ) throws CoreException { return plugin . getId ( ) + FEATURE_IU_SUFFIX ; } public boolean isFeatureInstalled ( String id ) { return getInstalledFeature ( id ) != null ; } public IPlugin getInstalledFeature ( String id ) { if ( id == null ) return null ; if ( ! id . endsWith ( FEATURE_IU_SUFFIX ) ) { id += FEATURE_IU_SUFFIX ; } IProfileRegistry profileRegistry = getProfileRegistry ( ) ; if ( profileRegistry == null ) return null ; IProfile profile = getProfile ( IProfileRegistry . SELF ) ; if ( profile == null ) { profile = getFirstProfile ( ) ; } if ( profile == null ) return null ; IQuery < IInstallableUnit > query = QueryUtil . createIUQuery ( id ) ; query = QueryUtil . createLimitQuery ( query , 1 ) ; IQueryResult < IInstallableUnit > roots = profile . available ( query , new NullProgressMonitor ( ) ) ; if ( roots == null || roots . isEmpty ( ) ) return null ; try { return toPlugin ( ( IInstallableUnit ) roots . iterator ( ) . next ( ) ) ; } catch ( MalformedURLException e ) { IdeLog . logError ( Activator . getDefault ( ) , e . getMessage ( ) , e ) ; } return null ; } private static IProfile getFirstProfile ( ) { IProfileRegistry profileRegistry = getProfileRegistry ( ) ; if ( profileRegistry == null ) { return null ; } IProfile [ ] profiles = profileRegistry . getProfiles ( ) ; if ( profiles != null && profiles . length > 0 ) { return profiles [ 0 ] ; } return null ; } public List < IPlugin > getInstalledPlugins ( ) { IProfileRegistry profileRegistry = getProfileRegistry ( ) ; if ( profileRegistry == null ) return Collections . emptyList ( ) ; IProfile profile = profileRegistry . getProfile ( IProfileRegistry . SELF ) ; if ( profile == null ) { IProfile [ ] profiles = profileRegistry . getProfiles ( ) ; if ( profiles != null && profiles . length > 0 ) { profile = profiles [ 0 ] ; } } if ( profile == null ) return Collections . emptyList ( ) ; IQuery < IInstallableUnit > query = QueryUtil . createIUGroupQuery ( ) ; IQueryResult < IInstallableUnit > roots = profile . available ( query , new NullProgressMonitor ( ) ) ; Iterator < IInstallableUnit > iter = roots . iterator ( ) ; List < IPlugin > plugins = new ArrayList < IPlugin > ( ) ; while ( iter . hasNext ( ) ) { IInstallableUnit unit = iter . next ( ) ; String name = unit . getId ( ) ; if ( name == null || ! name . endsWith ( FEATURE_IU_SUFFIX ) ) { continue ; } try { plugins . add ( toPlugin ( unit ) ) ; } catch ( MalformedURLException e ) { IdeLog . logError ( Activator . getDefault ( ) , e . getMessage ( ) , e ) ; } } return plugins ; } public String getUpdatePreferencePageId ( ) { return "org.eclipse.equinox.internal.p2.ui.sdk.scheduler.AutomaticUpdatesPreferencePage" ; } private Plugin toPlugin ( IInstallableUnit iu ) throws MalformedURLException { String name = iu . getProperty ( "df_LT.featureName" ) ; if ( name == null ) name = iu . getProperty ( IInstallableUnit . PROP_NAME ) ; if ( name == null ) name = iu . getId ( ) ; return new Plugin ( stripFeatureGroup ( iu . getId ( ) ) , name , iu . getVersion ( ) . toString ( ) , null , iu . getProperty ( "df_LT.description" ) , new URL ( "file:/fake/" + iu . getId ( ) ) , "" , "" , 0 , null , "" , null ) ; } private String stripFeatureGroup ( String id ) { if ( id == null ) return null ; if ( id . endsWith ( FEATURE_IU_SUFFIX ) ) return id . substring ( 0 , id . length ( ) - FEATURE_IU_SUFFIX . length ( ) ) ; return id ; } public URI [ ] getAllMetadataRepositories ( ) { IMetadataRepositoryManager manager = getMetadataRepositoryManager ( ) ; if ( manager == null ) { return new URI [ 0 ] ; } return manager . getKnownRepositories ( IRepositoryManager . REPOSITORIES_ALL ) ; } } 
=======
public class BarrageHeader { private static final String TAG = "BarrageHeader" ; public static final int STATUS_RUNNING = 0 ; public static final int STATUS_DRAFT = 1 ; public static final int STATUS_QUEUED = 2 ; public static final int STATUS_PAUSED = 3 ; private int mID ; private String mName ; private int mStatus ; private int mCountTotal ; private int mCountCurrent ; public BarrageHeader ( ) { } public BarrageHeader ( String name , int status , int total , int current ) { mName = name ; mStatus = status ; mCountTotal = total ; mCountCurrent = current ; } public int getID ( ) { return mID ; } public String getName ( ) { return mName ; } public void setName ( String name ) { mName = name ; } public int getStatus ( ) { return mStatus ; } public void setStatus ( int status ) { mStatus = status ; } public int getCountTotal ( ) { return mCountTotal ; } public void setCountTotal ( int total ) { mCountTotal = total ; } public int getCountCurrent ( ) { return mCountCurrent ; } public void setCountCurrent ( int current ) { mCountCurrent = current ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
