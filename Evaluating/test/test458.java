public class ChartData extends Activity { public class CallParams { public static final String CHART_FORM = "graph_form" ; public static final String CHART_MESSAGES = "graph_msg" ; public static final String CHART_MONITORS = "graph_monitor" ; public static final String START_DATE = "startdate" ; public static final String END_DATE = "enddate" ; } private static final String STATE_CHART_FOR = "charttype" ; private static final String STATE_START_DATE = "startdate" ; private static final String STATE_END_DATE = "enddate" ; private static final String STATE_SELECTED_VARIABLE = "variable" ; private static final String STATE_SELECTED_FORM = "form" ; private static final String STATE_GRAPH_DATA = "graphdata" ; private static final String STATE_GRAPH_OPTION = "graphoption" ; private static final int MENU_DONE = Menu . FIRST ; private static final int MENU_CHANGE_VARIABLE = Menu . FIRST + 1 ; private static final int MENU_CHANGE_DATERANGE = Menu . FIRST + 2 ; private static final int ACTIVITY_DATERANGE = 7 ; private static final int THINKING_DIALOG = 160 ; private static final int NO_DATA_DIALOG = 170 ; private Date mStartDate ; private Date mEndDate ; private int mVariable ; private Form mForm ; ChartBroker mBroker ; private WebView mWebView ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( org . rapidandroid . R . layout . data_chart ) ; mWebView = ( WebView ) findViewById ( org . rapidandroid . R . id . wv1 ) ; mWebView . getSettings ( ) . setJavaScriptEnabled ( true ) ; Bundle extras = getIntent ( ) . getExtras ( ) ; if ( extras != null ) { mStartDate = Constants . NULLDATE ; mEndDate = Constants . NULLDATE ; if ( extras . containsKey ( CallParams . START_DATE ) ) { mStartDate = new Date ( extras . getLong ( CallParams . START_DATE ) ) ; } if ( extras . containsKey ( CallParams . END_DATE ) ) { mEndDate = new Date ( extras . getLong ( CallParams . END_DATE ) ) ; } if ( extras . containsKey ( CallParams . CHART_FORM ) ) { mForm = ModelTranslator . getFormById ( extras . getInt ( CallParams . CHART_FORM ) ) ; mBroker = new FormDataBroker ( this , mWebView , mForm , mStartDate , mEndDate ) ; } else if ( extras . containsKey ( CallParams . CHART_MESSAGES ) ) { mBroker = new MessageDataBroker ( this , mWebView , mStartDate , mEndDate ) ; } else if ( extras . containsKey ( CallParams . CHART_MONITORS ) ) { } if ( savedInstanceState == null ) { mBroker . bindChartToHTML ( ) ; } } } @ Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { super . onRestoreInstanceState ( savedInstanceState ) ; if ( savedInstanceState . containsKey ( STATE_SELECTED_VARIABLE ) && savedInstanceState . containsKey ( STATE_START_DATE ) && savedInstanceState . containsKey ( STATE_END_DATE ) && savedInstanceState . containsKey ( STATE_CHART_FOR ) && savedInstanceState . containsKey ( STATE_SELECTED_VARIABLE ) && savedInstanceState . containsKey ( STATE_GRAPH_OPTION ) && savedInstanceState . containsKey ( STATE_GRAPH_DATA ) ) { mVariable = savedInstanceState . getInt ( STATE_SELECTED_VARIABLE ) ; mStartDate = new Date ( savedInstanceState . getLong ( STATE_START_DATE ) ) ; mEndDate = new Date ( savedInstanceState . getLong ( STATE_END_DATE ) ) ; String chartfor = savedInstanceState . getString ( STATE_CHART_FOR ) ; if ( chartfor . equals ( CallParams . CHART_FORM ) ) { mForm = ModelTranslator . getFormById ( savedInstanceState . getInt ( STATE_SELECTED_FORM ) ) ; mBroker = new FormDataBroker ( this , mWebView , mForm , mStartDate , mEndDate ) ; } else if ( chartfor . equals ( CallParams . CHART_MESSAGES ) ) { mBroker = new MessageDataBroker ( this , mWebView , mStartDate , mEndDate ) ; } else if ( chartfor . equals ( CallParams . CHART_MONITORS ) ) { } mBroker . setVariable ( mVariable ) ; mBroker . setGraphData ( savedInstanceState . getString ( STATE_GRAPH_DATA ) ) ; mBroker . setGraphOptions ( savedInstanceState . getString ( STATE_GRAPH_OPTION ) ) ; } mBroker . bindChartToHTML ( ) ; } @ Override protected void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putLong ( STATE_START_DATE , mStartDate . getTime ( ) ) ; outState . putLong ( STATE_END_DATE , mEndDate . getTime ( ) ) ; outState . putInt ( STATE_SELECTED_VARIABLE , mVariable ) ; outState . putString ( STATE_CHART_FOR , mBroker . getName ( ) ) ; outState . putString ( STATE_GRAPH_DATA , mBroker . getGraphData ( ) ) ; outState . putString ( STATE_GRAPH_OPTION , mBroker . getGraphOptions ( ) ) ; if ( mForm != null ) { outState . putInt ( STATE_SELECTED_FORM , mForm . getFormId ( ) ) ; } } @ Override protected Dialog onCreateDialog ( int id ) { super . onCreateDialog ( id ) ; switch ( id ) { case MENU_CHANGE_VARIABLE : return new AlertDialog . Builder ( ChartData . this ) . setTitle ( "Choose Field" ) . setSingleChoiceItems ( mBroker . getVariables ( ) , 0 , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { mVariable = whichButton ; mBroker . setVariable ( whichButton ) ; } } ) . setPositiveButton ( "Ok" , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { mBroker . jsLoadGraph ( ) ; } } ) . setNegativeButton ( "Cancel" , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { } } ) . create ( ) ; case THINKING_DIALOG : ProgressDialog loadingDialog = new ProgressDialog ( this ) ; loadingDialog . setTitle ( "Please wait" ) ; loadingDialog . setMessage ( "Drawing graph..." ) ; loadingDialog . setIndeterminate ( true ) ; loadingDialog . setCancelable ( false ) ; return loadingDialog ; case NO_DATA_DIALOG : return new AlertDialog . Builder ( ChartData . this ) . setTitle ( "No Data" ) . setMessage ( "Sorry, there was no data for the selected variable and date range." ) . setPositiveButton ( "Ok" , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton ) { } } ) . create ( ) ; default : return null ; } } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu . add ( 0 , MENU_DONE , 0 , R . string . chart_menu_done ) . setIcon ( android . R . drawable . ic_menu_revert ) ; menu . add ( 0 , MENU_CHANGE_VARIABLE , 0 , R . string . chart_menu_change_variable ) . setIcon ( android . R . drawable . ic_menu_preferences ) ; menu . add ( 0 , MENU_CHANGE_DATERANGE , 0 , R . string . chart_menu_change_parameters ) . setIcon ( android . R . drawable . ic_menu_recent_history ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { super . onOptionsItemSelected ( item ) ; switch ( item . getItemId ( ) ) { case MENU_DONE : finish ( ) ; return true ; case MENU_CHANGE_VARIABLE : showDialog ( MENU_CHANGE_VARIABLE ) ; return true ; case MENU_CHANGE_DATERANGE : startDateRangeActivity ( ) ; return true ; } return true ; } private void startDateRangeActivity ( ) { Intent i = new Intent ( this , DateRange . class ) ; Date endDate = new Date ( ) ; if ( mForm != null ) { endDate = ParsedDataReporter . getOldestMessageDate ( this , mForm ) ; } else { endDate = MessageDataReporter . getOldestMessageDate ( this ) ; } i . putExtra ( DateRange . CallParams . ACTIVITY_ARG_STARTDATE , endDate . getTime ( ) ) ; startActivityForResult ( i , ACTIVITY_DATERANGE ) ; } @ Override protected void onActivityResult ( int requestCode , int resultCode , Intent intent ) { super . onActivityResult ( requestCode , resultCode , intent ) ; Bundle extras = null ; if ( intent != null ) { extras = intent . getExtras ( ) ; } switch ( requestCode ) { case ACTIVITY_DATERANGE : if ( extras != null ) { mStartDate . setTime ( extras . getLong ( DateRange . ResultParams . RESULT_START_DATE ) ) ; mEndDate . setTime ( extras . getLong ( DateRange . ResultParams . RESULT_END_DATE ) ) ; mBroker . setRange ( mStartDate , mEndDate ) ; mBroker . jsLoadGraph ( ) ; } break ; } } } 