<<<<<<< HEAD
public abstract class ObjectBase implements IObject { public static final JSNull NULL = JSNull . getSingletonInstance ( ) ; public static final JSUndefined UNDEFINED = JSUndefined . getSingletonInstance ( ) ; private IObject _prototype ; private Map < String , Property > _properties ; private IDocumentation _documentation ; private IRange _range ; private Map < String , Property > getProperties ( ) { if ( this . _properties == null ) { this . _properties = new HashMap < String , Property > ( ) ; } return this . _properties ; } public ObjectBase ( ) { this ( null ) ; } public ObjectBase ( IRange range ) { this . _range = range ; } public boolean canPut ( String propertyName ) { boolean result = true ; if ( this . _properties != null && this . getProperties ( ) . containsKey ( propertyName ) ) { Property p = this . getLocalProperty ( propertyName ) ; result = ( p . isReadOnly ( ) == false ) ; } return result ; } public Property getProperty ( String propertyName ) { Property result = null ; if ( this . _properties != null && this . getProperties ( ) . containsKey ( propertyName ) ) { result = this . getLocalProperty ( propertyName ) ; } else { if ( this . _prototype != null ) { result = this . _prototype . getProperty ( propertyName ) ; } } return result ; } public IObject getPropertyValue ( String propertyName , int fileIndex , int offset ) { IObject result = ObjectBase . UNDEFINED ; if ( this . _properties != null && this . getProperties ( ) . containsKey ( propertyName ) ) { Property p = this . getLocalProperty ( propertyName ) ; result = p . getValue ( fileIndex , offset ) ; } else { if ( this . _prototype != null ) { result = this . _prototype . getPropertyValue ( propertyName , fileIndex , offset ) ; } } return result ; } public void putPropertyValue ( String propertyName , IObject value , int fileIndex ) { this . putPropertyValue ( propertyName , value , fileIndex , Property . NONE ) ; } public void putPropertyValue ( String propertyName , IObject value , int fileIndex , int attributes ) { if ( this . canPut ( propertyName ) ) { Map < String , Property > properties = this . getProperties ( ) ; Property p ; if ( "Jaxer" . equals ( propertyName ) ) { String message = "putPropertyValue put " + value + "\n" + this . getStackTrace ( ) ; IdeLog . logInfo ( JSPlugin . getDefault ( ) , message ) ; } if ( properties . containsKey ( propertyName ) ) { p = this . getLocalProperty ( propertyName ) ; try { p . setValue ( value , fileIndex ) ; } catch ( IllegalStateException e ) { IdeLog . logError ( JSPlugin . getDefault ( ) , StringUtils . format ( Messages . ObjectBase_AttemptedToOverwritePropertyNameAtFileIndex , new String [ ] { propertyName , String . valueOf ( fileIndex ) } ) , e ) ; } } else { p = new Property ( value , fileIndex , attributes ) ; properties . put ( propertyName , p ) ; } p . addReference ( ) ; } } public String [ ] getPropertyNames ( ) { return this . getPropertyNames ( false ) ; } public String [ ] getPropertyNames ( boolean getAll ) { Map < String , Boolean > result = new HashMap < String , Boolean > ( ) ; IObject current = this ; while ( current != null ) { String [ ] localNames = current . getLocalPropertyNames ( ) ; if ( getAll ) { for ( int i = 0 ; i < localNames . length ; i ++ ) { result . put ( localNames [ i ] , Boolean . TRUE ) ; } } else { for ( int i = 0 ; i < localNames . length ; i ++ ) { String name = localNames [ i ] ; if ( result . containsKey ( name ) == false ) { Property p = current . getLocalProperty ( name ) ; if ( p . isEnumerable ( ) ) { result . put ( localNames [ i ] , Boolean . TRUE ) ; } } } } current = current . getPrototype ( ) ; } Set < String > s = result . keySet ( ) ; return s . toArray ( new String [ s . size ( ) ] ) ; } public boolean hasProperty ( String propertyName ) { boolean result = false ; if ( this . _properties != null && this . getProperties ( ) . containsKey ( propertyName ) ) { result = true ; } else { if ( this . _prototype != null ) { result = this . _prototype . hasProperty ( propertyName ) ; } } return result ; } public Property getLocalProperty ( String propertyName ) { Property result = null ; if ( this . _properties != null ) { Map < String , Property > properties = this . getProperties ( ) ; if ( properties . containsKey ( propertyName ) == false ) { throw new IllegalArgumentException ( Messages . ObjectBase_LocalPropertyNameDoesNotExist + propertyName ) ; } result = properties . get ( propertyName ) ; } else { throw new IllegalArgumentException ( Messages . ObjectBase_LocalPropertyNameDoesNotExist2 + propertyName ) ; } return result ; } public void putLocalProperty ( String propertyName , Property property ) { Map < String , Property > properties = this . getProperties ( ) ; if ( "Jaxer" . equals ( propertyName ) ) { String message = "putLocalProperty put Jaxer\n" + this . getStackTrace ( ) ; IdeLog . logInfo ( JSPlugin . getDefault ( ) , message ) ; } properties . put ( propertyName , property ) ; } public String [ ] getLocalPropertyNames ( ) { String [ ] result ; if ( this . _properties != null ) { Set < String > names = this . getProperties ( ) . keySet ( ) ; result = names . toArray ( new String [ names . size ( ) ] ) ; } else { result = new String [ 0 ] ; } return result ; } public boolean hasLocalProperty ( String propertyName ) { boolean result = false ; if ( this . _properties != null ) { result = this . getProperties ( ) . containsKey ( propertyName ) ; } return result ; } public void unputPropertyName ( String propertyName , int fileIndex , int offset ) { if ( propertyName == null || propertyName . length ( ) == 0 ) { throw new NullPointerException ( Messages . ObjectBase_PropertyNameMustBeDefined ) ; } Property p = this . getProperty ( propertyName ) ; if ( p == null ) { throw new NullPointerException ( Messages . ObjectBase_TryingToUnputAPropertyThatDoesNotExist + propertyName ) ; } if ( p . removeReference ( ) == 0 ) { if ( p . isPermanent ( ) == false ) { this . deletePropertyName ( propertyName ) ; } } else { if ( "Jaxer" . equals ( propertyName ) ) { String message = "unputPropertyValue:\n" + this . getStackTrace ( ) ; IdeLog . logInfo ( JSPlugin . getDefault ( ) , message ) ; } p . unsetValue ( fileIndex , offset ) ; } } public boolean deletePropertyName ( String propertyName ) { boolean result = true ; if ( this . _properties != null ) { Map < String , Property > properties = this . getProperties ( ) ; if ( properties . containsKey ( propertyName ) ) { Property p = this . getLocalProperty ( propertyName ) ; if ( p . isReadOnly ( ) ) { result = false ; } else { if ( "Jaxer" . equals ( propertyName ) ) { String message = "deletePropertyName deleted Jaxer\n" + this . getStackTrace ( ) ; IdeLog . logInfo ( JSPlugin . getDefault ( ) , message ) ; } properties . remove ( propertyName ) ; } } } return result ; } public IObject getPrototype ( ) { return this . _prototype ; } public void setPrototype ( IObject prototype ) { this . _prototype = prototype ; } public abstract String getClassName ( ) ; public IObject getInstance ( Environment environment , int fileIndex , int offset ) { return this ; } public int getEndingOffset ( ) { int result = - 1 ; if ( this . _range != null ) { result = this . _range . getEndingOffset ( ) ; } return result ; } public int getLength ( ) { int result = 0 ; if ( this . _range != null ) { result = this . _range . getLength ( ) ; } return result ; } public IRange getRange ( ) { return this . _range ; } public int getStartingOffset ( ) { int result = - 1 ; if ( this . _range != null ) { result = this . _range . getStartingOffset ( ) ; } return result ; } public boolean isEmpty ( ) { boolean result = true ; if ( this . _range != null ) { result = this . _range . isEmpty ( ) ; } return result ; } public boolean containsOffset ( int offset ) { boolean result = false ; if ( this . _range != null ) { result = this . _range . containsOffset ( offset ) ; } return result ; } public IDocumentation getDocumentation ( ) { return this . _documentation ; } public boolean hasDocumentation ( ) { return this . _documentation != null ; } public void setDocumentation ( IDocumentation documentation ) { this . _documentation = documentation ; } public int getLocalPropertyCount ( ) { int result = 0 ; if ( this . _properties != null ) { result = this . _properties . size ( ) ; } return result ; } private String getStackTrace ( ) { StackTraceElement [ ] elements = Thread . currentThread ( ) . getStackTrace ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( StackTraceElement element : elements ) { sb . append ( element . toString ( ) ) . append ( "\n" ) ; } return sb . toString ( ) ; } } 
=======
public class Html5DatatypeLibraryFactory implements DatatypeLibraryFactory { private static final String NAMESPACE = "http://whattf.org/datatype-draft" ; public Html5DatatypeLibraryFactory ( ) { super ( ) ; } public DatatypeLibrary createDatatypeLibrary ( String namespaceURI ) { if ( NAMESPACE . equals ( namespaceURI ) ) { return new Html5DatatypeLibrary ( ) ; } return null ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
