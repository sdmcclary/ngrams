public final class LanguageRegistry { private static final String PAIRFINDER_ID = "com.aptana.ide.editors.pairfinder" ; private static final String FORMATTER_ID = "com.aptana.ide.editors.formatter" ; private static final String ATTR_CLASS = "class" ; private static final String ATTR_LANGUAGE = "language" ; private static final String TAG_PAIR_FINDER = "pairFinder" ; private static final String TAG_FORMATTER = "formatter" ; private static Map < String , LanguageColorizer > languageColorizers = new HashMap < String , LanguageColorizer > ( ) ; private static Map < String , InstanceCreator > pairFinders = new HashMap < String , InstanceCreator > ( ) ; private static Map < String , InstanceCreator > formatters = new HashMap < String , InstanceCreator > ( ) ; private static ColorizerReader colorizerReader ; private static final IActivityManager activityManager = PlatformUI . getWorkbench ( ) . getActivitySupport ( ) . getActivityManager ( ) ; private static IIdentifierListener identifierListener = new IIdentifierListener ( ) { public void identifierChanged ( IdentifierEvent identifierEvent ) { if ( identifierEvent . hasEnabledChanged ( ) ) { IIdentifier identifier = identifierEvent . getIdentifier ( ) ; if ( identifier . isEnabled ( ) ) { LanguageRegistry . reloadAll ( ) ; } } } } ; static { loadAll ( ) ; } private LanguageRegistry ( ) { } public static void clearAll ( ) { languageColorizers . clear ( ) ; pairFinders . clear ( ) ; formatters . clear ( ) ; } public static void loadAll ( ) { loadColorizations ( ) ; loadPairFinders ( ) ; loadCodeFormatters ( ) ; } public static void reloadAll ( ) { clearAll ( ) ; loadAll ( ) ; } public static LanguageColorizer getLanguageColorizer ( String language ) { LanguageColorizer original = null ; if ( languageColorizers . containsKey ( language ) ) { original = languageColorizers . get ( language ) ; } else if ( colorizerReader . getInstanceCreator ( language ) != null ) { InstanceCreator creator = colorizerReader . getInstanceCreator ( language ) ; original = ( LanguageColorizer ) creator . getCachedInstance ( ) ; } else { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , StringUtils . format ( Messages . LanguageRegistry_NO_COLORIZER , language ) ) ; } return original ; } public static LanguageColorizer getLanguageColorizer ( String language , ColorizerReader reader ) { LanguageColorizer original = null ; if ( languageColorizers . containsKey ( language ) ) { original = languageColorizers . get ( language ) ; } else if ( reader . getInstanceCreator ( language ) != null ) { InstanceCreator creator = reader . getInstanceCreator ( language ) ; original = ( LanguageColorizer ) creator . getCachedInstance ( ) ; } else { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , StringUtils . format ( Messages . LanguageRegistry_NO_COLORIZER , language ) ) ; } return original ; } public static List < LanguageColorizer > getLanguageColorizers ( ) { return new ArrayList < LanguageColorizer > ( languageColorizers . values ( ) ) ; } public static String getPreferenceId ( String language ) { return colorizerReader . getPreferenceId ( language ) ; } public static IParser getParser ( String language ) { return ParsingRegistry . getParser ( language ) ; } public static IParser getScanner ( String language ) { return ParsingRegistry . getScanner ( language ) ; } public static IPairFinder getPairFinder ( String language ) { IPairFinder result = null ; if ( pairFinders . containsKey ( language ) ) { InstanceCreator creator = pairFinders . get ( language ) ; result = ( IPairFinder ) creator . getCachedInstance ( ) ; } else { String message = MessageFormat . format ( Messages . LanguageRegistry_No_Associated_Finder , new Object [ ] { language } ) ; IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , message ) ; } return result ; } public static ICodeFormatter getCodeFormatter ( String language ) { ICodeFormatter result = null ; if ( formatters . containsKey ( language ) ) { InstanceCreator creator = formatters . get ( language ) ; result = ( ICodeFormatter ) creator . getCachedInstance ( ) ; } else { String message = MessageFormat . format ( Messages . LanguageRegistry_No_Associated_Formatter , new Object [ ] { language } ) ; IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , message ) ; } return result ; } public static TokenList getTokenList ( String language ) { return ParsingRegistry . getTokenList ( language ) ; } public static TokenList getTokenListByExtension ( String extension ) { return ParsingRegistry . getTokenListByExtension ( extension ) ; } public static IParser createParser ( String language ) { return ParsingRegistry . createParser ( language ) ; } public static IParser createScanner ( String language ) { return ParsingRegistry . createScanner ( language ) ; } public static TokenList createTokenList ( InputStream input ) { try { return ParsingRegistry . createTokenList ( input ) ; } catch ( Exception e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , Messages . LanguageRegistry_Cannot_Create_Token_List , e ) ; } return null ; } public static TokenList createTokenList ( String language ) { return ParsingRegistry . createTokenList ( language ) ; } public static boolean hasLanguageColorizer ( String language ) { return languageColorizers . containsKey ( language ) ; } public static boolean hasParser ( String language ) { return ParsingRegistry . hasParser ( language ) ; } public static boolean hasScanner ( String language ) { return ParsingRegistry . hasScanner ( language ) ; } public static boolean hasTokenList ( String language ) { return ParsingRegistry . hasTokenList ( language ) ; } public static void importColorization ( File file , String language ) { colorizerReader . importColorization ( file , language ) ; } private static void loadColorizations ( ) { colorizerReader = new ColorizerReader ( ) ; colorizerReader . loadExtensionPointColorizers ( ) ; } public static final boolean isActivityEnabled ( IConfigurationElement element ) { String extensionId = element . getAttribute ( "id" ) ; String extensionPluginId = element . getNamespaceIdentifier ( ) ; String extensionString = null ; if ( extensionPluginId != null && extensionId != null && extensionPluginId . length ( ) > 0 && extensionId . length ( ) > 0 ) { extensionString = extensionPluginId + "/" + extensionId ; } else if ( extensionPluginId != null && extensionPluginId . length ( ) > 0 ) { extensionString = extensionPluginId + "/.*" ; } if ( extensionString != null ) { final IIdentifier id = activityManager . getIdentifier ( extensionString ) ; if ( id != null ) { boolean enabled = id . isEnabled ( ) ; if ( ! id . isEnabled ( ) ) { id . addIdentifierListener ( identifierListener ) ; } return enabled ; } } return true ; } private static void loadPairFinders ( ) { IExtensionRegistry registry = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = registry . getExtensionPoint ( PAIRFINDER_ID ) ; if ( ep != null ) { IExtension [ ] extensions = ep . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] elements = extension . getConfigurationElements ( ) ; for ( int j = 0 ; j < elements . length ; j ++ ) { IConfigurationElement element = elements [ j ] ; String elementName = element . getName ( ) ; if ( ! isActivityEnabled ( element ) ) { continue ; } else if ( elementName . equals ( TAG_PAIR_FINDER ) ) { String finderClass = element . getAttribute ( ATTR_CLASS ) ; String language = element . getAttribute ( ATTR_LANGUAGE ) ; if ( finderClass != null && language != null && language . length ( ) > 0 ) { InstanceCreator creator = new InstanceCreator ( element , ATTR_CLASS ) ; pairFinders . put ( language , creator ) ; } } } } } } private static void loadCodeFormatters ( ) { IExtensionRegistry registry = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = registry . getExtensionPoint ( FORMATTER_ID ) ; if ( ep != null ) { IExtension [ ] extensions = ep . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] elements = extension . getConfigurationElements ( ) ; for ( int j = 0 ; j < elements . length ; j ++ ) { IConfigurationElement element = elements [ j ] ; String elementName = element . getName ( ) ; if ( ! isActivityEnabled ( element ) ) { continue ; } else if ( elementName . equals ( TAG_FORMATTER ) ) { String finderClass = element . getAttribute ( ATTR_CLASS ) ; String language = element . getAttribute ( ATTR_LANGUAGE ) ; if ( finderClass != null && language != null && language . length ( ) > 0 ) { InstanceCreator creator = new InstanceCreator ( element , ATTR_CLASS ) ; formatters . put ( language , creator ) ; } } } } } } public static void registerLanguageColorizer ( String language , LanguageColorizer colorizer ) { if ( ! languageColorizers . containsKey ( language ) ) { languageColorizers . put ( language , colorizer ) ; } else { LanguageColorizer curr = languageColorizers . get ( language ) ; curr . setCategoryColorizers ( colorizer ) ; curr . setTokenColorizers ( colorizer ) ; curr . setBackground ( colorizer . getBackground ( ) ) ; curr . setCaretColor ( colorizer . getCaretColor ( ) ) ; curr . setLineHighlightColor ( colorizer . getLineHighlightColor ( ) ) ; curr . setSelectionBackground ( colorizer . getSelectionBackground ( ) ) ; curr . setSelectionForeground ( colorizer . getSelectionForeground ( ) ) ; curr . setFoldingBg ( colorizer . getFoldingBg ( ) ) ; curr . setFoldingFg ( colorizer . getFoldingFg ( ) ) ; } } public static void registerParser ( String language , IParser parser ) { ParsingRegistry . registerParser ( language , parser ) ; } public static void registerScanner ( String language , IParser parser ) { ParsingRegistry . registerScanner ( language , parser ) ; } public static void registerTokenList ( TokenList tokenList ) { ParsingRegistry . registerTokenList ( tokenList ) ; } public static void registerTokenList ( TokenList tokenList , String fileExtension ) { ParsingRegistry . registerTokenList ( tokenList , fileExtension ) ; } public static void restoreDefaultColorization ( String language ) { colorizerReader . restoreDefault ( language ) ; } public static void setPreferenceId ( String language , String preferenceId ) { colorizerReader . setPreferenceId ( language , preferenceId ) ; } public static void unregisterLanguageColorizer ( String language ) { LanguageColorizer curr = languageColorizers . remove ( language ) ; if ( curr != null ) { LanguageColorizer colorizer = new LanguageColorizer ( curr . getLanguage ( ) ) ; curr . setCategoryColorizers ( colorizer ) ; curr . setTokenColorizers ( colorizer ) ; curr . setBackground ( colorizer . getBackground ( ) ) ; curr . setCaretColor ( colorizer . getCaretColor ( ) ) ; curr . setLineHighlightColor ( colorizer . getLineHighlightColor ( ) ) ; curr . setSelectionBackground ( colorizer . getSelectionBackground ( ) ) ; curr . setSelectionForeground ( colorizer . getSelectionForeground ( ) ) ; } } public static void unregisterParser ( String language ) { ParsingRegistry . unregisterParser ( language ) ; } public static void unregisterScanner ( String language ) { ParsingRegistry . unregisterScanner ( language ) ; } public static void clearTokenList ( String language ) { ParsingRegistry . clearTokenList ( language ) ; } public static void unregisterTokenList ( TokenList tokenList ) { ParsingRegistry . unregisterTokenList ( tokenList ) ; } } 