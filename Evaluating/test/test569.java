<<<<<<< HEAD
public class HttpServerSettingsTab extends AbstractLaunchConfigurationTab { private class PathElement { protected boolean enabled ; protected String serverPath ; protected String localPath ; protected PathElement ( boolean enabled , String serverPath , String localPath ) { this . enabled = enabled ; this . serverPath = serverPath ; this . localPath = localPath ; } } private class TableLabelProvider extends LabelProvider implements ITableLabelProvider { public Image getColumnImage ( Object element , int columnIndex ) { return null ; } public String getColumnText ( Object element , int columnIndex ) { if ( element instanceof PathElement ) { PathElement pathElement = ( PathElement ) element ; switch ( columnIndex ) { case 1 : return pathElement . serverPath ; case 2 : return pathElement . localPath ; default : } } return null ; } } private Image image ; private CheckboxTableViewer fListViewer ; private Button fAddButton ; private Button fRemoveButton ; private Button fEditButton ; private List < PathElement > elements ; public void createControl ( Composite parent ) { Composite composite = new Composite ( parent , SWT . NONE ) ; composite . setFont ( parent . getFont ( ) ) ; composite . setLayout ( new GridLayout ( 2 , false ) ) ; composite . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label label = new Label ( composite , SWT . NONE ) ; label . setText ( Messages . HttpServerSettingsTab_WebServerPathConfiguration ) ; label . setFont ( parent . getFont ( ) ) ; label . setLayoutData ( new GridData ( SWT . LEFT , SWT . CENTER , false , false , 2 , 1 ) ) ; fListViewer = CheckboxTableViewer . newCheckList ( composite , SWT . CHECK | SWT . BORDER | SWT . MULTI | SWT . FULL_SELECTION ) ; Table table = fListViewer . getTable ( ) ; table . setHeaderVisible ( true ) ; table . setLinesVisible ( true ) ; TableColumn [ ] columns = new TableColumn [ ] { new TableColumn ( table , SWT . NONE ) , new TableColumn ( table , SWT . NONE ) , new TableColumn ( table , SWT . NONE ) , } ; columns [ 1 ] . setText ( Messages . HttpServerSettingsTab_ServerPath ) ; columns [ 2 ] . setText ( Messages . HttpServerSettingsTab_WorkspacePath ) ; TableLayout tableLayout = new TableLayout ( ) ; tableLayout . addColumnData ( new ColumnPixelData ( 24 ) ) ; tableLayout . addColumnData ( new ColumnWeightData ( 40 ) ) ; tableLayout . addColumnData ( new ColumnWeightData ( 60 ) ) ; table . setLayout ( tableLayout ) ; fListViewer . setContentProvider ( new ArrayContentProvider ( ) ) ; fListViewer . setLabelProvider ( new TableLabelProvider ( ) ) ; table . setFont ( parent . getFont ( ) ) ; table . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Composite buttonContainer = new Composite ( composite , SWT . NONE ) ; buttonContainer . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , false ) ) ; GridLayout buttonLayout = new GridLayout ( 1 , false ) ; buttonLayout . marginHeight = 0 ; buttonLayout . marginWidth = 0 ; buttonContainer . setLayout ( buttonLayout ) ; GridData data ; fAddButton = new Button ( buttonContainer , SWT . PUSH ) ; fAddButton . setText ( StringUtils . ellipsify ( Messages . HttpServerSettingsTab_Add ) ) ; fAddButton . setToolTipText ( Messages . HttpServerSettingsTab_AddServerPath ) ; fAddButton . setFont ( parent . getFont ( ) ) ; data = new GridData ( SWT . FILL , SWT . DEFAULT ) ; data . widthHint = Math . max ( new PixelConverter ( fAddButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , fAddButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; fAddButton . setLayoutData ( data ) ; fEditButton = new Button ( buttonContainer , SWT . PUSH ) ; fEditButton . setText ( StringUtils . ellipsify ( Messages . HttpServerSettingsTab_Edit ) ) ; fEditButton . setToolTipText ( Messages . HttpServerSettingsTab_EditSelectedPath ) ; fEditButton . setFont ( parent . getFont ( ) ) ; data = new GridData ( SWT . FILL , SWT . DEFAULT ) ; data . widthHint = Math . max ( new PixelConverter ( fEditButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , fEditButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; fEditButton . setLayoutData ( data ) ; fRemoveButton = new Button ( buttonContainer , SWT . PUSH ) ; fRemoveButton . setText ( Messages . HttpServerSettingsTab_Remove ) ; fRemoveButton . setToolTipText ( Messages . HttpServerSettingsTab_RemoveSelectedPath ) ; fRemoveButton . setFont ( parent . getFont ( ) ) ; data = new GridData ( SWT . FILL , SWT . DEFAULT ) ; data . widthHint = Math . max ( new PixelConverter ( fRemoveButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , fRemoveButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; fRemoveButton . setLayoutData ( data ) ; fListViewer . addCheckStateListener ( new ICheckStateListener ( ) { public void checkStateChanged ( CheckStateChangedEvent event ) { ( ( PathElement ) event . getElement ( ) ) . enabled = event . getChecked ( ) ; setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fListViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { updatePage ( ( IStructuredSelection ) event . getSelection ( ) ) ; } } ) ; fListViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { public void doubleClick ( DoubleClickEvent event ) { if ( ! event . getSelection ( ) . isEmpty ( ) ) { editPath ( ) ; } } } ) ; table . addKeyListener ( new KeyAdapter ( ) { public void keyPressed ( KeyEvent event ) { if ( event . character == SWT . DEL && event . stateMask == 0 ) { removePaths ( ) ; } } } ) ; fAddButton . addListener ( SWT . Selection , new Listener ( ) { public void handleEvent ( Event e ) { addPath ( ) ; } } ) ; fEditButton . addListener ( SWT . Selection , new Listener ( ) { public void handleEvent ( Event e ) { editPath ( ) ; } } ) ; fEditButton . setEnabled ( false ) ; fRemoveButton . addListener ( SWT . Selection , new Listener ( ) { public void handleEvent ( Event e ) { removePaths ( ) ; } } ) ; fRemoveButton . setEnabled ( false ) ; setControl ( composite ) ; PreferenceUtils . persist ( DebugUiPlugin . getDefault ( ) . getPreferenceStore ( ) , table , "httpServerSettings" ) ; } private void addPath ( ) { HttpServerPathDialog dlg = new HttpServerPathDialog ( getShell ( ) , Messages . HttpServerSettingsTab_AddNewPath ) ; if ( dlg . open ( ) == Window . OK ) { PathElement element = new PathElement ( true , dlg . getServerPath ( ) , dlg . getWorkspaceResource ( ) . getFullPath ( ) . toPortableString ( ) ) ; elements . add ( element ) ; fListViewer . refresh ( ) ; fListViewer . setSelection ( new StructuredSelection ( element ) ) ; refreshViewer ( ) ; setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } private void editPath ( ) { PathElement element = ( PathElement ) ( ( IStructuredSelection ) fListViewer . getSelection ( ) ) . getFirstElement ( ) ; if ( element == null ) { return ; } HttpServerPathDialog dlg = new HttpServerPathDialog ( getShell ( ) , Messages . HttpServerSettingsTab_EditPath ) ; dlg . setServerPath ( element . serverPath ) ; dlg . setWorkspaceResource ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( new Path ( element . localPath ) ) ) ; if ( dlg . open ( ) == Window . OK ) { element . serverPath = dlg . getServerPath ( ) ; element . localPath = dlg . getWorkspaceResource ( ) . getFullPath ( ) . toPortableString ( ) ; element . enabled = true ; fListViewer . update ( element , null ) ; refreshViewer ( ) ; setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } private void removePaths ( ) { IStructuredSelection selection = ( IStructuredSelection ) fListViewer . getSelection ( ) ; Object first = selection . getFirstElement ( ) ; int index = - 1 ; for ( int i = 0 ; i < elements . size ( ) ; i ++ ) { Object object = elements . get ( i ) ; if ( object . equals ( first ) ) { index = i ; break ; } } elements . removeAll ( selection . toList ( ) ) ; if ( index > elements . size ( ) - 1 ) { index = elements . size ( ) - 1 ; } if ( index >= 0 ) { fListViewer . setSelection ( new StructuredSelection ( elements . get ( index ) ) ) ; } setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } private void refreshViewer ( ) { ArrayList < PathElement > checkedElements = new ArrayList < PathElement > ( ) ; for ( Iterator i = elements . iterator ( ) ; i . hasNext ( ) ; ) { PathElement pathElement = ( PathElement ) i . next ( ) ; if ( pathElement . enabled ) { checkedElements . add ( pathElement ) ; } } fListViewer . setAllChecked ( false ) ; fListViewer . setCheckedElements ( checkedElements . toArray ( new PathElement [ checkedElements . size ( ) ] ) ) ; } private void updatePage ( IStructuredSelection selection ) { fRemoveButton . setEnabled ( ! selection . isEmpty ( ) ) ; fEditButton . setEnabled ( selection . size ( ) == 1 ) ; } public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { configuration . setAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_PATHS_MAPPING , StringUtils . EMPTY ) ; } public void initializeFrom ( ILaunchConfiguration configuration ) { try { String [ ] list = JSDebugOptionsManager . parseList ( configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_PATHS_MAPPING , StringUtils . EMPTY ) ) ; elements = new ArrayList < PathElement > ( ) ; for ( int i = 0 , length = list . length ; i < length ; ) { String serverPath = list [ i ++ ] ; String localPath = list [ i ++ ] ; boolean enabled = ! "0" . equals ( list [ i ++ ] ) ; elements . add ( new PathElement ( enabled , serverPath , localPath ) ) ; } fListViewer . setInput ( elements ) ; refreshViewer ( ) ; } catch ( CoreException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , "Reading launch configuration fails" , e ) ; } } public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { String [ ] values = new String [ elements . size ( ) * 3 ] ; int index = 0 ; for ( Iterator i = elements . iterator ( ) ; i . hasNext ( ) ; ) { PathElement element = ( PathElement ) i . next ( ) ; values [ index ++ ] = element . serverPath ; values [ index ++ ] = element . localPath ; values [ index ++ ] = element . enabled ? "1" : "0" ; } configuration . setAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_PATHS_MAPPING , JSDebugOptionsManager . serializeList ( values ) ) ; } public String getName ( ) { return Messages . HttpServerSettingsTab_Title ; } public Image getImage ( ) { if ( image == null ) { image = DebugUiPlugin . getImageDescriptor ( "icons/full/obj16/launch-tree.gif" ) . createImage ( ) ; } return image ; } public void dispose ( ) { if ( image != null ) { image . dispose ( ) ; } super . dispose ( ) ; } } 
=======
public class XmlName extends AbstractDatatype { public static boolean isNameStart ( char c ) { return ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'À' && c <= 'Ö' ) || ( c >= 'Ø' && c <= 'ö' ) || ( c >= 'ø' && c <= 'ÿ' ) || ( c >= 'Ā' && c <= 'ı' ) || ( c >= 'Ĵ' && c <= 'ľ' ) || ( c >= 'Ł' && c <= 'ň' ) || ( c >= 'Ŋ' && c <= 'ž' ) || ( c >= 'ƀ' && c <= 'ǃ' ) || ( c >= 'Ǎ' && c <= 'ǰ' ) || ( c >= 'Ǵ' && c <= 'ǵ' ) || ( c >= 'Ǻ' && c <= 'ȗ' ) || ( c >= 'ɐ' && c <= 'ʨ' ) || ( c >= 'ʻ' && c <= 'ˁ' ) || ( c == 'Ά' ) || ( c >= 'Έ' && c <= 'Ί' ) || ( c == 'Ό' ) || ( c >= 'Ύ' && c <= 'Ρ' ) || ( c >= 'Σ' && c <= 'ώ' ) || ( c >= 'ϐ' && c <= 'ϖ' ) || ( c == 'Ϛ' ) || ( c == 'Ϝ' ) || ( c == 'Ϟ' ) || ( c == 'Ϡ' ) || ( c >= 'Ϣ' && c <= 'ϳ' ) || ( c >= 'Ё' && c <= 'Ќ' ) || ( c >= 'Ў' && c <= 'я' ) || ( c >= 'ё' && c <= 'ќ' ) || ( c >= 'ў' && c <= 'ҁ' ) || ( c >= 'Ґ' && c <= 'ӄ' ) || ( c >= 'Ӈ' && c <= 'ӈ' ) || ( c >= 'Ӌ' && c <= 'ӌ' ) || ( c >= 'Ӑ' && c <= 'ӫ' ) || ( c >= 'Ӯ' && c <= 'ӵ' ) || ( c >= 'Ӹ' && c <= 'ӹ' ) || ( c >= 'Ա' && c <= 'Ֆ' ) || ( c == 'ՙ' ) || ( c >= 'ա' && c <= 'ֆ' ) || ( c >= 'א' && c <= 'ת' ) || ( c >= 'װ' && c <= 'ײ' ) || ( c >= 'ء' && c <= 'غ' ) || ( c >= 'ف' && c <= 'ي' ) || ( c >= 'ٱ' && c <= 'ڷ' ) || ( c >= 'ں' && c <= 'ھ' ) || ( c >= 'ۀ' && c <= 'ێ' ) || ( c >= 'ې' && c <= 'ۓ' ) || ( c == 'ە' ) || ( c >= 'ۥ' && c <= 'ۦ' ) || ( c >= 'अ' && c <= 'ह' ) || ( c == 'ऽ' ) || ( c >= 'क़' && c <= 'ॡ' ) || ( c >= 'অ' && c <= 'ঌ' ) || ( c >= 'এ' && c <= 'ঐ' ) || ( c >= 'ও' && c <= 'ন' ) || ( c >= 'প' && c <= 'র' ) || ( c == 'ল' ) || ( c >= 'শ' && c <= 'হ' ) || ( c >= 'ড়' && c <= 'ঢ়' ) || ( c >= 'য়' && c <= 'ৡ' ) || ( c >= 'ৰ' && c <= 'ৱ' ) || ( c >= 'ਅ' && c <= 'ਊ' ) || ( c >= 'ਏ' && c <= 'ਐ' ) || ( c >= 'ਓ' && c <= 'ਨ' ) || ( c >= 'ਪ' && c <= 'ਰ' ) || ( c >= 'ਲ' && c <= 'ਲ਼' ) || ( c >= 'ਵ' && c <= 'ਸ਼' ) || ( c >= 'ਸ' && c <= 'ਹ' ) || ( c >= 'ਖ਼' && c <= 'ੜ' ) || ( c == 'ਫ਼' ) || ( c >= 'ੲ' && c <= 'ੴ' ) || ( c >= 'અ' && c <= 'ઋ' ) || ( c == 'ઍ' ) || ( c >= 'એ' && c <= 'ઑ' ) || ( c >= 'ઓ' && c <= 'ન' ) || ( c >= 'પ' && c <= 'ર' ) || ( c >= 'લ' && c <= 'ળ' ) || ( c >= 'વ' && c <= 'હ' ) || ( c == 'ઽ' ) || ( c == 'ૠ' ) || ( c >= 'ଅ' && c <= 'ଌ' ) || ( c >= 'ଏ' && c <= 'ଐ' ) || ( c >= 'ଓ' && c <= 'ନ' ) || ( c >= 'ପ' && c <= 'ର' ) || ( c >= 'ଲ' && c <= 'ଳ' ) || ( c >= 'ଶ' && c <= 'ହ' ) || ( c == 'ଽ' ) || ( c >= 'ଡ଼' && c <= 'ଢ଼' ) || ( c >= 'ୟ' && c <= 'ୡ' ) || ( c >= 'அ' && c <= 'ஊ' ) || ( c >= 'எ' && c <= 'ஐ' ) || ( c >= 'ஒ' && c <= 'க' ) || ( c >= 'ங' && c <= 'ச' ) || ( c == 'ஜ' ) || ( c >= 'ஞ' && c <= 'ட' ) || ( c >= 'ண' && c <= 'த' ) || ( c >= 'ந' && c <= 'ப' ) || ( c >= 'ம' && c <= 'வ' ) || ( c >= 'ஷ' && c <= 'ஹ' ) || ( c >= 'అ' && c <= 'ఌ' ) || ( c >= 'ఎ' && c <= 'ఐ' ) || ( c >= 'ఒ' && c <= 'న' ) || ( c >= 'ప' && c <= 'ళ' ) || ( c >= 'వ' && c <= 'హ' ) || ( c >= 'ౠ' && c <= 'ౡ' ) || ( c >= 'ಅ' && c <= 'ಌ' ) || ( c >= 'ಎ' && c <= 'ಐ' ) || ( c >= 'ಒ' && c <= 'ನ' ) || ( c >= 'ಪ' && c <= 'ಳ' ) || ( c >= 'ವ' && c <= 'ಹ' ) || ( c == 'ೞ' ) || ( c >= 'ೠ' && c <= 'ೡ' ) || ( c >= 'അ' && c <= 'ഌ' ) || ( c >= 'എ' && c <= 'ഐ' ) || ( c >= 'ഒ' && c <= 'ന' ) || ( c >= 'പ' && c <= 'ഹ' ) || ( c >= 'ൠ' && c <= 'ൡ' ) || ( c >= 'ก' && c <= 'ฮ' ) || ( c == 'ะ' ) || ( c >= 'า' && c <= 'ำ' ) || ( c >= 'เ' && c <= 'ๅ' ) || ( c >= 'ກ' && c <= 'ຂ' ) || ( c == 'ຄ' ) || ( c >= 'ງ' && c <= 'ຈ' ) || ( c == 'ຊ' ) || ( c == 'ຍ' ) || ( c >= 'ດ' && c <= 'ທ' ) || ( c >= 'ນ' && c <= 'ຟ' ) || ( c >= 'ມ' && c <= 'ຣ' ) || ( c == 'ລ' ) || ( c == 'ວ' ) || ( c >= 'ສ' && c <= 'ຫ' ) || ( c >= 'ອ' && c <= 'ຮ' ) || ( c == 'ະ' ) || ( c >= 'າ' && c <= 'ຳ' ) || ( c == 'ຽ' ) || ( c >= 'ເ' && c <= 'ໄ' ) || ( c >= 'ཀ' && c <= 'ཇ' ) || ( c >= 'ཉ' && c <= 'ཀྵ' ) || ( c >= 'Ⴀ' && c <= 'Ⴥ' ) || ( c >= 'ა' && c <= 'ჶ' ) || ( c == 'ᄀ' ) || ( c >= 'ᄂ' && c <= 'ᄃ' ) || ( c >= 'ᄅ' && c <= 'ᄇ' ) || ( c == 'ᄉ' ) || ( c >= 'ᄋ' && c <= 'ᄌ' ) || ( c >= 'ᄎ' && c <= 'ᄒ' ) || ( c == 'ᄼ' ) || ( c == 'ᄾ' ) || ( c == 'ᅀ' ) || ( c == 'ᅌ' ) || ( c == 'ᅎ' ) || ( c == 'ᅐ' ) || ( c >= 'ᅔ' && c <= 'ᅕ' ) || ( c == 'ᅙ' ) || ( c >= 'ᅟ' && c <= 'ᅡ' ) || ( c == 'ᅣ' ) || ( c == 'ᅥ' ) || ( c == 'ᅧ' ) || ( c == 'ᅩ' ) || ( c >= 'ᅭ' && c <= 'ᅮ' ) || ( c >= 'ᅲ' && c <= 'ᅳ' ) || ( c == 'ᅵ' ) || ( c == 'ᆞ' ) || ( c == 'ᆨ' ) || ( c == 'ᆫ' ) || ( c >= 'ᆮ' && c <= 'ᆯ' ) || ( c >= 'ᆷ' && c <= 'ᆸ' ) || ( c == 'ᆺ' ) || ( c >= 'ᆼ' && c <= 'ᇂ' ) || ( c == 'ᇫ' ) || ( c == 'ᇰ' ) || ( c == 'ᇹ' ) || ( c >= 'Ḁ' && c <= 'ẛ' ) || ( c >= 'Ạ' && c <= 'ỹ' ) || ( c >= 'ἀ' && c <= 'ἕ' ) || ( c >= 'Ἐ' && c <= 'Ἕ' ) || ( c >= 'ἠ' && c <= 'ὅ' ) || ( c >= 'Ὀ' && c <= 'Ὅ' ) || ( c >= 'ὐ' && c <= 'ὗ' ) || ( c == 'Ὑ' ) || ( c == 'Ὓ' ) || ( c == 'Ὕ' ) || ( c >= 'Ὗ' && c <= 'ώ' ) || ( c >= 'ᾀ' && c <= 'ᾴ' ) || ( c >= 'ᾶ' && c <= 'ᾼ' ) || ( c == 'ι' ) || ( c >= 'ῂ' && c <= 'ῄ' ) || ( c >= 'ῆ' && c <= 'ῌ' ) || ( c >= 'ῐ' && c <= 'ΐ' ) || ( c >= 'ῖ' && c <= 'Ί' ) || ( c >= 'ῠ' && c <= 'Ῥ' ) || ( c >= 'ῲ' && c <= 'ῴ' ) || ( c >= 'ῶ' && c <= 'ῼ' ) || ( c == 'Ω' ) || ( c >= 'K' && c <= 'Å' ) || ( c == '℮' ) || ( c >= 'ↀ' && c <= 'ↂ' ) || ( c >= 'ぁ' && c <= 'ゔ' ) || ( c >= 'ァ' && c <= 'ヺ' ) || ( c >= 'ㄅ' && c <= 'ㄬ' ) || ( c >= '가' && c <= '힣' ) || ( c >= '一' && c <= '龥' ) || ( c == '〇' ) || ( c >= '〡' && c <= '〩' ) || ( c == '_' ) || ( c == ':' ) ) ; } public static boolean isNameTrail ( char c ) { return ( ( c >= '0' && c <= '9' ) || ( c >= '٠' && c <= '٩' ) || ( c >= '۰' && c <= '۹' ) || ( c >= '०' && c <= '९' ) || ( c >= '০' && c <= '৯' ) || ( c >= '੦' && c <= '੯' ) || ( c >= '૦' && c <= '૯' ) || ( c >= '୦' && c <= '୯' ) || ( c >= '௧' && c <= '௯' ) || ( c >= '౦' && c <= '౯' ) || ( c >= '೦' && c <= '೯' ) || ( c >= '൦' && c <= '൯' ) || ( c >= '๐' && c <= '๙' ) || ( c >= '໐' && c <= '໙' ) || ( c >= '༠' && c <= '༩' ) || ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'À' && c <= 'Ö' ) || ( c >= 'Ø' && c <= 'ö' ) || ( c >= 'ø' && c <= 'ÿ' ) || ( c >= 'Ā' && c <= 'ı' ) || ( c >= 'Ĵ' && c <= 'ľ' ) || ( c >= 'Ł' && c <= 'ň' ) || ( c >= 'Ŋ' && c <= 'ž' ) || ( c >= 'ƀ' && c <= 'ǃ' ) || ( c >= 'Ǎ' && c <= 'ǰ' ) || ( c >= 'Ǵ' && c <= 'ǵ' ) || ( c >= 'Ǻ' && c <= 'ȗ' ) || ( c >= 'ɐ' && c <= 'ʨ' ) || ( c >= 'ʻ' && c <= 'ˁ' ) || ( c == 'Ά' ) || ( c >= 'Έ' && c <= 'Ί' ) || ( c == 'Ό' ) || ( c >= 'Ύ' && c <= 'Ρ' ) || ( c >= 'Σ' && c <= 'ώ' ) || ( c >= 'ϐ' && c <= 'ϖ' ) || ( c == 'Ϛ' ) || ( c == 'Ϝ' ) || ( c == 'Ϟ' ) || ( c == 'Ϡ' ) || ( c >= 'Ϣ' && c <= 'ϳ' ) || ( c >= 'Ё' && c <= 'Ќ' ) || ( c >= 'Ў' && c <= 'я' ) || ( c >= 'ё' && c <= 'ќ' ) || ( c >= 'ў' && c <= 'ҁ' ) || ( c >= 'Ґ' && c <= 'ӄ' ) || ( c >= 'Ӈ' && c <= 'ӈ' ) || ( c >= 'Ӌ' && c <= 'ӌ' ) || ( c >= 'Ӑ' && c <= 'ӫ' ) || ( c >= 'Ӯ' && c <= 'ӵ' ) || ( c >= 'Ӹ' && c <= 'ӹ' ) || ( c >= 'Ա' && c <= 'Ֆ' ) || ( c == 'ՙ' ) || ( c >= 'ա' && c <= 'ֆ' ) || ( c >= 'א' && c <= 'ת' ) || ( c >= 'װ' && c <= 'ײ' ) || ( c >= 'ء' && c <= 'غ' ) || ( c >= 'ف' && c <= 'ي' ) || ( c >= 'ٱ' && c <= 'ڷ' ) || ( c >= 'ں' && c <= 'ھ' ) || ( c >= 'ۀ' && c <= 'ێ' ) || ( c >= 'ې' && c <= 'ۓ' ) || ( c == 'ە' ) || ( c >= 'ۥ' && c <= 'ۦ' ) || ( c >= 'अ' && c <= 'ह' ) || ( c == 'ऽ' ) || ( c >= 'क़' && c <= 'ॡ' ) || ( c >= 'অ' && c <= 'ঌ' ) || ( c >= 'এ' && c <= 'ঐ' ) || ( c >= 'ও' && c <= 'ন' ) || ( c >= 'প' && c <= 'র' ) || ( c == 'ল' ) || ( c >= 'শ' && c <= 'হ' ) || ( c >= 'ড়' && c <= 'ঢ়' ) || ( c >= 'য়' && c <= 'ৡ' ) || ( c >= 'ৰ' && c <= 'ৱ' ) || ( c >= 'ਅ' && c <= 'ਊ' ) || ( c >= 'ਏ' && c <= 'ਐ' ) || ( c >= 'ਓ' && c <= 'ਨ' ) || ( c >= 'ਪ' && c <= 'ਰ' ) || ( c >= 'ਲ' && c <= 'ਲ਼' ) || ( c >= 'ਵ' && c <= 'ਸ਼' ) || ( c >= 'ਸ' && c <= 'ਹ' ) || ( c >= 'ਖ਼' && c <= 'ੜ' ) || ( c == 'ਫ਼' ) || ( c >= 'ੲ' && c <= 'ੴ' ) || ( c >= 'અ' && c <= 'ઋ' ) || ( c == 'ઍ' ) || ( c >= 'એ' && c <= 'ઑ' ) || ( c >= 'ઓ' && c <= 'ન' ) || ( c >= 'પ' && c <= 'ર' ) || ( c >= 'લ' && c <= 'ળ' ) || ( c >= 'વ' && c <= 'હ' ) || ( c == 'ઽ' ) || ( c == 'ૠ' ) || ( c >= 'ଅ' && c <= 'ଌ' ) || ( c >= 'ଏ' && c <= 'ଐ' ) || ( c >= 'ଓ' && c <= 'ନ' ) || ( c >= 'ପ' && c <= 'ର' ) || ( c >= 'ଲ' && c <= 'ଳ' ) || ( c >= 'ଶ' && c <= 'ହ' ) || ( c == 'ଽ' ) || ( c >= 'ଡ଼' && c <= 'ଢ଼' ) || ( c >= 'ୟ' && c <= 'ୡ' ) || ( c >= 'அ' && c <= 'ஊ' ) || ( c >= 'எ' && c <= 'ஐ' ) || ( c >= 'ஒ' && c <= 'க' ) || ( c >= 'ங' && c <= 'ச' ) || ( c == 'ஜ' ) || ( c >= 'ஞ' && c <= 'ட' ) || ( c >= 'ண' && c <= 'த' ) || ( c >= 'ந' && c <= 'ப' ) || ( c >= 'ம' && c <= 'வ' ) || ( c >= 'ஷ' && c <= 'ஹ' ) || ( c >= 'అ' && c <= 'ఌ' ) || ( c >= 'ఎ' && c <= 'ఐ' ) || ( c >= 'ఒ' && c <= 'న' ) || ( c >= 'ప' && c <= 'ళ' ) || ( c >= 'వ' && c <= 'హ' ) || ( c >= 'ౠ' && c <= 'ౡ' ) || ( c >= 'ಅ' && c <= 'ಌ' ) || ( c >= 'ಎ' && c <= 'ಐ' ) || ( c >= 'ಒ' && c <= 'ನ' ) || ( c >= 'ಪ' && c <= 'ಳ' ) || ( c >= 'ವ' && c <= 'ಹ' ) || ( c == 'ೞ' ) || ( c >= 'ೠ' && c <= 'ೡ' ) || ( c >= 'അ' && c <= 'ഌ' ) || ( c >= 'എ' && c <= 'ഐ' ) || ( c >= 'ഒ' && c <= 'ന' ) || ( c >= 'പ' && c <= 'ഹ' ) || ( c >= 'ൠ' && c <= 'ൡ' ) || ( c >= 'ก' && c <= 'ฮ' ) || ( c == 'ะ' ) || ( c >= 'า' && c <= 'ำ' ) || ( c >= 'เ' && c <= 'ๅ' ) || ( c >= 'ກ' && c <= 'ຂ' ) || ( c == 'ຄ' ) || ( c >= 'ງ' && c <= 'ຈ' ) || ( c == 'ຊ' ) || ( c == 'ຍ' ) || ( c >= 'ດ' && c <= 'ທ' ) || ( c >= 'ນ' && c <= 'ຟ' ) || ( c >= 'ມ' && c <= 'ຣ' ) || ( c == 'ລ' ) || ( c == 'ວ' ) || ( c >= 'ສ' && c <= 'ຫ' ) || ( c >= 'ອ' && c <= 'ຮ' ) || ( c == 'ະ' ) || ( c >= 'າ' && c <= 'ຳ' ) || ( c == 'ຽ' ) || ( c >= 'ເ' && c <= 'ໄ' ) || ( c >= 'ཀ' && c <= 'ཇ' ) || ( c >= 'ཉ' && c <= 'ཀྵ' ) || ( c >= 'Ⴀ' && c <= 'Ⴥ' ) || ( c >= 'ა' && c <= 'ჶ' ) || ( c == 'ᄀ' ) || ( c >= 'ᄂ' && c <= 'ᄃ' ) || ( c >= 'ᄅ' && c <= 'ᄇ' ) || ( c == 'ᄉ' ) || ( c >= 'ᄋ' && c <= 'ᄌ' ) || ( c >= 'ᄎ' && c <= 'ᄒ' ) || ( c == 'ᄼ' ) || ( c == 'ᄾ' ) || ( c == 'ᅀ' ) || ( c == 'ᅌ' ) || ( c == 'ᅎ' ) || ( c == 'ᅐ' ) || ( c >= 'ᅔ' && c <= 'ᅕ' ) || ( c == 'ᅙ' ) || ( c >= 'ᅟ' && c <= 'ᅡ' ) || ( c == 'ᅣ' ) || ( c == 'ᅥ' ) || ( c == 'ᅧ' ) || ( c == 'ᅩ' ) || ( c >= 'ᅭ' && c <= 'ᅮ' ) || ( c >= 'ᅲ' && c <= 'ᅳ' ) || ( c == 'ᅵ' ) || ( c == 'ᆞ' ) || ( c == 'ᆨ' ) || ( c == 'ᆫ' ) || ( c >= 'ᆮ' && c <= 'ᆯ' ) || ( c >= 'ᆷ' && c <= 'ᆸ' ) || ( c == 'ᆺ' ) || ( c >= 'ᆼ' && c <= 'ᇂ' ) || ( c == 'ᇫ' ) || ( c == 'ᇰ' ) || ( c == 'ᇹ' ) || ( c >= 'Ḁ' && c <= 'ẛ' ) || ( c >= 'Ạ' && c <= 'ỹ' ) || ( c >= 'ἀ' && c <= 'ἕ' ) || ( c >= 'Ἐ' && c <= 'Ἕ' ) || ( c >= 'ἠ' && c <= 'ὅ' ) || ( c >= 'Ὀ' && c <= 'Ὅ' ) || ( c >= 'ὐ' && c <= 'ὗ' ) || ( c == 'Ὑ' ) || ( c == 'Ὓ' ) || ( c == 'Ὕ' ) || ( c >= 'Ὗ' && c <= 'ώ' ) || ( c >= 'ᾀ' && c <= 'ᾴ' ) || ( c >= 'ᾶ' && c <= 'ᾼ' ) || ( c == 'ι' ) || ( c >= 'ῂ' && c <= 'ῄ' ) || ( c >= 'ῆ' && c <= 'ῌ' ) || ( c >= 'ῐ' && c <= 'ΐ' ) || ( c >= 'ῖ' && c <= 'Ί' ) || ( c >= 'ῠ' && c <= 'Ῥ' ) || ( c >= 'ῲ' && c <= 'ῴ' ) || ( c >= 'ῶ' && c <= 'ῼ' ) || ( c == 'Ω' ) || ( c >= 'K' && c <= 'Å' ) || ( c == '℮' ) || ( c >= 'ↀ' && c <= 'ↂ' ) || ( c >= 'ぁ' && c <= 'ゔ' ) || ( c >= 'ァ' && c <= 'ヺ' ) || ( c >= 'ㄅ' && c <= 'ㄬ' ) || ( c >= '가' && c <= '힣' ) || ( c >= '一' && c <= '龥' ) || ( c == '〇' ) || ( c >= '〡' && c <= '〩' ) || ( c == '_' ) || ( c == ':' ) || ( c == '.' ) || ( c == '-' ) || ( c >= '̀' && c <= 'ͅ' ) || ( c >= '͠' && c <= '͡' ) || ( c >= '҃' && c <= '҆' ) || ( c >= '֑' && c <= '֡' ) || ( c >= '֣' && c <= 'ֹ' ) || ( c >= 'ֻ' && c <= 'ֽ' ) || ( c == 'ֿ' ) || ( c >= 'ׁ' && c <= 'ׂ' ) || ( c == 'ׄ' ) || ( c >= 'ً' && c <= 'ْ' ) || ( c == 'ٰ' ) || ( c >= 'ۖ' && c <= 'ۜ' ) || ( c >= '۝' && c <= '۟' ) || ( c >= '۠' && c <= 'ۤ' ) || ( c >= 'ۧ' && c <= 'ۨ' ) || ( c >= '۪' && c <= 'ۭ' ) || ( c >= 'ँ' && c <= 'ः' ) || ( c == '़' ) || ( c >= 'ा' && c <= 'ौ' ) || ( c == '्' ) || ( c >= '॑' && c <= '॔' ) || ( c >= 'ॢ' && c <= 'ॣ' ) || ( c >= 'ঁ' && c <= 'ঃ' ) || ( c == '়' ) || ( c == 'া' ) || ( c == 'ি' ) || ( c >= 'ী' && c <= 'ৄ' ) || ( c >= 'ে' && c <= 'ৈ' ) || ( c >= 'ো' && c <= '্' ) || ( c == 'ৗ' ) || ( c >= 'ৢ' && c <= 'ৣ' ) || ( c == 'ਂ' ) || ( c == '਼' ) || ( c == 'ਾ' ) || ( c == 'ਿ' ) || ( c >= 'ੀ' && c <= 'ੂ' ) || ( c >= 'ੇ' && c <= 'ੈ' ) || ( c >= 'ੋ' && c <= '੍' ) || ( c >= 'ੰ' && c <= 'ੱ' ) || ( c >= 'ઁ' && c <= 'ઃ' ) || ( c == '઼' ) || ( c >= 'ા' && c <= 'ૅ' ) || ( c >= 'ે' && c <= 'ૉ' ) || ( c >= 'ો' && c <= '્' ) || ( c >= 'ଁ' && c <= 'ଃ' ) || ( c == '଼' ) || ( c >= 'ା' && c <= 'ୃ' ) || ( c >= 'େ' && c <= 'ୈ' ) || ( c >= 'ୋ' && c <= '୍' ) || ( c >= 'ୖ' && c <= 'ୗ' ) || ( c >= 'ஂ' && c <= 'ஃ' ) || ( c >= 'ா' && c <= 'ூ' ) || ( c >= 'ெ' && c <= 'ை' ) || ( c >= 'ொ' && c <= '்' ) || ( c == 'ௗ' ) || ( c >= 'ఁ' && c <= 'ః' ) || ( c >= 'ా' && c <= 'ౄ' ) || ( c >= 'ె' && c <= 'ై' ) || ( c >= 'ొ' && c <= '్' ) || ( c >= 'ౕ' && c <= 'ౖ' ) || ( c >= 'ಂ' && c <= 'ಃ' ) || ( c >= 'ಾ' && c <= 'ೄ' ) || ( c >= 'ೆ' && c <= 'ೈ' ) || ( c >= 'ೊ' && c <= '್' ) || ( c >= 'ೕ' && c <= 'ೖ' ) || ( c >= 'ം' && c <= 'ഃ' ) || ( c >= 'ാ' && c <= 'ൃ' ) || ( c >= 'െ' && c <= 'ൈ' ) || ( c >= 'ൊ' && c <= '്' ) || ( c == 'ൗ' ) || ( c == 'ั' ) || ( c >= 'ิ' && c <= 'ฺ' ) || ( c >= '็' && c <= '๎' ) || ( c == 'ັ' ) || ( c >= 'ິ' && c <= 'ູ' ) || ( c >= 'ົ' && c <= 'ຼ' ) || ( c >= '່' && c <= 'ໍ' ) || ( c >= '༘' && c <= '༙' ) || ( c == '༵' ) || ( c == '༷' ) || ( c == '༹' ) || ( c == '༾' ) || ( c == '༿' ) || ( c >= 'ཱ' && c <= '྄' ) || ( c >= '྆' && c <= 'ྋ' ) || ( c >= 'ྐ' && c <= 'ྕ' ) || ( c == 'ྗ' ) || ( c >= 'ྙ' && c <= 'ྭ' ) || ( c >= 'ྱ' && c <= 'ྷ' ) || ( c == 'ྐྵ' ) || ( c >= '⃐' && c <= '⃜' ) || ( c == '⃡' ) || ( c >= '〪' && c <= '〯' ) || ( c == '゙' ) || ( c == '゚' ) || ( c == '·' ) || ( c == 'ː' ) || ( c == 'ˑ' ) || ( c == '·' ) || ( c == 'ـ' ) || ( c == 'ๆ' ) || ( c == 'ໆ' ) || ( c == '々' ) || ( c >= '〱' && c <= '〵' ) || ( c >= 'ゝ' && c <= 'ゞ' ) || ( c >= 'ー' && c <= 'ヾ' ) ) ; } public static boolean isName ( CharSequence str ) { if ( str == null ) { return false ; } else { int len = str . length ( ) ; switch ( len ) { case 0 : return false ; case 1 : return XmlName . isNameStart ( str . charAt ( 0 ) ) ; default : if ( ! XmlName . isNameStart ( str . charAt ( 0 ) ) ) { return false ; } for ( int i = 1 ; i < len ; i ++ ) { if ( ! XmlName . isNameTrail ( str . charAt ( i ) ) ) { return false ; } } } return true ; } } public static final XmlName THE_INSTANCE = new XmlName ( ) ; private XmlName ( ) { } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { if ( ! isName ( literal ) ) { throw newDatatypeException ( "Not a valid XML 1.0 name." ) ; } } @ Override public String getName ( ) { return "XML name" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
