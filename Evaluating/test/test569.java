public class HttpServerSettingsTab extends AbstractLaunchConfigurationTab { private class PathElement { protected boolean enabled ; protected String serverPath ; protected String localPath ; protected PathElement ( boolean enabled , String serverPath , String localPath ) { this . enabled = enabled ; this . serverPath = serverPath ; this . localPath = localPath ; } } private class TableLabelProvider extends LabelProvider implements ITableLabelProvider { public Image getColumnImage ( Object element , int columnIndex ) { return null ; } public String getColumnText ( Object element , int columnIndex ) { if ( element instanceof PathElement ) { PathElement pathElement = ( PathElement ) element ; switch ( columnIndex ) { case 1 : return pathElement . serverPath ; case 2 : return pathElement . localPath ; default : } } return null ; } } private Image image ; private CheckboxTableViewer fListViewer ; private Button fAddButton ; private Button fRemoveButton ; private Button fEditButton ; private List < PathElement > elements ; public void createControl ( Composite parent ) { Composite composite = new Composite ( parent , SWT . NONE ) ; composite . setFont ( parent . getFont ( ) ) ; composite . setLayout ( new GridLayout ( 2 , false ) ) ; composite . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label label = new Label ( composite , SWT . NONE ) ; label . setText ( Messages . HttpServerSettingsTab_WebServerPathConfiguration ) ; label . setFont ( parent . getFont ( ) ) ; label . setLayoutData ( new GridData ( SWT . LEFT , SWT . CENTER , false , false , 2 , 1 ) ) ; fListViewer = CheckboxTableViewer . newCheckList ( composite , SWT . CHECK | SWT . BORDER | SWT . MULTI | SWT . FULL_SELECTION ) ; Table table = fListViewer . getTable ( ) ; table . setHeaderVisible ( true ) ; table . setLinesVisible ( true ) ; TableColumn [ ] columns = new TableColumn [ ] { new TableColumn ( table , SWT . NONE ) , new TableColumn ( table , SWT . NONE ) , new TableColumn ( table , SWT . NONE ) , } ; columns [ 1 ] . setText ( Messages . HttpServerSettingsTab_ServerPath ) ; columns [ 2 ] . setText ( Messages . HttpServerSettingsTab_WorkspacePath ) ; TableLayout tableLayout = new TableLayout ( ) ; tableLayout . addColumnData ( new ColumnPixelData ( 24 ) ) ; tableLayout . addColumnData ( new ColumnWeightData ( 40 ) ) ; tableLayout . addColumnData ( new ColumnWeightData ( 60 ) ) ; table . setLayout ( tableLayout ) ; fListViewer . setContentProvider ( new ArrayContentProvider ( ) ) ; fListViewer . setLabelProvider ( new TableLabelProvider ( ) ) ; table . setFont ( parent . getFont ( ) ) ; table . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Composite buttonContainer = new Composite ( composite , SWT . NONE ) ; buttonContainer . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , false ) ) ; GridLayout buttonLayout = new GridLayout ( 1 , false ) ; buttonLayout . marginHeight = 0 ; buttonLayout . marginWidth = 0 ; buttonContainer . setLayout ( buttonLayout ) ; GridData data ; fAddButton = new Button ( buttonContainer , SWT . PUSH ) ; fAddButton . setText ( StringUtils . ellipsify ( Messages . HttpServerSettingsTab_Add ) ) ; fAddButton . setToolTipText ( Messages . HttpServerSettingsTab_AddServerPath ) ; fAddButton . setFont ( parent . getFont ( ) ) ; data = new GridData ( SWT . FILL , SWT . DEFAULT ) ; data . widthHint = Math . max ( new PixelConverter ( fAddButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , fAddButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; fAddButton . setLayoutData ( data ) ; fEditButton = new Button ( buttonContainer , SWT . PUSH ) ; fEditButton . setText ( StringUtils . ellipsify ( Messages . HttpServerSettingsTab_Edit ) ) ; fEditButton . setToolTipText ( Messages . HttpServerSettingsTab_EditSelectedPath ) ; fEditButton . setFont ( parent . getFont ( ) ) ; data = new GridData ( SWT . FILL , SWT . DEFAULT ) ; data . widthHint = Math . max ( new PixelConverter ( fEditButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , fEditButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; fEditButton . setLayoutData ( data ) ; fRemoveButton = new Button ( buttonContainer , SWT . PUSH ) ; fRemoveButton . setText ( Messages . HttpServerSettingsTab_Remove ) ; fRemoveButton . setToolTipText ( Messages . HttpServerSettingsTab_RemoveSelectedPath ) ; fRemoveButton . setFont ( parent . getFont ( ) ) ; data = new GridData ( SWT . FILL , SWT . DEFAULT ) ; data . widthHint = Math . max ( new PixelConverter ( fRemoveButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , fRemoveButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; fRemoveButton . setLayoutData ( data ) ; fListViewer . addCheckStateListener ( new ICheckStateListener ( ) { public void checkStateChanged ( CheckStateChangedEvent event ) { ( ( PathElement ) event . getElement ( ) ) . enabled = event . getChecked ( ) ; setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fListViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { updatePage ( ( IStructuredSelection ) event . getSelection ( ) ) ; } } ) ; fListViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { public void doubleClick ( DoubleClickEvent event ) { if ( ! event . getSelection ( ) . isEmpty ( ) ) { editPath ( ) ; } } } ) ; table . addKeyListener ( new KeyAdapter ( ) { public void keyPressed ( KeyEvent event ) { if ( event . character == SWT . DEL && event . stateMask == 0 ) { removePaths ( ) ; } } } ) ; fAddButton . addListener ( SWT . Selection , new Listener ( ) { public void handleEvent ( Event e ) { addPath ( ) ; } } ) ; fEditButton . addListener ( SWT . Selection , new Listener ( ) { public void handleEvent ( Event e ) { editPath ( ) ; } } ) ; fEditButton . setEnabled ( false ) ; fRemoveButton . addListener ( SWT . Selection , new Listener ( ) { public void handleEvent ( Event e ) { removePaths ( ) ; } } ) ; fRemoveButton . setEnabled ( false ) ; setControl ( composite ) ; PreferenceUtils . persist ( DebugUiPlugin . getDefault ( ) . getPreferenceStore ( ) , table , "httpServerSettings" ) ; } private void addPath ( ) { HttpServerPathDialog dlg = new HttpServerPathDialog ( getShell ( ) , Messages . HttpServerSettingsTab_AddNewPath ) ; if ( dlg . open ( ) == Window . OK ) { PathElement element = new PathElement ( true , dlg . getServerPath ( ) , dlg . getWorkspaceResource ( ) . getFullPath ( ) . toPortableString ( ) ) ; elements . add ( element ) ; fListViewer . refresh ( ) ; fListViewer . setSelection ( new StructuredSelection ( element ) ) ; refreshViewer ( ) ; setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } private void editPath ( ) { PathElement element = ( PathElement ) ( ( IStructuredSelection ) fListViewer . getSelection ( ) ) . getFirstElement ( ) ; if ( element == null ) { return ; } HttpServerPathDialog dlg = new HttpServerPathDialog ( getShell ( ) , Messages . HttpServerSettingsTab_EditPath ) ; dlg . setServerPath ( element . serverPath ) ; dlg . setWorkspaceResource ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( new Path ( element . localPath ) ) ) ; if ( dlg . open ( ) == Window . OK ) { element . serverPath = dlg . getServerPath ( ) ; element . localPath = dlg . getWorkspaceResource ( ) . getFullPath ( ) . toPortableString ( ) ; element . enabled = true ; fListViewer . update ( element , null ) ; refreshViewer ( ) ; setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } private void removePaths ( ) { IStructuredSelection selection = ( IStructuredSelection ) fListViewer . getSelection ( ) ; Object first = selection . getFirstElement ( ) ; int index = - 1 ; for ( int i = 0 ; i < elements . size ( ) ; i ++ ) { Object object = elements . get ( i ) ; if ( object . equals ( first ) ) { index = i ; break ; } } elements . removeAll ( selection . toList ( ) ) ; if ( index > elements . size ( ) - 1 ) { index = elements . size ( ) - 1 ; } if ( index >= 0 ) { fListViewer . setSelection ( new StructuredSelection ( elements . get ( index ) ) ) ; } setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } private void refreshViewer ( ) { ArrayList < PathElement > checkedElements = new ArrayList < PathElement > ( ) ; for ( Iterator i = elements . iterator ( ) ; i . hasNext ( ) ; ) { PathElement pathElement = ( PathElement ) i . next ( ) ; if ( pathElement . enabled ) { checkedElements . add ( pathElement ) ; } } fListViewer . setAllChecked ( false ) ; fListViewer . setCheckedElements ( checkedElements . toArray ( new PathElement [ checkedElements . size ( ) ] ) ) ; } private void updatePage ( IStructuredSelection selection ) { fRemoveButton . setEnabled ( ! selection . isEmpty ( ) ) ; fEditButton . setEnabled ( selection . size ( ) == 1 ) ; } public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { configuration . setAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_PATHS_MAPPING , StringUtils . EMPTY ) ; } public void initializeFrom ( ILaunchConfiguration configuration ) { try { String [ ] list = JSDebugOptionsManager . parseList ( configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_PATHS_MAPPING , StringUtils . EMPTY ) ) ; elements = new ArrayList < PathElement > ( ) ; for ( int i = 0 , length = list . length ; i < length ; ) { String serverPath = list [ i ++ ] ; String localPath = list [ i ++ ] ; boolean enabled = ! "0" . equals ( list [ i ++ ] ) ; elements . add ( new PathElement ( enabled , serverPath , localPath ) ) ; } fListViewer . setInput ( elements ) ; refreshViewer ( ) ; } catch ( CoreException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , "Reading launch configuration fails" , e ) ; } } public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { String [ ] values = new String [ elements . size ( ) * 3 ] ; int index = 0 ; for ( Iterator i = elements . iterator ( ) ; i . hasNext ( ) ; ) { PathElement element = ( PathElement ) i . next ( ) ; values [ index ++ ] = element . serverPath ; values [ index ++ ] = element . localPath ; values [ index ++ ] = element . enabled ? "1" : "0" ; } configuration . setAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_PATHS_MAPPING , JSDebugOptionsManager . serializeList ( values ) ) ; } public String getName ( ) { return Messages . HttpServerSettingsTab_Title ; } public Image getImage ( ) { if ( image == null ) { image = DebugUiPlugin . getImageDescriptor ( "icons/full/obj16/launch-tree.gif" ) . createImage ( ) ; } return image ; } public void dispose ( ) { if ( image != null ) { image . dispose ( ) ; } super . dispose ( ) ; } } 