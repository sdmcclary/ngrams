public class MemoryTokenStore implements TokenStore { private final Map < Key , StoreEntry > cache ; private final Lock r ; private final Lock w ; public MemoryTokenStore ( ) { this . cache = new MapMaker ( ) . softValues ( ) . expiration ( 120 , TimeUnit . SECONDS ) . makeMap ( ) ; ReadWriteLock lock = new ReentrantReadWriteLock ( ) ; this . r = lock . readLock ( ) ; this . w = lock . writeLock ( ) ; } public StoreEntry get ( Key key ) { StoreEntry result ; r . lock ( ) ; try { result = this . cache . get ( key ) ; } finally { r . unlock ( ) ; } if ( ! ( result == null || result . isExpired ( ) ) ) { return result ; } w . lock ( ) ; result = checkPopulateThisPeriod ( key ) ; return result ; } public StoreEntry create ( Key key , int timeToLive ) { try { StoreEntryImpl entry = new StoreEntryImpl ( timeToLive ) ; cache . put ( key , entry ) ; return entry ; } finally { w . unlock ( ) ; } } private StoreEntry checkPopulateThisPeriod ( Key key ) { StoreEntry result = this . cache . get ( key ) ; if ( result == null ) { } else if ( result . isExpired ( ) ) { cache . remove ( key ) ; result = null ; } else { w . unlock ( ) ; } return result ; } } 