@ SuppressWarnings ( "restriction" ) public class JUnitPopupNotificationSink extends NotificationSink { private static final boolean runSystem = true ; private final WeakHashMap < Object , Object > cancelledTokens = new WeakHashMap < Object , Object > ( ) ; private JUnitNotification currentlyNotifying ; private final Job openJob = new Job ( "JUnit Result popup notifier" ) { @ Override protected IStatus run ( IProgressMonitor monitor ) { try { if ( Platform . isRunning ( ) && PlatformUI . getWorkbench ( ) != null && PlatformUI . getWorkbench ( ) . getDisplay ( ) != null && ! PlatformUI . getWorkbench ( ) . getDisplay ( ) . isDisposed ( ) ) { PlatformUI . getWorkbench ( ) . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { collectNotifications ( ) ; if ( popup != null && popup . getReturnCode ( ) == Window . CANCEL ) { AbstractNotification notification = popup . getNotification ( ) ; if ( notification . getToken ( ) != null ) { cancelledTokens . put ( notification . getToken ( ) , null ) ; } } synchronized ( JUnitPopupNotificationSink . class ) { if ( currentlyNotifying != null ) { showPopup ( ) ; } } } } ) ; } } finally { if ( popup != null ) { schedule ( popup . getDelayClose ( ) / 2 ) ; } } if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } return Status . OK_STATUS ; } } ; private JUnitNotificationPopup popup ; public JUnitPopupNotificationSink ( ) { } private void cleanNotified ( ) { currentlyNotifying = null ; } public void collectNotifications ( ) { } @ Override public void notify ( NotificationSinkEvent event ) { List < AbstractNotification > notifications = event . getNotifications ( ) ; if ( notifications . isEmpty ( ) ) return ; AbstractNotification notification = notifications . get ( 0 ) ; if ( ( notification instanceof JUnitNotification ) == false ) { return ; } currentlyNotifying = ( JUnitNotification ) notification ; if ( ! openJob . cancel ( ) ) { try { openJob . join ( ) ; } catch ( InterruptedException e ) { } } openJob . setSystem ( runSystem ) ; openJob . schedule ( ) ; } public void showPopup ( ) { if ( popup != null ) { popup . close ( ) ; } Display display = PlatformUI . getWorkbench ( ) . getDisplay ( ) ; Shell shell = new Shell ( display ) ; popup = new JUnitNotificationPopup ( shell , currentlyNotifying ) ; cleanNotified ( ) ; popup . setBlockOnOpen ( false ) ; popup . open ( ) ; } } 