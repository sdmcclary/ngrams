@ SuppressWarnings ( "restriction" ) public class RemoteConnectionSelectionPage extends WizardPage implements SelectionListener { private Table connectionTable ; private Button newSiteButton ; private Button syncOnFinish ; private boolean synchronize = true ; private IConnectionPoint site ; public RemoteConnectionSelectionPage ( IStructuredSelection selection ) { super ( "connectionPage" ) ; if ( selection != null ) { Object possibleSite = selection . getFirstElement ( ) ; if ( possibleSite != null && possibleSite instanceof IConnectionPoint ) { site = ( IConnectionPoint ) possibleSite ; } } } public void createControl ( Composite parent ) { Composite main = new Composite ( parent , SWT . NONE ) ; main . setLayout ( new GridLayout ( ) ) ; main . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Group connGroup = new Group ( main , SWT . NONE ) ; connGroup . setText ( Messages . RemoteConnectionSelectionPage_Connections ) ; connGroup . setLayout ( new GridLayout ( ) ) ; connGroup . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label label = new Label ( connGroup , SWT . NONE ) ; label . setText ( Messages . RemoteConnectionSelectionPage_LBL_SelectRemoteLocationOfThisProject ) ; connectionTable = new Table ( connGroup , SWT . CHECK | SWT . SINGLE | SWT . FULL_SELECTION | SWT . BORDER ) ; connectionTable . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { if ( e . detail == SWT . CHECK ) { TableItem [ ] items = connectionTable . getItems ( ) ; for ( TableItem item : items ) { if ( item != e . item ) { item . setChecked ( false ) ; } } TableItem item = ( TableItem ) e . item ; if ( item . getChecked ( ) ) { setErrorMessage ( null ) ; setPageComplete ( true ) ; site = ( IConnectionPoint ) item . getData ( ) ; } else { setErrorMessage ( Messages . RemoteConnectionSelectionPage_ERR_SelectSiteOrCreateNewOne ) ; setPageComplete ( false ) ; } } } } ) ; connectionTable . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; connectionTable . setLinesVisible ( true ) ; new TableColumn ( connectionTable , SWT . LEFT ) ; connectionTable . addControlListener ( new ControlAdapter ( ) { public void controlResized ( ControlEvent e ) { TableColumn c = connectionTable . getColumn ( 0 ) ; Point size = connectionTable . getSize ( ) ; if ( Platform . getOS ( ) . equals ( Platform . OS_MACOSX ) ) { ScrollBar vScrolls = connectionTable . getVerticalBar ( ) ; if ( vScrolls != null ) { size . x = size . x - vScrolls . getSize ( ) . x - 10 ; } } c . setWidth ( size . x - 6 ) ; } } ) ; populateTable ( ) ; if ( site == null ) { setErrorMessage ( Messages . RemoteConnectionSelectionPage_ERR_SelectSiteOrCreateNewOne ) ; setPageComplete ( false ) ; } else { checkItem ( site ) ; } newSiteButton = new Button ( connGroup , SWT . PUSH ) ; newSiteButton . setText ( StringUtils . ellipsify ( Messages . RemoteConnectionSelectionPage_LBL_NewConnection ) ) ; newSiteButton . addSelectionListener ( this ) ; Group options = new Group ( main , SWT . NONE ) ; options . setText ( Messages . RemoteConnectionSelectionPage_LBL_Options ) ; options . setLayout ( new GridLayout ( 1 , true ) ) ; options . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; syncOnFinish = new Button ( options , SWT . CHECK ) ; syncOnFinish . setText ( Messages . RemoteConnectionSelectionPage_LBL_DownloadOnFinish ) ; syncOnFinish . setSelection ( isSynchronize ( ) ) ; syncOnFinish . addSelectionListener ( this ) ; setControl ( main ) ; } private void checkItem ( IConnectionPoint item ) { TableItem [ ] items = connectionTable . getItems ( ) ; for ( TableItem ti : items ) { if ( ti . getData ( ) == item ) { ti . setChecked ( true ) ; site = item ; setErrorMessage ( null ) ; setPageComplete ( true ) ; break ; } } } private void populateTable ( ) { connectionTable . removeAll ( ) ; IConnectionPointManager manager = CoreIOPlugin . getConnectionPointManager ( ) ; IConnectionPoint [ ] remoteSites = manager . getConnectionPointCategory ( IBaseRemoteConnectionPoint . CATEGORY ) . getConnectionPoints ( ) ; for ( IConnectionPoint site : remoteSites ) { if ( site instanceof IBaseRemoteConnectionPoint ) { TableItem item = new TableItem ( connectionTable , SWT . NONE ) ; item . setText ( MessageFormat . format ( "{0}: {1}" , manager . getType ( site ) . getName ( ) , site . getName ( ) ) ) ; item . setData ( site ) ; } } } public boolean isSynchronize ( ) { return synchronize ; } public void setSynchronize ( boolean synchronize ) { this . synchronize = synchronize ; } public IConnectionPoint getSite ( ) { return site ; } public void setSite ( IConnectionPoint site ) { this . site = site ; } public void widgetDefaultSelected ( SelectionEvent e ) { } public void widgetSelected ( SelectionEvent e ) { Object source = e . getSource ( ) ; if ( source == newSiteButton ) { final Shell shell = getShell ( ) ; Dialog dlg = new FTPPropertyDialogProvider ( ) . createPropertyDialog ( new IShellProvider ( ) { public Shell getShell ( ) { return shell ; } } ) ; if ( dlg instanceof IPropertyDialog ) { ( ( IPropertyDialog ) dlg ) . setPropertySource ( CoreIOPlugin . getConnectionPointManager ( ) . getType ( IBaseFTPConnectionPoint . TYPE_FTP ) ) ; } int ret = dlg . open ( ) ; if ( ret == Window . OK ) { populateTable ( ) ; if ( dlg instanceof IPropertyDialog ) { checkItem ( ( IConnectionPoint ) ( ( IPropertyDialog ) dlg ) . getPropertySource ( ) ) ; } } } else if ( source == syncOnFinish ) { setSynchronize ( syncOnFinish . getSelection ( ) ) ; } } } 