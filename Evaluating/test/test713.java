<<<<<<< HEAD
@ SuppressWarnings ( "restriction" ) public class RemoteConnectionSelectionPage extends WizardPage implements SelectionListener { private Table connectionTable ; private Button newSiteButton ; private Button syncOnFinish ; private boolean synchronize = true ; private IConnectionPoint site ; public RemoteConnectionSelectionPage ( IStructuredSelection selection ) { super ( "connectionPage" ) ; if ( selection != null ) { Object possibleSite = selection . getFirstElement ( ) ; if ( possibleSite != null && possibleSite instanceof IConnectionPoint ) { site = ( IConnectionPoint ) possibleSite ; } } } public void createControl ( Composite parent ) { Composite main = new Composite ( parent , SWT . NONE ) ; main . setLayout ( new GridLayout ( ) ) ; main . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Group connGroup = new Group ( main , SWT . NONE ) ; connGroup . setText ( Messages . RemoteConnectionSelectionPage_Connections ) ; connGroup . setLayout ( new GridLayout ( ) ) ; connGroup . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label label = new Label ( connGroup , SWT . NONE ) ; label . setText ( Messages . RemoteConnectionSelectionPage_LBL_SelectRemoteLocationOfThisProject ) ; connectionTable = new Table ( connGroup , SWT . CHECK | SWT . SINGLE | SWT . FULL_SELECTION | SWT . BORDER ) ; connectionTable . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { if ( e . detail == SWT . CHECK ) { TableItem [ ] items = connectionTable . getItems ( ) ; for ( TableItem item : items ) { if ( item != e . item ) { item . setChecked ( false ) ; } } TableItem item = ( TableItem ) e . item ; if ( item . getChecked ( ) ) { setErrorMessage ( null ) ; setPageComplete ( true ) ; site = ( IConnectionPoint ) item . getData ( ) ; } else { setErrorMessage ( Messages . RemoteConnectionSelectionPage_ERR_SelectSiteOrCreateNewOne ) ; setPageComplete ( false ) ; } } } } ) ; connectionTable . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; connectionTable . setLinesVisible ( true ) ; new TableColumn ( connectionTable , SWT . LEFT ) ; connectionTable . addControlListener ( new ControlAdapter ( ) { public void controlResized ( ControlEvent e ) { TableColumn c = connectionTable . getColumn ( 0 ) ; Point size = connectionTable . getSize ( ) ; if ( Platform . getOS ( ) . equals ( Platform . OS_MACOSX ) ) { ScrollBar vScrolls = connectionTable . getVerticalBar ( ) ; if ( vScrolls != null ) { size . x = size . x - vScrolls . getSize ( ) . x - 10 ; } } c . setWidth ( size . x - 6 ) ; } } ) ; populateTable ( ) ; if ( site == null ) { setErrorMessage ( Messages . RemoteConnectionSelectionPage_ERR_SelectSiteOrCreateNewOne ) ; setPageComplete ( false ) ; } else { checkItem ( site ) ; } newSiteButton = new Button ( connGroup , SWT . PUSH ) ; newSiteButton . setText ( StringUtils . ellipsify ( Messages . RemoteConnectionSelectionPage_LBL_NewConnection ) ) ; newSiteButton . addSelectionListener ( this ) ; Group options = new Group ( main , SWT . NONE ) ; options . setText ( Messages . RemoteConnectionSelectionPage_LBL_Options ) ; options . setLayout ( new GridLayout ( 1 , true ) ) ; options . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; syncOnFinish = new Button ( options , SWT . CHECK ) ; syncOnFinish . setText ( Messages . RemoteConnectionSelectionPage_LBL_DownloadOnFinish ) ; syncOnFinish . setSelection ( isSynchronize ( ) ) ; syncOnFinish . addSelectionListener ( this ) ; setControl ( main ) ; } private void checkItem ( IConnectionPoint item ) { TableItem [ ] items = connectionTable . getItems ( ) ; for ( TableItem ti : items ) { if ( ti . getData ( ) == item ) { ti . setChecked ( true ) ; site = item ; setErrorMessage ( null ) ; setPageComplete ( true ) ; break ; } } } private void populateTable ( ) { connectionTable . removeAll ( ) ; IConnectionPointManager manager = CoreIOPlugin . getConnectionPointManager ( ) ; IConnectionPoint [ ] remoteSites = manager . getConnectionPointCategory ( IBaseRemoteConnectionPoint . CATEGORY ) . getConnectionPoints ( ) ; for ( IConnectionPoint site : remoteSites ) { if ( site instanceof IBaseRemoteConnectionPoint ) { TableItem item = new TableItem ( connectionTable , SWT . NONE ) ; item . setText ( MessageFormat . format ( "{0}: {1}" , manager . getType ( site ) . getName ( ) , site . getName ( ) ) ) ; item . setData ( site ) ; } } } public boolean isSynchronize ( ) { return synchronize ; } public void setSynchronize ( boolean synchronize ) { this . synchronize = synchronize ; } public IConnectionPoint getSite ( ) { return site ; } public void setSite ( IConnectionPoint site ) { this . site = site ; } public void widgetDefaultSelected ( SelectionEvent e ) { } public void widgetSelected ( SelectionEvent e ) { Object source = e . getSource ( ) ; if ( source == newSiteButton ) { final Shell shell = getShell ( ) ; Dialog dlg = new FTPPropertyDialogProvider ( ) . createPropertyDialog ( new IShellProvider ( ) { public Shell getShell ( ) { return shell ; } } ) ; if ( dlg instanceof IPropertyDialog ) { ( ( IPropertyDialog ) dlg ) . setPropertySource ( CoreIOPlugin . getConnectionPointManager ( ) . getType ( IBaseFTPConnectionPoint . TYPE_FTP ) ) ; } int ret = dlg . open ( ) ; if ( ret == Window . OK ) { populateTable ( ) ; if ( dlg instanceof IPropertyDialog ) { checkItem ( ( IConnectionPoint ) ( ( IPropertyDialog ) dlg ) . getPropertySource ( ) ) ; } } } else if ( source == syncOnFinish ) { setSynchronize ( syncOnFinish . getSelection ( ) ) ; } } } 
=======
public class RecipientsAdapter extends ResourceCursorAdapter { public static final int PERSON_ID_INDEX = 1 ; public static final int TYPE_INDEX = 2 ; public static final int NUMBER_INDEX = 3 ; public static final int LABEL_INDEX = 4 ; public static final int NAME_INDEX = 5 ; public static final int KIND_INDEX = 6 ; private static final int EMAIL_COLUMN_COUNT = 7 ; private static final String [ ] PROJECTION_PHONE = { Contacts . Phones . _ID , Contacts . Phones . PERSON_ID , Contacts . Phones . TYPE , Contacts . Phones . NUMBER , Contacts . Phones . LABEL , Contacts . Phones . NAME , } ; private static final String [ ] PROJECTION_EMAIL = { Contacts . ContactMethods . _ID , Contacts . ContactMethods . PERSON_ID , Contacts . ContactMethods . TYPE , Contacts . ContactMethods . DATA , Contacts . ContactMethods . LABEL , Contacts . ContactMethods . NAME , Contacts . ContactMethods . KIND , } ; private static final String SORT_ORDER = "name, type" ; private final Context mContext ; private final ContentResolver mContentResolver ; public RecipientsAdapter ( Context context ) { super ( context , R . layout . recipient_filter_item , null ) ; mContext = context ; mContentResolver = context . getContentResolver ( ) ; } @ Override public final CharSequence convertToString ( Cursor cursor ) { String name = cursor . getString ( RecipientsAdapter . NAME_INDEX ) ; int type = cursor . getInt ( RecipientsAdapter . TYPE_INDEX ) ; String number = cursor . getString ( RecipientsAdapter . NUMBER_INDEX ) . trim ( ) ; String label = cursor . getString ( RecipientsAdapter . LABEL_INDEX ) ; CharSequence displayLabel = Phones . getDisplayLabel ( mContext , type , label ) ; if ( number . length ( ) == 0 ) { return number ; } SpannableString out = new SpannableString ( RecipientList . Recipient . buildNameAndNumber ( name , number ) ) ; int len = out . length ( ) ; if ( ! TextUtils . isEmpty ( name ) ) { out . setSpan ( new Annotation ( "name" , name ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } else { out . setSpan ( new Annotation ( "name" , number ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } String person_id = cursor . getString ( RecipientsAdapter . PERSON_ID_INDEX ) ; out . setSpan ( new Annotation ( "person_id" , person_id ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; out . setSpan ( new Annotation ( "label" , displayLabel . toString ( ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; out . setSpan ( new Annotation ( "number" , number ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; return out ; } @ Override public final void bindView ( View view , Context context , Cursor cursor ) { TextView name = ( TextView ) view . findViewById ( R . id . name ) ; name . setText ( cursor . getString ( NAME_INDEX ) ) ; TextView label = ( TextView ) view . findViewById ( R . id . label ) ; int type = cursor . getInt ( TYPE_INDEX ) ; if ( cursor . getColumnCount ( ) == EMAIL_COLUMN_COUNT ) { int kind = cursor . getInt ( KIND_INDEX ) ; label . setText ( ContactMethods . getDisplayLabel ( mContext , kind , type , cursor . getString ( LABEL_INDEX ) ) ) ; } else { label . setText ( Phones . getDisplayLabel ( mContext , type , cursor . getString ( LABEL_INDEX ) ) ) ; } TextView number = ( TextView ) view . findViewById ( R . id . number ) ; number . setText ( "(" + cursor . getString ( NUMBER_INDEX ) + ")" ) ; } @ Override public Cursor runQueryOnBackgroundThread ( CharSequence constraint ) { String wherePhone = null ; String whereEmail = null ; String phone = "" ; String cons = null ; if ( constraint != null ) { cons = constraint . toString ( ) ; if ( usefulAsDigits ( cons ) ) { phone = PhoneNumberUtils . convertKeypadLettersToDigits ( cons ) ; if ( phone . equals ( cons ) ) { phone = "" ; } else { phone = phone . trim ( ) ; } } String filter = DatabaseUtils . sqlEscapeString ( cons + '%' ) ; String filterLastName = DatabaseUtils . sqlEscapeString ( "% " + cons + '%' ) ; StringBuilder s = new StringBuilder ( ) ; s . append ( "((name LIKE " ) ; s . append ( filter ) ; s . append ( ") OR (name LIKE " ) ; s . append ( filterLastName ) ; s . append ( ") OR (REPLACE(REPLACE(REPLACE(REPLACE(number, ' ', ''), '(', ''), ')', ''), '-', '') LIKE " ) ; s . append ( filter ) ; s . append ( ")) AND type = " ) ; s . append ( Phones . TYPE_MOBILE ) ; wherePhone = s . toString ( ) ; } Cursor phoneCursor = SqliteWrapper . query ( mContext , mContentResolver , Phones . CONTENT_URI , PROJECTION_PHONE , wherePhone , null , SORT_ORDER ) ; if ( phone . length ( ) > 0 ) { ArrayList result = new ArrayList ( ) ; result . add ( Integer . valueOf ( - 1 ) ) ; result . add ( Long . valueOf ( - 1 ) ) ; result . add ( Integer . valueOf ( Phones . TYPE_CUSTOM ) ) ; result . add ( phone ) ; result . add ( " " ) ; result . add ( cons ) ; ArrayList < ArrayList > wrap = new ArrayList < ArrayList > ( ) ; wrap . add ( result ) ; ArrayListCursor translated = new ArrayListCursor ( PROJECTION_PHONE , wrap ) ; return new MergeCursor ( new Cursor [ ] { translated , phoneCursor } ) ; } else { return new MergeCursor ( new Cursor [ ] { phoneCursor } ) ; } } private boolean usefulAsDigits ( CharSequence cons ) { int len = cons . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = cons . charAt ( i ) ; if ( ( c == ' ' ) || ( c == '-' ) || ( c == '(' ) || ( c == ')' ) || ( c == '.' ) ) { continue ; } if ( ( c >= 'A' ) && ( c <= 'Z' ) ) { continue ; } if ( ( c >= 'a' ) && ( c <= 'z' ) ) { continue ; } if ( ( c >= '0' ) && ( c <= '9' ) ) { continue ; } return false ; } return true ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
