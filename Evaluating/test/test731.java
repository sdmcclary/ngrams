<<<<<<< HEAD
@ SuppressWarnings ( "restriction" ) public class IDEWorkbenchAdvisor extends WorkbenchAdvisor { private static final String WORKBENCH_PREFERENCE_CATEGORY_ID = "org.eclipse.ui.preferencePages.Workbench" ; private static final String INSTALLED_FEATURES = "installedFeatures" ; private static IDEWorkbenchAdvisor workbenchAdvisor = null ; private WorkbenchWindowAdvisor workbenchWindowAdvisor ; private String workspaceLocation = null ; private Map < String , AboutInfo > newlyAddedBundleGroups ; private AboutInfo [ ] welcomePerspectiveInfos = null ; private IDEWorkbenchActivityHelper activityHelper = null ; private IDEIdleHelper idleHelper ; private Listener settingsChangeListener ; private WorkspaceUndoMonitor workspaceUndoMonitor ; private AbstractStatusHandler ideWorkbenchErrorHandler ; public IDEWorkbenchAdvisor ( ) { super ( ) ; if ( workbenchAdvisor != null ) { throw new IllegalStateException ( ) ; } workbenchAdvisor = this ; } public void initialize ( IWorkbenchConfigurer configurer ) { PluginActionBuilder . setAllowIdeLogging ( true ) ; configurer . setSaveAndRestore ( true ) ; IDE . registerAdapters ( ) ; String [ ] cmdLineArgs = Platform . getCommandLineArgs ( ) ; for ( int i = 0 ; i < cmdLineArgs . length ; i ++ ) { if ( "-showlocation" . equalsIgnoreCase ( cmdLineArgs [ i ] ) ) { String name = null ; if ( cmdLineArgs . length > i + 1 ) { name = cmdLineArgs [ i + 1 ] ; } if ( name != null && name . indexOf ( "-" ) == - 1 ) { workspaceLocation = name ; } else { workspaceLocation = Platform . getLocation ( ) . toOSString ( ) ; } break ; } } declareWorkbenchImages ( ) ; activityHelper = IDEWorkbenchActivityHelper . getInstance ( ) ; idleHelper = new IDEIdleHelper ( configurer ) ; workspaceUndoMonitor = WorkspaceUndoMonitor . getInstance ( ) ; TrayDialog . setDialogHelpAvailable ( true ) ; Policy . setComparator ( Collator . getInstance ( ) ) ; } public void preStartup ( ) { Job . getJobManager ( ) . suspend ( ) ; IProgressService service = PlatformUI . getWorkbench ( ) . getProgressService ( ) ; ImageDescriptor newImage = IDEInternalWorkbenchImages . getImageDescriptor ( IDEInternalWorkbenchImages . IMG_ETOOL_BUILD_EXEC ) ; service . registerIconForFamily ( newImage , ResourcesPlugin . FAMILY_MANUAL_BUILD ) ; service . registerIconForFamily ( newImage , ResourcesPlugin . FAMILY_AUTO_BUILD ) ; } public void postStartup ( ) { tearDownSplash32Workaround ( ) ; try { refreshFromLocal ( ) ; activateProxyService ( ) ; ( ( Workbench ) PlatformUI . getWorkbench ( ) ) . registerService ( ISelectionConversionService . class , new IDESelectionConversionService ( ) ) ; initializeSettingsChangeListener ( ) ; Display . getCurrent ( ) . addListener ( SWT . Settings , settingsChangeListener ) ; } finally { Job . getJobManager ( ) . resume ( ) ; } } private void activateProxyService ( ) { Bundle bundle = Platform . getBundle ( "org.eclipse.ui.ide" ) ; Object proxyService = null ; if ( bundle != null ) { ServiceReference ref = bundle . getBundleContext ( ) . getServiceReference ( IProxyService . class . getName ( ) ) ; if ( ref != null ) proxyService = bundle . getBundleContext ( ) . getService ( ref ) ; } if ( proxyService == null ) { IDEWorkbenchPlugin . log ( "Proxy service could not be found." ) ; } } private void initializeSettingsChangeListener ( ) { settingsChangeListener = new Listener ( ) { boolean currentHighContrast = Display . getCurrent ( ) . getHighContrast ( ) ; public void handleEvent ( org . eclipse . swt . widgets . Event event ) { if ( Display . getCurrent ( ) . getHighContrast ( ) == currentHighContrast ) return ; currentHighContrast = ! currentHighContrast ; if ( new MessageDialog ( null , IDEWorkbenchMessages . SystemSettingsChange_title , null , IDEWorkbenchMessages . SystemSettingsChange_message , MessageDialog . QUESTION , new String [ ] { IDEWorkbenchMessages . SystemSettingsChange_yes , IDEWorkbenchMessages . SystemSettingsChange_no } , 1 ) . open ( ) == Window . OK ) { PlatformUI . getWorkbench ( ) . restart ( ) ; } } } ; } public void postShutdown ( ) { if ( activityHelper != null ) { activityHelper . shutdown ( ) ; activityHelper = null ; } if ( idleHelper != null ) { idleHelper . shutdown ( ) ; idleHelper = null ; } if ( workspaceUndoMonitor != null ) { workspaceUndoMonitor . shutdown ( ) ; workspaceUndoMonitor = null ; } if ( IDEWorkbenchPlugin . getPluginWorkspace ( ) != null ) { disconnectFromWorkspace ( ) ; } } public boolean preShutdown ( ) { Display . getCurrent ( ) . removeListener ( SWT . Settings , settingsChangeListener ) ; return super . preShutdown ( ) ; } public WorkbenchWindowAdvisor createWorkbenchWindowAdvisor ( IWorkbenchWindowConfigurer configurer ) { workbenchWindowAdvisor = new IDEWorkbenchWindowAdvisor ( this , configurer ) ; return workbenchWindowAdvisor ; } WorkbenchWindowAdvisor getWorkbenchWindowAdvisor ( ) { return workbenchWindowAdvisor ; } public boolean hasIntro ( ) { return getWorkbenchConfigurer ( ) . getWorkbench ( ) . getIntroManager ( ) . hasIntro ( ) ; } private void refreshFromLocal ( ) { String [ ] commandLineArgs = Platform . getCommandLineArgs ( ) ; IPreferenceStore store = IDEWorkbenchPlugin . getDefault ( ) . getPreferenceStore ( ) ; boolean refresh = store . getBoolean ( IDEInternalPreferences . REFRESH_WORKSPACE_ON_STARTUP ) ; if ( ! refresh ) { return ; } for ( int i = 0 ; i < commandLineArgs . length ; i ++ ) { if ( commandLineArgs [ i ] . equalsIgnoreCase ( "-refresh" ) ) { return ; } } final IContainer root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; Job job = new WorkspaceJob ( IDEWorkbenchMessages . Workspace_refreshing ) { public IStatus runInWorkspace ( IProgressMonitor monitor ) throws CoreException { root . refreshLocal ( IResource . DEPTH_INFINITE , monitor ) ; return Status . OK_STATUS ; } } ; job . setRule ( root ) ; job . schedule ( ) ; } private void disconnectFromWorkspace ( ) { final MultiStatus status = new MultiStatus ( IDEWorkbenchPlugin . IDE_WORKBENCH , 1 , IDEWorkbenchMessages . ProblemSavingWorkbench , null ) ; IRunnableWithProgress runnable = new IRunnableWithProgress ( ) { public void run ( IProgressMonitor monitor ) { try { status . merge ( ResourcesPlugin . getWorkspace ( ) . save ( true , monitor ) ) ; } catch ( CoreException e ) { status . merge ( e . getStatus ( ) ) ; } } } ; try { new ProgressMonitorJobsDialog ( null ) . run ( true , false , runnable ) ; } catch ( InvocationTargetException e ) { status . merge ( new Status ( IStatus . ERROR , IDEWorkbenchPlugin . IDE_WORKBENCH , 1 , IDEWorkbenchMessages . InternalError , e . getTargetException ( ) ) ) ; } catch ( InterruptedException e ) { status . merge ( new Status ( IStatus . ERROR , IDEWorkbenchPlugin . IDE_WORKBENCH , 1 , IDEWorkbenchMessages . InternalError , e ) ) ; } ErrorDialog . openError ( null , IDEWorkbenchMessages . ProblemsSavingWorkspace , null , status , IStatus . ERROR | IStatus . WARNING ) ; if ( ! status . isOK ( ) ) { IDEWorkbenchPlugin . log ( IDEWorkbenchMessages . ProblemsSavingWorkspace , status ) ; } } public IAdaptable getDefaultPageInput ( ) { return ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; } public String getInitialWindowPerspectiveId ( ) { int index = PlatformUI . getWorkbench ( ) . getWorkbenchWindowCount ( ) - 1 ; String perspectiveId = null ; AboutInfo [ ] welcomeInfos = getWelcomePerspectiveInfos ( ) ; if ( index >= 0 && welcomeInfos != null && index < welcomeInfos . length ) { perspectiveId = welcomeInfos [ index ] . getWelcomePerspectiveId ( ) ; } if ( perspectiveId == null ) { perspectiveId = IDE . RESOURCE_PERSPECTIVE_ID ; } return perspectiveId ; } private Map < String , AboutInfo > computeBundleGroupMap ( ) { Map < String , AboutInfo > ids = new TreeMap < String , AboutInfo > ( ) ; IBundleGroupProvider [ ] providers = Platform . getBundleGroupProviders ( ) ; for ( int i = 0 ; i < providers . length ; ++ i ) { IBundleGroup [ ] groups = providers [ i ] . getBundleGroups ( ) ; for ( int j = 0 ; j < groups . length ; ++ j ) { IBundleGroup group = groups [ j ] ; AboutInfo info = new AboutInfo ( group ) ; String version = info . getVersionId ( ) ; version = version == null ? "0.0.0" : new Version ( version ) . toString ( ) ; String versionedFeature = group . getIdentifier ( ) + ":" + version ; ids . put ( versionedFeature , info ) ; } } return ids ; } public Map < String , AboutInfo > getNewlyAddedBundleGroups ( ) { if ( newlyAddedBundleGroups == null ) { newlyAddedBundleGroups = createNewBundleGroupsMap ( ) ; } return newlyAddedBundleGroups ; } private Map < String , AboutInfo > createNewBundleGroupsMap ( ) { IDialogSettings settings = IDEWorkbenchPlugin . getDefault ( ) . getDialogSettings ( ) ; String [ ] previousFeaturesArray = settings . getArray ( INSTALLED_FEATURES ) ; Map < String , AboutInfo > bundleGroups = computeBundleGroupMap ( ) ; String [ ] currentFeaturesArray = new String [ bundleGroups . size ( ) ] ; bundleGroups . keySet ( ) . toArray ( currentFeaturesArray ) ; settings . put ( INSTALLED_FEATURES , currentFeaturesArray ) ; if ( previousFeaturesArray != null ) { for ( int i = 0 ; i < previousFeaturesArray . length ; ++ i ) { bundleGroups . remove ( previousFeaturesArray [ i ] ) ; } } return bundleGroups ; } private void declareWorkbenchImages ( ) { final String ICONS_PATH = "$nl$/icons/full/" ; final String PATH_ELOCALTOOL = ICONS_PATH + "elcl16/" ; final String PATH_DLOCALTOOL = ICONS_PATH + "dlcl16/" ; final String PATH_ETOOL = ICONS_PATH + "etool16/" ; final String PATH_DTOOL = ICONS_PATH + "dtool16/" ; final String PATH_OBJECT = ICONS_PATH + "obj16/" ; final String PATH_WIZBAN = ICONS_PATH + "wizban/" ; Bundle ideBundle = Platform . getBundle ( IDEWorkbenchPlugin . IDE_WORKBENCH ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_BUILD_EXEC , PATH_ETOOL + "build_exec.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_BUILD_EXEC_HOVER , PATH_ETOOL + "build_exec.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_BUILD_EXEC_DISABLED , PATH_DTOOL + "build_exec.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_SEARCH_SRC , PATH_ETOOL + "search_src.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_SEARCH_SRC_HOVER , PATH_ETOOL + "search_src.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_SEARCH_SRC_DISABLED , PATH_DTOOL + "search_src.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_NEXT_NAV , PATH_ETOOL + "next_nav.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_PREVIOUS_NAV , PATH_ETOOL + "prev_nav.gif" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_NEWPRJ_WIZ , PATH_WIZBAN + "newprj_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_NEWFOLDER_WIZ , PATH_WIZBAN + "newfolder_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_NEWFILE_WIZ , PATH_WIZBAN + "newfile_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_IMPORTDIR_WIZ , PATH_WIZBAN + "importdir_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_IMPORTZIP_WIZ , PATH_WIZBAN + "importzip_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_EXPORTDIR_WIZ , PATH_WIZBAN + "exportdir_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_EXPORTZIP_WIZ , PATH_WIZBAN + "exportzip_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_WIZBAN_RESOURCEWORKINGSET_WIZ , PATH_WIZBAN + "workset_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_DLGBAN_SAVEAS_DLG , PATH_WIZBAN + "saveas_wiz.png" , false ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_DLGBAN_QUICKFIX_DLG , PATH_WIZBAN + "quick_fix.png" , false ) ; declareWorkbenchImage ( ideBundle , IDE . SharedImages . IMG_OBJ_PROJECT , PATH_OBJECT + "prj_obj.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDE . SharedImages . IMG_OBJ_PROJECT_CLOSED , PATH_OBJECT + "cprj_obj.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDE . SharedImages . IMG_OPEN_MARKER , PATH_ELOCALTOOL + "gotoobj_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ELCL_QUICK_FIX_ENABLED , PATH_ELOCALTOOL + "smartmode_co.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_DLCL_QUICK_FIX_DISABLED , PATH_DLOCALTOOL + "smartmode_co.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDE . SharedImages . IMG_OBJS_TASK_TSK , PATH_OBJECT + "taskmrk_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDE . SharedImages . IMG_OBJS_BKMRK_TSK , PATH_OBJECT + "bkmrk_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_COMPLETE_TSK , PATH_OBJECT + "complete_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_INCOMPLETE_TSK , PATH_OBJECT + "incomplete_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_WELCOME_ITEM , PATH_OBJECT + "welcome_item.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_WELCOME_BANNER , PATH_OBJECT + "welcome_banner.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_ERROR_PATH , PATH_OBJECT + "error_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_WARNING_PATH , PATH_OBJECT + "warn_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_OBJS_INFO_PATH , PATH_OBJECT + "info_tsk.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_LCL_FLAT_LAYOUT , PATH_ELOCALTOOL + "flatLayout.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_LCL_HIERARCHICAL_LAYOUT , PATH_ELOCALTOOL + "hierarchicalLayout.gif" , true ) ; declareWorkbenchImage ( ideBundle , IDEInternalWorkbenchImages . IMG_ETOOL_PROBLEM_CATEGORY , PATH_ETOOL + "problem_category.gif" , true ) ; } private void declareWorkbenchImage ( Bundle ideBundle , String symbolicName , String path , boolean shared ) { URL url = FileLocator . find ( ideBundle , new Path ( path ) , null ) ; ImageDescriptor desc = ImageDescriptor . createFromURL ( url ) ; getWorkbenchConfigurer ( ) . declareImage ( symbolicName , desc , shared ) ; } public String getMainPreferencePageId ( ) { return WORKBENCH_PREFERENCE_CATEGORY_ID ; } public String getWorkspaceLocation ( ) { return workspaceLocation ; } public AboutInfo [ ] getWelcomePerspectiveInfos ( ) { if ( welcomePerspectiveInfos == null ) { if ( ! hasIntro ( ) ) { Map < String , AboutInfo > m = getNewlyAddedBundleGroups ( ) ; List < AboutInfo > list = new ArrayList < AboutInfo > ( m . size ( ) ) ; for ( Iterator < AboutInfo > i = m . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) { AboutInfo info = i . next ( ) ; if ( info != null && info . getWelcomePerspectiveId ( ) != null && info . getWelcomePageURL ( ) != null ) { list . add ( info ) ; } } welcomePerspectiveInfos = new AboutInfo [ list . size ( ) ] ; list . toArray ( welcomePerspectiveInfos ) ; } } return welcomePerspectiveInfos ; } public AbstractStatusHandler getWorkbenchErrorHandler ( ) { if ( ideWorkbenchErrorHandler == null ) { ideWorkbenchErrorHandler = new IDEWorkbenchErrorHandler ( getWorkbenchConfigurer ( ) ) ; } return ideWorkbenchErrorHandler ; } private static void tearDownSplash32Workaround ( ) { String launcherName = null ; IPath launcher = FileUtils . getApplicationLauncher ( true ) ; if ( launcher != null ) { launcherName = launcher . toOSString ( ) ; } if ( launcherName == null ) { return ; } PlatformUtils . ProcessItem [ ] processes = PlatformUtils . getRunningChildProcesses ( ) ; for ( int i = 0 ; i < processes . length ; ++ i ) { if ( launcherName . equals ( processes [ i ] . getExecutableName ( ) ) ) { PlatformUtils . killProcess ( processes [ i ] . getPid ( ) ) ; } } } } 
=======
public class FixedBucket implements RateLimiter { private volatile boolean enabled = true ; private int timeToLive = 1 ; private int allowedRequests = 1 ; private TokenStore cache ; public void setTokenStore ( TokenStore cache ) { this . cache = cache ; } public int getAllowedRequests ( ) { return this . allowedRequests ; } public void setAllowedRequests ( int allowedRequests ) { if ( allowedRequests > 0 ) { this . allowedRequests = allowedRequests ; } } public Token getToken ( Key key ) { Token result = TokenInstance . UNUSABLE ; if ( ! enabled ) { result = TokenInstance . USABLE ; } else { StoreEntry entry = cache . get ( key ) ; if ( entry == null ) { entry = cache . create ( key , timeToLive ) ; } int current = entry . incrementAndGet ( ) ; if ( current <= allowedRequests ) { result = TokenInstance . USABLE ; } } return result ; } public void init ( ) { } public boolean isEnabled ( ) { return enabled ; } public void setEnabled ( boolean enabled ) { this . enabled = enabled ; } public void setDuration ( int durationInSeconds ) { if ( durationInSeconds > 0 ) { this . timeToLive = durationInSeconds ; } } public int getDuration ( ) { return this . timeToLive ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
