<<<<<<< HEAD
public class PluginsTreeViewer implements ICheckStateListener { public static interface Listener { public void itemsChecked ( int count ) ; } private static final Color FOREGROUND_INSTALLED = Display . getDefault ( ) . getSystemColor ( SWT . COLOR_GRAY ) ; private static final Color FOREGROUND_REGULAR = Display . getDefault ( ) . getSystemColor ( SWT . COLOR_LIST_FOREGROUND ) ; private static class ContentProvider implements ITreeContentProvider { public Object [ ] getChildren ( Object parentElement ) { if ( parentElement instanceof PluginsTreeModel ) { PluginsTreeModel model = ( PluginsTreeModel ) parentElement ; return model . getCategories ( ) ; } if ( parentElement instanceof PluginTreeNode ) { PluginTreeNode node = ( PluginTreeNode ) parentElement ; return node . getChildren ( ) ; } return null ; } public Object getParent ( Object element ) { return null ; } public boolean hasChildren ( Object element ) { return getChildren ( element ) . length > 0 ; } public Object [ ] getElements ( Object inputElement ) { return getChildren ( inputElement ) ; } public void dispose ( ) { } public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } private class LabelProvider implements ITableLabelProvider { public Image getColumnImage ( Object element , int columnIndex ) { switch ( columnIndex ) { case 0 : Image image = null ; if ( element instanceof PluginTreeNode ) { Plugin plugin = getPlugin ( ( PluginTreeNode ) element ) ; if ( plugin != null ) { image = fImages . getImage ( ( Plugin ) plugin ) ; } } return image == null ? PluginsImageRegistry . getDefaultImage ( ) : image ; } return null ; } public String getColumnText ( Object element , int columnIndex ) { switch ( columnIndex ) { case 0 : if ( element instanceof PluginTreeNode ) { PluginTreeNode node = ( PluginTreeNode ) element ; Object data = node . getData ( ) ; if ( data == null ) { return node . getID ( ) ; } String name = data . toString ( ) ; if ( node . isInstalled ( ) ) { return name + " (installed)" ; } return name ; } break ; case 1 : if ( element instanceof PluginTreeNode ) { Plugin plugin = getPlugin ( ( PluginTreeNode ) element ) ; if ( plugin != null ) { String description = plugin . getDescription ( ) ; if ( description != null ) { return description ; } } } break ; } return null ; } public void addListener ( ILabelProviderListener listener ) { } public void dispose ( ) { } public boolean isLabelProperty ( Object element , String property ) { return false ; } public void removeListener ( ILabelProviderListener listener ) { } } private Plugin getPlugin ( PluginTreeNode node ) { Object data = node . getData ( ) ; if ( data != null && data instanceof Plugin ) { return ( Plugin ) data ; } return null ; } private class PluginsComparator extends ViewerComparator { public int category ( Object element ) { if ( element instanceof PluginTreeNode ) { PluginTreeNode node = ( PluginTreeNode ) element ; Object plugin = node . getData ( ) ; if ( plugin != null ) { if ( plugin instanceof InstallerCategory ) { return ( ( InstallerCategory ) plugin ) . getSortWeight ( ) ; } if ( plugin instanceof Plugin ) { return ( ( Plugin ) plugin ) . getSortweight ( ) ; } } } return super . category ( element ) ; } } private ContainerCheckedTreeViewer fTreeViewer ; private PluginsTreeModel fModel ; private Object [ ] fCheckedElements ; private PluginsImageRegistry fImages ; private List < Listener > fListeners ; public PluginsTreeViewer ( Composite parent ) { fImages = new PluginsImageRegistry ( parent . getDisplay ( ) ) ; fCheckedElements = new Object [ 0 ] ; fListeners = new ArrayList < Listener > ( ) ; createContents ( parent ) ; } public void addListener ( Listener listener ) { fListeners . add ( listener ) ; } public void removeListener ( Listener listener ) { fListeners . remove ( listener ) ; } public void dispose ( ) { fModel . clear ( ) ; fListeners . clear ( ) ; } public Control getControl ( ) { return fTreeViewer . getControl ( ) ; } public Plugin [ ] getSelectedPlugins ( ) { List < Plugin > plugins = new ArrayList < Plugin > ( ) ; Object [ ] elements = fTreeViewer . getCheckedElements ( ) ; PluginTreeNode node ; for ( Object element : elements ) { if ( element instanceof PluginTreeNode ) { node = ( PluginTreeNode ) element ; if ( ! node . isInstalled ( ) && node . getData ( ) instanceof Plugin ) { plugins . add ( ( Plugin ) node . getData ( ) ) ; } } } return plugins . toArray ( new Plugin [ plugins . size ( ) ] ) ; } public void setExpandedCategories ( String [ ] categoryIDs ) { if ( categoryIDs == null || categoryIDs . length == 0 ) { return ; } List < PluginTreeNode > categories = new ArrayList < PluginTreeNode > ( ) ; PluginTreeNode category ; for ( String id : categoryIDs ) { category = fModel . getCategory ( id ) ; if ( category != null ) { categories . add ( category ) ; } } fTreeViewer . setExpandedElements ( categories . toArray ( new PluginTreeNode [ categories . size ( ) ] ) ) ; if ( categories . size ( ) > 0 ) { fTreeViewer . setSelection ( new StructuredSelection ( categories . get ( 0 ) ) ) ; } } public void checkStateChanged ( CheckStateChangedEvent event ) { Object element = event . getElement ( ) ; if ( element instanceof PluginTreeNode ) { PluginTreeNode node = ( PluginTreeNode ) element ; if ( node . isInstalled ( ) || hasInstalledChildren ( node ) ) { fTreeViewer . setCheckedElements ( fCheckedElements ) ; } else { List < Object > checked = new ArrayList < Object > ( ) ; Object [ ] elements = fTreeViewer . getCheckedElements ( ) ; for ( Object checkedElement : elements ) { if ( ! fTreeViewer . getGrayed ( checkedElement ) ) { checked . add ( checkedElement ) ; } } fCheckedElements = checked . toArray ( new Object [ checked . size ( ) ] ) ; fireItemsCheckedEvent ( ) ; } } } private void createContents ( Composite parent ) { fTreeViewer = new ContainerCheckedTreeViewer ( parent , SWT . SINGLE | SWT . FULL_SELECTION | SWT . H_SCROLL | SWT . V_SCROLL | SWT . BORDER ) ; Tree tree = fTreeViewer . getTree ( ) ; tree . setHeaderVisible ( true ) ; fTreeViewer . setAutoExpandLevel ( AbstractTreeViewer . ALL_LEVELS ) ; TreeColumn column = new TreeColumn ( tree , SWT . LEFT ) ; column . setText ( "Plugin" ) ; column . setWidth ( 350 ) ; column = new TreeColumn ( tree , SWT . LEFT ) ; column . setText ( "Description" ) ; column . setWidth ( 350 ) ; fTreeViewer . setContentProvider ( new ContentProvider ( ) ) ; fTreeViewer . setLabelProvider ( new LabelProvider ( ) ) ; fTreeViewer . setComparator ( new PluginsComparator ( ) ) ; fTreeViewer . setInput ( fModel = new PluginsTreeModel ( ) ) ; fTreeViewer . addCheckStateListener ( this ) ; fTreeViewer . addTreeListener ( new ITreeViewerListener ( ) { public void treeCollapsed ( TreeExpansionEvent event ) { updateForeground ( ) ; } public void treeExpanded ( TreeExpansionEvent event ) { updateForeground ( ) ; } } ) ; updateExpansionState ( ) ; updateForeground ( ) ; } private void updateExpansionState ( ) { fTreeViewer . setExpandedElements ( fModel . getExpandedCategories ( ) ) ; } private void updateForeground ( ) { List < TreeItem > items = new ArrayList < TreeItem > ( ) ; getAllVisibleItems ( items , fTreeViewer . getTree ( ) . getItems ( ) ) ; Object data ; PluginTreeNode node ; for ( TreeItem item : items ) { data = item . getData ( ) ; if ( data != null && data instanceof PluginTreeNode ) { node = ( PluginTreeNode ) data ; if ( node . isInstalled ( ) ) { item . setForeground ( FOREGROUND_INSTALLED ) ; } else { item . setForeground ( FOREGROUND_REGULAR ) ; } } } } private void fireItemsCheckedEvent ( ) { int count = fCheckedElements . length ; for ( Listener listener : fListeners ) { listener . itemsChecked ( count ) ; } } private static void getAllVisibleItems ( List < TreeItem > items , TreeItem [ ] topLevelItems ) { for ( TreeItem item : topLevelItems ) { items . add ( item ) ; getAllVisibleItems ( items , item . getItems ( ) ) ; } } private static boolean hasInstalledChildren ( PluginTreeNode node ) { PluginTreeNode [ ] children = node . getChildren ( ) ; for ( PluginTreeNode child : children ) { if ( child . isInstalled ( ) || hasInstalledChildren ( child ) ) { return true ; } } return false ; } } 
=======
public class Sub implements MessageHandler { public Sub ( Address ownAddress , Address source ) { boolean subscribedOk = new Message ( ownAddress , source , ( "{\"name\":\"" + ownAddress + "\"}" ) . getBytes ( ) , "application/json" , "subscribe" ) . deliver ( ) ; if ( subscribedOk ) { System . out . println ( "Subscribed " + source + " -> " + ownAddress ) ; } else { throw new RuntimeException ( "Couldn't subscribe to " + source ) ; } } public int handleMessage ( Message msg ) { try { System . out . println ( msg . getSender ( ) + " -> " + msg . getTarget ( ) + ", " + msg . getContentType ( ) + ": " + msg . getBody ( "ASCII" ) ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } return 200 ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
