<<<<<<< HEAD
public class TwitterArticleDisplay extends AbstractArticleDisplay implements IArticleListener { private static final String TEXT_STYLE_NAME = "normal" ; private static final CellConstraints CELL_CONSTRAINTS = new CellConstraints ( ) ; private static final Pattern PATTERN_USERNAME = Pattern . compile ( "^\\s*(<b>)?\\s*([^\\s<:]+)\\s*(</b>)?\\s*:\\s*(.*)$" , Pattern . CASE_INSENSITIVE | Pattern . DOTALL ) ; private final IArticleDisplayConfig config ; private final IArticle article ; private int mode ; private boolean selected ; private JEditorPane tfText ; private JEditorPane tfFullText ; private ProgressSpinner spinner ; private JLabel lbDate ; private ArticlePinControl lbPin ; private LinkLabel lnReply ; private LinkLabel lnFullText ; private LinkLabel lnHideText ; private JPanel pnlControls ; public TwitterArticleDisplay ( IArticle article , IArticleDisplayConfig config ) { this . article = article ; this . config = config ; initComponents ( ) ; setBorder ( new UpDownBorder ( HTMLArticleDisplay . COLOR_BORDER_LINE ) ) ; initTextStyle ( article , config ) ; onThemeChange ( ) ; setText ( ) ; setViewMode ( config . getViewMode ( ) ) ; } private void initTextStyle ( IArticle article , IArticleDisplayConfig config ) { HTMLDocument doc = ( HTMLDocument ) tfText . getDocument ( ) ; doc . setBase ( article . getLink ( ) ) ; Style def = doc . getStyle ( "default" ) ; doc . addStyle ( TEXT_STYLE_NAME , def ) ; UifUtilities . setFontAttributes ( doc , TEXT_STYLE_NAME , config . getTitleFont ( article . isRead ( ) ) ) ; doc = ( HTMLDocument ) tfFullText . getDocument ( ) ; doc . setBase ( article . getLink ( ) ) ; def = doc . getStyle ( "default" ) ; doc . addStyle ( TEXT_STYLE_NAME , def ) ; UifUtilities . setFontAttributes ( doc , TEXT_STYLE_NAME , config . getTextFont ( ) ) ; } private void setText ( ) { String name ; String link = null ; String text = article . getHtmlText ( ) ; if ( text != null ) { Matcher m = PATTERN_USERNAME . matcher ( text ) ; if ( m . find ( ) ) { name = m . group ( 2 ) ; text = m . group ( 4 ) ; } else { name = article . getAuthor ( ) . split ( "\\s" ) [ 0 ] ; } link = "http://twitter.com/" + name ; if ( TwitterFeature . areAdvancedFeaturesAvailable ( ) ) { text = "<a href='" + link + "' rel='twitter'>" + name + "</a>: " + text ; text = text . replaceAll ( "@([\\w\\d]+)" , "<a href=\"http://twitter.com/$1\">@$1</a>" ) ; text = text . replaceAll ( "#([\\w\\d]+)" , "<a href=\"http://search.twitter.com/search?q=%23$1\">#$1</a>" ) ; } else { text = name + ": " + text ; } if ( SystemUtils . IS_OS_MAC ) text = "<p id='start'>" + text ; } HTMLDocument doc = ( HTMLDocument ) tfText . getDocument ( ) ; doc . putProperty ( Document . StreamDescriptionProperty , ( ( NetworkFeed ) article . getFeed ( ) ) . getXmlURL ( ) ) ; tfText . setText ( text ) ; UifUtilities . installTextStyle ( tfText , TEXT_STYLE_NAME ) ; if ( link != null ) { try { lnReply . setLink ( new URL ( link ) ) ; } catch ( MalformedURLException e ) { lnReply . setVisible ( false ) ; } } lnHideText . setVisible ( true ) ; if ( ! article . getPlainText ( ) . contains ( "http://" ) ) { lnFullText . setVisible ( false ) ; } else { tfFullText . setVisible ( false ) ; tfFullText . setText ( "<p id='start'>&nbsp;</p>" ) ; UifUtilities . installTextStyle ( tfFullText , TEXT_STYLE_NAME ) ; java . util . List < String > links = StringUtils . collectLinks ( article . getPlainText ( ) ) ; try { lnFullText . setLink ( new URL ( links . get ( 0 ) ) ) ; lnFullText . setVisible ( true ) ; } catch ( MalformedURLException e ) { lnFullText . setVisible ( false ) ; } } } private void setTextButton ( boolean full ) { Component btn = full ? lnFullText : lnHideText ; Component other = full ? lnHideText : lnFullText ; pnlControls . remove ( other ) ; pnlControls . add ( btn , CELL_CONSTRAINTS . xy ( 7 , 2 ) ) ; } private void initComponents ( ) { Date date = article . getPublicationDate ( ) ; GlobalModel model = GlobalModel . SINGLETON ; tfText = createTextArea ( ) ; tfFullText = createTextArea ( ) ; tfFullText . setBorder ( BorderFactory . createCompoundBorder ( BorderFactory . createEmptyBorder ( 0 , 30 , 0 , 0 ) , BorderFactory . createCompoundBorder ( BorderFactory . createMatteBorder ( 0 , 5 , 0 , 0 , Color . lightGray ) , BorderFactory . createEmptyBorder ( 0 , 10 , 0 , 0 ) ) ) ) ; lbDate = new JLabel ( SimpleDateFormat . getDateInstance ( ) . format ( date ) , SwingConstants . LEFT ) ; lbPin = new ArticlePinControl ( model . getSelectedGuide ( ) , model . getSelectedFeed ( ) , article ) ; lnHideText = new LinkButton ( "hide.text.button" ) { protected void doAction ( ) { setTextButton ( true ) ; tfFullText . setVisible ( false ) ; } } ; lnFullText = new LinkButton ( "full.text.button" ) { protected void doAction ( ) { setTextButton ( false ) ; spinner . start ( ) ; final String link = this . getLink ( ) . toString ( ) ; new SwingWorker < String , String > ( ) { @ Override protected String doInBackground ( ) throws Exception { return ReadItLater . mobilize ( link ) ; } @ Override protected void done ( ) { spinner . stop ( ) ; try { String readable = super . get ( ) ; tfFullText . setText ( readable ) ; tfFullText . setVisible ( true ) ; UifUtilities . installTextStyle ( tfFullText , TEXT_STYLE_NAME ) ; } catch ( InterruptedException ignored ) { } catch ( ExecutionException e ) { JOptionPane . showMessageDialog ( TwitterArticleDisplay . this , "Failed to load full article text" ) ; } } } . execute ( ) ; } } ; lnFullText . setForeground ( LinkLabel . HIGHLIGHT_COLOR ) ; lnHideText . setForeground ( LinkLabel . HIGHLIGHT_COLOR ) ; lnReply = new LinkButton ( "reply.button" ) { protected void doAction ( ) { ReplyAction action = ( ReplyAction ) ActionManager . get ( ActionsTable . CMD_TWITTER_REPLY ) ; action . setUserURL ( lnReply . getLink ( ) ) ; action . actionPerformed ( null ) ; } } ; lnReply . setForeground ( LinkLabel . HIGHLIGHT_COLOR ) ; spinner = new ProgressSpinner ( ) ; setLayout ( new FormLayout ( "5dlu, min:grow, 5dlu" , "5dlu, pref, pref, pref, 5dlu" ) ) ; pnlControls = new JPanel ( new FormLayout ( "pref, 5dlu, pref, 5dlu, pref, 5dlu, pref, 5dlu, pref, 0:grow" , "3dlu, pref" ) ) ; pnlControls . add ( lbPin , CELL_CONSTRAINTS . xy ( 1 , 2 ) ) ; pnlControls . add ( lbDate , CELL_CONSTRAINTS . xy ( 3 , 2 ) ) ; pnlControls . add ( lnReply , CELL_CONSTRAINTS . xy ( 5 , 2 ) ) ; setTextButton ( true ) ; pnlControls . add ( spinner , CELL_CONSTRAINTS . xy ( 9 , 2 ) ) ; add ( tfText , CELL_CONSTRAINTS . xy ( 2 , 2 ) ) ; add ( tfFullText , CELL_CONSTRAINTS . xy ( 2 , 3 ) ) ; add ( pnlControls , CELL_CONSTRAINTS . xy ( 2 , 4 ) ) ; DelegatingMouseListener ml = new DelegatingMouseListener ( this , true ) ; this . addMouseListener ( ml ) ; lbDate . addMouseListener ( ml ) ; tfText . addMouseListener ( ml ) ; tfFullText . addMouseListener ( ml ) ; } private JEditorPane createTextArea ( ) { final JEditorPane pane = new JEditorPane ( ) ; pane . setEditorKit ( new CustomHTMLEditorKit ( ) ) ; pane . setAlignmentX ( 0.0f ) ; pane . setEditable ( false ) ; return pane ; } private void updateReadState ( ) { updateFonts ( ) ; } private void updateForegrounds ( ) { lbDate . setForeground ( config . getDateFGColor ( selected ) ) ; } private void updateBackgrounds ( ) { Color color = config . getGlobalBGColor ( selected ) ; setBackground ( color ) ; pnlControls . setBackground ( color ) ; tfText . setBackground ( color ) ; tfFullText . setBackground ( color ) ; } private void updateFonts ( ) { Font dateFont = config . getDateFont ( ) ; lbDate . setFont ( dateFont ) ; lnReply . setFont ( config . getTextFont ( ) ) ; HTMLDocument doc = ( HTMLDocument ) tfText . getDocument ( ) ; UifUtilities . setFontAttributes ( doc , TEXT_STYLE_NAME , config . getTitleFont ( article . isRead ( ) ) ) ; UifUtilities . installTextStyle ( tfText , TEXT_STYLE_NAME ) ; doc = ( HTMLDocument ) tfFullText . getDocument ( ) ; UifUtilities . setFontAttributes ( doc , TEXT_STYLE_NAME , config . getTextFont ( ) ) ; UifUtilities . installTextStyle ( tfFullText , TEXT_STYLE_NAME ) ; doLayout ( ) ; } public IArticle getArticle ( ) { return article ; } public IArticleListener getArticleListener ( ) { return this ; } public Component getComponent ( ) { return this ; } public void addHyperlinkListener ( HyperlinkListener aListener ) { tfText . addHyperlinkListener ( aListener ) ; tfFullText . addHyperlinkListener ( aListener ) ; } public void onViewModeChange ( ) { setViewMode ( config . getViewMode ( ) ) ; doLayout ( ) ; } public int getViewMode ( ) { return mode ; } public void setViewMode ( int aMode ) { mode = aMode ; pnlControls . setVisible ( aMode != IFeedDisplayConstants . MODE_MINIMAL ) ; } public void setSelected ( boolean sel ) { if ( selected != sel ) { handleAutoOpeningOnSelection ( sel ) ; selected = sel ; updateBackgrounds ( ) ; } } public void onFontBiasChange ( ) { updateFonts ( ) ; } public void onThemeChange ( ) { updateFonts ( ) ; updateBackgrounds ( ) ; updateForegrounds ( ) ; } public void setCollapsed ( boolean col ) { } public boolean focus ( ) { return this . requestFocusInWindow ( ) ; } public void updateHighlights ( ) { } public void updateColorCode ( ) { } public void propertyChanged ( IArticle article , String property , Object oldValue , Object newValue ) { if ( IArticle . PROP_READ . equals ( property ) ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { updateReadState ( ) ; } } ) ; } } } 
=======
class TextOnlyFunction extends EndAttributesFunction { TextOnlyFunction ( ValidatorPatternBuilder builder ) { super ( builder ) ; } public Pattern caseAttribute ( AttributePattern p ) { return p ; } public Pattern caseElement ( ElementPattern p ) { return getPatternBuilder ( ) . makeNotAllowed ( ) ; } PatternMemo apply ( PatternMemo memo ) { return memo . textOnly ( this ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
