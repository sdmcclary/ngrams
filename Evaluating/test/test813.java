public class JUnitNotificationPopupColors { private final Display display ; private Color titleText ; private Color gradientBegin ; private Color gradientEnd ; private Color border ; private final ResourceManager resourceManager ; private JUnitNotification notification ; private Color baseColor ; public JUnitNotificationPopupColors ( Display display , ResourceManager resourceManager , JUnitNotification notification ) { this . display = display ; this . resourceManager = resourceManager ; this . notification = notification ; createColors ( ) ; } private void createColors ( ) { computeBaseColor ( ) ; createBorderColor ( ) ; createGradientColors ( ) ; titleText = getColor ( resourceManager , getSystemColor ( SWT . COLOR_WIDGET_DARK_SHADOW ) ) ; } private void computeBaseColor ( ) { Result result = ( Result ) notification . getAdapter ( Result . class ) ; if ( Result . OK . equals ( result ) ) { baseColor = display . getSystemColor ( SWT . COLOR_GREEN ) ; } else { baseColor = display . getSystemColor ( SWT . COLOR_RED ) ; } } public Color getGradientBegin ( ) { return gradientBegin ; } public Color getGradientEnd ( ) { return gradientEnd ; } public Color getBorder ( ) { return border ; } public Color getTitleText ( ) { return titleText ; } private void createBorderColor ( ) { RGB tbBorder = baseColor . getRGB ( ) ; RGB bg = getImpliedBackground ( ) . getRGB ( ) ; if ( testTwoPrimaryColors ( tbBorder , 179 , 256 ) ) { tbBorder = blend ( tbBorder , bg , 70 ) ; } else if ( testTwoPrimaryColors ( tbBorder , 120 , 180 ) ) { tbBorder = blend ( tbBorder , bg , 50 ) ; } else { tbBorder = blend ( tbBorder , bg , 30 ) ; } border = getColor ( resourceManager , tbBorder ) ; } private void createGradientColors ( ) { RGB titleBg = baseColor . getRGB ( ) ; Color bgColor = getImpliedBackground ( ) ; RGB bg = bgColor . getRGB ( ) ; RGB bottom , top ; if ( testTwoPrimaryColors ( titleBg , 179 , 256 ) ) { bottom = blend ( titleBg , bg , 30 ) ; top = bg ; } else if ( testTwoPrimaryColors ( titleBg , 120 , 180 ) ) { bottom = blend ( titleBg , bg , 20 ) ; top = bg ; } else { bottom = blend ( titleBg , bg , 10 ) ; top = bg ; } gradientBegin = getColor ( resourceManager , top ) ; gradientEnd = getColor ( resourceManager , bottom ) ; } private RGB blend ( RGB c1 , RGB c2 , int ratio ) { int r = blend ( c1 . red , c2 . red , ratio ) ; int g = blend ( c1 . green , c2 . green , ratio ) ; int b = blend ( c1 . blue , c2 . blue , ratio ) ; return new RGB ( r , g , b ) ; } private int blend ( int v1 , int v2 , int ratio ) { int b = ( ratio * v1 + ( 100 - ratio ) * v2 ) / 100 ; return Math . min ( 255 , b ) ; } private boolean testTwoPrimaryColors ( RGB rgb , int from , int to ) { int total = 0 ; if ( testPrimaryColor ( rgb . red , from , to ) ) { total ++ ; } if ( testPrimaryColor ( rgb . green , from , to ) ) { total ++ ; } if ( testPrimaryColor ( rgb . blue , from , to ) ) { total ++ ; } return total >= 2 ; } private boolean testPrimaryColor ( int value , int from , int to ) { return value > from && value < to ; } private RGB getSystemColor ( int code ) { return getDisplay ( ) . getSystemColor ( code ) . getRGB ( ) ; } private Color getImpliedBackground ( ) { return display . getSystemColor ( SWT . COLOR_LIST_BACKGROUND ) ; } private Display getDisplay ( ) { return display ; } private Color getColor ( ResourceManager manager , RGB rgb ) { try { return manager . createColor ( rgb ) ; } catch ( DeviceResourceException e ) { return manager . getDevice ( ) . getSystemColor ( SWT . COLOR_BLACK ) ; } } } 