<<<<<<< HEAD
public class AJAXMonitorPage extends Page { private Control mainControl ; private TableViewer tableViewer ; private Viewer [ ] requestData = new Viewer [ 2 ] ; private Viewer [ ] responseData = new Viewer [ 2 ] ; public AJAXMonitorPage ( ) { } public void createControl ( Composite parent ) { SashForm hSashForm = new SashForm ( parent , SWT . VERTICAL ) ; hSashForm . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; hSashForm . setBackgroundMode ( SWT . INHERIT_DEFAULT ) ; createRequestsTable ( hSashForm ) ; SashForm vSashForm = new SashForm ( hSashForm , SWT . HORIZONTAL ) ; vSashForm . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; createDetailsPart ( vSashForm , Messages . AJAXMonitorPage_Request , requestData ) ; createDetailsPart ( vSashForm , Messages . AJAXMonitorPage_Response , responseData ) ; tableViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { ISelection selection = event . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { IXHRTransfer xhr = ( IXHRTransfer ) ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; updateDetails ( xhr ) ; } } } ) ; PreferenceUtils . registerBackgroundColorPreference ( tableViewer . getTable ( ) , "com.aptana.ide.core.ui.background.color.ajaxmonitor" ) ; PreferenceUtils . registerForegroundColorPreference ( tableViewer . getTable ( ) , "com.aptana.ide.core.ui.foreground.color.ajaxmonitor" ) ; for ( int a = 0 ; a < requestData . length ; a ++ ) { PreferenceUtils . registerBackgroundColorPreference ( requestData [ a ] . getControl ( ) , "com.aptana.ide.core.ui.background.color.ajaxmonitor.request" ) ; PreferenceUtils . registerForegroundColorPreference ( requestData [ a ] . getControl ( ) , "com.aptana.ide.core.ui.foreground.color.ajaxmonitor.request" ) ; } for ( int a = 0 ; a < responseData . length ; a ++ ) { PreferenceUtils . registerBackgroundColorPreference ( responseData [ a ] . getControl ( ) , "com.aptana.ide.core.ui.background.color.ajaxmonitor.response" ) ; PreferenceUtils . registerForegroundColorPreference ( responseData [ a ] . getControl ( ) , "com.aptana.ide.core.ui.foreground.color.ajaxmonitor.response" ) ; } PreferenceUtils . registerBackgroundColorPreference ( hSashForm , "com.aptana.ide.core.ui.background.color.ajaxmonitor.border" ) ; PreferenceUtils . registerForegroundColorPreference ( hSashForm , "com.aptana.ide.core.ui.foreground.color.ajaxmonitor.border" ) ; mainControl = hSashForm ; } private void createRequestsTable ( Composite parent ) { tableViewer = new TableViewer ( parent , SWT . SINGLE | SWT . FULL_SELECTION ) ; Table table = tableViewer . getTable ( ) ; table . setHeaderVisible ( true ) ; table . setLinesVisible ( true ) ; table . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; TableLayout tableLayout = new TableLayout ( ) ; table . setLayout ( tableLayout ) ; TableColumn column = new TableColumn ( table , SWT . LEFT ) ; column . setResizable ( false ) ; tableLayout . addColumnData ( new ColumnPixelData ( 20 ) ) ; column = new TableColumn ( table , SWT . LEFT ) ; column . setText ( Messages . AJAXMonitorPage_URL ) ; tableLayout . addColumnData ( new ColumnWeightData ( 60 ) ) ; column = new TableColumn ( table , SWT . LEFT ) ; column . setText ( Messages . AJAXMonitorPage_Method ) ; tableLayout . addColumnData ( new ColumnWeightData ( 10 ) ) ; column = new TableColumn ( table , SWT . LEFT ) ; column . setText ( Messages . AJAXMonitorPage_Sent ) ; tableLayout . addColumnData ( new ColumnWeightData ( 10 ) ) ; column = new TableColumn ( table , SWT . LEFT ) ; column . setText ( Messages . AJAXMonitorPage_Received ) ; tableLayout . addColumnData ( new ColumnWeightData ( 10 ) ) ; tableViewer . setContentProvider ( new XHRContentProvider ( ) ) ; tableViewer . setLabelProvider ( new XHRLabelProvider ( ) ) ; PreferenceUtils . persist ( DebugUiPlugin . getDefault ( ) . getPreferenceStore ( ) , tableViewer . getTable ( ) , "ajaxMonitorPage.requestsPart" ) ; } private void createDetailsPart ( Composite parent , String name , Viewer [ ] viewers ) { Composite container = new Composite ( parent , SWT . NONE ) ; container . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; GridLayout layout = new GridLayout ( 1 , false ) ; layout . marginHeight = 0 ; layout . horizontalSpacing = 0 ; layout . marginWidth /= 2 ; container . setLayout ( layout ) ; Label label = new Label ( container , SWT . NONE ) ; label . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; label . setText ( name ) ; CTabFolder tab = new CTabFolder ( container , SWT . BOTTOM | SWT . FLAT | SWT . BORDER ) ; tab . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; TableViewer viewer = new TableViewer ( tab , SWT . SINGLE | SWT . FULL_SELECTION ) ; Table table = viewer . getTable ( ) ; TableLayout tableLayout = new TableLayout ( ) ; table . setLayout ( tableLayout ) ; table . setHeaderVisible ( false ) ; table . setLinesVisible ( true ) ; TableColumn column = new TableColumn ( table , SWT . LEFT ) ; column . setText ( Messages . AJAXMonitorPage_Name ) ; tableLayout . addColumnData ( new ColumnWeightData ( 50 ) ) ; column = new TableColumn ( table , SWT . LEFT ) ; column . setText ( Messages . AJAXMonitorPage_Value ) ; tableLayout . addColumnData ( new ColumnWeightData ( 50 ) ) ; viewer . setContentProvider ( new XHRContentProvider ( ) ) ; viewer . setLabelProvider ( new XHRLabelProvider ( ) ) ; viewers [ 0 ] = viewer ; CTabItem item = new CTabItem ( tab , SWT . NONE ) ; item . setControl ( viewers [ 0 ] . getControl ( ) ) ; item . setText ( Messages . AJAXMonitorPage_Headers ) ; TextViewer textViewer = new TextViewer ( tab , SWT . READ_ONLY | SWT . V_SCROLL | SWT . H_SCROLL ) ; item = new CTabItem ( tab , SWT . NONE ) ; item . setControl ( textViewer . getControl ( ) ) ; item . setText ( Messages . AJAXMonitorPage_Body ) ; textViewer . setEditable ( false ) ; textViewer . setDocument ( new Document ( ) ) ; viewers [ 1 ] = textViewer ; PreferenceUtils . persist ( DebugUiPlugin . getDefault ( ) . getPreferenceStore ( ) , viewer . getTable ( ) , "ajaxMonitorPage.detailsPart" ) ; tab . setSelection ( item ) ; } private void updateDetails ( IXHRTransfer xhr ) { if ( xhr != null ) { requestData [ 0 ] . setInput ( xhr . getRequestHeaders ( ) ) ; ( ( IDocument ) requestData [ 1 ] . getInput ( ) ) . set ( xhr . getRequestBody ( ) ) ; responseData [ 0 ] . setInput ( xhr . getResponseHeaders ( ) ) ; ( ( IDocument ) responseData [ 1 ] . getInput ( ) ) . set ( xhr . getResponseBody ( ) ) ; } else { requestData [ 0 ] . setInput ( null ) ; ( ( IDocument ) requestData [ 1 ] . getInput ( ) ) . set ( StringUtils . EMPTY ) ; responseData [ 0 ] . setInput ( null ) ; ( ( IDocument ) responseData [ 1 ] . getInput ( ) ) . set ( StringUtils . EMPTY ) ; } } public Control getControl ( ) { return mainControl ; } public void setFocus ( ) { tableViewer . getControl ( ) . setFocus ( ) ; } public Viewer getViewer ( ) { return tableViewer ; } } 
=======
public class LanguageData { private static final Pattern HYPHEN = Pattern . compile ( "-" ) ; private static final String [ ] [ ] EMPTY_DOUBLE_STRING_ARRAY = { } ; private static final String [ ] EMPTY_STRING_ARRAY = { } ; private static final String PREFIX = "prefix: " ; private static final String SUPPRESS_SCRIPT = "suppress-script: " ; private static final String SUBTAG = "subtag: " ; private static final String TAG = "tag: " ; private static final String TYPE = "type: " ; private static final String DEPRECATED = "deprecated: " ; private static final String PREFERRED_VALUE = "preferred-value: " ; private BufferedReader in ; private SortedSet < String > languageSet = new TreeSet < String > ( ) ; private SortedSet < String > extlangSet = new TreeSet < String > ( ) ; private SortedSet < String > scriptSet = new TreeSet < String > ( ) ; private SortedSet < String > regionSet = new TreeSet < String > ( ) ; private SortedSet < String > variantSet = new TreeSet < String > ( ) ; private SortedSet < String > grandfatheredSet = new TreeSet < String > ( ) ; private SortedSet < String > redundantSet = new TreeSet < String > ( ) ; private SortedSet < String > deprecatedLangSet = new TreeSet < String > ( ) ; private SortedSet < String > deprecatedSet = new TreeSet < String > ( ) ; private Map < String , String > suppressedScriptByLanguageMap = new HashMap < String , String > ( ) ; private Map < String , String > prefixByExtlangMap = new HashMap < String , String > ( ) ; private Map < String , String > preferredValueByLanguageMap = new HashMap < String , String > ( ) ; private Map < String , Set < String [ ] > > prefixesByVariantMap = new HashMap < String , Set < String [ ] > > ( ) ; private String [ ] languages = null ; private String [ ] extlangs = null ; private String [ ] scripts = null ; private String [ ] regions = null ; private String [ ] variants = null ; private String [ ] grandfathered = null ; private String [ ] redundant = null ; private String [ ] deprecatedLang = null ; private String [ ] deprecated = null ; private int [ ] suppressedScriptByLanguage = null ; private int [ ] prefixByExtlang = null ; private String [ ] [ ] [ ] prefixesByVariant = null ; public LanguageData ( ) throws IOException { super ( ) ; in = new BufferedReader ( new InputStreamReader ( LanguageData . class . getClassLoader ( ) . getResourceAsStream ( "nu/validator/localentities/files/language-subtag-registry" ) , "UTF-8" ) ) ; consumeRegistry ( ) ; prepareArrays ( ) ; } private void consumeRegistry ( ) throws IOException { while ( consumeRecord ( ) ) { } in . close ( ) ; } private void prepareArrays ( ) throws IOException { scripts = scriptSet . toArray ( EMPTY_STRING_ARRAY ) ; regions = regionSet . toArray ( EMPTY_STRING_ARRAY ) ; grandfathered = grandfatheredSet . toArray ( EMPTY_STRING_ARRAY ) ; redundant = redundantSet . toArray ( EMPTY_STRING_ARRAY ) ; deprecated = deprecatedSet . toArray ( EMPTY_STRING_ARRAY ) ; deprecatedLang = deprecatedLangSet . toArray ( EMPTY_STRING_ARRAY ) ; int i = 0 ; languages = new String [ languageSet . size ( ) ] ; suppressedScriptByLanguage = new int [ languageSet . size ( ) ] ; for ( String language : languageSet ) { languages [ i ] = language ; String suppressed = suppressedScriptByLanguageMap . get ( language ) ; if ( suppressed == null ) { suppressedScriptByLanguage [ i ] = - 1 ; } else { int index = Arrays . binarySearch ( scripts , suppressed ) ; if ( index < 0 ) { throw new IOException ( "Malformed registry: reference to non-existent script." ) ; } suppressedScriptByLanguage [ i ] = index ; } i ++ ; } i = 0 ; extlangs = new String [ extlangSet . size ( ) ] ; prefixByExtlang = new int [ extlangSet . size ( ) ] ; for ( String extlang : extlangSet ) { extlangs [ i ] = extlang ; String prefix = prefixByExtlangMap . get ( extlang ) ; if ( prefix == null ) { prefixByExtlang [ i ] = - 1 ; } else { int index = Arrays . binarySearch ( languages , prefix ) ; if ( index < 0 ) { throw new IOException ( "Malformed registry: reference to non-existent prefix for extlang." ) ; } prefixByExtlang [ i ] = index ; } i ++ ; } i = 0 ; variants = new String [ variantSet . size ( ) ] ; prefixesByVariant = new String [ variantSet . size ( ) ] [ ] [ ] ; for ( String variant : variantSet ) { variants [ i ] = variant ; Set < String [ ] > prefixes = prefixesByVariantMap . get ( variant ) ; if ( prefixes != null ) { prefixesByVariant [ i ] = prefixes . toArray ( EMPTY_DOUBLE_STRING_ARRAY ) ; } else { prefixesByVariant [ i ] = EMPTY_DOUBLE_STRING_ARRAY ; } i ++ ; } } private boolean consumeRecord ( ) throws IOException { boolean hasMore = true ; String type = null ; String subtag = null ; String suppressScript = null ; String preferredValue = null ; Set < String [ ] > prefixes = new HashSet < String [ ] > ( ) ; String singlePrefix = null ; boolean depr = false ; String line = null ; for ( ; ; ) { line = in . readLine ( ) ; if ( line == null ) { hasMore = false ; break ; } line = line . toLowerCase ( ) ; if ( "%%" . equals ( line ) ) { break ; } else if ( line . startsWith ( TYPE ) ) { type = line . substring ( TYPE . length ( ) ) . trim ( ) . intern ( ) ; } else if ( line . startsWith ( SUBTAG ) ) { subtag = line . substring ( SUBTAG . length ( ) ) . trim ( ) . intern ( ) ; } else if ( line . startsWith ( TAG ) ) { subtag = line . substring ( TAG . length ( ) ) . trim ( ) . intern ( ) ; } else if ( line . startsWith ( SUPPRESS_SCRIPT ) ) { suppressScript = line . substring ( SUPPRESS_SCRIPT . length ( ) ) . trim ( ) . intern ( ) ; } else if ( line . startsWith ( PREFIX ) ) { String [ ] prefixSubtags = HYPHEN . split ( line . substring ( PREFIX . length ( ) ) . trim ( ) ) ; for ( int i = 0 ; i < prefixSubtags . length ; i ++ ) { prefixSubtags [ i ] = prefixSubtags [ i ] . intern ( ) ; } prefixes . add ( prefixSubtags ) ; singlePrefix = prefixSubtags [ 0 ] ; } else if ( line . startsWith ( DEPRECATED ) ) { depr = true ; } else if ( line . startsWith ( PREFERRED_VALUE ) ) { preferredValue = line . substring ( PREFERRED_VALUE . length ( ) ) . trim ( ) . intern ( ) ; preferredValueByLanguageMap . put ( subtag , preferredValue ) ; } } if ( subtag == null ) { return hasMore ; } if ( depr ) { if ( "language" == type ) { deprecatedLangSet . add ( subtag ) ; } else { deprecatedSet . add ( subtag ) ; } } if ( "language" == type ) { languageSet . add ( subtag ) ; suppressedScriptByLanguageMap . put ( subtag , suppressScript ) ; } if ( "extlang" == type ) { extlangSet . add ( subtag ) ; prefixByExtlangMap . put ( subtag , singlePrefix ) ; } else if ( "region" == type ) { regionSet . add ( subtag ) ; } else if ( "script" == type ) { scriptSet . add ( subtag ) ; } else if ( "variant" == type ) { variantSet . add ( subtag ) ; prefixesByVariantMap . put ( subtag , prefixes ) ; } else if ( "grandfathered" == type ) { grandfatheredSet . add ( subtag ) ; } else if ( "redundant" == type ) { redundantSet . add ( subtag ) ; } return hasMore ; } public String [ ] getLanguages ( ) { return languages ; } public String [ ] getExtlangs ( ) { return extlangs ; } public String [ ] [ ] [ ] getPrefixesByVariant ( ) { return prefixesByVariant ; } public int [ ] getPrefixByExtlang ( ) { return prefixByExtlang ; } public String [ ] getRegions ( ) { return regions ; } public String [ ] getScripts ( ) { return scripts ; } public int [ ] getSuppressedScriptByLanguage ( ) { return suppressedScriptByLanguage ; } public String [ ] getVariants ( ) { return variants ; } public String [ ] getDeprecated ( ) { return deprecated ; } public Map < String , String > getPreferredValueByLanguageMap ( ) { return preferredValueByLanguageMap ; } public String [ ] getGrandfathered ( ) { return grandfathered ; } public String [ ] getRedundant ( ) { return redundant ; } public String [ ] getDeprecatedLang ( ) { return deprecatedLang ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
