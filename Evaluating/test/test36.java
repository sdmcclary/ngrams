public abstract class SchemaFactoryImpl extends SchemaFactory2 { private DatatypeLibraryFactory datatypeLibraryFactory = null ; private boolean defaultDatatypeLibraryFactory = true ; static final public String PROPERTY_DATATYPE_LIBRARY_FACTORY = "http://relaxng.org/properties/datatype-library-factory" ; protected SchemaFactoryImpl ( ) { } public Schema2 newSchema ( SAXSource source ) throws SAXException { Resolver resolver = null ; LSResourceResolver resourceResolver = getResourceResolver ( ) ; if ( resourceResolver != null ) resolver = LS . createResolver ( resourceResolver ) ; SAXResolver saxResolver = new SAXResolver ( resolver ) ; ErrorHandler eh = getErrorHandler ( ) ; if ( eh == null ) eh = new DraconianErrorHandler ( ) ; Parseable < Pattern , NameClass , Locator , VoidValue , CommentListImpl , AnnotationsImpl > parseable = createParseable ( source , saxResolver , eh ) ; SchemaPatternBuilder spb = new SchemaPatternBuilder ( ) ; try { return new SchemaImpl ( this , spb , SchemaBuilderImpl . parse ( parseable , eh , getDatatypeLibraryFactory ( ) , spb , false ) ) ; } catch ( IOException io ) { SAXParseException e = new SAXParseException ( io . getMessage ( ) , null , io ) ; eh . fatalError ( e ) ; throw e ; } catch ( IllegalSchemaException e ) { throw new SAXException ( "invalid schema" ) ; } } public void setProperty ( String name , Object object ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( PROPERTY_DATATYPE_LIBRARY_FACTORY . equals ( name ) ) { if ( object instanceof DatatypeLibraryFactory ) { datatypeLibraryFactory = ( DatatypeLibraryFactory ) object ; defaultDatatypeLibraryFactory = false ; } else throw new SAXNotSupportedException ( "value of \"" + PROPERTY_DATATYPE_LIBRARY_FACTORY + "\" property does not implement org.relaxng.datatype.DatatypeLibraryFactory" ) ; } else super . setProperty ( name , object ) ; } public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( PROPERTY_DATATYPE_LIBRARY_FACTORY . equals ( name ) ) return getDatatypeLibraryFactory ( ) ; return super . getProperty ( name ) ; } private DatatypeLibraryFactory getDatatypeLibraryFactory ( ) { if ( defaultDatatypeLibraryFactory ) { datatypeLibraryFactory = new DatatypeLibraryFactoryImpl ( new RegexEngineImpl ( ) ) ; defaultDatatypeLibraryFactory = false ; } return datatypeLibraryFactory ; } abstract protected Parseable < Pattern , NameClass , Locator , VoidValue , CommentListImpl , AnnotationsImpl > createParseable ( SAXSource source , SAXResolver resolver , ErrorHandler eh ) throws SAXException ; } 