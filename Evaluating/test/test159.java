<<<<<<< HEAD
public class CustomImageView extends View { private static final Logger LOG = Logger . getLogger ( CustomImageView . class . getName ( ) ) ; private static boolean sIsInc ; private static int sIncRate = 100 ; private static Icon sPendingImageIcon ; private static Icon sMissingImageIcon ; private static final String IMAGE_CACHE_PROPERTY = "imageCache" ; private static final int DEFAULT_WIDTH = 0 ; private static final int DEFAULT_HEIGHT = 0 ; private static final boolean NO_STATE_IMAGES = true ; private static final int LINK_BORDER = 0 ; private static final int LOADING_FLAG = 1 ; private static final int LINK_FLAG = 2 ; private static final int WIDTH_FLAG = 4 ; private static final int HEIGHT_FLAG = 8 ; private static final int RELOAD_FLAG = 16 ; private static final int RELOAD_IMAGE_FLAG = 32 ; private static final int SYNC_LOAD_FLAG = 64 ; private AttributeSet attr ; private Image image ; private int width ; private int height ; private int state ; private Container container ; private Rectangle fBounds ; private Color borderColor ; private short borderSize ; protected short leftInset ; protected short rightInset ; protected short topInset ; protected short bottomInset ; private ImageObserver imageObserver ; private View altView ; private float vAlign ; private URLStreamHandler handler ; public CustomImageView ( Element elem ) { super ( elem ) ; fBounds = new Rectangle ( ) ; imageObserver = new ImageHandler ( ) ; state = RELOAD_FLAG | RELOAD_IMAGE_FLAG ; handler = new CustomHtmlUrlStreamHandler ( ) ; } public String getAltText ( ) { return ( String ) getElement ( ) . getAttributes ( ) . getAttribute ( HTML . Attribute . ALT ) ; } public URL getImageURL ( ) { URL imageURL = null ; String src = ( String ) getElement ( ) . getAttributes ( ) . getAttribute ( HTML . Attribute . SRC ) ; if ( src != null ) { src = src . replaceAll ( " " , "%20" ) ; URL reference = ( ( HTMLDocument ) getDocument ( ) ) . getBase ( ) ; try { imageURL = new URL ( reference , src , handler ) ; } catch ( MalformedURLException e ) { imageURL = null ; } if ( ImageBlocker . isBlocked ( imageURL ) ) imageURL = null ; } return imageURL ; } public Icon getNoImageIcon ( ) { Icon icon = null ; if ( ! NO_STATE_IMAGES ) { synchronized ( CustomImageView . class ) { if ( sMissingImageIcon == null ) sMissingImageIcon = ResourceUtils . getIcon ( "html.image.missing.icon" ) ; icon = sMissingImageIcon ; } } return icon ; } public Icon getLoadingImageIcon ( ) { Icon icon = null ; if ( ! NO_STATE_IMAGES ) { synchronized ( CustomImageView . class ) { if ( sPendingImageIcon == null ) sPendingImageIcon = ResourceUtils . getIcon ( "html.image.pending.icon" ) ; icon = sPendingImageIcon ; } } return icon ; } public Image getImage ( ) { sync ( ) ; return image ; } public void setLoadsSynchronously ( boolean newValue ) { synchronized ( this ) { if ( newValue ) { state |= SYNC_LOAD_FLAG ; } else { state = ( state | SYNC_LOAD_FLAG ) ^ SYNC_LOAD_FLAG ; } } } public boolean getLoadsSynchronously ( ) { return ( ( state & SYNC_LOAD_FLAG ) != 0 ) ; } protected StyleSheet getStyleSheet ( ) { HTMLDocument doc = ( HTMLDocument ) getDocument ( ) ; return doc . getStyleSheet ( ) ; } public AttributeSet getAttributes ( ) { sync ( ) ; return attr ; } public String getToolTipText ( float x , float y , Shape allocation ) { return getAltText ( ) ; } protected void setPropertiesFromAttributes ( ) { StyleSheet sheet = getStyleSheet ( ) ; this . attr = sheet . getViewAttributes ( this ) ; borderSize = ( short ) getIntAttr ( HTML . Attribute . BORDER , isLink ( ) ? LINK_BORDER : 0 ) ; if ( borderSize == 0 && image == null ) borderSize = 1 ; rightInset = ( short ) ( getIntAttr ( HTML . Attribute . HSPACE , 0 ) + borderSize ) ; leftInset = rightInset ; bottomInset = ( short ) ( getIntAttr ( HTML . Attribute . VSPACE , 0 ) + borderSize ) ; topInset = bottomInset ; borderColor = ( ( StyledDocument ) getDocument ( ) ) . getForeground ( getAttributes ( ) ) ; AttributeSet attrs = getElement ( ) . getAttributes ( ) ; Object alignment = attrs . getAttribute ( HTML . Attribute . ALIGN ) ; vAlign = 1.0f ; if ( alignment != null ) { alignment = alignment . toString ( ) ; if ( "top" . equals ( alignment ) ) { vAlign = 0f ; } else if ( "middle" . equals ( alignment ) ) { vAlign = .5f ; } } AttributeSet anchorAttr = ( AttributeSet ) attrs . getAttribute ( HTML . Tag . A ) ; if ( anchorAttr != null && anchorAttr . isDefined ( HTML . Attribute . HREF ) ) { synchronized ( this ) { state |= LINK_FLAG ; } } else { synchronized ( this ) { state = ( state | LINK_FLAG ) ^ LINK_FLAG ; } } } public void setParent ( View parent ) { View oldParent = getParent ( ) ; super . setParent ( parent ) ; container = ( parent != null ) ? getContainer ( ) : null ; if ( oldParent != parent ) { synchronized ( this ) { state |= RELOAD_FLAG ; } } } public void changedUpdate ( DocumentEvent e , Shape a , ViewFactory f ) { super . changedUpdate ( e , a , f ) ; } public void paint ( Graphics g , Shape a ) { sync ( ) ; Rectangle rect = ( a instanceof Rectangle ) ? ( Rectangle ) a : a . getBounds ( ) ; Image anImage = getImage ( ) ; Rectangle clip = g . getClipBounds ( ) ; fBounds . setBounds ( rect ) ; paintHighlights ( g , a ) ; paintBorder ( g , rect ) ; if ( clip != null ) { g . clipRect ( rect . x + leftInset , rect . y + topInset , rect . width - leftInset - rightInset , rect . height - topInset - bottomInset ) ; } boolean brokenImage = true ; if ( anImage != null ) { try { if ( ! hasPixels ( anImage ) ) { Icon icon = getLoadingImageIcon ( ) ; if ( icon != null ) { icon . paintIcon ( getContainer ( ) , g , rect . x + leftInset , rect . y + topInset ) ; } } else { g . drawImage ( anImage , rect . x + leftInset , rect . y + topInset , width , height , imageObserver ) ; } brokenImage = false ; } catch ( RuntimeException e ) { image = null ; LOG . log ( Level . WARNING , Strings . error ( "img.failed.to.paint.image" ) , e ) ; } } if ( brokenImage ) { Icon icon = getNoImageIcon ( ) ; if ( icon != null ) { icon . paintIcon ( getContainer ( ) , g , rect . x + leftInset , rect . y + topInset ) ; } View view = getAltView ( ) ; if ( view != null && ( ( state & WIDTH_FLAG ) == 0 || width > DEFAULT_WIDTH ) ) { Rectangle altRect = new Rectangle ( rect . x + leftInset + DEFAULT_WIDTH , rect . y + topInset , rect . width - leftInset - rightInset - DEFAULT_WIDTH , rect . height - topInset - bottomInset ) ; view . paint ( g , altRect ) ; } } if ( clip != null ) { g . setClip ( clip . x , clip . y , clip . width , clip . height ) ; } } private void paintHighlights ( Graphics g , Shape shape ) { if ( container instanceof JTextComponent ) { JTextComponent tc = ( JTextComponent ) container ; Highlighter h = tc . getHighlighter ( ) ; if ( h instanceof LayeredHighlighter ) { ( ( LayeredHighlighter ) h ) . paintLayeredHighlights ( g , getStartOffset ( ) , getEndOffset ( ) , shape , tc , this ) ; } } } private void paintBorder ( Graphics g , Rectangle rect ) { Color color = borderColor ; if ( borderSize > 0 && color != null ) { int xOffset = leftInset - borderSize ; int yOffset = topInset - borderSize ; g . setColor ( color ) ; for ( int counter = 0 ; counter < borderSize ; counter ++ ) { g . drawRect ( rect . x + xOffset + counter , rect . y + yOffset + counter , rect . width - counter - counter - xOffset - xOffset - 1 , rect . height - counter - counter - yOffset - yOffset - 1 ) ; } } } public float getPreferredSpan ( int axis ) { sync ( ) ; if ( axis == View . X_AXIS && ( state & WIDTH_FLAG ) == WIDTH_FLAG ) { getPreferredSpanFromAltView ( axis ) ; return width + leftInset + rightInset ; } if ( axis == View . Y_AXIS && ( state & HEIGHT_FLAG ) == HEIGHT_FLAG ) { getPreferredSpanFromAltView ( axis ) ; return height + topInset + bottomInset ; } Image anImage = getImage ( ) ; if ( anImage != null ) { switch ( axis ) { case View . X_AXIS : return width + leftInset + rightInset ; case View . Y_AXIS : return height + topInset + bottomInset ; default : throw new IllegalArgumentException ( MessageFormat . format ( Strings . error ( "img.invalid.axis" ) , axis ) ) ; } } else { View view = getAltView ( ) ; float retValue = 0f ; if ( view != null ) { retValue = view . getPreferredSpan ( axis ) ; } switch ( axis ) { case View . X_AXIS : return retValue + ( float ) ( width + leftInset + rightInset ) ; case View . Y_AXIS : return retValue + ( float ) ( height + topInset + bottomInset ) ; default : throw new IllegalArgumentException ( MessageFormat . format ( Strings . error ( "img.invalid.axis" ) , axis ) ) ; } } } public float getAlignment ( int axis ) { switch ( axis ) { case View . Y_AXIS : return vAlign ; default : return super . getAlignment ( axis ) ; } } public Shape modelToView ( int pos , Shape a , Position . Bias b ) throws BadLocationException { int p0 = getStartOffset ( ) ; int p1 = getEndOffset ( ) ; if ( ( pos >= p0 ) && ( pos <= p1 ) ) { Rectangle r = a . getBounds ( ) ; if ( pos == p1 ) { r . x += r . width ; } r . width = 0 ; return r ; } return null ; } public int viewToModel ( float x , float y , Shape a , Position . Bias [ ] bias ) { Rectangle alloc = ( Rectangle ) a ; if ( x < alloc . x + alloc . width ) { bias [ 0 ] = Position . Bias . Forward ; return getStartOffset ( ) ; } bias [ 0 ] = Position . Bias . Backward ; return getEndOffset ( ) ; } public void setSize ( float aWidth , float aHeight ) { sync ( ) ; if ( getImage ( ) == null ) { View view = getAltView ( ) ; if ( view != null ) { view . setSize ( Math . max ( 0f , aWidth - ( float ) ( DEFAULT_WIDTH + leftInset + rightInset ) ) , Math . max ( 0f , aHeight - ( float ) ( topInset + bottomInset ) ) ) ; } } } private boolean isLink ( ) { return ( ( state & LINK_FLAG ) == LINK_FLAG ) ; } private boolean hasPixels ( Image anImage ) { return anImage != null && ( anImage . getHeight ( imageObserver ) > 0 ) && ( anImage . getWidth ( imageObserver ) > 0 ) ; } private float getPreferredSpanFromAltView ( int axis ) { if ( getImage ( ) == null ) { View view = getAltView ( ) ; if ( view != null ) { return view . getPreferredSpan ( axis ) ; } } return 0f ; } private void repaint ( long delay ) { if ( container != null && fBounds != null ) { container . repaint ( delay , fBounds . x , fBounds . y , fBounds . width , fBounds . height ) ; } } protected int getIntAttr ( Object name , int deflt ) { AttributeSet attrs = getElement ( ) . getAttributes ( ) ; if ( attrs . isDefined ( name ) ) { int i ; String val = attrs . getAttribute ( name ) . toString ( ) ; if ( val == null ) { i = deflt ; } else { try { val = val . endsWith ( "px" ) ? val . substring ( 0 , val . length ( ) - 2 ) : val ; i = Math . max ( 0 , Integer . parseInt ( val ) ) ; } catch ( NumberFormatException x ) { i = deflt ; } } return i ; } else return deflt ; } private void sync ( ) { int s = state ; if ( ( s & RELOAD_IMAGE_FLAG ) != 0 ) { refreshImage ( ) ; } s = state ; if ( ( s & RELOAD_FLAG ) != 0 ) { synchronized ( this ) { state = ( state | RELOAD_FLAG ) ^ RELOAD_FLAG ; } setPropertiesFromAttributes ( ) ; } } private void refreshImage ( ) { synchronized ( this ) { state = ( state | LOADING_FLAG | RELOAD_IMAGE_FLAG | WIDTH_FLAG | HEIGHT_FLAG ) ^ ( WIDTH_FLAG | HEIGHT_FLAG | RELOAD_IMAGE_FLAG ) ; image = null ; width = 0 ; height = 0 ; } try { loadImage ( ) ; updateImageSize ( ) ; } finally { synchronized ( this ) { state = ( state | LOADING_FLAG ) ^ LOADING_FLAG ; } } } private void loadImage ( ) { URL src = getImageURL ( ) ; Image newImage = null ; if ( src != null ) { Dictionary cache = ( Dictionary ) getDocument ( ) . getProperty ( IMAGE_CACHE_PROPERTY ) ; if ( cache != null ) { newImage = ( Image ) cache . get ( src ) ; } else { if ( System . getProperty ( Strings . error ( "img.no.images" ) ) == null ) { newImage = ImageFetcher . load ( src ) ; } } } image = newImage ; } private void updateImageSize ( ) { int newWidth ; int newHeight ; int newState = 0 ; Image newImage = getImage ( ) ; if ( newImage != null ) { newWidth = getIntAttr ( HTML . Attribute . WIDTH , - 1 ) ; if ( newWidth > 0 ) { newState |= WIDTH_FLAG ; } newHeight = getIntAttr ( HTML . Attribute . HEIGHT , - 1 ) ; if ( newHeight > 0 ) { newState |= HEIGHT_FLAG ; } if ( newWidth <= 0 ) { newWidth = newImage . getWidth ( imageObserver ) ; if ( newWidth <= 0 ) { newWidth = DEFAULT_WIDTH ; } } if ( newHeight <= 0 ) { newHeight = newImage . getHeight ( imageObserver ) ; if ( newHeight <= 0 ) { newHeight = DEFAULT_HEIGHT ; } } if ( ( newState & ( WIDTH_FLAG | HEIGHT_FLAG ) ) != 0 ) { Toolkit . getDefaultToolkit ( ) . prepareImage ( newImage , newWidth , newHeight , imageObserver ) ; } else { Toolkit . getDefaultToolkit ( ) . prepareImage ( newImage , - 1 , - 1 , imageObserver ) ; } boolean createText = false ; synchronized ( this ) { if ( image != null ) { if ( ( newState & WIDTH_FLAG ) == WIDTH_FLAG || width == 0 ) { width = newWidth ; } if ( ( newState & HEIGHT_FLAG ) == HEIGHT_FLAG || height == 0 ) { height = newHeight ; } } else { createText = true ; if ( ( newState & WIDTH_FLAG ) == WIDTH_FLAG ) { width = newWidth ; } if ( ( newState & HEIGHT_FLAG ) == HEIGHT_FLAG ) { height = newHeight ; } } state = state | newState ; state = ( state | LOADING_FLAG ) ^ LOADING_FLAG ; } if ( createText ) { updateAltTextView ( ) ; } } else { width = DEFAULT_HEIGHT ; height = DEFAULT_HEIGHT ; updateBorderForNoImage ( ) ; updateAltTextView ( ) ; } } private void updateAltTextView ( ) { String text = getAltText ( ) ; if ( text != null ) { ImageLabelView newView ; newView = new ImageLabelView ( getElement ( ) , text ) ; synchronized ( this ) { altView = newView ; } } } private View getAltView ( ) { View view ; synchronized ( this ) { view = altView ; } if ( view != null && view . getParent ( ) == null ) { view . setParent ( getParent ( ) ) ; } return view ; } private void safePreferenceChanged ( ) { if ( SwingUtilities . isEventDispatchThread ( ) ) { Document doc = getDocument ( ) ; try { if ( doc instanceof AbstractDocument ) { ( ( AbstractDocument ) doc ) . readLock ( ) ; } preferenceChanged ( null , true , true ) ; } finally { if ( doc instanceof AbstractDocument ) { ( ( AbstractDocument ) doc ) . readUnlock ( ) ; } } } else { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { safePreferenceChanged ( ) ; } } ) ; } } private void updateBorderForNoImage ( ) { if ( borderSize == 0 ) { borderSize = 1 ; leftInset += borderSize ; rightInset += borderSize ; bottomInset += borderSize ; topInset += borderSize ; } } private class ImageHandler implements ImageObserver { public boolean imageUpdate ( Image img , int flags , int x , int y , int newWidth , int newHeight ) { if ( image == null || image != img ) { return false ; } if ( ( flags & ( ABORT | ERROR ) ) != 0 ) { repaint ( 0 ) ; synchronized ( CustomImageView . this ) { if ( image == img ) { image = null ; if ( ( state & WIDTH_FLAG ) != WIDTH_FLAG ) width = DEFAULT_WIDTH ; if ( ( state & HEIGHT_FLAG ) != HEIGHT_FLAG ) height = DEFAULT_HEIGHT ; updateBorderForNoImage ( ) ; } if ( ( state & LOADING_FLAG ) == LOADING_FLAG ) { return false ; } } updateAltTextView ( ) ; safePreferenceChanged ( ) ; return false ; } short changed = 0 ; if ( ( flags & ImageObserver . HEIGHT ) != 0 && ! getElement ( ) . getAttributes ( ) . isDefined ( HTML . Attribute . HEIGHT ) ) { changed |= ImageObserver . HEIGHT ; } if ( ( flags & ImageObserver . WIDTH ) != 0 && ! getElement ( ) . getAttributes ( ) . isDefined ( HTML . Attribute . WIDTH ) ) { changed |= ImageObserver . WIDTH ; } synchronized ( CustomImageView . this ) { if ( image != img ) return false ; if ( ( changed & ImageObserver . WIDTH ) != 0 && ( state & WIDTH_FLAG ) == 0 ) { width = newWidth ; } if ( ( changed & ImageObserver . HEIGHT ) != 0 && ( state & HEIGHT_FLAG ) == 0 ) { height = newHeight ; } if ( ( state & LOADING_FLAG ) == LOADING_FLAG ) { return true ; } } if ( changed != 0 ) { safePreferenceChanged ( ) ; return true ; } if ( ( flags & ( FRAMEBITS | ALLBITS ) ) != 0 ) { image = prepareStaticCopy ( image ) ; repaint ( 0 ) ; } else if ( ( flags & SOMEBITS ) != 0 && sIsInc ) { repaint ( sIncRate ) ; } return ( flags & ( ALLBITS | FRAMEBITS ) ) == 0 ; } private Image prepareStaticCopy ( Image anImage ) { Image result = anImage ; int width = anImage . getWidth ( null ) ; int height = anImage . getHeight ( null ) ; if ( width != - 1 && height != - 1 ) { } return result ; } } private static class ImageLabelView extends InlineView { private Segment segment ; private Color fg ; ImageLabelView ( Element e , String text ) { super ( e ) ; reset ( text ) ; } public void reset ( String text ) { segment = new Segment ( text . toCharArray ( ) , 0 , text . length ( ) ) ; } public void paint ( Graphics g , Shape a ) { GlyphPainter painter = getGlyphPainter ( ) ; if ( painter != null ) { g . setColor ( getForeground ( ) ) ; painter . paint ( this , g , a , getStartOffset ( ) , getEndOffset ( ) ) ; } } public Segment getText ( int p0 , int p1 ) { if ( p0 < 0 || p1 > segment . array . length ) { throw new RuntimeException ( Strings . error ( "img.imageview.stale.view" ) ) ; } segment . offset = p0 ; segment . count = p1 - p0 ; return segment ; } public int getStartOffset ( ) { return 0 ; } public int getEndOffset ( ) { return segment . array . length ; } public View breakView ( int axis , int p0 , float pos , float len ) { return this ; } public Color getForeground ( ) { View parent ; if ( fg == null && ( parent = getParent ( ) ) != null ) { Document doc = getDocument ( ) ; AttributeSet attrs = parent . getAttributes ( ) ; if ( attrs != null && ( doc instanceof StyledDocument ) ) { fg = ( ( StyledDocument ) doc ) . getForeground ( attrs ) ; } } return fg ; } } } 
=======
class SimpleNameClass implements NameClass { private final Name name ; SimpleNameClass ( Name name ) { this . name = name ; } public boolean contains ( Name name ) { return this . name . equals ( name ) ; } public int containsSpecificity ( Name name ) { return contains ( name ) ? SPECIFICITY_NAME : SPECIFICITY_NONE ; } public int hashCode ( ) { return name . hashCode ( ) ; } public boolean equals ( Object obj ) { if ( obj == null || ! ( obj instanceof SimpleNameClass ) ) return false ; SimpleNameClass other = ( SimpleNameClass ) obj ; return name . equals ( other . name ) ; } Name getName ( ) { return name ; } public void accept ( NameClassVisitor visitor ) { visitor . visitName ( name ) ; } public boolean isOpen ( ) { return false ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
