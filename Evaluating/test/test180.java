public class ValidationEngine extends ValidationDriver { public static final int CHECK_ID_IDREF = 01 ; public static final int COMPACT_SYNTAX = 02 ; public static final int FEASIBLE = 04 ; public ValidationEngine ( ) { this ( null , null , CHECK_ID_IDREF ) ; } public ValidationEngine ( XMLReaderCreator xrc , ErrorHandler eh , int flags ) { super ( makePropertyMap ( xrc , eh , flags ) , ( flags & COMPACT_SYNTAX ) == 0 ? null : CompactSchemaReader . getInstance ( ) ) ; } private static PropertyMap makePropertyMap ( XMLReaderCreator xrc , ErrorHandler eh , int flags ) { PropertyMapBuilder builder = new PropertyMapBuilder ( ) ; if ( xrc == null ) xrc = new Sax2XMLReaderCreator ( ) ; builder . put ( ValidateProperty . XML_READER_CREATOR , xrc ) ; if ( eh != null ) builder . put ( ValidateProperty . ERROR_HANDLER , eh ) ; if ( ( flags & CHECK_ID_IDREF ) != 0 ) RngProperty . CHECK_ID_IDREF . add ( builder ) ; if ( ( flags & FEASIBLE ) != 0 ) RngProperty . FEASIBLE . add ( builder ) ; return builder . toPropertyMap ( ) ; } public ValidationEngine ( XMLReaderCreator xrc , ErrorHandler eh , boolean checkIdIdref ) { this ( xrc , eh , checkIdIdref ? CHECK_ID_IDREF : 0 ) ; } public ValidationEngine ( XMLReaderCreator xrc , ErrorHandler eh , boolean checkIdIdref , boolean compactSyntax ) { this ( xrc , eh , ( checkIdIdref ? CHECK_ID_IDREF : 0 ) | ( compactSyntax ? COMPACT_SYNTAX : 0 ) ) ; } public ValidationEngine ( XMLReaderCreator xrc , ErrorHandler eh , boolean checkIdIdref , boolean compactSyntax , boolean feasible ) { this ( xrc , eh , ( checkIdIdref ? CHECK_ID_IDREF : 0 ) | ( compactSyntax ? COMPACT_SYNTAX : 0 ) | ( feasible ? FEASIBLE : 0 ) ) ; } } 