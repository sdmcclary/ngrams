<<<<<<< HEAD
public class JSLineBreakpointPropertyPage extends PropertyPage implements IWorkbenchPropertyPage { private Button fEnabledButton ; private Button fHitCountButton ; private Text fHitCountText ; private Button fEnableConditionButton ; private Text fConditionEditor ; private Button fConditionIsTrue ; private Button fConditionHasChanged ; private List < String > fErrorMessages = new ArrayList < String > ( ) ; private static final String fgHitCountErrorMessage = Messages . JSLineBreakpointPropertyPage_HitCountMustBePositiveInteger ; private static final String fgEmptyConditionErrorMessage = Messages . JSLineBreakpointPropertyPage_EnterCondition ; protected Control createContents ( Composite parent ) { noDefaultAndApplyButton ( ) ; Composite mainComposite = createComposite ( parent , 1 ) ; createLabels ( mainComposite ) ; try { createEnabledButton ( mainComposite ) ; createHitCountEditor ( mainComposite ) ; createTypeSpecificEditors ( mainComposite ) ; } catch ( CoreException e ) { DebugUiPlugin . log ( e ) ; } setValid ( true ) ; return mainComposite ; } private void createLabels ( Composite parent ) { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; Composite labelComposite = createComposite ( parent , 2 ) ; String fileName ; IMarker marker = breakpoint . getMarker ( ) ; if ( marker instanceof IUniformResourceMarker ) { fileName = PathUtils . getPath ( ( ( IUniformResourceMarker ) marker ) . getUniformResource ( ) ) ; } else { fileName = marker . getResource ( ) . getFullPath ( ) . toString ( ) ; } if ( fileName != null ) { createLabel ( labelComposite , Messages . JSLineBreakpointPropertyPage_File ) ; createLabel ( labelComposite , fileName ) ; } createTypeSpecificLabels ( labelComposite ) ; } private Composite createComposite ( Composite parent , int numColumns ) { Composite composit = new Composite ( parent , SWT . NONE ) ; composit . setFont ( parent . getFont ( ) ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = numColumns ; layout . marginWidth = 0 ; layout . marginHeight = 0 ; composit . setLayout ( layout ) ; composit . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; return composit ; } protected Text createText ( Composite parent , String initialValue ) { Composite textComposite = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = 2 ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; textComposite . setLayout ( layout ) ; textComposite . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; textComposite . setFont ( parent . getFont ( ) ) ; Text text = new Text ( textComposite , SWT . SINGLE | SWT . BORDER ) ; text . setText ( initialValue ) ; text . setFont ( parent . getFont ( ) ) ; text . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; return text ; } protected Text createMultiText ( Composite parent , String initialValue ) { Composite textComposite = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = 2 ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; textComposite . setLayout ( layout ) ; GridData data = new GridData ( GridData . FILL_BOTH ) ; textComposite . setLayoutData ( data ) ; textComposite . setFont ( parent . getFont ( ) ) ; Text text = new Text ( textComposite , SWT . MULTI | SWT . BORDER ) ; text . setText ( initialValue ) ; text . setFont ( parent . getFont ( ) ) ; text . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; return text ; } private void createEnabledButton ( Composite parent ) throws CoreException { fEnabledButton = createCheckButton ( parent , Messages . JSLineBreakpointPropertyPage_Enabled ) ; fEnabledButton . setSelection ( getBreakpoint ( ) . isEnabled ( ) ) ; } protected Button createCheckButton ( Composite parent , String text ) { Button button = new Button ( parent , SWT . CHECK | SWT . LEFT ) ; button . setText ( text ) ; button . setFont ( parent . getFont ( ) ) ; button . setLayoutData ( new GridData ( ) ) ; return button ; } protected Button createRadioButton ( Composite parent , String text ) { Button button = new Button ( parent , SWT . RADIO | SWT . LEFT ) ; button . setText ( text ) ; button . setFont ( parent . getFont ( ) ) ; button . setLayoutData ( new GridData ( ) ) ; return button ; } private void createHitCountEditor ( Composite parent ) throws CoreException { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; Composite hitCountComposite = createComposite ( parent , 2 ) ; fHitCountButton = createCheckButton ( hitCountComposite , Messages . JSLineBreakpointPropertyPage_HitCount ) ; fHitCountButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { fHitCountText . setEnabled ( fHitCountButton . getSelection ( ) ) ; hitCountChanged ( ) ; } } ) ; int hitCount = breakpoint . getHitCount ( ) ; String hitCountString = "" ; if ( hitCount > 0 ) { hitCountString = new Integer ( hitCount ) . toString ( ) ; fHitCountButton . setSelection ( true ) ; } else { fHitCountButton . setSelection ( false ) ; } fHitCountText = createText ( hitCountComposite , hitCountString ) ; if ( hitCount <= 0 ) { fHitCountText . setEnabled ( false ) ; } fHitCountText . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { hitCountChanged ( ) ; } } ) ; } private void hitCountChanged ( ) { if ( ! fHitCountButton . getSelection ( ) ) { removeErrorMessage ( fgHitCountErrorMessage ) ; return ; } String hitCountText = fHitCountText . getText ( ) ; int hitCount = - 1 ; try { hitCount = Integer . parseInt ( hitCountText ) ; } catch ( NumberFormatException e1 ) { addErrorMessage ( fgHitCountErrorMessage ) ; return ; } if ( hitCount < 1 ) { addErrorMessage ( fgHitCountErrorMessage ) ; } else { if ( fgHitCountErrorMessage . equals ( getErrorMessage ( ) ) ) { removeErrorMessage ( fgHitCountErrorMessage ) ; } } } private void conditionChanged ( ) { if ( ! fEnableConditionButton . getSelection ( ) ) { removeErrorMessage ( fgEmptyConditionErrorMessage ) ; return ; } String conditionText = fConditionEditor . getText ( ) ; if ( conditionText . length ( ) == 0 ) { addErrorMessage ( fgEmptyConditionErrorMessage ) ; return ; } if ( fgEmptyConditionErrorMessage . equals ( getErrorMessage ( ) ) ) { removeErrorMessage ( fgEmptyConditionErrorMessage ) ; } } private Label createLabel ( Composite parent , String text ) { Label label = new Label ( parent , SWT . NONE ) ; label . setText ( text ) ; label . setFont ( parent . getFont ( ) ) ; label . setLayoutData ( new GridData ( ) ) ; return label ; } private IJSLineBreakpoint getBreakpoint ( ) { return ( IJSLineBreakpoint ) getElement ( ) ; } private void createTypeSpecificLabels ( Composite parent ) { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; StringBuffer lineNumber = new StringBuffer ( 4 ) ; try { int lNumber = breakpoint . getLineNumber ( ) ; if ( lNumber > 0 ) { lineNumber . append ( lNumber ) ; } } catch ( CoreException ce ) { DebugUiPlugin . log ( ce ) ; } if ( lineNumber . length ( ) > 0 ) { createLabel ( parent , Messages . JSLineBreakpointPropertyPage_LineNumber ) ; createLabel ( parent , lineNumber . toString ( ) ) ; } } private void createTypeSpecificEditors ( Composite parent ) throws CoreException { createConditionEditor ( parent ) ; } private void createConditionEditor ( Composite parent ) throws CoreException { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; Composite conditionComposite = new Group ( parent , SWT . NONE ) ; conditionComposite . setFont ( parent . getFont ( ) ) ; conditionComposite . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; conditionComposite . setLayout ( new GridLayout ( ) ) ; fEnableConditionButton = createCheckButton ( conditionComposite , Messages . JSLineBreakpointPropertyPage_EnableCondition ) ; fEnableConditionButton . setSelection ( breakpoint . isConditionEnabled ( ) ) ; fEnableConditionButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { setConditionEnabled ( fEnableConditionButton . getSelection ( ) ) ; conditionChanged ( ) ; } } ) ; fConditionEditor = createMultiText ( conditionComposite , breakpoint . getCondition ( ) ) ; fConditionEditor . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { conditionChanged ( ) ; } } ) ; fConditionIsTrue = createRadioButton ( conditionComposite , Messages . JSLineBreakpointPropertyPage_conditionIsTrue ) ; fConditionHasChanged = createRadioButton ( conditionComposite , Messages . JSLineBreakpointPropertyPage_valueOfConditionChanges ) ; if ( breakpoint . isConditionSuspendOnTrue ( ) ) { fConditionIsTrue . setSelection ( true ) ; } else { fConditionHasChanged . setSelection ( true ) ; } setConditionEnabled ( fEnableConditionButton . getSelection ( ) ) ; } private void setConditionEnabled ( boolean enabled ) { fConditionEditor . setEnabled ( enabled ) ; fConditionIsTrue . setEnabled ( enabled ) ; fConditionHasChanged . setEnabled ( enabled ) ; } public void addErrorMessage ( String message ) { if ( message == null ) { return ; } fErrorMessages . remove ( message ) ; fErrorMessages . add ( message ) ; setErrorMessage ( message ) ; setValid ( false ) ; } public void removeErrorMessage ( String message ) { fErrorMessages . remove ( message ) ; if ( fErrorMessages . isEmpty ( ) ) { setErrorMessage ( null ) ; setValid ( true ) ; } else { setErrorMessage ( ( String ) fErrorMessages . get ( fErrorMessages . size ( ) - 1 ) ) ; } } public boolean performOk ( ) { IWorkspaceRunnable wr = new IWorkspaceRunnable ( ) { public void run ( IProgressMonitor monitor ) throws CoreException { doStore ( ) ; } } ; try { ResourcesPlugin . getWorkspace ( ) . run ( wr , null , 0 , null ) ; } catch ( CoreException e ) { DebugUiPlugin . errorDialog ( Messages . JSLineBreakpointPropertyPage_ExceptionWhileSavingBreakpointProperties , e ) ; DebugUiPlugin . log ( e ) ; } return super . performOk ( ) ; } protected void doStore ( ) throws CoreException { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; boolean enabled = fEnabledButton . getSelection ( ) ; breakpoint . setEnabled ( enabled ) ; boolean hitCountEnabled = fHitCountButton . getSelection ( ) ; int hitCount = - 1 ; if ( hitCountEnabled ) { try { hitCount = Integer . parseInt ( fHitCountText . getText ( ) ) ; } catch ( NumberFormatException e ) { DebugUiPlugin . log ( new Status ( IStatus . ERROR , DebugUiPlugin . getUniqueIdentifier ( ) , IStatus . ERROR , StringUtils . format ( Messages . JSLineBreakpointPropertyPage_PageAllowedInputOfInvalidStringForHitCountValue_0 , new String [ ] { fHitCountText . getText ( ) } ) , e ) ) ; } } breakpoint . setHitCount ( hitCount ) ; boolean enableCondition = fEnableConditionButton . getSelection ( ) ; String condition = fConditionEditor . getText ( ) ; boolean suspendOnTrue = fConditionIsTrue . getSelection ( ) ; if ( breakpoint . isConditionEnabled ( ) != enableCondition ) { breakpoint . setConditionEnabled ( enableCondition ) ; } if ( ! condition . equals ( breakpoint . getCondition ( ) ) ) { breakpoint . setCondition ( condition ) ; } if ( breakpoint . isConditionSuspendOnTrue ( ) != suspendOnTrue ) { breakpoint . setConditionSuspendOnTrue ( suspendOnTrue ) ; } } } 
=======
public class CharsetData { private static final String [ ] LABELS = { "866" , "ansi_x3.4-1968" , "arabic" , "ascii" , "asmo-708" , "big5" , "big5-hkscs" , "chinese" , "cn-big5" , "cp1250" , "cp1251" , "cp1252" , "cp1253" , "cp1254" , "cp1255" , "cp1256" , "cp1257" , "cp1258" , "cp819" , "cp866" , "csbig5" , "cseuckr" , "cseucpkdfmtjapanese" , "csgb2312" , "csibm866" , "csiso2022jp" , "csiso2022kr" , "csiso58gb231280" , "csiso88596e" , "csiso88596i" , "csiso88598e" , "csiso88598i" , "csisolatin1" , "csisolatin2" , "csisolatin3" , "csisolatin4" , "csisolatin5" , "csisolatin6" , "csisolatin9" , "csisolatinarabic" , "csisolatincyrillic" , "csisolatingreek" , "csisolatinhebrew" , "cskoi8r" , "csksc56011987" , "csmacintosh" , "csshiftjis" , "cyrillic" , "dos-874" , "ecma-114" , "ecma-118" , "elot_928" , "euc-jp" , "euc-kr" , "gb18030" , "gb2312" , "gb_2312" , "gb_2312-80" , "gbk" , "greek" , "greek8" , "hebrew" , "hz-gb-2312" , "ibm819" , "ibm866" , "iso-2022-cn" , "iso-2022-cn-ext" , "iso-2022-jp" , "iso-2022-kr" , "iso-8859-1" , "iso-8859-10" , "iso-8859-11" , "iso-8859-13" , "iso-8859-14" , "iso-8859-15" , "iso-8859-16" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "iso-8859-5" , "iso-8859-6" , "iso-8859-6-e" , "iso-8859-6-i" , "iso-8859-7" , "iso-8859-8" , "iso-8859-8-e" , "iso-8859-8-i" , "iso-8859-9" , "iso-ir-100" , "iso-ir-101" , "iso-ir-109" , "iso-ir-110" , "iso-ir-126" , "iso-ir-127" , "iso-ir-138" , "iso-ir-144" , "iso-ir-148" , "iso-ir-149" , "iso-ir-157" , "iso-ir-58" , "iso8859-1" , "iso8859-10" , "iso8859-11" , "iso8859-13" , "iso8859-14" , "iso8859-15" , "iso8859-2" , "iso8859-3" , "iso8859-4" , "iso8859-5" , "iso8859-6" , "iso8859-7" , "iso8859-8" , "iso8859-9" , "iso88591" , "iso885910" , "iso885911" , "iso885913" , "iso885914" , "iso885915" , "iso88592" , "iso88593" , "iso88594" , "iso88595" , "iso88596" , "iso88597" , "iso88598" , "iso88599" , "iso_8859-1" , "iso_8859-15" , "iso_8859-1:1987" , "iso_8859-2" , "iso_8859-2:1987" , "iso_8859-3" , "iso_8859-3:1988" , "iso_8859-4" , "iso_8859-4:1988" , "iso_8859-5" , "iso_8859-5:1988" , "iso_8859-6" , "iso_8859-6:1987" , "iso_8859-7" , "iso_8859-7:1987" , "iso_8859-8" , "iso_8859-8:1988" , "iso_8859-9" , "iso_8859-9:1989" , "koi" , "koi8" , "koi8-r" , "koi8-u" , "koi8_r" , "korean" , "ks_c_5601-1987" , "ks_c_5601-1989" , "ksc5601" , "ksc_5601" , "l1" , "l2" , "l3" , "l4" , "l5" , "l6" , "l9" , "latin1" , "latin2" , "latin3" , "latin4" , "latin5" , "latin6" , "logical" , "mac" , "macintosh" , "ms_kanji" , "shift-jis" , "shift_jis" , "sjis" , "sun_eu_greek" , "tis-620" , "unicode-1-1-utf-8" , "us-ascii" , "utf-16" , "utf-16be" , "utf-16le" , "utf-8" , "utf8" , "visual" , "windows-1250" , "windows-1251" , "windows-1252" , "windows-1253" , "windows-1254" , "windows-1255" , "windows-1256" , "windows-1257" , "windows-1258" , "windows-31j" , "windows-874" , "windows-949" , "x-cp1250" , "x-cp1251" , "x-cp1252" , "x-cp1253" , "x-cp1254" , "x-cp1255" , "x-cp1256" , "x-cp1257" , "x-cp1258" , "x-euc-jp" , "x-gbk" , "x-mac-cyrillic" , "x-mac-roman" , "x-mac-ukrainian" , "x-sjis" , "x-user-defined" , "x-x-big5" , } ; private static final String [ ] PREFERRED_FOR_LABELS = { "ibm866" , "windows-1252" , "iso-8859-6" , "windows-1252" , "iso-8859-6" , "big5" , "big5" , "gbk" , "big5" , "windows-1250" , "windows-1251" , "windows-1252" , "windows-1253" , "windows-1254" , "windows-1255" , "windows-1256" , "windows-1257" , "windows-1258" , "windows-1252" , "ibm866" , "big5" , "euc-kr" , "euc-jp" , "gbk" , "ibm866" , "iso-2022-jp" , "iso-2022-kr" , "gbk" , "iso-8859-6" , "iso-8859-6" , "iso-8859-8" , "iso-8859-8-i" , "windows-1252" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "windows-1254" , "iso-8859-10" , "iso-8859-15" , "iso-8859-6" , "iso-8859-5" , "iso-8859-7" , "iso-8859-8" , "koi8-r" , "euc-kr" , "macintosh" , "shift_jis" , "iso-8859-5" , "windows-874" , "iso-8859-6" , "iso-8859-7" , "iso-8859-7" , "euc-jp" , "euc-kr" , "gb18030" , "gbk" , "gbk" , "gbk" , "gbk" , "iso-8859-7" , "iso-8859-7" , "iso-8859-8" , "hz-gb-2312" , "windows-1252" , "ibm866" , "replacement" , "replacement" , "iso-2022-jp" , "iso-2022-kr" , "windows-1252" , "iso-8859-10" , "windows-874" , "iso-8859-13" , "iso-8859-14" , "iso-8859-15" , "iso-8859-16" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "iso-8859-5" , "iso-8859-6" , "iso-8859-6" , "iso-8859-6" , "iso-8859-7" , "iso-8859-8" , "iso-8859-8" , "iso-8859-8-i" , "windows-1254" , "windows-1252" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "iso-8859-7" , "iso-8859-6" , "iso-8859-8" , "iso-8859-5" , "windows-1254" , "euc-kr" , "iso-8859-10" , "gbk" , "windows-1252" , "iso-8859-10" , "windows-874" , "iso-8859-13" , "iso-8859-14" , "iso-8859-15" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "iso-8859-5" , "iso-8859-6" , "iso-8859-7" , "iso-8859-8" , "windows-1254" , "windows-1252" , "iso-8859-10" , "windows-874" , "iso-8859-13" , "iso-8859-14" , "iso-8859-15" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "iso-8859-5" , "iso-8859-6" , "iso-8859-7" , "iso-8859-8" , "windows-1254" , "windows-1252" , "iso-8859-15" , "windows-1252" , "iso-8859-2" , "iso-8859-2" , "iso-8859-3" , "iso-8859-3" , "iso-8859-4" , "iso-8859-4" , "iso-8859-5" , "iso-8859-5" , "iso-8859-6" , "iso-8859-6" , "iso-8859-7" , "iso-8859-7" , "iso-8859-8" , "iso-8859-8" , "windows-1254" , "windows-1254" , "koi8-r" , "koi8-r" , "koi8-r" , "koi8-u" , "koi8-r" , "euc-kr" , "euc-kr" , "euc-kr" , "euc-kr" , "euc-kr" , "windows-1252" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "windows-1254" , "iso-8859-10" , "iso-8859-15" , "windows-1252" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "windows-1254" , "iso-8859-10" , "iso-8859-8-i" , "macintosh" , "macintosh" , "shift_jis" , "shift_jis" , "shift_jis" , "shift_jis" , "iso-8859-7" , "windows-874" , "utf-8" , "windows-1252" , "utf-16le" , "utf-16be" , "utf-16le" , "utf-8" , "utf-8" , "iso-8859-8" , "windows-1250" , "windows-1251" , "windows-1252" , "windows-1253" , "windows-1254" , "windows-1255" , "windows-1256" , "windows-1257" , "windows-1258" , "shift_jis" , "windows-874" , "euc-kr" , "windows-1250" , "windows-1251" , "windows-1252" , "windows-1253" , "windows-1254" , "windows-1255" , "windows-1256" , "windows-1257" , "windows-1258" , "euc-jp" , "gbk" , "x-mac-cyrillic" , "macintosh" , "x-mac-cyrillic" , "shift_jis" , "x-user-defined" , "big5" , } ; private static final String [ ] PREFERRED = { "big5" , "euc-jp" , "euc-kr" , "gb18030" , "gbk" , "hz-gb-2312" , "ibm866" , "iso-2022-jp" , "iso-2022-kr" , "iso-8859-10" , "iso-8859-13" , "iso-8859-14" , "iso-8859-15" , "iso-8859-16" , "iso-8859-2" , "iso-8859-3" , "iso-8859-4" , "iso-8859-5" , "iso-8859-6" , "iso-8859-7" , "iso-8859-8" , "iso-8859-8-i" , "koi8-r" , "koi8-u" , "macintosh" , "replacement" , "shift_jis" , "utf-16be" , "utf-16le" , "utf-8" , "windows-1250" , "windows-1251" , "windows-1252" , "windows-1253" , "windows-1254" , "windows-1255" , "windows-1256" , "windows-1257" , "windows-1258" , "windows-874" , "x-mac-cyrillic" , "x-user-defined" , } ; public static boolean isPreferred ( String label ) { return Arrays . binarySearch ( PREFERRED , label ) > - 1 ; } public static String preferredForLabel ( String label ) { int index = Arrays . binarySearch ( LABELS , label ) ; if ( index < 0 ) { return null ; } return PREFERRED_FOR_LABELS [ index ] ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
