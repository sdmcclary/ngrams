public class JSLineBreakpointPropertyPage extends PropertyPage implements IWorkbenchPropertyPage { private Button fEnabledButton ; private Button fHitCountButton ; private Text fHitCountText ; private Button fEnableConditionButton ; private Text fConditionEditor ; private Button fConditionIsTrue ; private Button fConditionHasChanged ; private List < String > fErrorMessages = new ArrayList < String > ( ) ; private static final String fgHitCountErrorMessage = Messages . JSLineBreakpointPropertyPage_HitCountMustBePositiveInteger ; private static final String fgEmptyConditionErrorMessage = Messages . JSLineBreakpointPropertyPage_EnterCondition ; protected Control createContents ( Composite parent ) { noDefaultAndApplyButton ( ) ; Composite mainComposite = createComposite ( parent , 1 ) ; createLabels ( mainComposite ) ; try { createEnabledButton ( mainComposite ) ; createHitCountEditor ( mainComposite ) ; createTypeSpecificEditors ( mainComposite ) ; } catch ( CoreException e ) { DebugUiPlugin . log ( e ) ; } setValid ( true ) ; return mainComposite ; } private void createLabels ( Composite parent ) { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; Composite labelComposite = createComposite ( parent , 2 ) ; String fileName ; IMarker marker = breakpoint . getMarker ( ) ; if ( marker instanceof IUniformResourceMarker ) { fileName = PathUtils . getPath ( ( ( IUniformResourceMarker ) marker ) . getUniformResource ( ) ) ; } else { fileName = marker . getResource ( ) . getFullPath ( ) . toString ( ) ; } if ( fileName != null ) { createLabel ( labelComposite , Messages . JSLineBreakpointPropertyPage_File ) ; createLabel ( labelComposite , fileName ) ; } createTypeSpecificLabels ( labelComposite ) ; } private Composite createComposite ( Composite parent , int numColumns ) { Composite composit = new Composite ( parent , SWT . NONE ) ; composit . setFont ( parent . getFont ( ) ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = numColumns ; layout . marginWidth = 0 ; layout . marginHeight = 0 ; composit . setLayout ( layout ) ; composit . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; return composit ; } protected Text createText ( Composite parent , String initialValue ) { Composite textComposite = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = 2 ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; textComposite . setLayout ( layout ) ; textComposite . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; textComposite . setFont ( parent . getFont ( ) ) ; Text text = new Text ( textComposite , SWT . SINGLE | SWT . BORDER ) ; text . setText ( initialValue ) ; text . setFont ( parent . getFont ( ) ) ; text . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; return text ; } protected Text createMultiText ( Composite parent , String initialValue ) { Composite textComposite = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = 2 ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; textComposite . setLayout ( layout ) ; GridData data = new GridData ( GridData . FILL_BOTH ) ; textComposite . setLayoutData ( data ) ; textComposite . setFont ( parent . getFont ( ) ) ; Text text = new Text ( textComposite , SWT . MULTI | SWT . BORDER ) ; text . setText ( initialValue ) ; text . setFont ( parent . getFont ( ) ) ; text . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; return text ; } private void createEnabledButton ( Composite parent ) throws CoreException { fEnabledButton = createCheckButton ( parent , Messages . JSLineBreakpointPropertyPage_Enabled ) ; fEnabledButton . setSelection ( getBreakpoint ( ) . isEnabled ( ) ) ; } protected Button createCheckButton ( Composite parent , String text ) { Button button = new Button ( parent , SWT . CHECK | SWT . LEFT ) ; button . setText ( text ) ; button . setFont ( parent . getFont ( ) ) ; button . setLayoutData ( new GridData ( ) ) ; return button ; } protected Button createRadioButton ( Composite parent , String text ) { Button button = new Button ( parent , SWT . RADIO | SWT . LEFT ) ; button . setText ( text ) ; button . setFont ( parent . getFont ( ) ) ; button . setLayoutData ( new GridData ( ) ) ; return button ; } private void createHitCountEditor ( Composite parent ) throws CoreException { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; Composite hitCountComposite = createComposite ( parent , 2 ) ; fHitCountButton = createCheckButton ( hitCountComposite , Messages . JSLineBreakpointPropertyPage_HitCount ) ; fHitCountButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { fHitCountText . setEnabled ( fHitCountButton . getSelection ( ) ) ; hitCountChanged ( ) ; } } ) ; int hitCount = breakpoint . getHitCount ( ) ; String hitCountString = "" ; if ( hitCount > 0 ) { hitCountString = new Integer ( hitCount ) . toString ( ) ; fHitCountButton . setSelection ( true ) ; } else { fHitCountButton . setSelection ( false ) ; } fHitCountText = createText ( hitCountComposite , hitCountString ) ; if ( hitCount <= 0 ) { fHitCountText . setEnabled ( false ) ; } fHitCountText . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { hitCountChanged ( ) ; } } ) ; } private void hitCountChanged ( ) { if ( ! fHitCountButton . getSelection ( ) ) { removeErrorMessage ( fgHitCountErrorMessage ) ; return ; } String hitCountText = fHitCountText . getText ( ) ; int hitCount = - 1 ; try { hitCount = Integer . parseInt ( hitCountText ) ; } catch ( NumberFormatException e1 ) { addErrorMessage ( fgHitCountErrorMessage ) ; return ; } if ( hitCount < 1 ) { addErrorMessage ( fgHitCountErrorMessage ) ; } else { if ( fgHitCountErrorMessage . equals ( getErrorMessage ( ) ) ) { removeErrorMessage ( fgHitCountErrorMessage ) ; } } } private void conditionChanged ( ) { if ( ! fEnableConditionButton . getSelection ( ) ) { removeErrorMessage ( fgEmptyConditionErrorMessage ) ; return ; } String conditionText = fConditionEditor . getText ( ) ; if ( conditionText . length ( ) == 0 ) { addErrorMessage ( fgEmptyConditionErrorMessage ) ; return ; } if ( fgEmptyConditionErrorMessage . equals ( getErrorMessage ( ) ) ) { removeErrorMessage ( fgEmptyConditionErrorMessage ) ; } } private Label createLabel ( Composite parent , String text ) { Label label = new Label ( parent , SWT . NONE ) ; label . setText ( text ) ; label . setFont ( parent . getFont ( ) ) ; label . setLayoutData ( new GridData ( ) ) ; return label ; } private IJSLineBreakpoint getBreakpoint ( ) { return ( IJSLineBreakpoint ) getElement ( ) ; } private void createTypeSpecificLabels ( Composite parent ) { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; StringBuffer lineNumber = new StringBuffer ( 4 ) ; try { int lNumber = breakpoint . getLineNumber ( ) ; if ( lNumber > 0 ) { lineNumber . append ( lNumber ) ; } } catch ( CoreException ce ) { DebugUiPlugin . log ( ce ) ; } if ( lineNumber . length ( ) > 0 ) { createLabel ( parent , Messages . JSLineBreakpointPropertyPage_LineNumber ) ; createLabel ( parent , lineNumber . toString ( ) ) ; } } private void createTypeSpecificEditors ( Composite parent ) throws CoreException { createConditionEditor ( parent ) ; } private void createConditionEditor ( Composite parent ) throws CoreException { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; Composite conditionComposite = new Group ( parent , SWT . NONE ) ; conditionComposite . setFont ( parent . getFont ( ) ) ; conditionComposite . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; conditionComposite . setLayout ( new GridLayout ( ) ) ; fEnableConditionButton = createCheckButton ( conditionComposite , Messages . JSLineBreakpointPropertyPage_EnableCondition ) ; fEnableConditionButton . setSelection ( breakpoint . isConditionEnabled ( ) ) ; fEnableConditionButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { setConditionEnabled ( fEnableConditionButton . getSelection ( ) ) ; conditionChanged ( ) ; } } ) ; fConditionEditor = createMultiText ( conditionComposite , breakpoint . getCondition ( ) ) ; fConditionEditor . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { conditionChanged ( ) ; } } ) ; fConditionIsTrue = createRadioButton ( conditionComposite , Messages . JSLineBreakpointPropertyPage_conditionIsTrue ) ; fConditionHasChanged = createRadioButton ( conditionComposite , Messages . JSLineBreakpointPropertyPage_valueOfConditionChanges ) ; if ( breakpoint . isConditionSuspendOnTrue ( ) ) { fConditionIsTrue . setSelection ( true ) ; } else { fConditionHasChanged . setSelection ( true ) ; } setConditionEnabled ( fEnableConditionButton . getSelection ( ) ) ; } private void setConditionEnabled ( boolean enabled ) { fConditionEditor . setEnabled ( enabled ) ; fConditionIsTrue . setEnabled ( enabled ) ; fConditionHasChanged . setEnabled ( enabled ) ; } public void addErrorMessage ( String message ) { if ( message == null ) { return ; } fErrorMessages . remove ( message ) ; fErrorMessages . add ( message ) ; setErrorMessage ( message ) ; setValid ( false ) ; } public void removeErrorMessage ( String message ) { fErrorMessages . remove ( message ) ; if ( fErrorMessages . isEmpty ( ) ) { setErrorMessage ( null ) ; setValid ( true ) ; } else { setErrorMessage ( ( String ) fErrorMessages . get ( fErrorMessages . size ( ) - 1 ) ) ; } } public boolean performOk ( ) { IWorkspaceRunnable wr = new IWorkspaceRunnable ( ) { public void run ( IProgressMonitor monitor ) throws CoreException { doStore ( ) ; } } ; try { ResourcesPlugin . getWorkspace ( ) . run ( wr , null , 0 , null ) ; } catch ( CoreException e ) { DebugUiPlugin . errorDialog ( Messages . JSLineBreakpointPropertyPage_ExceptionWhileSavingBreakpointProperties , e ) ; DebugUiPlugin . log ( e ) ; } return super . performOk ( ) ; } protected void doStore ( ) throws CoreException { IJSLineBreakpoint breakpoint = getBreakpoint ( ) ; boolean enabled = fEnabledButton . getSelection ( ) ; breakpoint . setEnabled ( enabled ) ; boolean hitCountEnabled = fHitCountButton . getSelection ( ) ; int hitCount = - 1 ; if ( hitCountEnabled ) { try { hitCount = Integer . parseInt ( fHitCountText . getText ( ) ) ; } catch ( NumberFormatException e ) { DebugUiPlugin . log ( new Status ( IStatus . ERROR , DebugUiPlugin . getUniqueIdentifier ( ) , IStatus . ERROR , StringUtils . format ( Messages . JSLineBreakpointPropertyPage_PageAllowedInputOfInvalidStringForHitCountValue_0 , new String [ ] { fHitCountText . getText ( ) } ) , e ) ) ; } } breakpoint . setHitCount ( hitCount ) ; boolean enableCondition = fEnableConditionButton . getSelection ( ) ; String condition = fConditionEditor . getText ( ) ; boolean suspendOnTrue = fConditionIsTrue . getSelection ( ) ; if ( breakpoint . isConditionEnabled ( ) != enableCondition ) { breakpoint . setConditionEnabled ( enableCondition ) ; } if ( ! condition . equals ( breakpoint . getCondition ( ) ) ) { breakpoint . setCondition ( condition ) ; } if ( breakpoint . isConditionSuspendOnTrue ( ) != suspendOnTrue ) { breakpoint . setConditionSuspendOnTrue ( suspendOnTrue ) ; } } } 