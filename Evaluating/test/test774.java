public class Response { private HttpResponseStatus statusCode = HttpResponseStatus . OK ; private Throwable exception = null ; private Object body ; private final Map < String , List < String > > headers = new HashMap < > ( ) ; public Response ( ) { super ( ) ; } public Object getBody ( ) { return body ; } public void setBody ( Object body ) { this . body = body ; } public boolean hasBody ( ) { return ( getBody ( ) != null ) ; } public List < String > getHeaders ( String name ) { return headers . get ( name ) ; } public Set < String > getHeaderNames ( ) { return headers . keySet ( ) ; } public void addHeader ( String name , String value ) { List < String > values = headers . get ( name ) ; if ( values == null ) { values = new ArrayList < > ( ) ; } values . add ( value ) ; headers . put ( name , values ) ; } public void setResponseCode ( int code ) { statusCode = HttpResponseStatus . valueOf ( code ) ; } public void setResponseStatus ( HttpResponseStatus responseStatus ) { statusCode = responseStatus ; } public HttpResponseStatus getResponseStatus ( ) { return statusCode ; } public Throwable getException ( ) { return exception ; } public boolean hasException ( ) { return ( exception != null ) ; } public void setException ( Throwable e ) { exception = e ; } public void addHeaders ( final RubyHash headers ) { for ( IRubyObject key : headers . keys ( ) . toJavaArray ( ) ) { IRubyObject value = RubyUtil . hashGet ( headers , key ) ; if ( value . getClass ( ) . isAssignableFrom ( headers . getClass ( ) ) ) { RubyHash valueHash = ( RubyHash ) value ; for ( IRubyObject key1 : valueHash . keys ( ) . toJavaArray ( ) ) { addHeader ( key . toString ( ) , RubyUtil . hashGet ( valueHash , key1 ) . toString ( ) ) ; } } else { addHeader ( key . toString ( ) , value . toString ( ) ) ; } } } } 