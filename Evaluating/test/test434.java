public abstract class ParallelDoubleArrayWithMapping < U > extends AbstractParallelAnyArray . DPap { ParallelDoubleArrayWithMapping ( ForkJoinPool ex , int origin , int fence , double [ ] array ) { super ( ex , origin , fence , array ) ; } public void apply ( Procedure < ? super U > procedure ) { ex . invoke ( new PAS . FJOApply ( this , origin , fence , null , procedure ) ) ; } public U reduce ( Reducer < U > reducer , U base ) { PAS . FJOReduce f = new PAS . FJOReduce ( this , origin , fence , null , reducer , base ) ; ex . invoke ( f ) ; return ( U ) ( f . result ) ; } public U any ( ) { int i = anyIndex ( ) ; return ( i < 0 ) ? null : ( U ) oget ( i ) ; } public U min ( Comparator < ? super U > comparator ) { return reduce ( CommonOps . < U > minReducer ( comparator ) , null ) ; } public U min ( ) { return reduce ( ( Reducer < U > ) ( CommonOps . castedMinReducer ( ) ) , null ) ; } public U max ( Comparator < ? super U > comparator ) { return reduce ( CommonOps . < U > maxReducer ( comparator ) , null ) ; } public U max ( ) { return reduce ( ( Reducer < U > ) ( CommonOps . castedMaxReducer ( ) ) , null ) ; } public ParallelArray . SummaryStatistics < U > summary ( Comparator < ? super U > comparator ) { PAS . FJOStats f = new PAS . FJOStats ( this , origin , fence , null , comparator ) ; ex . invoke ( f ) ; return ( ParallelArray . SummaryStatistics < U > ) f ; } public ParallelArray . SummaryStatistics < U > summary ( ) { return summary ( ( Comparator < ? super U > ) ( CommonOps . castedComparator ( ) ) ) ; } public ParallelArray < U > all ( ) { return new ParallelArray < U > ( ex , ( U [ ] ) allObjects ( null ) ) ; } public ParallelArray < U > all ( Class < ? super U > elementType ) { return new ParallelArray < U > ( ex , ( U [ ] ) allObjects ( elementType ) ) ; } public abstract < V > ParallelDoubleArrayWithMapping < V > withMapping ( Op < ? super U , ? extends V > op ) ; public abstract ParallelDoubleArrayWithDoubleMapping withMapping ( ObjectToDouble < ? super U > op ) ; public abstract ParallelDoubleArrayWithLongMapping withMapping ( ObjectToLong < ? super U > op ) ; public < V , W , X > ParallelDoubleArrayWithMapping < W > withMapping ( BinaryOp < ? super U , ? super V , ? extends W > combiner , ParallelArrayWithMapping < X , V > other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V > ParallelDoubleArrayWithMapping < V > withMapping ( ObjectAndDoubleToObject < ? super U , ? extends V > combiner , ParallelDoubleArrayWithDoubleMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V > ParallelDoubleArrayWithMapping < V > withMapping ( ObjectAndLongToObject < ? super U , ? extends V > combiner , ParallelLongArrayWithLongMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V , W > ParallelDoubleArrayWithDoubleMapping withMapping ( ObjectAndObjectToDouble < ? super U , ? super V > combiner , ParallelArrayWithMapping < W , V > other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelDoubleArrayWithDoubleMapping withMapping ( ObjectAndDoubleToDouble < ? super U > combiner , ParallelDoubleArrayWithDoubleMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelDoubleArrayWithDoubleMapping withMapping ( ObjectAndLongToDouble < ? super U > combiner , ParallelLongArrayWithLongMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V , W > ParallelDoubleArrayWithLongMapping withMapping ( ObjectAndObjectToLong < ? super U , ? super V > combiner , ParallelArrayWithMapping < W , V > other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelDoubleArrayWithLongMapping withMapping ( ObjectAndDoubleToLong < ? super U > combiner , ParallelDoubleArrayWithDoubleMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelDoubleArrayWithLongMapping withMapping ( ObjectAndLongToLong < ? super U > combiner , ParallelLongArrayWithLongMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public abstract < V > ParallelDoubleArrayWithMapping < V > withIndexedMapping ( IntAndObjectToObject < ? super U , ? extends V > mapper ) ; public abstract ParallelDoubleArrayWithDoubleMapping withIndexedMapping ( IntAndObjectToDouble < ? super U > mapper ) ; public abstract ParallelDoubleArrayWithLongMapping withIndexedMapping ( IntAndObjectToLong < ? super U > mapper ) ; public Iterable < U > sequentially ( ) { return new Sequentially < U > ( ) ; } } 