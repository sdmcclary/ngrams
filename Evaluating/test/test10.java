public class StatusInfo implements Serializable { private static final long serialVersionUID = 1L ; public static final int STATUS_UNKNOWN = 0 ; public static final int STATUS_NOTVERSIONED_NOTMANAGED = 1 ; public static final int STATUS_NOTVERSIONED_EXCLUDED = 2 ; public static final int STATUS_NOTVERSIONED_NEWLOCALLY = 4 ; public static final int STATUS_VERSIONED_UPTODATE = 8 ; public static final int STATUS_VERSIONED_MODIFIEDLOCALLY = 16 ; public static final int STATUS_VERSIONED_MODIFIEDINREPOSITORY = 32 ; public static final int STATUS_VERSIONED_CONFLICT = 64 ; public static final int STATUS_VERSIONED_MERGE = 128 ; public static final int STATUS_VERSIONED_REMOVEDLOCALLY = 256 ; public static final int STATUS_VERSIONED_NEWINREPOSITORY = 512 ; public static final int STATUS_VERSIONED_REMOVEDINREPOSITORY = 1024 ; public static final int STATUS_VERSIONED_DELETEDLOCALLY = 2048 ; public static final int STATUS_VERSIONED_ADDEDLOCALLY = 4096 ; public static final int STATUS_VERSIONED_COPIEDLOCALLY = 8192 ; public static final int STATUS_ALL = ~ 0 ; public static final int STATUS_MANAGED = StatusInfo . STATUS_ALL & ~ StatusInfo . STATUS_NOTVERSIONED_NOTMANAGED ; public static final int STATUS_VERSIONED = StatusInfo . STATUS_VERSIONED_UPTODATE | StatusInfo . STATUS_VERSIONED_MODIFIEDLOCALLY | StatusInfo . STATUS_VERSIONED_MODIFIEDINREPOSITORY | StatusInfo . STATUS_VERSIONED_CONFLICT | StatusInfo . STATUS_VERSIONED_MERGE | StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY | StatusInfo . STATUS_VERSIONED_REMOVEDINREPOSITORY | StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY | StatusInfo . STATUS_VERSIONED_ADDEDLOCALLY | StatusInfo . STATUS_VERSIONED_COPIEDLOCALLY ; public static final int STATUS_IN_REPOSITORY = StatusInfo . STATUS_VERSIONED_UPTODATE | StatusInfo . STATUS_VERSIONED_MODIFIEDLOCALLY | StatusInfo . STATUS_VERSIONED_MODIFIEDINREPOSITORY | StatusInfo . STATUS_VERSIONED_CONFLICT | StatusInfo . STATUS_VERSIONED_MERGE | StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY | StatusInfo . STATUS_VERSIONED_NEWINREPOSITORY | StatusInfo . STATUS_VERSIONED_REMOVEDINREPOSITORY | StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY ; public static final int STATUS_LOCAL_CHANGE = StatusInfo . STATUS_NOTVERSIONED_NEWLOCALLY | StatusInfo . STATUS_VERSIONED_ADDEDLOCALLY | StatusInfo . STATUS_VERSIONED_COPIEDLOCALLY | StatusInfo . STATUS_VERSIONED_CONFLICT | StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY | StatusInfo . STATUS_VERSIONED_MERGE | StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY | StatusInfo . STATUS_VERSIONED_MODIFIEDLOCALLY ; public static final int STATUS_REVERTIBLE_CHANGE = StatusInfo . STATUS_VERSIONED_ADDEDLOCALLY | StatusInfo . STATUS_VERSIONED_COPIEDLOCALLY | StatusInfo . STATUS_VERSIONED_CONFLICT | StatusInfo . STATUS_VERSIONED_MERGE | StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY | StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY | StatusInfo . STATUS_VERSIONED_MODIFIEDLOCALLY ; public static final int STATUS_REMOTE_CHANGE = StatusInfo . STATUS_VERSIONED_MERGE | StatusInfo . STATUS_VERSIONED_MODIFIEDINREPOSITORY | StatusInfo . STATUS_VERSIONED_NEWINREPOSITORY | StatusInfo . STATUS_VERSIONED_REMOVEDINREPOSITORY ; private final int status ; private transient File entry ; private final boolean isDirectory ; public StatusInfo ( ) { status = 0 ; isDirectory = false ; } public StatusInfo ( int status , File entry , boolean isDirectory ) { this . status = status ; this . entry = entry ; this . isDirectory = isDirectory ; } StatusInfo ( int status , boolean isDirectory ) { this ( status , null , isDirectory ) ; } public int getStatus ( ) { return status ; } public boolean isDirectory ( ) { return isDirectory ; } public File getStatus ( File file ) { if ( entry == null && file != null ) { readEntry ( file ) ; } return entry ; } private void readEntry ( File file ) { entry = null ; } public String getStatusText ( ) { return getStatusText ( ~ 0 ) ; } public String getStatusText ( int displayStatuses ) { int stat = this . status & displayStatuses ; ResourceBundle loc = NbBundle . getBundle ( StatusInfo . class ) ; if ( stat == StatusInfo . STATUS_UNKNOWN ) { return loc . getString ( "CTL_FileInfoStatus_Unknown" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_NOTVERSIONED_EXCLUDED ) ) { return loc . getString ( "CTL_FileInfoStatus_Excluded" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_NOTVERSIONED_NEWLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_NewLocally" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_ADDEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_AddedLocally" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_COPIEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_AddedLocallyCopied" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_UPTODATE ) ) { return loc . getString ( "CTL_FileInfoStatus_UpToDate" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_CONFLICT ) ) { return loc . getString ( "CTL_FileInfoStatus_Conflict" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_MERGE ) ) { return loc . getString ( "CTL_FileInfoStatus_Merge" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_DeletedLocally" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_RemovedLocally" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_MODIFIEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_ModifiedLocally" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_NEWINREPOSITORY ) ) { return loc . getString ( "CTL_FileInfoStatus_NewInRepository" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_MODIFIEDINREPOSITORY ) ) { return loc . getString ( "CTL_FileInfoStatus_ModifiedInRepository" ) ; } else if ( StatusInfo . match ( stat , StatusInfo . STATUS_VERSIONED_REMOVEDINREPOSITORY ) ) { return loc . getString ( "CTL_FileInfoStatus_RemovedInRepository" ) ; } else { return "" ; } } public String getShortStatusText ( ) { ResourceBundle loc = NbBundle . getBundle ( StatusInfo . class ) ; if ( StatusInfo . match ( status , StatusInfo . STATUS_NOTVERSIONED_EXCLUDED ) ) { return loc . getString ( "CTL_FileInfoStatus_Excluded_Short" ) ; } else if ( StatusInfo . match ( status , StatusInfo . STATUS_NOTVERSIONED_NEWLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_NewLocally_Short" ) ; } else if ( StatusInfo . match ( status , StatusInfo . STATUS_VERSIONED_ADDEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_AddedLocally_Short" ) ; } else if ( StatusInfo . match ( status , StatusInfo . STATUS_VERSIONED_COPIEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_AddedLocallyCopied_Short" ) ; } else if ( status == StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY ) { return loc . getString ( "CTL_FileInfoStatus_RemovedLocally_Short" ) ; } else if ( status == StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY ) { return loc . getString ( "CTL_FileInfoStatus_DeletedLocally_Short" ) ; } else if ( StatusInfo . match ( status , StatusInfo . STATUS_VERSIONED_MODIFIEDLOCALLY ) ) { return loc . getString ( "CTL_FileInfoStatus_ModifiedLocally_Short" ) ; } else if ( StatusInfo . match ( status , StatusInfo . STATUS_VERSIONED_CONFLICT ) ) { return loc . getString ( "CTL_FileInfoStatus_Conflict_Short" ) ; } else { return "" ; } } private static boolean match ( int status , int mask ) { return ( status & mask ) != 0 ; } public static boolean equivalent ( StatusInfo main , StatusInfo other ) { if ( other == null || main . getStatus ( ) != other . getStatus ( ) || main . isDirectory ( ) != other . isDirectory ( ) ) { return false ; } File e1 = main . getStatus ( null ) ; File e2 = other . getStatus ( null ) ; return e1 == e2 || e1 == null || e2 == null || equal ( e1 , e2 ) ; } private static boolean equal ( File e1 , File e2 ) { return true ; } @ Override public String toString ( ) { return "Text: " + status + " " + getStatusText ( status ) ; } } 