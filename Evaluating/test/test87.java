<<<<<<< HEAD
public class AbstractClassFileParser { public static ConstantPool readConstantPool ( DataInputStream dis ) throws IOException , ClassParserException { int numCpEntry = dis . readShort ( ) ; ConstantPool cpInfo = new ConstantPool ( numCpEntry ) ; readCpEntries ( dis , cpInfo , numCpEntry ) ; return cpInfo ; } public static short readAccess ( DataInputStream dis ) throws IOException { return dis . readShort ( ) ; } public static short readThisClassIndex ( DataInputStream dis ) throws IOException { return dis . readShort ( ) ; } public static short readSuperClassIndex ( DataInputStream dis ) throws IOException { return dis . readShort ( ) ; } public static List < String > readInterfaces ( DataInputStream dis , ConstantPool cpInfo ) throws IOException { short count = dis . readShort ( ) ; List < String > interfaces = new ArrayList < String > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { String interfaceName = cpInfo . getClassName ( dis . readShort ( ) ) ; interfaces . add ( interfaceName ) ; } return interfaces ; } public static List < Field > readFields ( DataInputStream dis , ConstantPool cpInfo ) throws IOException { short count = dis . readShort ( ) ; List < Field > fields = new ArrayList < Field > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Field curField = new Field ( ) ; short accessFlags = dis . readShort ( ) ; short nameIndex = dis . readShort ( ) ; short descIndex = dis . readShort ( ) ; String name = cpInfo . getUtf8String ( nameIndex ) ; String descriptor = cpInfo . getUtf8String ( descIndex ) ; curField . setName ( name ) ; curField . setDatatype ( descriptor ) ; curField . setQualifier ( accessFlags ) ; short attrCount = dis . readShort ( ) ; for ( int j = 0 ; j < attrCount ; j ++ ) { readFieldAttributes ( curField , dis , cpInfo ) ; } fields . add ( curField ) ; } return fields ; } public static List < Method > readMethods ( DataInputStream dis , ConstantPool cpInfo ) throws IOException { short count = dis . readShort ( ) ; List < Method > methods = new ArrayList < Method > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Method curMethod = new Method ( ) ; short accessFlags = dis . readShort ( ) ; short nameIndex = dis . readShort ( ) ; short descIndex = dis . readShort ( ) ; String name = cpInfo . getUtf8String ( nameIndex ) ; String descriptor = cpInfo . getUtf8String ( descIndex ) ; curMethod . setName ( name ) ; curMethod . setSignature ( descriptor ) ; curMethod . setQualifier ( accessFlags ) ; short attrCount = dis . readShort ( ) ; for ( int j = 0 ; j < attrCount ; j ++ ) { readMethodAttributes ( curMethod , dis , cpInfo ) ; } if ( curMethod . getVariableTable ( ) == null ) { curMethod . initializeSymbolTable ( ) ; } methods . add ( curMethod ) ; } return methods ; } public static void readClassAttributes ( DataInputStream dis , ConstantPool cpInfo , ClassInfo clazz ) throws IOException { short attrCount = dis . readShort ( ) ; for ( int i = 0 ; i < attrCount ; i ++ ) { readClassAttribute ( dis , cpInfo , clazz ) ; } } private static void readCpEntries ( DataInputStream dis , ConstantPool cpInfo , int aNumEntry ) throws IOException , ClassParserException { cpInfo . addNullEntry ( ) ; for ( int i = 1 ; i < aNumEntry ; i ++ ) { byte tagByte = dis . readByte ( ) ; switch ( tagByte ) { case ConstantPool . TAG_UTF8 : readTagUtf8 ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_INTEGER : readTagInteger ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_FLOAT : readTagFloat ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_LONG : readTagLong ( dis , cpInfo , i ) ; i ++ ; break ; case ConstantPool . TAG_DOUBLE : readTagDouble ( dis , cpInfo , i ) ; i ++ ; break ; case ConstantPool . TAG_CLASS : readTagClass ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_STRING : readTagString ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_FIELDREF : readTagFieldRef ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_METHODREF : readTagMethodRef ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_INTERFACEREF : readTagInterfaceRef ( dis , cpInfo , i ) ; break ; case ConstantPool . TAG_NAMETYPE : readTagNameType ( dis , cpInfo , i ) ; break ; default : throw new ClassParserException ( "TagByte " + tagByte + " Invalid for ConstantPool Entry #" + i ) ; } } } private static void readTagUtf8 ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { String utfString = dis . readUTF ( ) ; cpInfo . addUtf8Entry ( utfString ) ; } private static void readTagInteger ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int intValue = dis . readInt ( ) ; cpInfo . addIntegerEntry ( String . valueOf ( intValue ) ) ; } private static void readTagFloat ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { float floatValue = dis . readFloat ( ) ; cpInfo . addFloatEntry ( String . valueOf ( floatValue ) + JLSConstants . JLS_FLOATING_NUMBER_SUFFIX ) ; } private static void readTagLong ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { long longValue = dis . readLong ( ) ; cpInfo . addLongEntry ( String . valueOf ( longValue ) + JLSConstants . JLS_LONG_NUMBER_SUFFIX ) ; cpInfo . addNullEntry ( ) ; } private static void readTagDouble ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { double doubleValue = dis . readDouble ( ) ; cpInfo . addDoubleEntry ( String . valueOf ( doubleValue ) ) ; cpInfo . addNullEntry ( ) ; } private static void readTagClass ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int classIndex = dis . readShort ( ) ; cpInfo . addClassEntry ( classIndex ) ; } private static void readTagString ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int stringIndex = dis . readShort ( ) ; cpInfo . addStringEntry ( stringIndex ) ; } private static void readTagFieldRef ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int classIndex = dis . readShort ( ) ; int nameType = dis . readShort ( ) ; cpInfo . addFieldRefEntry ( classIndex , nameType ) ; } private static void readTagMethodRef ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int classIndex = dis . readShort ( ) ; int nameType = dis . readShort ( ) ; cpInfo . addMethodRefEntry ( classIndex , nameType ) ; } private static void readTagInterfaceRef ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int classIndex = dis . readShort ( ) ; int nameType = dis . readShort ( ) ; cpInfo . addInterfaceRefEntry ( classIndex , nameType ) ; } private static void readTagNameType ( DataInputStream dis , ConstantPool cpInfo , int aIndex ) throws IOException { int nameIndex = dis . readShort ( ) ; int descIndex = dis . readShort ( ) ; cpInfo . addNameTypeEntry ( nameIndex , descIndex ) ; } private static void readFieldAttributes ( Field aRhsField , DataInputStream dis , ConstantPool cpInfo ) throws IOException { String attrName = cpInfo . getUtf8String ( dis . readShort ( ) ) ; if ( attrName . equals ( JVMConstants . ATTRIBUTE_CONSTANT_VALUE ) ) { aRhsField . setValue ( AttributeParser . readConstantValue ( dis , cpInfo ) ) ; } else if ( attrName . equals ( JVMConstants . ATTRIBUTE_SYNTHETIC ) ) { AttributeParser . readSynthetic ( dis ) ; } else if ( attrName . equals ( JVMConstants . ATTRIBUTE_DEPRECATED ) ) { AttributeParser . readDeprecated ( dis ) ; } } private static void readMethodAttributes ( Method method , DataInputStream dis , ConstantPool cpInfo ) throws IOException { String attrName = cpInfo . getUtf8String ( dis . readShort ( ) ) ; if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_CODE ) == 0 ) { AttributeParser . readCode ( method , dis , cpInfo ) ; } else if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_EXCEPTIONS ) == 0 ) { method . setThrowsClasses ( AttributeParser . readExceptions ( dis , cpInfo ) ) ; } else if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_SYNTHETIC ) == 0 ) { AttributeParser . readSynthetic ( dis ) ; } else if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_DEPRECATED ) == 0 ) { AttributeParser . readDeprecated ( dis ) ; } else if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_INNERCLASSES ) == 0 ) { AttributeParser . readInnerClasses ( dis ) ; } } private static void readClassAttribute ( DataInputStream dis , ConstantPool cpInfo , ClassInfo clazz ) throws IOException { int attrIndex = dis . readShort ( ) ; String attrName = cpInfo . getUtf8String ( attrIndex ) ; if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_SOURCEFILE ) == 0 ) { clazz . setSourceFile ( AttributeParser . readSourceFile ( dis , cpInfo ) ) ; } else if ( attrName . compareTo ( JVMConstants . ATTRIBUTE_DEPRECATED ) == 0 ) { AttributeParser . readDeprecated ( dis ) ; } else { } } } 
=======
abstract class ApplyAfterFunction extends AbstractPatternFunction < Pattern > { private final ValidatorPatternBuilder builder ; ApplyAfterFunction ( ValidatorPatternBuilder builder ) { this . builder = builder ; } public Pattern caseAfter ( AfterPattern p ) { return builder . makeAfter ( p . getOperand1 ( ) , apply ( p . getOperand2 ( ) ) ) ; } public Pattern caseChoice ( ChoicePattern p ) { return builder . makeChoice ( p . getOperand1 ( ) . apply ( this ) , p . getOperand2 ( ) . apply ( this ) ) ; } public Pattern caseNotAllowed ( NotAllowedPattern p ) { return p ; } public Pattern caseOther ( Pattern p ) { throw new AssertionError ( "ApplyAfterFunction applied to " + p . getClass ( ) . getName ( ) ) ; } abstract Pattern apply ( Pattern p ) ; } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
