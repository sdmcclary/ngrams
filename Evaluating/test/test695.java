<<<<<<< HEAD
public class JettyServerBuilder { private static JettyServerBuilder builder ; public static final String CONTEXT_EXTENSION_POINT = JettyPlugin . PLUGIN_ID + ".context" ; public static final String FILTER_ELEMENT = "filter" ; public static final String SERVLET_ELEMENT = "servlet" ; public static final String CONFIGURATOR_ATTR = "configurator" ; public static final String HANDLER_ATTR = "handler" ; public static final String STATISTICS_ATTR = "statistics" ; public static final String RESTART_ATTR = "restart" ; public static final String IGNORE_ATTR = "ignore" ; public static final String ERROR_ATTR = "error" ; public static final String CLASS_ATTR = "class" ; public static final String PATHSPEC_ATTR = "pathSpec" ; public static final String DISPATCHES_ATTR = "dispatches" ; public static final String SERVERID_ATTR = "serverID" ; private List < IConfigurationElement > servlets ; private List < IConfigurationElement > filters ; private IDELoggingHandler loggingHandler = new IDELoggingHandler ( ) ; private JettyServerBuilder ( ) { servlets = new ArrayList < IConfigurationElement > ( ) ; filters = new ArrayList < IConfigurationElement > ( ) ; IExtensionRegistry reg = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = reg . getExtensionPoint ( CONTEXT_EXTENSION_POINT ) ; IExtension [ ] extensions = ep . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IConfigurationElement [ ] ce = extensions [ i ] . getConfigurationElements ( ) ; for ( int j = 0 ; j < ce . length ; j ++ ) { String type = ce [ j ] . getName ( ) ; if ( FILTER_ELEMENT . equals ( type ) ) { this . filters . add ( ce [ j ] ) ; } else if ( SERVLET_ELEMENT . equals ( type ) ) { this . servlets . add ( ce [ j ] ) ; } } } } public void buildServer ( Context context , String extensionPointID , String serverID , String hostname , int port , IDocumentRootResolver resolver ) { if ( context != null && extensionPointID != null ) { IConfigurationElement curr = null ; for ( int i = 0 ; i < servlets . size ( ) ; i ++ ) { curr = ( IConfigurationElement ) servlets . get ( i ) ; String id = curr . getAttribute ( SERVERID_ATTR ) ; if ( id != null && extensionPointID . equals ( id ) ) { String pathSpec = curr . getAttribute ( PATHSPEC_ATTR ) ; String className = curr . getAttribute ( CLASS_ATTR ) ; if ( className != null ) { try { Object obj = curr . createExecutableExtension ( CLASS_ATTR ) ; if ( obj instanceof Servlet ) { Servlet servlet = ( Servlet ) obj ; if ( servlet instanceof IStatisticsProvider && serverID != null ) { IStatisticsHandler statsHandler = getStatisticsHandler ( curr ) ; if ( statsHandler != null ) { statsHandler . setID ( serverID ) ; ( ( IStatisticsProvider ) servlet ) . setStatisticsHandler ( statsHandler ) ; } } IContextHandler handler = getContextHandler ( curr ) ; if ( handler == null || handler . shouldAddServlet ( ) ) { ServletHolder holder = new ServletHolder ( servlet ) ; if ( curr . getAttribute ( CONFIGURATOR_ATTR ) != null ) { try { IServletConfigurator configurator = ( IServletConfigurator ) curr . createExecutableExtension ( CONFIGURATOR_ATTR ) ; try { configurator . configure ( holder ) ; } catch ( ServletConfigurationException ex ) { IdeLog . logError ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_ERR_ConfigureServlet + holder . getClassName ( ) , ex ) ; } } catch ( Throwable th ) { IdeLog . logError ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_ERR_CreateServlet , th ) ; } } if ( pathSpec != null ) { String [ ] pathSpecsArray = pathSpec . trim ( ) . split ( Pattern . quote ( "," ) ) ; for ( String aPathSpec : pathSpecsArray ) { context . addServlet ( holder , aPathSpec . trim ( ) ) ; } } else { holder . setName ( servlet . getClass ( ) . getName ( ) ) ; context . getServletHandler ( ) . addServlet ( holder ) ; } } } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadExtension , e ) ; } } } } for ( int i = 0 ; i < filters . size ( ) ; i ++ ) { curr = ( IConfigurationElement ) filters . get ( i ) ; String id = curr . getAttribute ( SERVERID_ATTR ) ; if ( id != null && extensionPointID . equals ( id ) ) { String pathSpec = curr . getAttribute ( PATHSPEC_ATTR ) ; String dispatches = curr . getAttribute ( DISPATCHES_ATTR ) ; String className = curr . getAttribute ( CLASS_ATTR ) ; if ( pathSpec != null && className != null && dispatches != null ) { String [ ] allPathSpecs = new String [ ] { pathSpec } ; try { allPathSpecs = pathSpec . split ( "," ) ; } catch ( Exception e ) { IdeLog . logError ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_ERR_SplitPath , e ) ; } try { int intDispatches = Integer . parseInt ( dispatches ) ; Object obj = curr . createExecutableExtension ( CLASS_ATTR ) ; if ( obj instanceof Filter ) { Filter filter = ( Filter ) obj ; IContextHandler handler = getContextHandler ( curr ) ; IIgnoreHandler ignoreHandler = getIgnoreHandler ( curr ) ; IErrorPageHandler errorHandler = getErrorHandler ( curr ) ; IStatisticsHandler statsHandler = getStatisticsHandler ( curr ) ; IRestartManager restartHandler = getRestartHandler ( curr ) ; if ( filter instanceof IStatisticsProvider && serverID != null ) { if ( statsHandler != null ) { statsHandler . setID ( serverID ) ; ( ( IStatisticsProvider ) filter ) . setStatisticsHandler ( statsHandler ) ; } } if ( filter instanceof IRestartableFilter && serverID != null ) { if ( restartHandler != null ) { restartHandler . setID ( serverID ) ; restartHandler . setFilter ( ( IRestartableFilter ) filter ) ; } } if ( filter instanceof IHostnameFilter ) { ( ( IHostnameFilter ) filter ) . setHostname ( hostname ) ; ( ( IHostnameFilter ) filter ) . setPort ( port ) ; } if ( filter instanceof IDocumentRootFilter ) { ( ( IDocumentRootFilter ) filter ) . setDocumentRootResolver ( resolver ) ; } if ( filter instanceof IIgnoreFilter ) { ( ( IIgnoreFilter ) filter ) . setIgnoreHandler ( ignoreHandler ) ; } if ( filter instanceof IErrorPageFilter ) { ( ( IErrorPageFilter ) filter ) . setErrorPageHandler ( errorHandler ) ; } if ( filter instanceof ILoggingFilter ) { ( ( ILoggingFilter ) filter ) . setLoggingHandler ( loggingHandler ) ; } if ( handler == null || handler . shouldaddFilter ( ) ) { for ( int paths = 0 ; paths < allPathSpecs . length ; paths ++ ) { context . addFilter ( new FilterHolder ( filter ) , allPathSpecs [ paths ] . trim ( ) , intDispatches ) ; } } } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadExtension , e ) ; } } } } } } private IContextHandler getContextHandler ( IConfigurationElement element ) { IContextHandler handler = null ; if ( element . getAttribute ( HANDLER_ATTR ) != null ) { Object oHandler ; try { oHandler = element . createExecutableExtension ( HANDLER_ATTR ) ; if ( oHandler instanceof IContextHandler ) { handler = ( IContextHandler ) oHandler ; } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadContext , e ) ; } } return handler ; } private IStatisticsHandler getStatisticsHandler ( IConfigurationElement element ) { IStatisticsHandler handler = null ; if ( element . getAttribute ( STATISTICS_ATTR ) != null ) { Object oHandler ; try { oHandler = element . createExecutableExtension ( STATISTICS_ATTR ) ; if ( oHandler instanceof IStatisticsHandler ) { handler = ( IStatisticsHandler ) oHandler ; } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadStats , e ) ; } } return handler ; } private IRestartManager getRestartHandler ( IConfigurationElement element ) { IRestartManager handler = null ; if ( element . getAttribute ( RESTART_ATTR ) != null ) { Object oHandler ; try { oHandler = element . createExecutableExtension ( RESTART_ATTR ) ; if ( oHandler instanceof IRestartManager ) { handler = ( IRestartManager ) oHandler ; } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadRestart , e ) ; } } return handler ; } private IIgnoreHandler getIgnoreHandler ( IConfigurationElement element ) { IIgnoreHandler handler = null ; if ( element . getAttribute ( IGNORE_ATTR ) != null ) { Object oHandler ; try { oHandler = element . createExecutableExtension ( IGNORE_ATTR ) ; if ( oHandler instanceof IIgnoreHandler ) { handler = ( IIgnoreHandler ) oHandler ; } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadIgnore , e ) ; } } return handler ; } private IErrorPageHandler getErrorHandler ( IConfigurationElement element ) { IErrorPageHandler handler = null ; if ( element . getAttribute ( ERROR_ATTR ) != null ) { Object oHandler ; try { oHandler = element . createExecutableExtension ( ERROR_ATTR ) ; if ( oHandler instanceof IErrorPageHandler ) { handler = ( IErrorPageHandler ) oHandler ; } } catch ( CoreException e ) { IdeLog . logInfo ( JettyPlugin . getDefault ( ) , Messages . JettyServerBuilder_INF_LoadError , e ) ; } } return handler ; } public static JettyServerBuilder getInstance ( ) { if ( builder == null ) { builder = new JettyServerBuilder ( ) ; } return builder ; } } 
=======
public class AmazonSearchClient { private static final String NAMESPACE = "http://webservices.amazon.com/AWSECommerceService/2006-05-17" ; private static final String AMAZON_WEBSERVICE_KEY = "" ; public AmazonSearchClient ( ) { if ( AMAZON_WEBSERVICE_KEY . length ( ) == 0 ) { System . out . println ( "Please substitute your own amazon webservice key before running this code." ) ; } else { Request requestObject = new Request ( ) ; requestObject . author = "Whyte" ; requestObject . searchIndex = "Books" ; SoapObject request = new SoapObject ( NAMESPACE , "ItemSearch" ) ; request . addProperty ( "SubscriptionId" , AMAZON_WEBSERVICE_KEY ) ; request . addProperty ( "Request" , requestObject ) ; SoapSerializationEnvelope envelope = new SoapSerializationEnvelope ( SoapEnvelope . VER11 ) ; envelope . setOutputSoapObject ( request ) ; requestObject . register ( envelope ) ; registerObjects ( envelope ) ; HttpTransportSE httpTransportSE = new HttpTransportSE ( "http://soap.amazon.com/onca/soap?Service=AWSECommerceService" ) ; httpTransportSE . setXmlVersionTag ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" ) ; try { httpTransportSE . call ( "http://soap.amazon.com" , envelope ) ; BookItems response = ( BookItems ) envelope . getResponse ( ) ; System . out . println ( response ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } private void registerObjects ( SoapSerializationEnvelope envelope ) { new ItemSearchResponse ( ) . register ( envelope ) ; } public static void main ( String [ ] args ) { new AmazonSearchClient ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
