public abstract class BaseContributor implements IUnifiedEditorContributor { private String language ; protected IUnifiedEditorContributor parent ; private String [ ] contentTypes ; private EditorFileContext fileService ; private String [ ] indentPrefixes = new String [ ] { "\t" , "    " } ; private SourceViewerConfiguration parentConfiguration ; private ITextDoubleClickStrategy doubleClickStrategy ; private ITextTripleClickStrategy tripleClickStrategy ; protected BaseContributor ( String language ) { this . language = language ; } public void dispose ( ) { if ( parent != null ) { parent . dispose ( ) ; parent = null ; } fileService = null ; parentConfiguration = null ; doubleClickStrategy = null ; } public boolean isAutoActivateContentAssist ( ) { return false ; } public String getLocalContentType ( ) { return language ; } public String [ ] getIndentPrefixes ( ISourceViewer sourceViewer , String contentType ) { if ( contentType == null || contentType . equals ( StringUtils . EMPTY ) || contentType . equals ( this . getLocalContentType ( ) ) ) { return getLocalIndentPrefixes ( ) ; } IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { if ( ccs [ i ] . getLocalContentType ( ) . equals ( contentType ) && ccs [ i ] instanceof BaseContributor ) { ( ( BaseContributor ) ccs [ i ] ) . getLocalIndentPrefixes ( ) ; break ; } } } return indentPrefixes ; } public String getIndentString ( ISourceViewer sourceViewer , String contentType ) { String [ ] indents = getIndentPrefixes ( sourceViewer , contentType ) ; boolean hasIndents = ( indents == null ) || ( indents . length == 0 ) ; String indentString = hasIndents ? "\t" : indents [ 0 ] ; return indentString ; } protected String [ ] getLocalIndentPrefixes ( ) { return this . indentPrefixes ; } protected void setLocalIndentPrefixes ( String [ ] prefixes ) { this . indentPrefixes = prefixes ; } public void setIndentPrefixes ( String [ ] prefixes , ISourceViewer sourceViewer , String contentType ) { IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { if ( ccs [ i ] . getLocalContentType ( ) . equals ( contentType ) && ccs [ i ] instanceof BaseContributor ) { ( ( BaseContributor ) ccs [ i ] ) . setLocalIndentPrefixes ( prefixes ) ; sourceViewer . setIndentPrefixes ( prefixes , contentType ) ; break ; } } } } public void setAllIndentPrefixes ( String [ ] prefixes , ISourceViewer sourceViewer ) { this . indentPrefixes = prefixes ; IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { if ( ccs [ i ] instanceof BaseContributor ) { ( ( BaseContributor ) ccs [ i ] ) . setLocalIndentPrefixes ( prefixes ) ; sourceViewer . setIndentPrefixes ( prefixes , ccs [ i ] . getLocalContentType ( ) ) ; } } } sourceViewer . setIndentPrefixes ( prefixes , this . getLocalContentType ( ) ) ; } public IUnifiedEditorContributor [ ] getChildContributors ( ) { return null ; } public IUnifiedEditorContributor findChildContributor ( String contentType ) { if ( contentType . equals ( getLocalContentType ( ) ) ) { return this ; } else { IUnifiedEditorContributor [ ] contributors = getChildContributors ( ) ; if ( contributors != null ) { for ( int i = 0 ; i < contributors . length ; i ++ ) { IUnifiedEditorContributor child = contributors [ i ] . findChildContributor ( contentType ) ; if ( child != null ) { return child ; } } } return null ; } } public void configLocalPresentationReconciler ( PresentationReconciler reconciler ) { } public IAutoEditStrategy [ ] getLocalAutoEditStrategies ( ISourceViewer sourceViewer , String contentType ) { return null ; } public IContentAssistProcessor getLocalContentAssistProcessor ( ISourceViewer sourceViewer , String contentType ) { return null ; } public final void configPresentationReconciler ( PresentationReconciler reconciler ) { } public final String [ ] getContentTypes ( ) { if ( contentTypes == null ) { ArrayList al = new ArrayList ( ) ; String localCTS = getLocalContentType ( ) ; int len = 0 ; if ( localCTS != null ) { al . add ( new String [ ] { localCTS } ) ; len = 1 ; } IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { String [ ] ct = ccs [ i ] . getContentTypes ( ) ; if ( ct != null ) { al . add ( ct ) ; len += ct . length ; } } } contentTypes = new String [ len ] ; int index = 0 ; for ( int i = 0 ; i < al . size ( ) ; i ++ ) { String [ ] types = ( String [ ] ) al . get ( i ) ; for ( int j = 0 ; j < types . length ; j ++ ) { contentTypes [ index ] = types [ j ] ; index ++ ; } } } return contentTypes ; } public final IContentAssistProcessor getContentAssistProcessor ( ISourceViewer sourceViewer , String contentType ) { IContentAssistProcessor localCA = getLocalContentAssistProcessor ( sourceViewer , contentType ) ; if ( localCA != null ) { return new MergingContentProcessor ( localCA , new UnifiedTemplateCompletionProcessor ( contentType ) ) ; } IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { IContentAssistProcessor ca = ccs [ i ] . getContentAssistProcessor ( sourceViewer , contentType ) ; if ( ca != null ) { return ca ; } } } return null ; } public final IUnifiedBracketInserter getBracketInserter ( ISourceViewer sourceViewer , String contentType ) { IUnifiedBracketInserter localCA = getLocalBracketInserter ( sourceViewer , contentType ) ; if ( localCA != null ) { return localCA ; } IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { IUnifiedBracketInserter ca = ccs [ i ] . getBracketInserter ( sourceViewer , contentType ) ; if ( ca != null ) { return ca ; } } } return null ; } public boolean isValidIdentifier ( char c , int keyCode ) { return false ; } public boolean isValidActivationCharacter ( char c , int keyCode ) { return false ; } public final ITextHover getTextHover ( ISourceViewer sourceViewer , String contentType ) { ITextHover localHover = getLocalTextHover ( sourceViewer , contentType ) ; if ( localHover != null ) { return localHover ; } IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { ITextHover hover = ccs [ i ] . getTextHover ( sourceViewer , contentType ) ; if ( hover != null ) { return hover ; } } } return null ; } public final IAutoEditStrategy [ ] getAutoEditStrategies ( ISourceViewer sourceViewer , String contentType ) { ArrayList al = new ArrayList ( ) ; IAutoEditStrategy [ ] localAES = getLocalAutoEditStrategies ( sourceViewer , contentType ) ; int len = 0 ; if ( localAES != null ) { al . add ( localAES ) ; len = localAES . length ; } IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null && ccs . length > 0 ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { IAutoEditStrategy [ ] ct = ccs [ i ] . getAutoEditStrategies ( sourceViewer , contentType ) ; if ( ct != null && ct . length > 0 ) { al . add ( ct ) ; len += ct . length ; } } } IAutoEditStrategy [ ] autoEditStrategies = new IAutoEditStrategy [ len ] ; int index = 0 ; for ( int i = 0 ; i < al . size ( ) ; i ++ ) { IAutoEditStrategy [ ] aes = ( IAutoEditStrategy [ ] ) al . get ( i ) ; for ( int j = 0 ; j < aes . length ; j ++ ) { autoEditStrategies [ index ] = aes [ j ] ; index ++ ; } } return autoEditStrategies ; } public final EditorFileContext getFileContext ( ) { if ( fileService == null && parent != null ) { return parent . getFileContext ( ) ; } else { return fileService ; } } public void setFileContext ( EditorFileContext fileContext ) { this . fileService = fileContext ; } public final void setParent ( IUnifiedEditorContributor parent ) { this . parent = parent ; } public ITextHover getLocalTextHover ( ISourceViewer sourceViewer , String contentType ) { if ( contentType . equals ( getLocalContentType ( ) ) ) { return new LexemeTextHover ( getFileContext ( ) ) ; } return null ; } public SourceViewerConfiguration getParentConfiguration ( ) { if ( parentConfiguration != null ) { return parentConfiguration ; } else if ( parent != null ) { return parent . getParentConfiguration ( ) ; } else { return null ; } } public void setParentConfiguration ( SourceViewerConfiguration parentConfiguration ) { this . parentConfiguration = parentConfiguration ; } public ITextDoubleClickStrategy getDoubleClickStrategy ( ISourceViewer sourceViewer , String contentType ) { IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null && ccs . length > 0 ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { ITextDoubleClickStrategy dcs = ccs [ i ] . getDoubleClickStrategy ( sourceViewer , contentType ) ; if ( dcs != null ) { return dcs ; } } } if ( doubleClickStrategy == null ) { doubleClickStrategy = new DefaultTextDoubleClickStrategy ( ) ; } return doubleClickStrategy ; } public ITextTripleClickStrategy getTripleClickStrategy ( ISourceViewer sourceViewer , String contentType ) { IUnifiedEditorContributor [ ] ccs = getChildContributors ( ) ; if ( ccs != null && ccs . length > 0 ) { for ( int i = 0 ; i < ccs . length ; i ++ ) { ITextTripleClickStrategy dcs = ccs [ i ] . getTripleClickStrategy ( sourceViewer , contentType ) ; if ( dcs != null ) { return dcs ; } } } if ( tripleClickStrategy == null ) { tripleClickStrategy = new UnifiedTripleClickStrategy ( ) ; } return tripleClickStrategy ; } public IUnifiedBracketInserter getLocalBracketInserter ( ISourceViewer sourceViewer , String contentType ) { return null ; } } 