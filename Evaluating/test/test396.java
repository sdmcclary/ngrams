public class Naming { private Naming ( ) { } private static final int CT_NAME = 1 ; private static final int CT_NMSTRT = 2 ; private static final String nameStartSingles = ":_ΆΌϚϜϞϠՙەऽল" + "ਫ਼ઍઽૠଽஜೞะຄຊຍລ" + "ວະຽᄀᄉᄼᄾᅀᅌᅎᅐᅙ" + "ᅣᅥᅧᅩᅵᆞᆨᆫᆺᇫᇰᇹ" + "ὙὛὝιΩ℮〇" ; private static final String nameStartRanges = "AZazÀÖØöøÿĀı" + "ĴľŁňŊžƀǃǍǰǴǵ" + "ǺȗɐʨʻˁΈΊΎΡΣώ" + "ϐϖϢϳЁЌЎяёќўҁ" + "ҐӄӇӈӋӌӐӫӮӵӸӹ" + "ԱՖաֆאתװײءغفي" + "ٱڷںھۀێېۓۥۦअह" + "क़ॡঅঌএঐওনপরশহ" + "ড়ঢ়য়ৡৰৱਅਊਏਐਓਨ" + "ਪਰਲਲ਼ਵਸ਼ਸਹਖ਼ੜੲੴ" + "અઋએઑઓનપરલળવહ" + "ଅଌଏଐଓନପରଲଳଶହ" + "ଡ଼ଢ଼ୟୡஅஊஎஐஒகஙச" + "ஞடணதநபமவஷஹఅఌ" + "ఎఐఒనపళవహౠౡಅಌ" + "ಎಐಒನಪಳವಹೠೡഅഌ" + "എഐഒനപഹൠൡกฮาำ" + "เๅກຂງຈດທນຟມຣ" + "ສຫອຮາຳເໄཀཇཉཀྵ" + "ႠჅაჶᄂᄃᄅᄇᄋᄌᄎᄒ" + "ᅔᅕᅟᅡᅭᅮᅲᅳᆮᆯᆷᆸ" + "ᆼᇂḀẛẠỹἀἕἘἝἠὅ" + "ὈὍὐὗὟώᾀᾴᾶᾼῂῄ" + "ῆῌῐΐῖΊῠῬῲῴῶῼ" + "KÅↀↂぁゔァヺㄅㄬ가힣" + "一龥〡〩" ; private static final String nameSingles = "-.़়्ֿٰׄািৗਂ" + "਼ਾਿ઼଼ௗൗัັ༹༵༷" + "༾༿ྗྐྵ゙゚⃡·ːˑ·ـ" + "ๆໆ々" ; private static final String nameRanges = "ֹֻֽ֑֣̀҃҆֡͠͡ͅ" + "ׁׂًْۖۜ۝۟۠ۤۧۨ" + "۪ۭँःाौ॑॔ॢॣঁঃ" + "ীৄেৈো্ৢৣੀੂੇੈ" + "ੋ੍ੰੱઁઃાૅેૉો્" + "ଁଃାୃେୈୋ୍ୖୗஂஃ" + "ாூெைொ்ఁఃాౄెై" + "ొ్ౕౖಂಃಾೄೆೈೊ್" + "ೕೖംഃാൃെൈൊ്ิฺ" + "็๎ິູົຼ່ໍ྄ཱ༘༙" + "྆ྋྐྕྙྭྱྷ〪〯⃐⃜" + "09٠٩۰۹०९০৯੦੯" + "૦૯୦୯௧௯౦౯೦೯൦൯" + "๐๙໐໙༠༩〱〵ゝゞーヾ" ; private final static byte [ ] [ ] charTypeTable ; static { charTypeTable = new byte [ 256 ] [ ] ; for ( int i = 0 ; i < nameSingles . length ( ) ; i ++ ) setCharType ( nameSingles . charAt ( i ) , CT_NAME ) ; for ( int i = 0 ; i < nameRanges . length ( ) ; i += 2 ) setCharType ( nameRanges . charAt ( i ) , nameRanges . charAt ( i + 1 ) , CT_NAME ) ; for ( int i = 0 ; i < nameStartSingles . length ( ) ; i ++ ) setCharType ( nameStartSingles . charAt ( i ) , CT_NMSTRT ) ; for ( int i = 0 ; i < nameStartRanges . length ( ) ; i += 2 ) setCharType ( nameStartRanges . charAt ( i ) , nameStartRanges . charAt ( i + 1 ) , CT_NMSTRT ) ; byte [ ] other = new byte [ 256 ] ; for ( int i = 0 ; i < 256 ; i ++ ) if ( charTypeTable [ i ] == null ) charTypeTable [ i ] = other ; } private static void setCharType ( char c , int type ) { int hi = c > > 8 ; if ( charTypeTable [ hi ] == null ) charTypeTable [ hi ] = new byte [ 256 ] ; charTypeTable [ hi ] [ c & 0xFF ] = ( byte ) type ; } private static void setCharType ( char min , char max , int type ) { byte [ ] shared = null ; do { if ( ( min & 0xFF ) == 0 ) { for ( ; min + 0xFF <= max ; min += 0x100 ) { if ( shared == null ) { shared = new byte [ 256 ] ; for ( int i = 0 ; i < 256 ; i ++ ) shared [ i ] = ( byte ) type ; } charTypeTable [ min > > 8 ] = shared ; if ( min + 0xFF == max ) return ; } } setCharType ( min , type ) ; } while ( min ++ != max ) ; } private static boolean isNameStartChar ( char c ) { return charTypeTable [ c > > 8 ] [ c & 0xff ] == CT_NMSTRT ; } private static boolean isNameStartCharNs ( char c ) { return isNameStartChar ( c ) && c != ':' ; } private static boolean isNameChar ( char c ) { return charTypeTable [ c > > 8 ] [ c & 0xff ] != 0 ; } private static boolean isNameCharNs ( char c ) { return isNameChar ( c ) && c != ':' ; } public static boolean isName ( String s ) { int len = s . length ( ) ; if ( len == 0 ) return false ; if ( ! isNameStartChar ( s . charAt ( 0 ) ) ) return false ; for ( int i = 1 ; i < len ; i ++ ) if ( ! isNameChar ( s . charAt ( i ) ) ) return false ; return true ; } public static boolean isNmtoken ( String s ) { int len = s . length ( ) ; if ( len == 0 ) return false ; for ( int i = 0 ; i < len ; i ++ ) if ( ! isNameChar ( s . charAt ( i ) ) ) return false ; return true ; } public static boolean isNcname ( String s ) { int len = s . length ( ) ; if ( len == 0 ) return false ; if ( ! isNameStartCharNs ( s . charAt ( 0 ) ) ) return false ; for ( int i = 1 ; i < len ; i ++ ) if ( ! isNameCharNs ( s . charAt ( i ) ) ) return false ; return true ; } public static boolean isQname ( String s ) { int len = s . length ( ) ; if ( len == 0 ) return false ; if ( ! isNameStartCharNs ( s . charAt ( 0 ) ) ) return false ; for ( int i = 1 ; i < len ; i ++ ) { char c = s . charAt ( i ) ; if ( ! isNameCharNs ( c ) ) { if ( c == ':' && ++ i < len && isNameStartCharNs ( s . charAt ( i ) ) ) { for ( ++ i ; i < len ; i ++ ) if ( ! isNameCharNs ( s . charAt ( i ) ) ) return false ; return true ; } return false ; } } return true ; } } 