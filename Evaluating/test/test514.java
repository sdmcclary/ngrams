public class FileManagerActivity extends ListActivity { private static final String TAG = "FileManagerActivity" ; private int mState ; private static final int STATE_BROWSE = 1 ; private static final int STATE_PICK_FILE = 2 ; private static final int STATE_PICK_DIRECTORY = 3 ; protected static final int REQUEST_CODE_MOVE = 1 ; protected static final int REQUEST_CODE_COPY = 2 ; private static final int MENU_ABOUT = Menu . FIRST + 1 ; private static final int MENU_UPDATE = Menu . FIRST + 2 ; private static final int MENU_PREFERENCES = Menu . FIRST + 3 ; private static final int MENU_NEW_FOLDER = Menu . FIRST + 4 ; private static final int MENU_DELETE = Menu . FIRST + 5 ; private static final int MENU_RENAME = Menu . FIRST + 6 ; private static final int MENU_SEND = Menu . FIRST + 7 ; private static final int MENU_OPEN = Menu . FIRST + 8 ; private static final int MENU_MOVE = Menu . FIRST + 9 ; private static final int MENU_COPY = Menu . FIRST + 10 ; private static final int DIALOG_NEW_FOLDER = 1 ; private static final int DIALOG_DELETE = 2 ; private static final int DIALOG_RENAME = 3 ; private static final int DIALOG_ABOUT = 4 ; private static final int COPY_BUFFER_SIZE = 32 * 1024 ; private static final String BUNDLE_CURRENT_DIRECTORY = "current_directory" ; private static final String BUNDLE_CONTEXT_FILE = "context_file" ; private static final String BUNDLE_CONTEXT_TEXT = "context_text" ; private static final String BUNDLE_SHOW_DIRECTORY_INPUT = "show_directory_input" ; private static final String BUNDLE_STEPS_BACK = "steps_back" ; private ArrayList < IconifiedText > directoryEntries = new ArrayList < IconifiedText > ( ) ; List < IconifiedText > mListDir = new ArrayList < IconifiedText > ( ) ; List < IconifiedText > mListFile = new ArrayList < IconifiedText > ( ) ; List < IconifiedText > mListSdCard = new ArrayList < IconifiedText > ( ) ; private File currentDirectory = new File ( "" ) ; private String mSdCardPath = "" ; private MimeTypes mMimeTypes ; private String mContextText ; private File mContextFile = new File ( "" ) ; private Drawable mContextIcon ; private int mStepsBack ; private EditText mEditFilename ; private Button mButtonPick ; private LinearLayout mDirectoryButtons ; private LinearLayout mDirectoryInput ; private EditText mEditDirectory ; private ImageButton mButtonDirectoryPick ; private TextView mEmptyText ; private ProgressBar mProgressBar ; private DirectoryScanner mDirectoryScanner ; private File mPreviousDirectory ; private ThumbnailLoader mThumbnailLoader ; private Handler currentHandler ; static final public int MESSAGE_SHOW_DIRECTORY_CONTENTS = 500 ; static final public int MESSAGE_SET_PROGRESS = 501 ; static final public int MESSAGE_ICON_CHANGED = 502 ; @ Override public void onCreate ( Bundle icicle ) { super . onCreate ( icicle ) ; currentHandler = new Handler ( ) { public void handleMessage ( Message msg ) { FileManagerActivity . this . handleMessage ( msg ) ; } } ; requestWindowFeature ( Window . FEATURE_INDETERMINATE_PROGRESS ) ; setContentView ( R . layout . filelist ) ; mEmptyText = ( TextView ) findViewById ( R . id . empty_text ) ; mProgressBar = ( ProgressBar ) findViewById ( R . id . scan_progress ) ; getListView ( ) . setOnCreateContextMenuListener ( this ) ; getListView ( ) . setEmptyView ( findViewById ( R . id . empty ) ) ; getListView ( ) . setTextFilterEnabled ( true ) ; getListView ( ) . requestFocus ( ) ; getListView ( ) . requestFocusFromTouch ( ) ; mDirectoryButtons = ( LinearLayout ) findViewById ( R . id . directory_buttons ) ; mEditFilename = ( EditText ) findViewById ( R . id . filename ) ; mButtonPick = ( Button ) findViewById ( R . id . button_pick ) ; mButtonPick . setOnClickListener ( new View . OnClickListener ( ) { public void onClick ( View arg0 ) { pickFileOrDirectory ( ) ; } } ) ; mDirectoryInput = null ; getMimeTypes ( ) ; getSdCardPath ( ) ; mState = STATE_BROWSE ; Intent intent = getIntent ( ) ; String action = intent . getAction ( ) ; File browseto = new File ( "/" ) ; if ( ! TextUtils . isEmpty ( mSdCardPath ) ) { browseto = new File ( mSdCardPath ) ; } mState = STATE_BROWSE ; if ( action != null ) { if ( action . equals ( FileManagerIntents . ACTION_PICK_FILE ) ) { mState = STATE_PICK_FILE ; } else if ( action . equals ( FileManagerIntents . ACTION_PICK_DIRECTORY ) ) { mState = STATE_PICK_DIRECTORY ; mEditFilename . setVisibility ( View . GONE ) ; mButtonPick . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . FILL_PARENT , LinearLayout . LayoutParams . WRAP_CONTENT ) ) ; } } if ( mState == STATE_BROWSE ) { mEditFilename . setVisibility ( View . GONE ) ; mButtonPick . setVisibility ( View . GONE ) ; } File file = FileUtils . getFile ( intent . getData ( ) ) ; if ( file != null ) { File dir = FileUtils . getPathWithoutFilename ( file ) ; if ( dir . isDirectory ( ) ) { browseto = dir ; } if ( ! file . isDirectory ( ) ) { mEditFilename . setText ( file . getName ( ) ) ; } } String title = intent . getStringExtra ( FileManagerIntents . EXTRA_TITLE ) ; if ( title != null ) { setTitle ( title ) ; } String buttontext = intent . getStringExtra ( FileManagerIntents . EXTRA_BUTTON_TEXT ) ; if ( buttontext != null ) { mButtonPick . setText ( buttontext ) ; } mStepsBack = 0 ; if ( icicle != null ) { browseto = new File ( icicle . getString ( BUNDLE_CURRENT_DIRECTORY ) ) ; mContextFile = new File ( icicle . getString ( BUNDLE_CONTEXT_FILE ) ) ; mContextText = icicle . getString ( BUNDLE_CONTEXT_TEXT ) ; boolean show = icicle . getBoolean ( BUNDLE_SHOW_DIRECTORY_INPUT ) ; showDirectoryInput ( show ) ; mStepsBack = icicle . getInt ( BUNDLE_STEPS_BACK ) ; } browseTo ( browseto ) ; } public void onDestroy ( ) { super . onDestroy ( ) ; DirectoryScanner scanner = mDirectoryScanner ; if ( scanner != null ) { scanner . cancel = true ; } mDirectoryScanner = null ; ThumbnailLoader loader = mThumbnailLoader ; if ( loader != null ) { loader . cancel = true ; mThumbnailLoader = null ; } } private void handleMessage ( Message message ) { switch ( message . what ) { case MESSAGE_SHOW_DIRECTORY_CONTENTS : showDirectoryContents ( ( DirectoryContents ) message . obj ) ; break ; case MESSAGE_SET_PROGRESS : setProgress ( message . arg1 , message . arg2 ) ; break ; case MESSAGE_ICON_CHANGED : notifyIconChanged ( ( IconifiedText ) message . obj ) ; break ; } } private void notifyIconChanged ( IconifiedText text ) { if ( getListAdapter ( ) != null ) { ( ( BaseAdapter ) getListAdapter ( ) ) . notifyDataSetChanged ( ) ; } } private void setProgress ( int progress , int maxProgress ) { mProgressBar . setMax ( maxProgress ) ; mProgressBar . setProgress ( progress ) ; mProgressBar . setVisibility ( View . VISIBLE ) ; } private void showDirectoryContents ( DirectoryContents contents ) { mDirectoryScanner = null ; mListSdCard = contents . listSdCard ; mListDir = contents . listDir ; mListFile = contents . listFile ; directoryEntries . ensureCapacity ( mListSdCard . size ( ) + mListDir . size ( ) + mListFile . size ( ) ) ; addAllElements ( directoryEntries , mListSdCard ) ; addAllElements ( directoryEntries , mListDir ) ; addAllElements ( directoryEntries , mListFile ) ; IconifiedTextListAdapter itla = new IconifiedTextListAdapter ( this ) ; itla . setListItems ( directoryEntries , getListView ( ) . hasTextFilter ( ) ) ; setListAdapter ( itla ) ; getListView ( ) . setTextFilterEnabled ( true ) ; selectInList ( mPreviousDirectory ) ; refreshDirectoryPanel ( ) ; setProgressBarIndeterminateVisibility ( false ) ; mProgressBar . setVisibility ( View . GONE ) ; mEmptyText . setVisibility ( View . VISIBLE ) ; mThumbnailLoader = new ThumbnailLoader ( currentDirectory , mListFile , currentHandler ) ; mThumbnailLoader . start ( ) ; } private void onCreateDirectoryInput ( ) { mDirectoryInput = ( LinearLayout ) findViewById ( R . id . directory_input ) ; mEditDirectory = ( EditText ) findViewById ( R . id . directory_text ) ; mButtonDirectoryPick = ( ImageButton ) findViewById ( R . id . button_directory_pick ) ; mButtonDirectoryPick . setOnClickListener ( new View . OnClickListener ( ) { public void onClick ( View arg0 ) { goToDirectoryInEditText ( ) ; } } ) ; } private File mHaveShownErrorMessageForFile = null ; private void goToDirectoryInEditText ( ) { File browseto = new File ( mEditDirectory . getText ( ) . toString ( ) ) ; if ( browseto . equals ( currentDirectory ) ) { showDirectoryInput ( false ) ; } else { if ( mHaveShownErrorMessageForFile != null && mHaveShownErrorMessageForFile . equals ( browseto ) ) { mHaveShownErrorMessageForFile = null ; showDirectoryInput ( false ) ; } else { if ( ! browseto . exists ( ) ) { mHaveShownErrorMessageForFile = browseto ; } browseTo ( browseto ) ; } } } private void showDirectoryInput ( boolean show ) { if ( show ) { if ( mDirectoryInput == null ) { onCreateDirectoryInput ( ) ; } } if ( mDirectoryInput != null ) { mDirectoryInput . setVisibility ( show ? View . VISIBLE : View . GONE ) ; mDirectoryButtons . setVisibility ( show ? View . GONE : View . VISIBLE ) ; } refreshDirectoryPanel ( ) ; } private void refreshDirectoryPanel ( ) { if ( isDirectoryInputVisible ( ) ) { String path = currentDirectory . getAbsolutePath ( ) ; mEditDirectory . setText ( path ) ; mEditDirectory . setSelection ( path . length ( ) ) ; } else { setDirectoryButtons ( ) ; } } @ Override protected void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( BUNDLE_CURRENT_DIRECTORY , currentDirectory . getAbsolutePath ( ) ) ; outState . putString ( BUNDLE_CONTEXT_FILE , mContextFile . getAbsolutePath ( ) ) ; outState . putString ( BUNDLE_CONTEXT_TEXT , mContextText ) ; boolean show = isDirectoryInputVisible ( ) ; outState . putBoolean ( BUNDLE_SHOW_DIRECTORY_INPUT , show ) ; outState . putInt ( BUNDLE_STEPS_BACK , mStepsBack ) ; } private boolean isDirectoryInputVisible ( ) { return ( ( mDirectoryInput != null ) && ( mDirectoryInput . getVisibility ( ) == View . VISIBLE ) ) ; } private void pickFileOrDirectory ( ) { File file = null ; if ( mState == STATE_PICK_FILE ) { String filename = mEditFilename . getText ( ) . toString ( ) ; file = FileUtils . getFile ( currentDirectory . getAbsolutePath ( ) , filename ) ; } else if ( mState == STATE_PICK_DIRECTORY ) { file = currentDirectory ; } Intent intent = getIntent ( ) ; intent . setData ( FileUtils . getUri ( file ) ) ; setResult ( RESULT_OK , intent ) ; finish ( ) ; } private void getMimeTypes ( ) { MimeTypeParser mtp = new MimeTypeParser ( ) ; XmlResourceParser in = getResources ( ) . getXml ( R . xml . mimetypes ) ; try { mMimeTypes = mtp . fromXmlResource ( in ) ; } catch ( XmlPullParserException e ) { Log . e ( TAG , "PreselectedChannelsActivity: XmlPullParserException" , e ) ; throw new RuntimeException ( "PreselectedChannelsActivity: XmlPullParserException" ) ; } catch ( IOException e ) { Log . e ( TAG , "PreselectedChannelsActivity: IOException" , e ) ; throw new RuntimeException ( "PreselectedChannelsActivity: IOException" ) ; } } private void upOneLevel ( ) { if ( mStepsBack > 0 ) { mStepsBack -- ; } if ( currentDirectory . getParent ( ) != null ) browseTo ( currentDirectory . getParentFile ( ) ) ; } private void jumpTo ( final File aDirectory ) { mStepsBack = 0 ; browseTo ( aDirectory ) ; } private void browseTo ( final File aDirectory ) { if ( aDirectory . isDirectory ( ) ) { if ( aDirectory . equals ( currentDirectory ) ) { showDirectoryInput ( true ) ; } else { mPreviousDirectory = currentDirectory ; currentDirectory = aDirectory ; refreshList ( ) ; } } else { if ( mState == STATE_BROWSE || mState == STATE_PICK_DIRECTORY ) { openFile ( aDirectory ) ; } else if ( mState == STATE_PICK_FILE ) { mEditFilename . setText ( aDirectory . getName ( ) ) ; } } } private void openFile ( File aFile ) { if ( ! aFile . exists ( ) ) { Toast . makeText ( this , R . string . error_file_does_not_exists , Toast . LENGTH_SHORT ) . show ( ) ; return ; } Intent intent = new Intent ( android . content . Intent . ACTION_VIEW ) ; Uri data = FileUtils . getUri ( aFile ) ; String type = mMimeTypes . getMimeType ( aFile . getName ( ) ) ; intent . setDataAndType ( data , type ) ; Intent originalIntent = getIntent ( ) ; if ( originalIntent != null && originalIntent . getAction ( ) != null && originalIntent . getAction ( ) . equals ( Intent . ACTION_GET_CONTENT ) ) { setResult ( RESULT_OK , intent ) ; finish ( ) ; return ; } try { startActivity ( intent ) ; } catch ( ActivityNotFoundException e ) { Toast . makeText ( this , R . string . application_not_available , Toast . LENGTH_SHORT ) . show ( ) ; } ; } private void refreshList ( ) { DirectoryScanner scanner = mDirectoryScanner ; if ( scanner != null ) { scanner . cancel = true ; } ThumbnailLoader loader = mThumbnailLoader ; if ( loader != null ) { loader . cancel = true ; mThumbnailLoader = null ; } directoryEntries . clear ( ) ; mListDir . clear ( ) ; mListFile . clear ( ) ; mListSdCard . clear ( ) ; setProgressBarIndeterminateVisibility ( true ) ; mEmptyText . setVisibility ( View . GONE ) ; mProgressBar . setVisibility ( View . GONE ) ; setListAdapter ( null ) ; mDirectoryScanner = new DirectoryScanner ( currentDirectory , this , currentHandler , mMimeTypes ) ; mDirectoryScanner . start ( ) ; } private void selectInList ( File selectFile ) { String filename = selectFile . getName ( ) ; IconifiedTextListAdapter la = ( IconifiedTextListAdapter ) getListAdapter ( ) ; int count = la . getCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { IconifiedText it = ( IconifiedText ) la . getItem ( i ) ; if ( it . getText ( ) . equals ( filename ) ) { getListView ( ) . setSelection ( i ) ; break ; } } } private void addAllElements ( List < IconifiedText > addTo , List < IconifiedText > addFrom ) { int size = addFrom . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { addTo . add ( addFrom . get ( i ) ) ; } } private void setDirectoryButtons ( ) { String [ ] parts = currentDirectory . getAbsolutePath ( ) . split ( "/" ) ; mDirectoryButtons . removeAllViews ( ) ; int WRAP_CONTENT = LinearLayout . LayoutParams . WRAP_CONTENT ; ImageButton ib = new ImageButton ( this ) ; ib . setImageResource ( R . drawable . ic_launcher_home_small ) ; ib . setLayoutParams ( new LinearLayout . LayoutParams ( WRAP_CONTENT , WRAP_CONTENT ) ) ; ib . setOnClickListener ( new View . OnClickListener ( ) { public void onClick ( View view ) { jumpTo ( new File ( "/" ) ) ; } } ) ; mDirectoryButtons . addView ( ib ) ; String dir = "" ; for ( int i = 1 ; i < parts . length ; i ++ ) { dir += "/" + parts [ i ] ; if ( dir . equals ( mSdCardPath ) ) { ib = new ImageButton ( this ) ; ib . setImageResource ( R . drawable . icon_sdcard_small ) ; ib . setLayoutParams ( new LinearLayout . LayoutParams ( WRAP_CONTENT , WRAP_CONTENT ) ) ; ib . setOnClickListener ( new View . OnClickListener ( ) { public void onClick ( View view ) { jumpTo ( new File ( mSdCardPath ) ) ; } } ) ; mDirectoryButtons . addView ( ib ) ; } else { Button b = new Button ( this ) ; b . setLayoutParams ( new LinearLayout . LayoutParams ( WRAP_CONTENT , WRAP_CONTENT ) ) ; b . setText ( parts [ i ] ) ; b . setTag ( dir ) ; b . setOnClickListener ( new View . OnClickListener ( ) { public void onClick ( View view ) { String dir = ( String ) view . getTag ( ) ; jumpTo ( new File ( dir ) ) ; } } ) ; mDirectoryButtons . addView ( b ) ; } } checkButtonLayout ( ) ; } private void checkButtonLayout ( ) { int spec = View . MeasureSpec . UNSPECIFIED ; mDirectoryButtons . measure ( spec , spec ) ; int count = mDirectoryButtons . getChildCount ( ) ; int requiredwidth = mDirectoryButtons . getMeasuredWidth ( ) ; int width = getWindowManager ( ) . getDefaultDisplay ( ) . getWidth ( ) ; if ( requiredwidth > width ) { int WRAP_CONTENT = LinearLayout . LayoutParams . WRAP_CONTENT ; ImageButton ib = new ImageButton ( this ) ; ib . setImageResource ( R . drawable . ic_menu_back_small ) ; ib . setLayoutParams ( new LinearLayout . LayoutParams ( WRAP_CONTENT , WRAP_CONTENT ) ) ; ib . setOnClickListener ( new View . OnClickListener ( ) { public void onClick ( View view ) { upOneLevel ( ) ; } } ) ; mDirectoryButtons . addView ( ib , 0 ) ; ib . measure ( spec , spec ) ; requiredwidth += ib . getMeasuredWidth ( ) ; while ( requiredwidth > width && mDirectoryButtons . getChildCount ( ) > 2 ) { View view = mDirectoryButtons . getChildAt ( 1 ) ; requiredwidth -= view . getMeasuredWidth ( ) ; mDirectoryButtons . removeViewAt ( 1 ) ; } } } @ Override protected void onListItemClick ( ListView l , View v , int position , long id ) { super . onListItemClick ( l , v , position , id ) ; IconifiedTextListAdapter adapter = ( IconifiedTextListAdapter ) getListAdapter ( ) ; if ( adapter == null ) { return ; } IconifiedText text = ( IconifiedText ) adapter . getItem ( position ) ; String file = text . getText ( ) ; String curdir = currentDirectory . getAbsolutePath ( ) ; File clickedFile = FileUtils . getFile ( curdir , file ) ; if ( clickedFile != null ) { if ( clickedFile . isDirectory ( ) ) { mStepsBack ++ ; } browseTo ( clickedFile ) ; } } private void getSdCardPath ( ) { mSdCardPath = android . os . Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu . add ( 0 , MENU_NEW_FOLDER , 0 , R . string . menu_new_folder ) . setIcon ( android . R . drawable . ic_menu_add ) . setShortcut ( '0' , 'f' ) ; UpdateMenu . addUpdateMenu ( this , menu , 0 , MENU_UPDATE , 0 , R . string . update ) ; menu . add ( 0 , MENU_ABOUT , 0 , R . string . about ) . setIcon ( android . R . drawable . ic_menu_info_details ) . setShortcut ( '0' , 'a' ) ; return true ; } @ Override public boolean onPrepareOptionsMenu ( Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; Intent intent = new Intent ( null , getIntent ( ) . getData ( ) ) ; intent . addCategory ( Intent . CATEGORY_ALTERNATIVE ) ; MenuIntentOptionsWithIcons menu2 = new MenuIntentOptionsWithIcons ( this , menu ) ; menu2 . addIntentOptions ( Menu . CATEGORY_ALTERNATIVE , 0 , 0 , new ComponentName ( this , FileManagerActivity . class ) , null , intent , 0 , null ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_NEW_FOLDER : showDialog ( DIALOG_NEW_FOLDER ) ; return true ; case MENU_UPDATE : UpdateMenu . showUpdateBox ( this ) ; return true ; case MENU_ABOUT : showAboutBox ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; } @ Override public void onCreateContextMenu ( ContextMenu menu , View view , ContextMenuInfo menuInfo ) { AdapterView . AdapterContextMenuInfo info ; try { info = ( AdapterView . AdapterContextMenuInfo ) menuInfo ; } catch ( ClassCastException e ) { Log . e ( TAG , "bad menuInfo" , e ) ; return ; } IconifiedTextListAdapter adapter = ( IconifiedTextListAdapter ) getListAdapter ( ) ; if ( adapter == null ) { return ; } IconifiedText it = ( IconifiedText ) adapter . getItem ( info . position ) ; menu . setHeaderTitle ( it . getText ( ) ) ; menu . setHeaderIcon ( it . getIcon ( ) ) ; File file = FileUtils . getFile ( currentDirectory , it . getText ( ) ) ; if ( ! file . isDirectory ( ) ) { if ( mState == STATE_PICK_FILE ) { menu . add ( 0 , MENU_OPEN , 0 , R . string . menu_open ) ; } menu . add ( 0 , MENU_SEND , 0 , R . string . menu_send ) ; } menu . add ( 0 , MENU_MOVE , 0 , R . string . menu_move ) ; if ( ! file . isDirectory ( ) ) { menu . add ( 0 , MENU_COPY , 0 , R . string . menu_copy ) ; } menu . add ( 0 , MENU_RENAME , 0 , R . string . menu_rename ) ; menu . add ( 0 , MENU_DELETE , 0 , R . string . menu_delete ) ; Uri data = Uri . fromFile ( file ) ; Intent intent = new Intent ( null , data ) ; String type = mMimeTypes . getMimeType ( file . getName ( ) ) ; intent . setDataAndType ( data , type ) ; menu . addIntentOptions ( Menu . CATEGORY_ALTERNATIVE , 0 , 0 , new ComponentName ( this , FileManagerActivity . class ) , null , intent , 0 , null ) ; } @ Override public boolean onContextItemSelected ( MenuItem item ) { super . onContextItemSelected ( item ) ; AdapterContextMenuInfo menuInfo = ( AdapterContextMenuInfo ) item . getMenuInfo ( ) ; IconifiedTextListAdapter adapter = ( IconifiedTextListAdapter ) getListAdapter ( ) ; if ( adapter == null ) { return false ; } IconifiedText ic = ( IconifiedText ) adapter . getItem ( menuInfo . position ) ; mContextText = ic . getText ( ) ; mContextIcon = ic . getIcon ( ) ; mContextFile = FileUtils . getFile ( currentDirectory , ic . getText ( ) ) ; switch ( item . getItemId ( ) ) { case MENU_OPEN : openFile ( mContextFile ) ; return true ; case MENU_MOVE : promptDestinationAndMoveFile ( ) ; return true ; case MENU_COPY : promptDestinationAndCopyFile ( ) ; return true ; case MENU_DELETE : showDialog ( DIALOG_DELETE ) ; return true ; case MENU_RENAME : showDialog ( DIALOG_RENAME ) ; return true ; case MENU_SEND : sendFile ( mContextFile ) ; return true ; } return false ; } @ Override protected Dialog onCreateDialog ( int id ) { switch ( id ) { case DIALOG_NEW_FOLDER : LayoutInflater inflater = LayoutInflater . from ( this ) ; View view = inflater . inflate ( R . layout . dialog_new_folder , null ) ; final EditText et = ( EditText ) view . findViewById ( R . id . foldername ) ; et . setText ( "" ) ; return new AlertDialog . Builder ( this ) . setIcon ( android . R . drawable . ic_dialog_alert ) . setTitle ( R . string . create_new_folder ) . setView ( view ) . setPositiveButton ( android . R . string . ok , new OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { createNewFolder ( et . getText ( ) . toString ( ) ) ; } } ) . setNegativeButton ( android . R . string . cancel , new OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { } } ) . create ( ) ; case DIALOG_DELETE : return new AlertDialog . Builder ( this ) . setTitle ( getString ( R . string . really_delete , mContextText ) ) . setIcon ( android . R . drawable . ic_dialog_alert ) . setPositiveButton ( android . R . string . ok , new OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { deleteFileOrFolder ( mContextFile ) ; } } ) . setNegativeButton ( android . R . string . cancel , new OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { } } ) . create ( ) ; case DIALOG_RENAME : inflater = LayoutInflater . from ( this ) ; view = inflater . inflate ( R . layout . dialog_new_folder , null ) ; final EditText et2 = ( EditText ) view . findViewById ( R . id . foldername ) ; return new AlertDialog . Builder ( this ) . setTitle ( R . string . menu_rename ) . setView ( view ) . setPositiveButton ( android . R . string . ok , new OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { renameFileOrFolder ( mContextFile , et2 . getText ( ) . toString ( ) ) ; } } ) . setNegativeButton ( android . R . string . cancel , new OnClickListener ( ) { public void onClick ( DialogInterface dialog , int which ) { } } ) . create ( ) ; case DIALOG_ABOUT : return new AboutDialog ( this ) ; } return null ; } @ Override protected void onPrepareDialog ( int id , Dialog dialog ) { super . onPrepareDialog ( id , dialog ) ; switch ( id ) { case DIALOG_NEW_FOLDER : EditText et = ( EditText ) dialog . findViewById ( R . id . foldername ) ; et . setText ( "" ) ; break ; case DIALOG_DELETE : ( ( AlertDialog ) dialog ) . setTitle ( getString ( R . string . really_delete , mContextText ) ) ; break ; case DIALOG_RENAME : et = ( EditText ) dialog . findViewById ( R . id . foldername ) ; et . setText ( mContextText ) ; TextView tv = ( TextView ) dialog . findViewById ( R . id . foldernametext ) ; if ( mContextFile . isDirectory ( ) ) { tv . setText ( R . string . file_name ) ; } else { tv . setText ( R . string . file_name ) ; } ( ( AlertDialog ) dialog ) . setIcon ( mContextIcon ) ; break ; case DIALOG_ABOUT : break ; } } private void showAboutBox ( ) { AboutDialog . showDialogOrStartActivity ( this , DIALOG_ABOUT ) ; } private void promptDestinationAndMoveFile ( ) { Intent intent = new Intent ( FileManagerIntents . ACTION_PICK_DIRECTORY ) ; intent . setData ( FileUtils . getUri ( currentDirectory ) ) ; intent . putExtra ( FileManagerIntents . EXTRA_TITLE , getString ( R . string . move_title ) ) ; intent . putExtra ( FileManagerIntents . EXTRA_BUTTON_TEXT , getString ( R . string . move_button ) ) ; startActivityForResult ( intent , REQUEST_CODE_MOVE ) ; } private void promptDestinationAndCopyFile ( ) { Intent intent = new Intent ( FileManagerIntents . ACTION_PICK_DIRECTORY ) ; intent . setData ( FileUtils . getUri ( currentDirectory ) ) ; intent . putExtra ( FileManagerIntents . EXTRA_TITLE , getString ( R . string . copy_title ) ) ; intent . putExtra ( FileManagerIntents . EXTRA_BUTTON_TEXT , getString ( R . string . copy_button ) ) ; startActivityForResult ( intent , REQUEST_CODE_COPY ) ; } private void createNewFolder ( String foldername ) { if ( ! TextUtils . isEmpty ( foldername ) ) { File file = FileUtils . getFile ( currentDirectory , foldername ) ; if ( file . mkdirs ( ) ) { browseTo ( file ) ; } else { Toast . makeText ( this , R . string . error_creating_new_folder , Toast . LENGTH_SHORT ) . show ( ) ; } } } private void deleteFileOrFolder ( File file ) { if ( file . delete ( ) ) { refreshList ( ) ; if ( file . isDirectory ( ) ) { Toast . makeText ( this , R . string . folder_deleted , Toast . LENGTH_SHORT ) . show ( ) ; } else { Toast . makeText ( this , R . string . file_deleted , Toast . LENGTH_SHORT ) . show ( ) ; } } else { if ( file . isDirectory ( ) && file . list ( ) . length > 0 ) { Toast . makeText ( this , R . string . error_folder_not_empty , Toast . LENGTH_SHORT ) . show ( ) ; } else { Toast . makeText ( this , R . string . error_deleting_file , Toast . LENGTH_SHORT ) . show ( ) ; } } } private void renameFileOrFolder ( File file , String newFileName ) { File newFile = FileUtils . getFile ( currentDirectory , newFileName ) ; rename ( file , newFile ) ; } private void rename ( File oldFile , File newFile ) { int toast = 0 ; if ( oldFile . renameTo ( newFile ) ) { refreshList ( ) ; if ( newFile . isDirectory ( ) ) { toast = R . string . folder_renamed ; } else { toast = R . string . file_renamed ; } } else { if ( newFile . isDirectory ( ) ) { toast = R . string . error_renaming_folder ; } else { toast = R . string . error_renaming_file ; } } Toast . makeText ( this , toast , Toast . LENGTH_SHORT ) . show ( ) ; } private void move ( File oldFile , File newFile ) { int toast = 0 ; if ( oldFile . renameTo ( newFile ) ) { refreshList ( ) ; if ( newFile . isDirectory ( ) ) { toast = R . string . folder_moved ; } else { toast = R . string . file_moved ; } } else { if ( newFile . isDirectory ( ) ) { toast = R . string . error_moving_folder ; } else { toast = R . string . error_moving_file ; } } Toast . makeText ( this , toast , Toast . LENGTH_SHORT ) . show ( ) ; } private File createUniqueCopyName ( Context context , File path , String fileName ) { File file = FileUtils . getFile ( path , fileName ) ; if ( ! file . exists ( ) ) { return file ; } file = FileUtils . getFile ( path , context . getString ( R . string . copied_file_name , fileName ) ) ; if ( ! file . exists ( ) ) { return file ; } int copyIndex = 2 ; while ( copyIndex < 500 ) { file = FileUtils . getFile ( path , context . getString ( R . string . copied_file_name_2 , copyIndex , fileName ) ) ; if ( ! file . exists ( ) ) { return file ; } copyIndex ++ ; } return null ; } private void copy ( File oldFile , File newFile ) { int toast = 0 ; try { FileInputStream input = new FileInputStream ( oldFile ) ; FileOutputStream output = new FileOutputStream ( newFile ) ; byte [ ] buffer = new byte [ COPY_BUFFER_SIZE ] ; while ( true ) { int bytes = input . read ( buffer ) ; if ( bytes <= 0 ) { break ; } output . write ( buffer , 0 , bytes ) ; } output . close ( ) ; input . close ( ) ; toast = R . string . file_copied ; refreshList ( ) ; } catch ( Exception e ) { toast = R . string . error_copying_file ; } Toast . makeText ( this , toast , Toast . LENGTH_SHORT ) . show ( ) ; } private void sendFile ( File file ) { String filename = file . getName ( ) ; String content = "hh" ; Log . i ( TAG , "Title to send: " + filename ) ; Log . i ( TAG , "Content to send: " + content ) ; Intent i = new Intent ( ) ; i . setAction ( Intent . ACTION_SEND ) ; i . setType ( mMimeTypes . getMimeType ( file . getName ( ) ) ) ; i . putExtra ( Intent . EXTRA_SUBJECT , filename ) ; i . putExtra ( Intent . EXTRA_STREAM , Uri . parse ( "content://" + FileManagerProvider . AUTHORITY + "/mimetype/" + file . getAbsolutePath ( ) ) ) ; i = Intent . createChooser ( i , getString ( R . string . menu_send ) ) ; try { startActivity ( i ) ; } catch ( ActivityNotFoundException e ) { Toast . makeText ( this , R . string . send_not_available , Toast . LENGTH_SHORT ) . show ( ) ; Log . e ( TAG , "Email client not installed" ) ; } } @ Override public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( keyCode == KeyEvent . KEYCODE_BACK ) { if ( mStepsBack > 0 ) { upOneLevel ( ) ; return true ; } } return super . onKeyDown ( keyCode , event ) ; } @ Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; switch ( requestCode ) { case REQUEST_CODE_MOVE : if ( resultCode == RESULT_OK && data != null ) { File movefrom = mContextFile ; File moveto = FileUtils . getFile ( data . getData ( ) ) ; if ( moveto != null ) { moveto = FileUtils . getFile ( moveto , movefrom . getName ( ) ) ; move ( movefrom , moveto ) ; } } break ; case REQUEST_CODE_COPY : if ( resultCode == RESULT_OK && data != null ) { File copyfrom = mContextFile ; File copyto = FileUtils . getFile ( data . getData ( ) ) ; if ( copyto != null ) { copyto = createUniqueCopyName ( this , copyto , copyfrom . getName ( ) ) ; if ( copyto != null ) { copy ( copyfrom , copyto ) ; } } } break ; } } } 