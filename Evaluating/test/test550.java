<<<<<<< HEAD
public class TableEditor extends Composite implements Listener { private Button addResourceTypeButton ; private Button editResourceTypeButton ; private Button removeResourceTypeButton ; private Label label ; List < Object > _items = new ArrayList < Object > ( ) ; private TableViewer _viewer ; private List < IAddItemListener > _listeners = new ArrayList < IAddItemListener > ( ) ; private boolean editEnabled = false ; public void setDescription ( String description ) { label . setText ( description ) ; } public TableEditor ( Composite parent , int style ) { super ( parent , style ) ; createComposite ( this ) ; } public TableEditor ( Composite parent , int style , boolean editEnabled ) { super ( parent , style ) ; this . editEnabled = editEnabled ; createComposite ( this ) ; } public void setItems ( List < Object > items ) { _items = items ; _viewer . setInput ( _items ) ; refreshTable ( ) ; } public List < Object > getItems ( ) { return _items ; } public Table getTable ( ) { return _viewer . getTable ( ) ; } public Button getAddButton ( ) { return addResourceTypeButton ; } public Button getEditButton ( ) { return editResourceTypeButton ; } public Button getRemoveButton ( ) { return removeResourceTypeButton ; } private TableViewer createTable ( Composite parent ) { _viewer = new TableViewer ( parent , SWT . MULTI | SWT . BORDER | SWT . FULL_SELECTION ) ; Table serverTable = _viewer . getTable ( ) ; serverTable . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; _viewer . setContentProvider ( new TableContentProvider ( ) ) ; _viewer . setLabelProvider ( new TableLabelProvider ( ) ) ; _viewer . setSorter ( new TableSorter ( ) ) ; _viewer . setInput ( _items ) ; _viewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { updateEnabledState ( ) ; } } ) ; updateEnabledState ( ) ; return _viewer ; } private void createComposite ( Composite pageComponent ) { GridLayout layout = new GridLayout ( ) ; layout . marginWidth = 0 ; layout . marginHeight = 0 ; pageComponent . setLayout ( layout ) ; pageComponent . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; label = new Label ( pageComponent , SWT . LEFT | SWT . WRAP ) ; label . setText ( StringUtils . EMPTY ) ; GridData data = new GridData ( SWT . FILL , SWT . FILL , true , false ) ; data . horizontalSpan = 2 ; label . setLayoutData ( data ) ; Composite groupComponent = new Composite ( pageComponent , SWT . NULL ) ; GridLayout groupLayout = new GridLayout ( ) ; groupLayout . marginWidth = 0 ; groupLayout . marginHeight = 0 ; groupLayout . numColumns = 3 ; groupComponent . setLayout ( groupLayout ) ; data = new GridData ( ) ; data . verticalAlignment = GridData . FILL ; data . horizontalAlignment = GridData . FILL ; groupComponent . setLayoutData ( data ) ; addResourceTypeButton = new Button ( groupComponent , SWT . PUSH ) ; addResourceTypeButton . setToolTipText ( StringUtils . ellipsify ( CoreStrings . ADD ) ) ; addResourceTypeButton . addListener ( SWT . Selection , this ) ; addResourceTypeButton . setImage ( SWTUtils . getImage ( CoreUIPlugin . getDefault ( ) , "/icons/add.gif" ) ) ; if ( editEnabled ) { editResourceTypeButton = new Button ( groupComponent , SWT . PUSH ) ; editResourceTypeButton . setToolTipText ( StringUtils . ellipsify ( CoreStrings . EDIT ) ) ; editResourceTypeButton . addListener ( SWT . Selection , this ) ; editResourceTypeButton . setImage ( SWTUtils . getImage ( CoreUIPlugin . getDefault ( ) , "/icons/edit.png" ) ) ; } removeResourceTypeButton = new Button ( groupComponent , SWT . PUSH ) ; removeResourceTypeButton . setToolTipText ( CoreStrings . REMOVE ) ; removeResourceTypeButton . addListener ( SWT . Selection , this ) ; removeResourceTypeButton . setImage ( SWTUtils . getImage ( CoreUIPlugin . getDefault ( ) , "/icons/delete.gif" ) ) ; createTable ( pageComponent ) ; } public void setSorter ( ViewerSorter sorter ) { _viewer . setSorter ( sorter ) ; } public void setLabelProvider ( ITableLabelProvider provider ) { _viewer . setLabelProvider ( provider ) ; } public void setContentProvider ( IStructuredContentProvider provider ) { _viewer . setContentProvider ( provider ) ; } public void removeSelectedResourceType ( ) { Table foldingTable = getTable ( ) ; TableItem [ ] items = foldingTable . getSelection ( ) ; int [ ] indices = foldingTable . getSelectionIndices ( ) ; if ( items != null ) { for ( int i = 0 ; i < items . length ; i ++ ) { _items . remove ( items [ i ] . getData ( ) ) ; items [ i ] . dispose ( ) ; } if ( indices . length > 1 ) { int last = indices [ indices . length - 1 ] ; if ( foldingTable . getItemCount ( ) - 1 >= last ) { foldingTable . setSelection ( last ) ; } else if ( foldingTable . getItemCount ( ) > 0 ) { foldingTable . setSelection ( foldingTable . getItemCount ( ) - 1 ) ; } } else if ( indices . length == 1 ) { if ( foldingTable . getItemCount ( ) - 1 >= indices [ 0 ] ) { foldingTable . setSelection ( indices [ 0 ] ) ; } else if ( foldingTable . getItemCount ( ) > 0 ) { foldingTable . setSelection ( foldingTable . getItemCount ( ) - 1 ) ; } } } removeResourceTypeButton . setEnabled ( foldingTable . getSelectionCount ( ) > 0 ) ; } public void editSelectedResourceType ( ) { ISelection selection = _viewer . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { IStructuredSelection select = ( IStructuredSelection ) selection ; Object o = select . getFirstElement ( ) ; for ( int i = 0 ; i < _listeners . size ( ) ; i ++ ) { IAddItemListener l = _listeners . get ( i ) ; o = l . editItem ( o ) ; refreshTable ( ) ; } } } public void addAddItemListener ( IAddItemListener listener ) { _listeners . add ( listener ) ; } public void removeAddItemListener ( IAddItemListener listener ) { _listeners . add ( listener ) ; } private void refreshTable ( ) { if ( _viewer != null ) { _viewer . refresh ( ) ; Table t = _viewer . getTable ( ) ; TableColumn [ ] columns = t . getColumns ( ) ; for ( int i = 0 ; i < columns . length ; i ++ ) { TableColumn column = columns [ i ] ; column . pack ( ) ; } } } public void handleEvent ( Event event ) { if ( event . widget == addResourceTypeButton ) { for ( int i = 0 ; i < _listeners . size ( ) ; i ++ ) { IAddItemListener l = _listeners . get ( i ) ; Object o = l . addItem ( ) ; if ( o != null ) { _items . add ( o ) ; refreshTable ( ) ; } } } else if ( event . widget == editResourceTypeButton ) { editSelectedResourceType ( ) ; } else if ( event . widget == removeResourceTypeButton ) { removeSelectedResourceType ( ) ; } updateEnabledState ( ) ; } public void updateEnabledState ( ) { if ( removeResourceTypeButton != null ) { removeResourceTypeButton . setEnabled ( _viewer . getSelection ( ) != null && ! _viewer . getSelection ( ) . isEmpty ( ) ) ; } if ( editResourceTypeButton != null ) { editResourceTypeButton . setEnabled ( _viewer . getSelection ( ) != null && ! _viewer . getSelection ( ) . isEmpty ( ) ) ; } } public class TableContentProvider implements IStructuredContentProvider { public void dispose ( ) { } public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } public Object [ ] getElements ( Object inputElement ) { ArrayList elements = ( ArrayList ) inputElement ; ArrayList newElements = new ArrayList ( ) ; for ( Iterator iter = elements . iterator ( ) ; iter . hasNext ( ) ; ) { Object element = iter . next ( ) ; newElements . add ( element ) ; } return newElements . toArray ( ) ; } } public class TableLabelProvider implements ITableLabelProvider { public Image getColumnImage ( Object element , int columnIndex ) { Image image = null ; switch ( columnIndex ) { default : break ; } return image ; } public String getColumnText ( Object element , int columnIndex ) { String name = StringUtils . EMPTY ; switch ( columnIndex ) { default : name = element . toString ( ) ; break ; } return name ; } public void addListener ( ILabelProviderListener listener ) { } public void dispose ( ) { } public boolean isLabelProperty ( Object element , String property ) { return false ; } public void removeListener ( ILabelProviderListener listener ) { } } class TableSorter extends ViewerSorter { public int compare ( Viewer viewer , Object e1 , Object e2 ) { return super . compare ( viewer , e1 , e2 ) ; } } } 
=======
public class MicrodataProperty extends Iri { public static final MicrodataProperty THE_INSTANCE = new MicrodataProperty ( ) ; protected MicrodataProperty ( ) { super ( ) ; } @ Override public String getName ( ) { return "microdata property" ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { int len = literal . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = literal . charAt ( i ) ; if ( c == '.' || c == ':' ) { super . checkValid ( literal ) ; break ; } } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
