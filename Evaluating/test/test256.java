public class CmdLineParser { public static abstract class OptionException extends Exception { OptionException ( String msg ) { super ( msg ) ; } } public static class UnknownOptionException extends OptionException { UnknownOptionException ( String optionName ) { super ( "unknown option '" + optionName + "'" ) ; this . optionName = optionName ; } public String getOptionName ( ) { return this . optionName ; } private String optionName = null ; } public static class IllegalOptionValueException extends OptionException { public IllegalOptionValueException ( Option opt , String value ) { super ( "illegal value '" + value + "' for option -" + opt . shortForm ( ) + "/--" + opt . longForm ( ) ) ; this . option = opt ; this . value = value ; } public Option getOption ( ) { return this . option ; } public String getValue ( ) { return this . value ; } private Option option ; private String value ; } public static abstract class Option { protected Option ( char shortForm , String longForm , boolean wantsValue ) { if ( longForm == null ) throw new IllegalArgumentException ( "null arg forms not allowed" ) ; this . shortForm = new String ( new char [ ] { shortForm } ) ; this . longForm = longForm ; this . wantsValue = wantsValue ; } public String shortForm ( ) { return this . shortForm ; } public String longForm ( ) { return this . longForm ; } public boolean wantsValue ( ) { return this . wantsValue ; } public final Object getValue ( String arg , Locale locale ) throws IllegalOptionValueException { if ( this . wantsValue ) { if ( arg == null ) { throw new IllegalOptionValueException ( this , "" ) ; } return this . parseValue ( arg , locale ) ; } else { return Boolean . TRUE ; } } protected Object parseValue ( String arg , Locale locale ) throws IllegalOptionValueException { return null ; } private String shortForm = null ; private String longForm = null ; private boolean wantsValue = false ; public static class BooleanOption extends Option { public BooleanOption ( char shortForm , String longForm ) { super ( shortForm , longForm , false ) ; } } public static class IntegerOption extends Option { public IntegerOption ( char shortForm , String longForm ) { super ( shortForm , longForm , true ) ; } protected Object parseValue ( String arg , Locale locale ) throws IllegalOptionValueException { try { return new Integer ( arg ) ; } catch ( NumberFormatException e ) { throw new IllegalOptionValueException ( this , arg ) ; } } } public static class DoubleOption extends Option { public DoubleOption ( char shortForm , String longForm ) { super ( shortForm , longForm , true ) ; } protected Object parseValue ( String arg , Locale locale ) throws IllegalOptionValueException { try { NumberFormat format = NumberFormat . getNumberInstance ( locale ) ; Number num = ( Number ) format . parse ( arg ) ; return new Double ( num . doubleValue ( ) ) ; } catch ( ParseException e ) { throw new IllegalOptionValueException ( this , arg ) ; } } } public static class StringOption extends Option { public StringOption ( char shortForm , String longForm ) { super ( shortForm , longForm , true ) ; } protected Object parseValue ( String arg , Locale locale ) { return arg ; } } } public final Option addOption ( Option opt ) { this . options . put ( "-" + opt . shortForm ( ) , opt ) ; this . options . put ( "--" + opt . longForm ( ) , opt ) ; return opt ; } public final Option addStringOption ( char shortForm , String longForm ) { Option opt = new Option . StringOption ( shortForm , longForm ) ; addOption ( opt ) ; return opt ; } public final Option addIntegerOption ( char shortForm , String longForm ) { Option opt = new Option . IntegerOption ( shortForm , longForm ) ; addOption ( opt ) ; return opt ; } public final Option addDoubleOption ( char shortForm , String longForm ) { Option opt = new Option . DoubleOption ( shortForm , longForm ) ; addOption ( opt ) ; return opt ; } public final Option addBooleanOption ( char shortForm , String longForm ) { Option opt = new Option . BooleanOption ( shortForm , longForm ) ; addOption ( opt ) ; return opt ; } public final Object getOptionValue ( Option o ) { return values . get ( o . longForm ( ) ) ; } public final Object getOptionValue ( String longForm ) { return values . get ( longForm ) ; } public void printOptions ( PrintStream s ) { s . println ( "Using options: " ) ; Iterator keys = values . keySet ( ) . iterator ( ) ; while ( keys . hasNext ( ) ) { String longForm = ( String ) keys . next ( ) ; String value = values . get ( longForm ) . toString ( ) ; s . println ( longForm + ": " + value ) ; } } public final String [ ] getRemainingArgs ( ) { return this . remainingArgs ; } public final void parse ( String [ ] argv ) throws IllegalOptionValueException , UnknownOptionException { parse ( argv , Locale . getDefault ( ) ) ; } public final void parse ( String [ ] argv , Locale locale ) throws IllegalOptionValueException , UnknownOptionException { Vector otherArgs = new Vector ( ) ; int position = 0 ; this . values = new Hashtable ( 10 ) ; while ( position < argv . length ) { String curArg = argv [ position ] ; if ( curArg . startsWith ( "-" ) ) { if ( curArg . equals ( "--" ) ) { position += 1 ; break ; } String valueArg = null ; if ( curArg . startsWith ( "--" ) ) { int equalsPos = curArg . indexOf ( "=" ) ; if ( equalsPos != - 1 ) { valueArg = curArg . substring ( equalsPos + 1 ) ; curArg = curArg . substring ( 0 , equalsPos ) ; } } Option opt = ( Option ) this . options . get ( curArg ) ; if ( opt == null ) { throw new UnknownOptionException ( curArg ) ; } Object value = null ; if ( opt . wantsValue ( ) ) { if ( valueArg == null ) { position += 1 ; valueArg = null ; if ( position < argv . length ) { valueArg = argv [ position ] ; } } value = opt . getValue ( valueArg , locale ) ; } else { value = opt . getValue ( null , locale ) ; } this . values . put ( opt . longForm ( ) , value ) ; position += 1 ; } else { break ; } } for ( ; position < argv . length ; ++ position ) { otherArgs . addElement ( argv [ position ] ) ; } this . remainingArgs = new String [ otherArgs . size ( ) ] ; int i = 0 ; for ( Enumeration e = otherArgs . elements ( ) ; e . hasMoreElements ( ) ; ++ i ) { this . remainingArgs [ i ] = ( String ) e . nextElement ( ) ; } } private String [ ] remainingArgs = null ; private Hashtable options = new Hashtable ( 10 ) ; private Hashtable values = new Hashtable ( 10 ) ; } 