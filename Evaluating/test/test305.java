class NamespaceSpecification { public static String DEFAULT_WILDCARD = "*" ; static final String ANY_NAMESPACE = "##any" ; String ns = "\0" ; String wildcard = DEFAULT_WILDCARD ; public NamespaceSpecification ( String ns ) { this ( ns , DEFAULT_WILDCARD ) ; } public NamespaceSpecification ( String ns , String wildcard ) { this . ns = ns ; this . wildcard = wildcard ; } public boolean compete ( NamespaceSpecification other ) { if ( "" . equals ( other . wildcard ) ) { return covers ( other . ns ) ; } String [ ] otherParts = split ( other . ns , other . wildcard ) ; if ( otherParts . length == 1 ) { return covers ( other . ns ) ; } if ( "" . equals ( wildcard ) ) { return other . covers ( ns ) ; } String [ ] parts = split ( ns , wildcard ) ; if ( parts . length == 1 ) { return other . covers ( ns ) ; } return matchPrefix ( parts [ 0 ] , otherParts [ 0 ] ) && matchPrefix ( parts [ parts . length - 1 ] , otherParts [ otherParts . length - 1 ] ) ; } static private boolean matchPrefix ( String s1 , String s2 ) { return s1 . startsWith ( s2 ) || s2 . startsWith ( s1 ) ; } private String [ ] split ( String value , String wildcard ) { StringTokenizer st = new StringTokenizer ( value , wildcard , true ) ; int index = st . countTokens ( ) ; if ( index == 0 ) return new String [ ] { value } ; String [ ] parts = new String [ index ] ; index = 0 ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; parts [ index ++ ] = token . equals ( wildcard ) ? "" : token ; } return parts ; } public boolean covers ( String uri ) { if ( ANY_NAMESPACE . equals ( ns ) || "" . equals ( wildcard ) ) { return ns . equals ( uri ) ; } String [ ] parts = split ( ns , wildcard ) ; if ( parts . length == 1 ) { return ns . equals ( uri ) ; } if ( ! uri . startsWith ( parts [ 0 ] ) ) { return false ; } if ( ! uri . endsWith ( parts [ parts . length - 1 ] ) ) { return false ; } int start = parts [ 0 ] . length ( ) ; int end = uri . length ( ) - parts [ parts . length - 1 ] . length ( ) ; for ( int i = 1 ; i < parts . length - 1 ; i ++ ) { if ( start > end ) { return false ; } int match = uri . indexOf ( parts [ i ] , start ) ; if ( match == - 1 || match + parts [ i ] . length ( ) > end ) { return false ; } start = match + parts [ i ] . length ( ) ; } return true ; } public boolean equals ( Object obj ) { if ( obj instanceof NamespaceSpecification ) { NamespaceSpecification other = ( NamespaceSpecification ) obj ; return ns . equals ( other . ns ) && wildcard . equals ( other . wildcard ) ; } return false ; } public int hashCode ( ) { return ( wildcard + "|" + ns ) . hashCode ( ) ; } } 