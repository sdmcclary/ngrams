public class NullValue extends Value implements Serializable { private static final long serialVersionUID = 1L ; public static final NullValue NULL = new NullValue ( ) ; protected NullValue ( ) { } public static NullValue create ( ) { return NULL ; } @ Override public String getType ( ) { return "NULL" ; } @ Override public ValueType getValueType ( ) { return ValueType . NULL ; } @ Override public boolean isset ( ) { return false ; } @ Override public boolean isEmpty ( ) { return true ; } @ Override public boolean toBoolean ( ) { return false ; } @ Override public boolean isNull ( ) { return true ; } @ Override public long toLong ( ) { return 0 ; } @ Override public double toDouble ( ) { return 0 ; } @ Override public String toString ( ) { return "" ; } @ Override public StringValue toStringBuilder ( Env env ) { return env . createUnicodeBuilder ( ) ; } @ Override public Object toJavaObject ( ) { return null ; } @ Override public < T > T toJavaObject ( Env env , Class < T > type ) { return null ; } @ Override public < T > T toJavaObjectNotNull ( Env env , Class < T > type ) { env . warning ( L . l ( "null is an unexpected argument; expected '{0}'" , type . getName ( ) ) ) ; return null ; } @ Override public Boolean toJavaBoolean ( ) { return null ; } @ Override public Byte toJavaByte ( ) { return null ; } @ Override public Short toJavaShort ( ) { return null ; } @ Override public Integer toJavaInteger ( ) { return null ; } @ Override public Long toJavaLong ( ) { return null ; } @ Override public Float toJavaFloat ( ) { return null ; } @ Override public Double toJavaDouble ( ) { return null ; } @ Override public Character toJavaCharacter ( ) { return null ; } @ Override public String toJavaString ( ) { return null ; } @ Override public < T > Collection < T > toJavaCollection ( Env env , Class < ? extends Collection < T > > type ) { return null ; } @ Override public < T > List < T > toJavaList ( Env env , Class < ? extends List < T > > type ) { return null ; } @ Override public < K , V > Map < K , V > toJavaMap ( Env env , Class < ? extends Map < K , V > > type ) { return null ; } @ Override public Calendar toJavaCalendar ( ) { return null ; } @ Override public Date toJavaDate ( ) { return null ; } @ Override public URL toJavaURL ( Env env ) { return null ; } @ Override public BigDecimal toBigDecimal ( ) { return BigDecimal . ZERO ; } @ Override public BigInteger toBigInteger ( ) { return BigInteger . ZERO ; } @ Override public < T > T [ ] valuesToArray ( Env env , Class < T > elementType ) { return null ; } @ Override public Value toObject ( Env env ) { return NullValue . NULL ; } @ Override public Value toArray ( ) { return new ArrayValueImpl ( ) ; } @ Override public Value toAutoArray ( ) { return new ArrayValueImpl ( ) ; } public Value append ( Value index , Value value ) { return new ArrayValueImpl ( ) . append ( index , value ) ; } @ Override public ArrayValue toArrayValue ( Env env ) { return null ; } public StringValue toStringValue ( ) { Env env = Env . getInstance ( ) ; if ( env != null && env . isUnicodeSemantics ( ) ) return UnicodeBuilderValue . EMPTY ; else return StringBuilderValue . EMPTY ; } @ Override public int getCount ( Env env ) { return 0 ; } @ Override public int getSize ( ) { return 0 ; } @ Override public Value toAutoObject ( Env env ) { return env . createObject ( ) ; } @ Override public Value toKey ( ) { return StringValue . EMPTY ; } @ Override public boolean eql ( Value rValue ) { return rValue . isNull ( ) ; } @ Override public Value add ( long lLong ) { return LongValue . create ( lLong ) ; } @ Override public Value sub ( long rLong ) { return LongValue . create ( - rLong ) ; } @ Override public boolean eq ( Value rValue ) { if ( rValue . isString ( ) ) return toString ( ) . equals ( rValue . toString ( ) ) ; else return toBoolean ( ) == rValue . toBoolean ( ) ; } @ Override public int cmp ( Value rValue ) { rValue = rValue . toValue ( ) ; if ( ! ( rValue instanceof StringValue ) ) { int l = 0 ; int r = rValue . toBoolean ( ) ? 1 : 0 ; return l - r ; } else if ( rValue . isNumberConvertible ( ) ) { double l = 0 ; double r = rValue . toDouble ( ) ; if ( l == r ) return 0 ; else if ( l < r ) return - 1 ; else return 1 ; } else return "" . compareTo ( rValue . toString ( ) ) ; } @ Override public void print ( Env env ) { } @ Override public void serialize ( Env env , StringBuilder sb ) { sb . append ( "N;" ) ; } @ Override public void varExport ( StringBuilder sb ) { sb . append ( "NULL" ) ; } @ Override public Value getArray ( ) { return new ArrayValueImpl ( ) ; } @ Override public StringValue appendTo ( BinaryBuilderValue sb ) { return sb ; } @ Override public StringValue appendTo ( UnicodeBuilderValue sb ) { return sb ; } @ Override public StringValue appendTo ( StringBuilderValue sb ) { return sb ; } @ Override public StringValue appendTo ( LargeStringBuilderValue sb ) { return sb ; } @ Override public void generate ( PrintWriter out ) throws IOException { out . print ( "NullValue.NULL" ) ; } @ Override public Value getObject ( Env env ) { return env . createObject ( ) ; } @ Override public String toDebugString ( ) { return "null" ; } @ Override public void varDumpImpl ( Env env , WriteStream out , int depth , IdentityHashMap < Value , String > valueSet ) throws IOException { out . print ( "NULL" ) ; } private Object readResolve ( ) { return NULL ; } } 