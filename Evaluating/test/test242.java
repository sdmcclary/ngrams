public class ValidationDriver { private XMLReader xr ; private final CountingErrorHandler eh ; private final SchemaReader sr ; private final PropertyMap schemaProperties ; private final PropertyMap instanceProperties ; private Validator validator ; private Schema schema ; public ValidationDriver ( PropertyMap schemaProperties , PropertyMap instanceProperties , SchemaReader schemaReader ) { ErrorHandler seh = schemaProperties . get ( ValidateProperty . ERROR_HANDLER ) ; PropertyMapBuilder builder ; if ( seh == null ) { seh = new ErrorHandlerImpl ( ) ; builder = new PropertyMapBuilder ( schemaProperties ) ; builder . put ( ValidateProperty . ERROR_HANDLER , seh ) ; this . schemaProperties = builder . toPropertyMap ( ) ; } else this . schemaProperties = schemaProperties ; builder = new PropertyMapBuilder ( instanceProperties ) ; ErrorHandler ieh = instanceProperties . get ( ValidateProperty . ERROR_HANDLER ) ; if ( ieh == null ) ieh = seh ; eh = new CountingErrorHandler ( ieh ) ; builder . put ( ValidateProperty . ERROR_HANDLER , eh ) ; this . instanceProperties = builder . toPropertyMap ( ) ; this . sr = schemaReader == null ? new AutoSchemaReader ( ) : schemaReader ; } public ValidationDriver ( PropertyMap schemaProperties , PropertyMap instanceProperties ) { this ( schemaProperties , instanceProperties , null ) ; } public ValidationDriver ( PropertyMap properties , SchemaReader sr ) { this ( properties , properties , sr ) ; } public ValidationDriver ( PropertyMap properties ) { this ( properties , properties , null ) ; } public ValidationDriver ( SchemaReader sr ) { this ( PropertyMap . EMPTY , sr ) ; } public ValidationDriver ( ) { this ( PropertyMap . EMPTY , PropertyMap . EMPTY , null ) ; } public boolean loadSchema ( InputSource in ) throws SAXException , IOException { try { schema = sr . createSchema ( new SAXSource ( in ) , schemaProperties ) ; validator = null ; return true ; } catch ( IncorrectSchemaException e ) { return false ; } } public boolean validate ( InputSource in ) throws SAXException , IOException { if ( schema == null ) throw new IllegalStateException ( "cannot validate without schema" ) ; if ( validator == null ) validator = schema . createValidator ( instanceProperties ) ; if ( xr == null ) { xr = ResolverFactory . createResolver ( instanceProperties ) . createXMLReader ( ) ; xr . setErrorHandler ( eh ) ; } eh . reset ( ) ; xr . setContentHandler ( validator . getContentHandler ( ) ) ; DTDHandler dh = validator . getDTDHandler ( ) ; if ( dh != null ) xr . setDTDHandler ( dh ) ; try { xr . parse ( in ) ; return ! eh . getHadErrorOrFatalError ( ) ; } finally { validator . reset ( ) ; } } public PropertyMap getSchemaProperties ( ) { if ( schema == null ) throw new IllegalStateException ( "getSchemaProperties requires a schema" ) ; return schema . getProperties ( ) ; } static public InputSource fileInputSource ( String filename ) { return fileInputSource ( new File ( filename ) ) ; } static public InputSource fileInputSource ( File file ) { return new InputSource ( UriOrFile . fileToUri ( file ) ) ; } static public InputSource uriOrFileInputSource ( String uriOrFile ) { return new InputSource ( UriOrFile . toUri ( uriOrFile ) ) ; } } 