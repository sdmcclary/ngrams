public class GroupServer implements IServer { private static final IProcess [ ] NO_PROCESS = new IProcess [ 0 ] ; protected Set < IServer > servers ; private String name ; private String host ; private String id ; private IServerType type ; public GroupServer ( String id , IServerType type ) { this . servers = new TreeSet < IServer > ( new Comparator < IServer > ( ) { public int compare ( IServer o1 , IServer o2 ) { return o1 . getId ( ) . compareToIgnoreCase ( o2 . getId ( ) ) ; } } ) ; this . id = id ; this . type = type ; } public void addServer ( IServer server ) { this . servers . add ( server ) ; } public void removeServer ( IServer server ) { this . servers . remove ( server ) ; } public void clearServers ( ) { this . servers . clear ( ) ; } public boolean isEmpty ( ) { return this . servers . isEmpty ( ) ; } public void addOperationListener ( IOperationListener listener ) { for ( IServer server : this . servers ) { server . addOperationListener ( listener ) ; } } public void addServerListener ( IServerListener listener ) { for ( IServer server : this . servers ) { server . addServerListener ( listener ) ; } } public IStatus canDelete ( ) { return Status . OK_STATUS ; } public IStatus askStopBeforeDelete ( ) { return Status . OK_STATUS ; } public IStatus canHaveModule ( IModule module ) { return null ; } public IStatus canModify ( ) { return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , IStatus . ERROR , Messages . GroupServer_Status_CannotModify , null ) ; } public IStatus canModifyInStoppedStateOnly ( ) { return Status . OK_STATUS ; } public IStatus canPublish ( ) { return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , IStatus . ERROR , StringUtils . format ( Messages . AbstractServer_DOES_NOT_SUPPORTS_PUBLISH , getName ( ) ) , null ) ; } public IStatus canRestart ( String mode ) { for ( IServer server : this . servers ) { if ( Status . OK_STATUS . equals ( server . canRestart ( mode ) ) ) { return Status . OK_STATUS ; } } return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , IStatus . ERROR , Messages . GroupServer_Status_NoServerRestart , null ) ; } public IStatus canStart ( String launchMode ) { for ( IServer server : this . servers ) { if ( Status . OK_STATUS . equals ( server . canStart ( launchMode ) ) ) { return Status . OK_STATUS ; } } return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , IStatus . ERROR , Messages . GroupServer_Status_NoServerStart , null ) ; } public IStatus canStop ( ) { for ( IServer server : this . servers ) { if ( Status . OK_STATUS . equals ( server . canStop ( ) ) ) { return Status . OK_STATUS ; } } return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , IStatus . ERROR , Messages . GroupServer_Status_NoServerStop , null ) ; } public void configureModule ( IModule module , IOperationListener listener , IProgressMonitor monitor ) { } public void configureModule ( IAbstractConfiguration config , IOperationListener listener , IProgressMonitor monitor ) { } public String fetchStatistics ( ) { return null ; } public IServer [ ] getAssociatedServers ( ) { return new IServer [ 0 ] ; } public String getDescription ( ) { return null ; } public IPath getDocumentRoot ( ) { return null ; } public String getHost ( ) { return this . host ; } public String getHostname ( ) { return this . host ; } public String getId ( ) { return this . id ; } public ILaunch getLaunch ( ) { return null ; } public ILog getLog ( ) { return null ; } public String getMode ( ) { return null ; } public IModule [ ] getModules ( ) { return null ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public int getPort ( ) { return - 1 ; } public IProcess [ ] getProcesses ( ) { return NO_PROCESS ; } public IPath getServerRoot ( ) { return null ; } public int getServerState ( ) { return IServer . STATE_NOT_APPLICABLE ; } public IServerType getServerType ( ) { return this . type ; } public IStreamsProxy getStreamsProxy ( ) { return null ; } public boolean isConfigured ( IModule module ) { return false ; } public boolean isExternal ( ) { return false ; } public boolean isWebServer ( ) { return false ; } public void publish ( int kind , IModule [ ] modules , IOperationListener listener , IProgressMonitor monitor ) { } public void reconfigure ( IAbstractConfiguration configuration ) throws CoreException { } public void removeOperationListener ( IServerListener listener ) { for ( IServer server : this . servers ) { server . removeOperationListener ( listener ) ; } } public void removeServerListener ( IServerListener listener ) { for ( IServer server : this . servers ) { server . removeServerListener ( listener ) ; } } public void restart ( String mode , IOperationListener listener , IProgressMonitor monitor ) { for ( IServer server : this . servers ) { if ( Status . OK_STATUS . equals ( server . canRestart ( mode ) ) ) { server . restart ( mode , listener , monitor ) ; } } } public void showStatisticsInterface ( ) { } public void start ( String mode , IOperationListener listener , IProgressMonitor monitor ) { } public void stop ( boolean force , IOperationListener listener , IProgressMonitor monitor ) { } public void storeConfiguration ( IAbstractConfiguration configuration ) { } public boolean suppliesStatistics ( ) { return false ; } public boolean suppliesStatisticsInterface ( ) { return false ; } public void unconfigureModule ( IModule module , IOperationListener listener , IProgressMonitor monitor ) { } public Object getAdapter ( Class adapter ) { return null ; } public Set < IServer > getServers ( ) { return servers ; } public void setHost ( String host ) { this . host = host ; } public boolean isTransient ( ) { return false ; } public ILog [ ] getAllLogs ( ) { return null ; } } 