abstract public class FilesystemPath extends Path { protected FilesystemPath _root ; protected BindPath _bindRoot ; protected String _pathname ; protected String _userPath ; protected FilesystemPath ( FilesystemPath root , String userPath , String pathname ) { super ( root ) ; if ( pathname == null ) throw new NullPointerException ( ) ; _pathname = pathname ; _userPath = userPath ; if ( root != null ) { _root = root ; _bindRoot = root . _bindRoot ; } } public Path getParent ( ) { if ( _pathname . length ( ) <= 1 ) return fsWalk ( "/" , null , "/" ) ; int length = _pathname . length ( ) ; int lastSlash = _pathname . lastIndexOf ( '/' ) ; if ( lastSlash < 1 ) return fsWalk ( "/" , null , "/" ) ; if ( lastSlash == length - 1 ) { lastSlash = _pathname . lastIndexOf ( '/' , length - 2 ) ; if ( lastSlash < 1 ) return fsWalk ( "/" , null , "/" ) ; } return fsWalk ( ".." , null , _pathname . substring ( 0 , lastSlash ) ) ; } protected Path schemeWalk ( String userPath , Map < String , Object > attributes , String filePath , int offset ) { String canonicalPath ; if ( filePath . length ( ) > offset && ( filePath . charAt ( offset ) == '/' || filePath . charAt ( offset ) == _separatorChar ) ) canonicalPath = normalizePath ( "/" , filePath , offset , _separatorChar ) ; else canonicalPath = normalizePath ( _pathname , filePath , offset , _separatorChar ) ; return fsWalk ( userPath , attributes , canonicalPath ) ; } abstract public Path fsWalk ( String userPath , Map < String , Object > newAttributes , String newPath ) ; static protected String normalizePath ( String oldPath , String newPath , int offset , char separatorChar ) { CharBuffer cb = new CharBuffer ( ) ; normalizePath ( cb , oldPath , newPath , offset , separatorChar ) ; return cb . toString ( ) ; } static protected void normalizePath ( CharBuffer cb , String oldPath , String newPath , int offset , char separatorChar ) { cb . clear ( ) ; cb . append ( oldPath ) ; if ( cb . length ( ) == 0 || cb . getLastChar ( ) != '/' ) cb . append ( '/' ) ; int length = newPath . length ( ) ; int i = offset ; while ( i < length ) { char ch = newPath . charAt ( i ) ; char ch2 ; switch ( ch ) { default : if ( ch != separatorChar ) { cb . append ( ch ) ; i ++ ; break ; } case '/' : if ( cb . getLastChar ( ) != '/' ) cb . append ( '/' ) ; i ++ ; break ; case '.' : if ( cb . getLastChar ( ) != '/' ) { cb . append ( '.' ) ; i ++ ; break ; } if ( i + 1 >= length ) { i += 2 ; break ; } switch ( newPath . charAt ( i + 1 ) ) { default : if ( newPath . charAt ( i + 1 ) != separatorChar ) { cb . append ( '.' ) ; i ++ ; break ; } case '/' : i += 2 ; break ; case '.' : if ( ( i + 2 >= length || ( ch2 = newPath . charAt ( i + 2 ) ) == '/' || ch2 == separatorChar ) && cb . getLastChar ( ) == '/' ) { int segment = cb . lastIndexOf ( '/' , cb . length ( ) - 2 ) ; if ( segment == - 1 ) { cb . clear ( ) ; cb . append ( '/' ) ; } else cb . setLength ( segment + 1 ) ; i += 3 ; } else { cb . append ( '.' ) ; i ++ ; } break ; } } } } public FilesystemPath getRoot ( ) { return _root ; } public String getPath ( ) { return _pathname ; } public String getUserPath ( ) { return _userPath != null ? _userPath : _pathname ; } public void setUserPath ( String path ) { _userPath = path ; } public String getFullPath ( ) { if ( _root == this ) return getPath ( ) ; String rootPath = _root . getFullPath ( ) ; String path = getPath ( ) ; if ( rootPath . length ( ) <= 1 ) return path ; else if ( path . length ( ) <= 1 ) return rootPath ; else return rootPath + path ; } public String getTail ( ) { String path = getPath ( ) ; int length = path . length ( ) ; int p = path . lastIndexOf ( '/' ) ; if ( p == - 1 ) return "" ; else if ( p < length - 1 ) return path . substring ( p + 1 ) ; else { p = path . lastIndexOf ( '/' , length - 2 ) ; if ( p < 0 ) return "" ; return path . substring ( p + 1 , length - 1 ) ; } } public Path createRoot ( SchemeMap schemeMap ) { FilesystemPath restriction = ( FilesystemPath ) copy ( ) ; restriction . _schemeMap = schemeMap ; restriction . _root = this ; restriction . _pathname = "/" ; restriction . _userPath = "/" ; return restriction ; } public void bind ( Path context ) { if ( _bindRoot == null ) _bindRoot = _root . _bindRoot ; if ( _bindRoot == null ) { _bindRoot = new BindPath ( _root ) ; _root . _bindRoot = _bindRoot ; } _bindRoot . bind ( getPath ( ) , context ) ; } public int hashCode ( ) { return getURL ( ) . hashCode ( ) ; } public boolean equals ( Object b ) { if ( this == b ) return true ; else if ( b == null || ! getClass ( ) . equals ( b . getClass ( ) ) ) return false ; Path bPath = ( Path ) b ; return getURL ( ) . equals ( bPath . getURL ( ) ) ; } } 