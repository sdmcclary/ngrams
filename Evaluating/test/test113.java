class DataRecoverySelectionDialog extends AbstractDialog { private static final String LAYOUT_COLUMNS = "14dlu, p, 2dlu, max(50dlu;p), 0:grow" ; private final Date lastSuccessfulSync ; private final File [ ] availableBackups ; protected JRadioButton rbLoadFromBackup ; protected JRadioButton rbLoadFromService ; protected JComboBox cbBackups ; private DataRecoverySelectionDialog ( Frame frame , Date lastSuccessfulSync , File [ ] availableBackups ) { super ( frame , Strings . message ( "data.recovery.title" ) ) ; this . lastSuccessfulSync = lastSuccessfulSync ; this . availableBackups = availableBackups ; } protected JComponent buildHeader ( ) { return new HeaderPanelExt ( Strings . message ( "data.recovery.title" ) , Strings . message ( "data.recovery.header" ) ) ; } protected JComponent buildContent ( ) { JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( buildMainPanel ( ) , BorderLayout . CENTER ) ; panel . add ( buildButtonsBar ( ) , BorderLayout . SOUTH ) ; return panel ; } private Component buildMainPanel ( ) { JRadioButton rbLeaveClean = ComponentsFactory . createRadioButton ( Strings . message ( "data.recovery.leave.clean" ) ) ; rbLoadFromBackup = ComponentsFactory . createRadioButton ( Strings . message ( "data.recovery.load.from.backup" ) ) ; rbLoadFromBackup . setEnabled ( availableBackups . length > 0 ) ; JLabel lbFile = ComponentsFactory . createLabel ( Strings . message ( "data.recovery.file" ) ) ; lbFile . setLabelFor ( cbBackups ) ; lbFile . setEnabled ( availableBackups . length > 0 ) ; cbBackups = new JComboBox ( ) ; initBackupsBox ( ) ; cbBackups . setEnabled ( availableBackups . length > 0 ) ; rbLoadFromService = ComponentsFactory . createRadioButton ( Strings . message ( "data.recovery.load.from.service.account" ) ) ; rbLoadFromService . setEnabled ( lastSuccessfulSync != null ) ; JLabel lbDate = new JLabel ( Strings . message ( "data.recovery.date" ) ) ; JLabel lbDateValue = new JLabel ( lastSuccessfulSync == null ? Strings . message ( "data.recovery.never.synchronized" ) : DateUtils . dateToString ( lastSuccessfulSync ) ) ; lbDate . setEnabled ( lastSuccessfulSync != null ) ; lbDateValue . setEnabled ( lastSuccessfulSync != null ) ; ButtonGroup bg = new ButtonGroup ( ) ; bg . add ( rbLeaveClean ) ; bg . add ( rbLoadFromBackup ) ; bg . add ( rbLoadFromService ) ; if ( rbLoadFromBackup . isEnabled ( ) ) rbLoadFromBackup . setSelected ( true ) ; else if ( rbLoadFromService . isEnabled ( ) ) rbLoadFromService . setSelected ( true ) ; else rbLeaveClean . setSelected ( true ) ; BBFormBuilder builder = new BBFormBuilder ( LAYOUT_COLUMNS ) ; builder . setDefaultDialogBorder ( ) ; builder . append ( rbLoadFromBackup , 5 ) ; builder . setLeadingColumnOffset ( 1 ) ; builder . nextLine ( ) ; builder . append ( lbFile ) ; builder . append ( cbBackups , 2 ) ; builder . setLeadingColumnOffset ( 0 ) ; builder . nextLine ( ) ; builder . append ( rbLoadFromService , 5 ) ; builder . setLeadingColumnOffset ( 1 ) ; builder . nextLine ( ) ; builder . append ( lbDate ) ; builder . append ( lbDateValue ) ; builder . setLeadingColumnOffset ( 0 ) ; builder . nextLine ( ) ; builder . append ( rbLeaveClean , 5 ) ; return builder . getPanel ( ) ; } private void initBackupsBox ( ) { if ( availableBackups . length > 0 ) { for ( int i = 0 ; i < availableBackups . length ; i ++ ) { File file = availableBackups [ i ] ; BackupFileItem item = new BackupFileItem ( file ) ; if ( item . getSize ( ) > 0 ) cbBackups . addItem ( item ) ; } } else { cbBackups . addItem ( Strings . message ( "data.recovery.no.backups.available" ) ) ; } } private Component buildButtonsBar ( ) { return ButtonBarFactory . buildOKBar ( createOKButton ( true ) ) ; } public static DataRecoveryChoice ask ( final Frame frame , final Date lastSuccessfulSync , final File [ ] availableBackups ) { final DataRecoveryChoice choice = new DataRecoveryChoice ( ) ; UifUtilities . invokeAndWait ( new Runnable ( ) { public void run ( ) { DataRecoverySelectionDialog dialog = new DataRecoverySelectionDialog ( frame , lastSuccessfulSync , availableBackups ) ; dialog . open ( ) ; if ( dialog . hasBeenCanceled ( ) ) { choice . setMode ( DataRecoveryChoice . MODE_LEAVE ) ; } else { choice . setMode ( dialog . rbLoadFromBackup . isSelected ( ) ? DataRecoveryChoice . MODE_FROM_BACKUP : dialog . rbLoadFromService . isSelected ( ) ? DataRecoveryChoice . MODE_FROM_SERVICE : DataRecoveryChoice . MODE_LEAVE ) ; Object selectedItem = dialog . cbBackups . getSelectedItem ( ) ; choice . setBackupFile ( selectedItem instanceof BackupFileItem ? ( ( BackupFileItem ) selectedItem ) . getFile ( ) : null ) ; } } } ) ; return choice ; } private static class BackupFileItem { private final File file ; private final String text ; protected final long size ; public BackupFileItem ( File file ) { this . file = file ; size = file != null && file . exists ( ) ? file . length ( ) : - 1 ; long date = file . lastModified ( ) ; text = MessageFormat . format ( Strings . message ( "data.recovery.backup.item.name" ) , new Object [ ] { DateUtils . dateToString ( new Date ( date ) ) , new Long ( size / 1024 ) } ) ; } public File getFile ( ) { return file ; } public long getSize ( ) { return size ; } public String toString ( ) { return text ; } } static class DataRecoveryChoice { public static final int MODE_FROM_BACKUP = 0 ; public static final int MODE_FROM_SERVICE = 1 ; public static final int MODE_LEAVE = 2 ; private int mode ; private File backupFile ; public void setMode ( int mode ) { this . mode = mode ; } public void setBackupFile ( File backupFile ) { this . backupFile = backupFile ; } public int getMode ( ) { return mode ; } public File getBackupFile ( ) { return backupFile ; } } } 