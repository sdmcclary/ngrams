<<<<<<< HEAD
public class PreferenceInitializer extends AbstractPreferenceInitializer { public void initializeDefaultPreferences ( ) { IPreferenceStore store = JSPlugin . getDefault ( ) . getPreferenceStore ( ) ; store . setDefault ( IPreferenceConstants . ENABLE_NO_VALIDATE_COMMENT , false ) ; store . setDefault ( IPreferenceConstants . SHOW_JS_TOOLBAR , true ) ; store . setDefault ( IPreferenceConstants . PREFERENCE_COMMENT_INDENT_USE_STAR , true ) ; store . setDefault ( com . aptana . ide . editors . preferences . IPreferenceConstants . AUTO_BRACKET_INSERTION , "INSERT" ) ; store . setDefault ( com . aptana . ide . editors . preferences . IPreferenceConstants . CODE_ASSIST_AUTO_ACTIVATION , true ) ; store . setDefault ( IPreferenceConstants . AUTO_FORMAT_ON_CLOSE_CURLY , true ) ; store . setDefault ( IPreferenceConstants . AUTO_INDENT_ON_CARRIAGE_RETURN , true ) ; store . setDefault ( IPreferenceConstants . PREFERENCE_PRIVATE_FIELD_INDICATOR , "_" ) ; store . setDefault ( com . aptana . ide . editors . preferences . IPreferenceConstants . VALIDATORS_LIST , Messages . PreferenceInitializer_Mozilla_javascript_validator ) ; store . setDefault ( IPreferenceConstants . LOADED_ENVIRONMENTS , JSLanguageEnvironment . DOM_5 + "," + JSLanguageEnvironment . DOM_3 + "," + JSLanguageEnvironment . DOM_1_2 + "," + JSLanguageEnvironment . DOM_0 ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_PROPOSALS_FOREGROUND_COLOR , IJSColorConstants . PROPOSALS_FOREGROUND ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_PROPOSALS_BACKGROUND_COLOR , IJSColorConstants . PROPOSALS_BACKGROUND ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_DEFAULT_COLOR , IJSColorConstants . DEFAULT ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_KEYWORD_COLOR , IJSColorConstants . KEYWORD ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_NATIVETYPE_COLOR , IJSColorConstants . NATIVETYPE ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_PUNCTUATOR_COLOR , IJSColorConstants . PUNCTUATOR ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_RESERVED_COLOR , IJSColorConstants . RESERVED ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_FUTURE_COLOR , IJSColorConstants . FUTURE ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_STRING_COLOR , IJSColorConstants . STRING ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_NUMBER_COLOR , IJSColorConstants . NUMBER ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_LITERAL_COLOR , IJSColorConstants . LITERAL ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_COMMENT_COLOR , IJSColorConstants . COMMENT ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_DOCUMENTATION_COLOR , IJSColorConstants . DOCUMENTATION ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_ERROR_COLOR , IJSColorConstants . ERROR ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_HTMLDOM_COLOR , IJSColorConstants . HTMLDOM ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSEDITOR_JSCORE_COLOR , IJSColorConstants . JSCORE ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSCOMMENTEDITOR_TEXT_COLOR , IJSCommentColorConstants . TEXT ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . JSCOMMENTEDITOR_DELIMITER_COLOR , IJSCommentColorConstants . DELIMITER ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . SCRIPTDOCEDITOR_TEXT_COLOR , IScriptDocColorConstants . TEXT ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . SCRIPTDOCEDITOR_KEYWORDCOLOR , IScriptDocColorConstants . KEYWORD ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . SCRIPTDOCEDITOR_USER_KEYWORD_COLOR , IScriptDocColorConstants . KEYWORD ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . SCRIPTDOCEDITOR_IDENTIFIER_COLOR , IScriptDocColorConstants . IDENTIFIER ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . SCRIPTDOCEDITOR_PUNCTUATOR_COLOR , IScriptDocColorConstants . PUNCTUATOR ) ; PreferenceConverter . setDefault ( store , IPreferenceConstants . SCRIPTDOCEDITOR_DELIMITER_COLOR , IScriptDocColorConstants . DELIMITER ) ; store . setDefault ( com . aptana . ide . editors . preferences . IPreferenceConstants . IGNORE_PROBLEMS , "~~~~~~~~-1~~~~Undefined variable.*####~~~~~~~~-1~~~~Expected an identifier and instead saw 'const'.####~~~~~~~~-1~~~~.*identifier is a reserved word.*####~~~~~~~~-1~~~~All debugger statements should be removed." ) ; store . setDefault ( IPreferenceConstants . JSEDITOR_INITIAL_CONTENTS , Messages . PreferenceInitializer_InitialFileContents ) ; store . setDefault ( IPreferenceConstants . JSEDITOR_INITIAL_FILE_NAME , Messages . PreferenceInitializer_NewFileName ) ; store . setDefault ( IPreferenceConstants . SCRIPTDOCEDITOR_INITIAL_FILE_NAME , Messages . PreferenceInitializer_Default_sdoc_filename ) ; store . setDefault ( com . aptana . ide . editors . preferences . IPreferenceConstants . SHOW_PAIR_MATCHES , com . aptana . ide . editors . preferences . IPreferenceConstants . BOTH ) ; PreferenceConverter . setDefault ( store , com . aptana . ide . editors . preferences . IPreferenceConstants . PAIR_MATCHING_COLOR , new RGB ( 192 , 192 , 192 ) ) ; IPreferenceStore unifiedStore = UnifiedEditorsPlugin . getDefault ( ) . getPreferenceStore ( ) ; unifiedStore . setDefault ( FoldingExtensionPointLoader . createEnablePreferenceId ( JSMimeType . MimeType ) , true ) ; unifiedStore . setDefault ( FoldingExtensionPointLoader . createEnablePreferenceId ( ScriptDocMimeType . MimeType ) , true ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INSERT_NEW_LINE_BEFORE_IF_STATEMENT , CommentsTabPage . INSERT ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INSERT_NEW_LINE_BEFORE_RETURN_STATEMENT , CommentsTabPage . INSERT ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE_IN_IF_STATEMENT , CommentsTabPage . INSERT ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH_IN_TRY_STATEMENT , CommentsTabPage . INSERT ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY_IN_TRY_STATEMENT , CommentsTabPage . INSERT ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT , CommentsTabPage . INSERT ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE , Boolean . FALSE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE , Boolean . FALSE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE , Boolean . FALSE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_COMPACT_ELSE_IF , Boolean . FALSE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_KEEP_GUARDIAN_CLAUSE_ON_ONE_LINE , Boolean . FALSE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_TAB_CHAR , " " ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_TAB_SIZE , "4" ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INDENT_STATEMENTS_COMPARE_TO_BODY , Boolean . TRUE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INDENT_STATEMENTS_COMPARE_TO_BLOCK , Boolean . TRUE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH , Boolean . TRUE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES , Boolean . TRUE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES , Boolean . TRUE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BLANK_LINES_BEFORE_METHOD , "1" ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BLANK_LINES_AT_BEGINNING_OF_METHOD_BODY , "0" ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_PRESERVE_EXTRA_CARRIAGE_RETURNS , Boolean . TRUE . toString ( ) ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION , DefaultCodeFormatterConstants . END_OF_LINE ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BRACE_POSITION_FOR_BLOCK , DefaultCodeFormatterConstants . END_OF_LINE ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BRACE_POSITION_FOR_BLOCK_IN_CASE , DefaultCodeFormatterConstants . END_OF_LINE ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BRACE_POSITION_FOR_SWITCH , DefaultCodeFormatterConstants . END_OF_LINE ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER , DefaultCodeFormatterConstants . END_OF_LINE ) ; store . setDefault ( DefaultCodeFormatterConstants . FORMATTER_KEEP_EMPTY_ARRAY_INITIALIZER_ON_ONE_LINE , Boolean . TRUE . toString ( ) ) ; } } 
=======
public class Html5DatatypeLibrary implements DatatypeLibrary { public Html5DatatypeLibrary ( ) { super ( ) ; } public DatatypeBuilder createDatatypeBuilder ( String baseTypeLocalName ) throws DatatypeException { return new ParameterlessDatatypeBuilder ( createDatatype ( baseTypeLocalName ) ) ; } public Datatype createDatatype ( String typeLocalName ) throws DatatypeException { if ( "ID" . equals ( typeLocalName ) ) { return new Id ( ) ; } else if ( "IDREF" . equals ( typeLocalName ) ) { return Idref . THE_INSTANCE ; } else if ( "IDREFS" . equals ( typeLocalName ) ) { return Idrefs . THE_INSTANCE ; } else if ( "pattern" . equals ( typeLocalName ) ) { return Pattern . THE_INSTANCE ; } else if ( "datetime" . equals ( typeLocalName ) ) { return Datetime . THE_INSTANCE ; } else if ( "datetime-local" . equals ( typeLocalName ) ) { return DatetimeLocal . THE_INSTANCE ; } else if ( "datetime-tz" . equals ( typeLocalName ) ) { return DatetimeTz . THE_INSTANCE ; } else if ( "date-or-time" . equals ( typeLocalName ) ) { return DateOrTime . THE_INSTANCE ; } else if ( "date" . equals ( typeLocalName ) ) { return Date . THE_INSTANCE ; } else if ( "month" . equals ( typeLocalName ) ) { return Month . THE_INSTANCE ; } else if ( "week" . equals ( typeLocalName ) ) { return Week . THE_INSTANCE ; } else if ( "time" . equals ( typeLocalName ) ) { return Time . THE_INSTANCE ; } else if ( "iri" . equals ( typeLocalName ) ) { return Iri . THE_INSTANCE ; } else if ( "iri-ref" . equals ( typeLocalName ) ) { return IriRef . THE_INSTANCE ; } else if ( "string" . equals ( typeLocalName ) ) { return AsciiCaseInsensitiveString . THE_INSTANCE ; } else if ( "language" . equals ( typeLocalName ) ) { return Language . THE_INSTANCE ; } else if ( "media-query" . equals ( typeLocalName ) ) { return MediaQuery . THE_INSTANCE ; } else if ( "mime-type" . equals ( typeLocalName ) ) { return MimeType . THE_INSTANCE ; } else if ( "browsing-context" . equals ( typeLocalName ) ) { return BrowsingContext . THE_INSTANCE ; } else if ( "browsing-context-or-keyword" . equals ( typeLocalName ) ) { return BrowsingContextOrKeyword . THE_INSTANCE ; } else if ( "hash-name" . equals ( typeLocalName ) ) { return HashName . THE_INSTANCE ; } else if ( "integer" . equals ( typeLocalName ) ) { return Int . THE_INSTANCE ; } else if ( "integer-non-negative" . equals ( typeLocalName ) ) { return IntNonNegative . THE_INSTANCE ; } else if ( "integer-positive" . equals ( typeLocalName ) ) { return IntPositive . THE_INSTANCE ; } else if ( "float" . equals ( typeLocalName ) ) { return FloatingPointExponent . THE_INSTANCE ; } else if ( "float-non-negative" . equals ( typeLocalName ) ) { return FloatingPointExponentNonNegative . THE_INSTANCE ; } else if ( "float-positive" . equals ( typeLocalName ) ) { return FloatingPointExponentPositive . THE_INSTANCE ; } else if ( "mime-type-list" . equals ( typeLocalName ) ) { return MimeTypeList . THE_INSTANCE ; } else if ( "circle" . equals ( typeLocalName ) ) { return Circle . THE_INSTANCE ; } else if ( "rectangle" . equals ( typeLocalName ) ) { return Rectangle . THE_INSTANCE ; } else if ( "polyline" . equals ( typeLocalName ) ) { return Polyline . THE_INSTANCE ; } else if ( "xml-name" . equals ( typeLocalName ) ) { return XmlName . THE_INSTANCE ; } else if ( "meta-charset" . equals ( typeLocalName ) ) { return MetaCharset . THE_INSTANCE ; } else if ( "microdata-property" . equals ( typeLocalName ) ) { return MicrodataProperty . THE_INSTANCE ; } else if ( "charset" . equals ( typeLocalName ) ) { return Charset . THE_INSTANCE ; } else if ( "refresh" . equals ( typeLocalName ) ) { return Refresh . THE_INSTANCE ; } else if ( "paren-start" . equals ( typeLocalName ) ) { return ParenthesisStart . THE_INSTANCE ; } else if ( "paren-end" . equals ( typeLocalName ) ) { return ParenthesisEnd . THE_INSTANCE ; } else if ( "email-address" . equals ( typeLocalName ) ) { return EmailAddress . THE_INSTANCE ; } else if ( "email-address-list" . equals ( typeLocalName ) ) { return EmailAddressList . THE_INSTANCE ; } else if ( "keylabellist" . equals ( typeLocalName ) ) { return KeyLabelList . THE_INSTANCE ; } else if ( "zero" . equals ( typeLocalName ) ) { return Zero . THE_INSTANCE ; } else if ( "cdo-cdc-pair" . equals ( typeLocalName ) ) { return CdoCdcPair . THE_INSTANCE ; } else if ( "script" . equals ( typeLocalName ) ) { return Script . THE_INSTANCE ; } else if ( "script-documentation" . equals ( typeLocalName ) ) { return ScriptDocumentation . THE_INSTANCE ; } else if ( "functionbody" . equals ( typeLocalName ) ) { return FunctionBody . THE_INSTANCE ; } else if ( "a-rel" . equals ( typeLocalName ) ) { return ARel . THE_INSTANCE ; } else if ( "link-rel" . equals ( typeLocalName ) ) { return LinkRel . THE_INSTANCE ; } else if ( "meta-name" . equals ( typeLocalName ) ) { return MetaName . THE_INSTANCE ; } else if ( "non-empty-string" . equals ( typeLocalName ) ) { return NonEmptyString . THE_INSTANCE ; } else if ( "string-without-line-breaks" . equals ( typeLocalName ) ) { return StringWithoutLineBreaks . THE_INSTANCE ; } else if ( "simple-color" . equals ( typeLocalName ) ) { return SimpleColor . THE_INSTANCE ; } else if ( "time-datetime" . equals ( typeLocalName ) ) { return TimeDatetime . THE_INSTANCE ; } else if ( "svg-pathdata" . equals ( typeLocalName ) ) { return new SvgPathData ( ) ; } throw new DatatypeException ( "Unknown local name for datatype: " + typeLocalName ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
