public class PropertyManager implements PropertyChangeListener , IPropertySource , IPropertySourceProvider , Serializable { private static final long serialVersionUID = 1L ; protected ArrayList properties ; private transient Hashtable knownDescriptors ; private transient ArrayList propertyChangeListeners ; protected Object owner ; public PropertyManager ( Object owner ) { this . owner = owner ; properties = new ArrayList ( ) ; knownDescriptors = new Hashtable ( ) ; linkPropertyOwner ( owner ) ; } private void linkPropertyOwner ( Object owner ) { if ( owner instanceof ReadableProperty ) { ReadableProperty property = ( ReadableProperty ) owner ; property . setSubPropertyManager ( this ) ; } } public void addProperty ( ReadableProperty readableProperty ) { if ( ! hasProperty ( readableProperty . getID ( ) ) ) { readableProperty . addPropertyChangeListener ( this ) ; properties . add ( readableProperty ) ; } } public void removeProperty ( ReadableProperty readableProperty ) { readableProperty . removePropertyChangeListener ( this ) ; properties . remove ( readableProperty ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { getPropertyChangeListeners ( ) . add ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { getPropertyChangeListeners ( ) . remove ( listener ) ; } public void propertyChange ( PropertyChangeEvent event ) { notifyPropertyChangeListeners ( event ) ; } private void notifyPropertyChangeListeners ( PropertyChangeEvent event ) { PropertyChangeEvent newEvent = new PropertyChangeEvent ( owner , event . getPropertyName ( ) , event . getOldValue ( ) , event . getNewValue ( ) ) ; for ( Iterator iter = getPropertyChangeListeners ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { PropertyChangeListener listener = ( PropertyChangeListener ) iter . next ( ) ; listener . propertyChange ( newEvent ) ; } } public EditableProperty getEditableProperty ( Object id ) { ReadableProperty prop = getProperty ( id ) ; if ( prop != null ) { if ( prop instanceof EditableProperty ) { return ( EditableProperty ) prop ; } } return null ; } public ReadableProperty getProperty ( Object id ) { ReadableProperty prop = findProperty ( id ) ; if ( prop != null ) { return prop ; } String error = StringUtils . format ( Messages . PropertyManager_CouldNotFindProperty , id ) ; throw new IllegalArgumentException ( error ) ; } public boolean hasProperty ( Object id ) { return findProperty ( id ) != null ; } public ReadableProperty getReadableProperty ( Object id ) { return getProperty ( id ) ; } private ReadableProperty findProperty ( Object id ) { for ( Iterator iter = properties . iterator ( ) ; iter . hasNext ( ) ; ) { ReadableProperty prop = ( ReadableProperty ) iter . next ( ) ; if ( prop . getID ( ) . equals ( id ) ) { return prop ; } } return null ; } public IPropertyDescriptor [ ] getPropertyDescriptors ( ) { IPropertyDescriptor [ ] descriptors = new PropertyDescriptor [ properties . size ( ) ] ; int p = 0 ; for ( Iterator iter = properties . iterator ( ) ; iter . hasNext ( ) ; ) { ReadableProperty readableProperty = ( ReadableProperty ) iter . next ( ) ; if ( readableProperty != null ) { if ( readableProperty . hasDynamicPropertyDescriptor ( ) ) { descriptors [ p ] = readableProperty . getPropertyDescriptor ( ) ; } else { String id = readableProperty . getID ( ) ; if ( ! getKnownDescriptors ( ) . containsKey ( id ) ) { getKnownDescriptors ( ) . put ( id , readableProperty . getPropertyDescriptor ( ) ) ; } descriptors [ p ] = ( IPropertyDescriptor ) getKnownDescriptors ( ) . get ( id ) ; } p ++ ; } } return descriptors ; } public Object getPropertyValue ( Object id ) { ReadableProperty readableProperty = getProperty ( id ) ; if ( readableProperty != null ) { if ( readableProperty . hasSubProperties ( ) ) { return readableProperty . getSubPropertyManager ( ) ; } else { return readableProperty . getUnderlyingValue ( ) ; } } return null ; } public Number getPropertyNumberValue ( Object id ) { ReadableProperty readableProperty = getProperty ( id ) ; if ( readableProperty instanceof INumericProperty ) { return ( ( INumericProperty ) readableProperty ) . getNumberValue ( ) ; } else { throw new IllegalArgumentException ( StringUtils . format ( Messages . PropertyManager_NotNumericProperty , id ) ) ; } } public int getPropertyIntValue ( Object id ) throws IllegalArgumentException { return getPropertyNumberValue ( id ) . intValue ( ) ; } public float getPropertyFloatValue ( Object id ) throws IllegalArgumentException { return getPropertyNumberValue ( id ) . floatValue ( ) ; } public double getPropertyDoubleValue ( Object id ) throws IllegalArgumentException { return getPropertyNumberValue ( id ) . doubleValue ( ) ; } public long getPropertyLongValue ( Object id ) throws IllegalArgumentException { return getPropertyNumberValue ( id ) . longValue ( ) ; } public boolean isPropertySet ( Object id ) { ReadableProperty readableProperty = getProperty ( id ) ; if ( readableProperty != null ) { if ( readableProperty . hasDefaultValue ( ) && readableProperty . hasValue ( ) ) { return ! readableProperty . getUnderlyingDefaultValue ( ) . equals ( readableProperty . getUnderlyingValue ( ) ) ; } } return false ; } public void resetPropertyValue ( Object id ) { EditableProperty editableProperty = getEditableProperty ( id ) ; if ( editableProperty != null ) { if ( editableProperty . hasDefaultValue ( ) ) { editableProperty . setUnderlyingValue ( editableProperty . getUnderlyingDefaultValue ( ) ) ; } } } public void setPropertyValue ( Object id , Object value ) { ReadableProperty readableProperty = getProperty ( id ) ; if ( readableProperty != null ) { readableProperty . setUnderlyingValue ( value ) ; } } public Object getEditableValue ( ) { if ( owner instanceof ReadableProperty ) { ReadableProperty property = ( ReadableProperty ) owner ; return property . getUnderlyingValue ( ) ; } return owner ; } public IPropertySource getPropertySource ( Object object ) { return this ; } public ArrayList getProperties ( ) { return new ArrayList ( properties ) ; } protected ArrayList getPropertyChangeListeners ( ) { if ( propertyChangeListeners == null ) { propertyChangeListeners = new ArrayList ( ) ; } return propertyChangeListeners ; } protected Hashtable getKnownDescriptors ( ) { if ( knownDescriptors == null ) { knownDescriptors = new Hashtable ( ) ; } return knownDescriptors ; } } 