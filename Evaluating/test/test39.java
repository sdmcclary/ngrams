public class RMatrix { float m00 = 1F ; float m01 = 0F ; float m02 = 0F ; float m10 = 0F ; float m11 = 1F ; float m12 = 0F ; float m20 = 0F ; float m21 = 0F ; float m22 = 1F ; public RMatrix ( float m00 , float m01 , float m02 , float m10 , float m11 , float m12 ) { set ( m00 , m01 , m02 , m10 , m11 , m12 ) ; } public RMatrix ( ) { m00 = 1F ; m01 = 0F ; m02 = 0F ; m10 = 0F ; m11 = 1F ; m12 = 0F ; } public RMatrix ( RMatrix src ) { set ( src . m00 , src . m01 , src . m02 , src . m10 , src . m11 , src . m12 ) ; } public RMatrix ( String transformationString ) { String [ ] transfTokens = PApplet . splitTokens ( transformationString , ")" ) ; for ( int i = 0 ; i < transfTokens . length ; i ++ ) { String [ ] transf = PApplet . splitTokens ( transfTokens [ i ] , "(" ) ; String [ ] params = PApplet . splitTokens ( transf [ 1 ] , ", " ) ; float [ ] fparams = new float [ params . length ] ; for ( int j = 0 ; j < params . length ; j ++ ) { fparams [ j ] = PApplet . parseFloat ( params [ j ] ) ; } transf [ 0 ] = PApplet . trim ( transf [ 0 ] ) ; if ( transf [ 0 ] . equals ( "translate" ) ) { if ( params . length == 1 ) { this . translate ( fparams [ 0 ] ) ; } else if ( params . length == 2 ) { this . translate ( fparams [ 0 ] , fparams [ 1 ] ) ; } } else if ( transf [ 0 ] . equals ( "rotate" ) ) { if ( params . length == 1 ) { this . rotate ( PApplet . radians ( fparams [ 0 ] ) ) ; } else if ( params . length == 3 ) { this . rotate ( PApplet . radians ( fparams [ 0 ] ) , fparams [ 1 ] , fparams [ 2 ] ) ; } } else if ( transf [ 0 ] . equals ( "scale" ) ) { if ( params . length == 1 ) { this . scale ( fparams [ 0 ] ) ; } else if ( params . length == 2 ) { this . scale ( fparams [ 0 ] , fparams [ 1 ] ) ; } } else if ( transf [ 0 ] . equals ( "skewX" ) ) { this . skewX ( PApplet . radians ( fparams [ 0 ] ) ) ; } else if ( transf [ 0 ] . equals ( "skewY" ) ) { this . skewY ( PApplet . radians ( fparams [ 0 ] ) ) ; } else if ( transf [ 0 ] . equals ( "matrix" ) ) { this . apply ( fparams [ 0 ] , fparams [ 2 ] , fparams [ 4 ] , fparams [ 1 ] , fparams [ 3 ] , fparams [ 5 ] ) ; } else { throw new RuntimeException ( "Transformation unknown. '" + transf [ 0 ] + "'" ) ; } } } private void set ( float m00 , float m01 , float m02 , float m10 , float m11 , float m12 ) { this . m00 = m00 ; this . m01 = m01 ; this . m02 = m02 ; this . m10 = m10 ; this . m11 = m11 ; this . m12 = m12 ; } public void apply ( float n00 , float n01 , float n02 , float n10 , float n11 , float n12 ) { float r00 = m00 * n00 + m01 * n10 ; float r01 = m00 * n01 + m01 * n11 ; float r02 = m00 * n02 + m01 * n12 + m02 ; float r10 = m10 * n00 + m11 * n10 ; float r11 = m10 * n01 + m11 * n11 ; float r12 = m10 * n02 + m11 * n12 + m12 ; m00 = r00 ; m01 = r01 ; m02 = r02 ; m10 = r10 ; m11 = r11 ; m12 = r12 ; } public void apply ( RMatrix rhs ) { apply ( rhs . m00 , rhs . m01 , rhs . m02 , rhs . m10 , rhs . m11 , rhs . m12 ) ; } public void translate ( float tx , float ty ) { apply ( 1 , 0 , tx , 0 , 1 , ty ) ; } public void translate ( float tx ) { translate ( tx , 0 ) ; } public void translate ( RPoint t ) { translate ( t . x , t . y ) ; } public void rotate ( float angle , float vx , float vy ) { translate ( vx , vy ) ; rotate ( angle ) ; translate ( - vx , - vy ) ; } public void rotate ( float angle ) { float c = ( float ) Math . cos ( angle ) ; float s = ( float ) Math . sin ( angle ) ; apply ( c , - s , 0 , s , c , 0 ) ; } public void rotate ( float angle , RPoint v ) { rotate ( angle , v . x , v . y ) ; } public void scale ( float sx , float sy , float x , float y ) { translate ( x , y ) ; scale ( sx , sy ) ; translate ( - x , - y ) ; } public void scale ( float sx , float sy ) { apply ( sx , 0 , 0 , 0 , sy , 0 ) ; } public void scale ( float s , float x , float y ) { scale ( s , s , x , y ) ; } public void scale ( float sx , float sy , RPoint p ) { scale ( sx , sy , p . x , p . y ) ; } public void scale ( float s , RPoint p ) { scale ( s , s , p . x , p . y ) ; } public void scale ( float s ) { scale ( s , s ) ; } public void skewX ( float angle ) { apply ( 1 , ( float ) Math . tan ( angle ) , 0 , 0 , 1 , 0 ) ; } public void skewY ( float angle ) { apply ( 1 , 0 , 0 , ( float ) Math . tan ( angle ) , 1 , 0 ) ; } public void shear ( float shx , float shy ) { apply ( 1 , - shx , 0 , shy , 1 , 0 ) ; } } 