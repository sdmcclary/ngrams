public class SchemaFactory { private PropertyMapBuilder properties = new PropertyMapBuilder ( ) ; private boolean compactSyntax = false ; private SchemaReader autoSchemaLanguage = new AutoSchemaReader ( ) ; public SchemaFactory ( ) { } public Schema createSchema ( InputSource in ) throws IOException , SAXException , IncorrectSchemaException { SchemaReader r = compactSyntax ? CompactSchemaReader . getInstance ( ) : autoSchemaLanguage ; return r . createSchema ( in , properties . toPropertyMap ( ) ) ; } public void setXMLReaderCreator ( XMLReaderCreator xrc ) { properties . put ( ValidateProperty . XML_READER_CREATOR , xrc ) ; } public XMLReaderCreator getXMLReaderCreator ( ) { return ( XMLReaderCreator ) properties . get ( ValidateProperty . XML_READER_CREATOR ) ; } public void setErrorHandler ( ErrorHandler eh ) { properties . put ( ValidateProperty . ERROR_HANDLER , eh ) ; } public ErrorHandler getErrorHandler ( ) { return ( ErrorHandler ) properties . get ( ValidateProperty . ERROR_HANDLER ) ; } public void setDatatypeLibraryFactory ( DatatypeLibraryFactory dlf ) { properties . put ( RngProperty . DATATYPE_LIBRARY_FACTORY , dlf ) ; } public DatatypeLibraryFactory getDatatypeLibraryFactory ( ) { return ( DatatypeLibraryFactory ) properties . get ( RngProperty . DATATYPE_LIBRARY_FACTORY ) ; } public void setCheckIdIdref ( boolean checkIdIdref ) { properties . put ( RngProperty . CHECK_ID_IDREF , checkIdIdref ? Flag . PRESENT : null ) ; } public boolean getCheckIdIdref ( ) { return properties . contains ( RngProperty . CHECK_ID_IDREF ) ; } public void setCompactSyntax ( boolean compactSyntax ) { this . compactSyntax = compactSyntax ; } public boolean getCompactSyntax ( ) { return compactSyntax ; } public void setFeasible ( boolean feasible ) { properties . put ( RngProperty . FEASIBLE , feasible ? Flag . PRESENT : null ) ; } public boolean getFeasible ( ) { return properties . contains ( RngProperty . FEASIBLE ) ; } } 