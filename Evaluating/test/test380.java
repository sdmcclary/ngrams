class ValidatorImpl extends Validator2 { private final ValidatorHandler2 handler ; private XMLReader cachedXMLReader = null ; private LSResourceResolver cachedResourceResolver = null ; private boolean needReset = false ; private static final String LEXICAL_HANDLER_PROPERTY = "http://xml.org/sax/properties/lexical-handler" ; public ValidatorImpl ( ValidatorHandler2 handler ) { this . handler = handler ; } public void reset ( ) { handler . reset ( ) ; needReset = false ; handler . setErrorHandler ( null ) ; handler . setResourceResolver ( null ) ; } public void validate ( Source source , Result result ) throws SAXException , IOException { if ( source == null ) throw new NullPointerException ( ) ; try { if ( source instanceof SAXSource ) { if ( result != null && ! ( result instanceof SAXResult ) ) throw new IllegalArgumentException ( ) ; doValidate ( ( SAXSource ) source , result ) ; } else if ( source instanceof StreamSource ) { if ( result != null && ! ( result instanceof StreamResult ) ) throw new IllegalArgumentException ( ) ; doValidate ( new SAXSource ( SAXSource . sourceToInputSource ( source ) ) , result ) ; } else if ( source instanceof DOMSource ) { if ( result != null && ! ( result instanceof DOMResult ) ) throw new IllegalArgumentException ( ) ; doValidate ( ( DOMSource ) source , ( DOMResult ) result ) ; } else throw new IllegalArgumentException ( "unsupported type of Source: " + source . getClass ( ) . getName ( ) ) ; } catch ( TransformerException e ) { throw new SAXException ( e ) ; } } private void doValidate ( DOMSource source , DOMResult result ) throws SAXException , IOException , TransformerException { throw new IllegalArgumentException ( ) ; } private TransformerHandler getIdentityTransformerHandler ( ) throws SAXException , TransformerConfigurationException { TransformerFactory transformerFactory = TransformerFactory . newInstance ( ) ; if ( ! transformerFactory . getFeature ( SAXTransformerFactory . FEATURE ) ) throw new SAXException ( "TransformerFactory must implement SAXTransformerFactory" ) ; return ( ( SAXTransformerFactory ) transformerFactory ) . newTransformerHandler ( ) ; } private void doValidate ( SAXSource source , Result result ) throws SAXException , IOException , TransformerConfigurationException { if ( result == null ) doValidate ( source , null , null , null ) ; else if ( result instanceof SAXResult ) { SAXResult saxResult = ( SAXResult ) result ; doValidate ( source , saxResult . getHandler ( ) , saxResult . getLexicalHandler ( ) , null ) ; } else { TransformerHandler identityHandler = getIdentityTransformerHandler ( ) ; identityHandler . setResult ( result ) ; doValidate ( source , identityHandler , identityHandler , identityHandler ) ; } } private void doValidate ( SAXSource source , ContentHandler contentHandler , LexicalHandler lexicalHandler , DTDHandler dtdHandler ) throws SAXException , IOException { XMLReader xr = source . getXMLReader ( ) ; if ( xr == null ) { LSResourceResolver resourceResolver = handler . getResourceResolver ( ) ; if ( cachedXMLReader != null && cachedResourceResolver == resourceResolver ) xr = cachedXMLReader ; else { Resolver resolver = null ; if ( resourceResolver != null ) resolver = LS . createResolver ( resourceResolver ) ; xr = new SAXResolver ( resolver ) . createXMLReader ( ) ; cachedXMLReader = xr ; cachedResourceResolver = resourceResolver ; } } handler . setContentHandler ( contentHandler ) ; handler . setDTDHandler ( dtdHandler ) ; try { xr . setProperty ( LEXICAL_HANDLER_PROPERTY , lexicalHandler ) ; } catch ( SAXNotRecognizedException e ) { } catch ( SAXNotSupportedException e ) { } xr . setContentHandler ( handler ) ; xr . setDTDHandler ( handler ) ; ErrorHandler eh = handler . getErrorHandler ( ) ; if ( eh == null ) eh = new DraconianErrorHandler ( ) ; xr . setErrorHandler ( eh ) ; if ( needReset ) handler . reset ( ) ; else needReset = true ; xr . parse ( source . getInputSource ( ) ) ; } public void setErrorHandler ( ErrorHandler errorHandler ) { handler . setErrorHandler ( errorHandler ) ; } public ErrorHandler getErrorHandler ( ) { return handler . getErrorHandler ( ) ; } public void setResourceResolver ( LSResourceResolver resourceResolver ) { handler . setResourceResolver ( resourceResolver ) ; } public LSResourceResolver getResourceResolver ( ) { return handler . getResourceResolver ( ) ; } public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { return handler . getFeature ( name ) ; } public void setFeature ( String name , boolean value ) throws SAXNotRecognizedException , SAXNotSupportedException { handler . setFeature ( name , value ) ; } public void setProperty ( String name , Object object ) throws SAXNotRecognizedException , SAXNotSupportedException { handler . setProperty ( name , object ) ; } public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { return handler . getProperty ( name ) ; } } 