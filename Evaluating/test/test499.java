public class EucalyptusManagement { private static Logger LOG = Logger . getLogger ( EucalyptusManagement . class ) ; public static UserInfoWeb fromServer ( UserInfo source ) { UserInfoWeb target = new UserInfoWeb ( ) ; update ( target , source ) ; return target ; } public static UserInfo fromClient ( UserInfoWeb source ) { UserInfo target = new UserInfo ( ) ; update ( target , source ) ; return target ; } public static void update ( UserInfo target , UserInfo user ) { target . setUserName ( user . getUserName ( ) ) ; target . setRealName ( user . getRealName ( ) ) ; target . setEmail ( user . getEmail ( ) ) ; target . setBCryptedPassword ( user . getBCryptedPassword ( ) ) ; target . setTelephoneNumber ( user . getTelephoneNumber ( ) ) ; target . setAffiliation ( user . getAffiliation ( ) ) ; target . setProjectDescription ( user . getProjectDescription ( ) ) ; target . setProjectPIName ( user . getProjectPIName ( ) ) ; target . setConfirmationCode ( user . getConfirmationCode ( ) ) ; target . setCertificateCode ( user . getCertificateCode ( ) ) ; target . setIsApproved ( user . isApproved ( ) ) ; target . setIsConfirmed ( user . isConfirmed ( ) ) ; target . setIsEnabled ( user . isEnabled ( ) ) ; target . setIsAdministrator ( user . isAdministrator ( ) ) ; target . setPasswordExpires ( user . getPasswordExpires ( ) ) ; target . setQueryId ( user . getQueryId ( ) ) ; target . setSecretKey ( user . getSecretKey ( ) ) ; target . setTemporaryPassword ( user . getTemporaryPassword ( ) ) ; } public static void update ( UserInfoWeb target , UserInfo user ) { target . setUserName ( user . getUserName ( ) ) ; target . setRealName ( user . getRealName ( ) ) ; target . setEmail ( user . getEmail ( ) ) ; target . setBCryptedPassword ( user . getBCryptedPassword ( ) ) ; target . setTelephoneNumber ( user . getTelephoneNumber ( ) ) ; target . setAffiliation ( user . getAffiliation ( ) ) ; target . setProjectDescription ( user . getProjectDescription ( ) ) ; target . setProjectPIName ( user . getProjectPIName ( ) ) ; target . setConfirmationCode ( user . getConfirmationCode ( ) ) ; target . setCertificateCode ( user . getCertificateCode ( ) ) ; target . setIsApproved ( user . isApproved ( ) ) ; target . setIsConfirmed ( user . isConfirmed ( ) ) ; target . setIsEnabled ( user . isEnabled ( ) ) ; target . setIsAdministrator ( user . isAdministrator ( ) ) ; target . setPasswordExpires ( user . getPasswordExpires ( ) ) ; target . setQueryId ( user . getQueryId ( ) ) ; target . setSecretKey ( user . getSecretKey ( ) ) ; target . setTemporaryPassword ( user . getTemporaryPassword ( ) ) ; } public static void update ( UserInfo target , UserInfoWeb user ) { target . setUserName ( user . getUserName ( ) ) ; target . setRealName ( user . getRealName ( ) ) ; target . setEmail ( user . getEmail ( ) ) ; target . setBCryptedPassword ( user . getBCryptedPassword ( ) ) ; target . setTelephoneNumber ( user . getTelephoneNumber ( ) ) ; target . setAffiliation ( user . getAffiliation ( ) ) ; target . setProjectDescription ( user . getProjectDescription ( ) ) ; target . setProjectPIName ( user . getProjectPIName ( ) ) ; target . setConfirmationCode ( user . getConfirmationCode ( ) ) ; target . setCertificateCode ( user . getCertificateCode ( ) ) ; target . setIsApproved ( user . isApproved ( ) ) ; target . setIsConfirmed ( user . isConfirmed ( ) ) ; target . setIsEnabled ( user . isEnabled ( ) ) ; target . setIsAdministrator ( user . isAdministrator ( ) ) ; target . setPasswordExpires ( user . getPasswordExpires ( ) ) ; target . setQueryId ( user . getQueryId ( ) ) ; target . setSecretKey ( user . getSecretKey ( ) ) ; target . setTemporaryPassword ( user . getTemporaryPassword ( ) ) ; } public static ImageInfoWeb imageConvertToWeb ( ImageInfo source ) { ImageInfoWeb target = new ImageInfoWeb ( ) ; target . setId ( source . getId ( ) ) ; target . setImageId ( source . getImageId ( ) ) ; target . setImageLocation ( source . getImageLocation ( ) ) ; target . setImageState ( source . getImageState ( ) ) ; target . setImageOwnerId ( source . getImageOwnerId ( ) ) ; target . setArchitecture ( source . getArchitecture ( ) ) ; target . setImageType ( source . getImageType ( ) ) ; target . setKernelId ( source . getKernelId ( ) ) ; target . setRamdiskId ( source . getRamdiskId ( ) ) ; target . setPublic ( source . getPublic ( ) ) ; return target ; } public static UsageCounterWeb usageConvertToWeb ( UsageCounter source ) { UsageCounterWeb target = new UsageCounterWeb ( ) ; target . setId ( source . getId ( ) ) ; target . setAmount ( source . getAmount ( ) ) ; target . setEndTime ( source . getEndTime ( ) ) ; target . setUsageInstanceKey ( source . getUsageInstanceKey ( ) ) ; target . setUsageType ( usageTypeConvertToWeb ( source . getUsageType ( ) ) ) ; target . setUser ( fromServer ( source . getUser ( ) ) ) ; target . setStartTime ( source . getStartTime ( ) ) ; return target ; } public static List < UsageCounterWeb > usageCounterListConvertToWeb ( List < UsageCounter > source ) { ArrayList < UsageCounterWeb > target = new ArrayList < UsageCounterWeb > ( ) ; for ( UsageCounter usageCounter : source ) { UsageCounterWeb web = usageConvertToWeb ( usageCounter ) ; target . add ( web ) ; } return target ; } public static UsageTypeWeb usageTypeConvertToWeb ( UsageType source ) { UsageTypeWeb target = new UsageTypeWeb ( ) ; target . setId ( source . getId ( ) ) ; target . setCurrency ( source . getCurrency ( ) ) ; target . setDescription ( source . getDescription ( ) ) ; target . setOperationName ( source . getOperationName ( ) ) ; target . setUnitName ( source . getUnitName ( ) ) ; target . setUsageType ( source . getUsageType ( ) ) ; target . setUsageSubType ( source . getUsageSubType ( ) ) ; target . setUnitPrice ( source . getUnitPrice ( ) ) ; target . setServiceName ( target . getServiceName ( ) ) ; return target ; } public static String getError ( String message ) { return "<html><title>HTTP/1.0 403 Forbidden</title><body><div align=\"center\"><p><h1>403: Forbidden</h1></p><p><img src=\"img/error-1.jpg\" /></p><p><h3 style=\"font-color: red;\">" + message + "</h3></p></div></body></html>" ; } public static String [ ] getUserCertificateAliases ( String userName ) throws SerializableException { EntityWrapper < UserInfo > dbWrapper = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = dbWrapper . query ( new UserInfo ( userName ) ) ; if ( userList . size ( ) != 1 ) { dbWrapper . rollback ( ) ; throw EucalyptusManagement . makeFault ( "User does not exist" ) ; } UserInfo user = ( UserInfo ) userList . get ( 0 ) ; String [ ] certInfo = new String [ user . getCertificates ( ) . size ( ) ] ; int i = 0 ; for ( CertificateInfo c : user . getCertificates ( ) ) certInfo [ i ++ ] = c . getCertAlias ( ) ; dbWrapper . commit ( ) ; return certInfo ; } public static List < UserInfoWeb > getWebUsers ( String pattern ) throws SerializableException { UserInfo searchUser = new UserInfo ( ) ; EntityWrapper < UserInfo > dbWrapper = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = dbWrapper . query ( searchUser ) ; List < UserInfoWeb > webUsersList = new ArrayList < UserInfoWeb > ( ) ; for ( UserInfo u : userList ) webUsersList . add ( fromServer ( u ) ) ; dbWrapper . commit ( ) ; return webUsersList ; } public static List < ImageInfoWeb > getWebImages ( String pattern ) throws SerializableException { ImageInfo searchImage = new ImageInfo ( ) ; EntityWrapper < ImageInfo > db = new EntityWrapper < ImageInfo > ( ) ; List < ImageInfo > results = db . query ( searchImage ) ; List < ImageInfoWeb > imagesList = new ArrayList < ImageInfoWeb > ( ) ; for ( ImageInfo i : results ) imagesList . add ( imageConvertToWeb ( i ) ) ; db . commit ( ) ; return imagesList ; } public static List < UsageCounterSummaryWeb > getWebUsageSummary ( String pattern ) throws SerializableException { List < UsageCounterSummaryWeb > summaryList = new ArrayList < UsageCounterSummaryWeb > ( ) ; UsageCounter searchCounter = new UsageCounter ( ) ; EntityWrapper < UsageCounter > db = new EntityWrapper < UsageCounter > ( ) ; List < UsageCounter > usageCounterList = db . query ( searchCounter ) ; List < UsageCounterWeb > usageCounterWebList = new ArrayList < UsageCounterWeb > ( ) ; for ( UsageCounter i : usageCounterList ) usageCounterWebList . add ( usageConvertToWeb ( i ) ) ; db . commit ( ) ; List < UserInfo > users = getDistinctUsers ( usageCounterList ) ; for ( UserInfo user : users ) { List < UsageCounter > countersForUser = getCountersForUser ( usageCounterList , user ) ; UsageCounterSummary sum = new UsageCounterSummary ( user , countersForUser ) ; UsageCounterSummaryWeb summary = usageCounterSummaryConvertToWeb ( sum ) ; summaryList . add ( summary ) ; } return summaryList ; } private static UsageCounterSummaryWeb usageCounterSummaryConvertToWeb ( UsageCounterSummary source ) { UsageCounterSummaryWeb target = new UsageCounterSummaryWeb ( ) ; List < UsageCounter > counters = source . getUsageCounters ( ) ; List < UsageCounterWeb > countersWeb = usageCounterListConvertToWeb ( counters ) ; UserInfo user = source . getUser ( ) ; target . setCurrency ( source . getCurrency ( ) ) ; target . setComments ( source . getComments ( ) ) ; target . setAmount ( source . getAmount ( ) ) ; target . setUsage ( source . getUsage ( ) ) ; target . setUsageCounters ( countersWeb ) ; try { target . setUser ( getWebUser ( user . getUserName ( ) ) ) ; } catch ( SerializableException e ) { e . printStackTrace ( ) ; } return target ; } private static List < UsageCounter > getCountersForUser ( List < UsageCounter > usageCounterList , UserInfo userInfoWeb ) { List < UsageCounter > counters = new ArrayList < UsageCounter > ( ) ; String userName = userInfoWeb . getUserName ( ) ; for ( UsageCounter myUsageCounter : usageCounterList ) { UserInfo myUser = myUsageCounter . getUser ( ) ; String myUserName = myUser . getUserName ( ) ; if ( userName . equals ( myUserName ) ) { counters . add ( myUsageCounter ) ; } } return counters ; } private static List < UserInfo > getDistinctUsers ( List < UsageCounter > usageCounterList ) { List < UserInfo > userslist = new ArrayList < UserInfo > ( ) ; List < String > usernameslist = new ArrayList < String > ( ) ; for ( UsageCounter counter : usageCounterList ) { UserInfo user = counter . getUser ( ) ; String username = user . getUserName ( ) ; if ( ! usernameslist . contains ( username ) ) { userslist . add ( user ) ; usernameslist . add ( username ) ; } } return userslist ; } public static UserInfoWeb getWebUser ( String userName ) throws SerializableException { EntityWrapper < UserInfo > dbWrapper = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = dbWrapper . query ( new UserInfo ( userName ) ) ; if ( userList . size ( ) != 1 ) { dbWrapper . rollback ( ) ; throw EucalyptusManagement . makeFault ( "User does not exist" ) ; } dbWrapper . commit ( ) ; return EucalyptusManagement . fromServer ( userList . get ( 0 ) ) ; } public static UserInfoWeb getWebUserByEmail ( String emailAddress ) throws SerializableException { UserInfo searchUser = new UserInfo ( ) ; searchUser . setEmail ( emailAddress ) ; EntityWrapper < UserInfo > dbWrapper = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = dbWrapper . query ( searchUser ) ; if ( userList . size ( ) != 1 ) { dbWrapper . rollback ( ) ; throw EucalyptusManagement . makeFault ( "User does not exist" ) ; } dbWrapper . commit ( ) ; return EucalyptusManagement . fromServer ( userList . get ( 0 ) ) ; } public static UserInfoWeb getWebUserByCode ( String code ) throws SerializableException { UserInfo searchUser = new UserInfo ( ) ; searchUser . setConfirmationCode ( code ) ; EntityWrapper < UserInfo > dbWrapper = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = dbWrapper . query ( searchUser ) ; if ( userList . size ( ) != 1 ) { dbWrapper . rollback ( ) ; throw EucalyptusManagement . makeFault ( "Invalid confirmation code" ) ; } dbWrapper . commit ( ) ; return EucalyptusManagement . fromServer ( userList . get ( 0 ) ) ; } public static synchronized void addWebUser ( UserInfoWeb webUser ) throws SerializableException { EntityWrapper < UserInfo > dbWrapper = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = dbWrapper . query ( new UserInfo ( webUser . getUserName ( ) ) ) ; if ( userList . size ( ) != 0 ) { dbWrapper . rollback ( ) ; throw EucalyptusManagement . makeFault ( "User already exists" ) ; } webUser . setConfirmationCode ( UserManagement . generateConfirmationCode ( webUser . getUserName ( ) ) ) ; webUser . setCertificateCode ( UserManagement . generateCertificateCode ( webUser . getUserName ( ) ) ) ; webUser . setSecretKey ( UserManagement . generateSecretKey ( webUser . getUserName ( ) ) ) ; webUser . setQueryId ( UserManagement . generateQueryId ( webUser . getUserName ( ) ) ) ; UserInfo newUser = EucalyptusManagement . fromClient ( webUser ) ; newUser . setReservationId ( 0l ) ; newUser . getNetworkRulesGroup ( ) . add ( NetworkRulesGroup . getDefaultGroup ( ) ) ; dbWrapper . add ( newUser ) ; dbWrapper . commit ( ) ; } private static SerializableException makeFault ( String message ) { SerializableException e = new SerializableException ( message ) ; LOG . error ( e ) ; return e ; } public static void deleteWebUser ( UserInfoWeb webUser ) throws SerializableException { String userName = webUser . getUserName ( ) ; deleteUser ( userName ) ; } public static void deleteUser ( String userName ) throws SerializableException { EntityWrapper < UserInfo > db = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = db . query ( new UserInfo ( userName ) ) ; if ( userList . size ( ) != 1 ) { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "User already exists" ) ; } db . delete ( userList . get ( 0 ) ) ; db . commit ( ) ; } public static void commitWebUser ( UserInfoWeb webUser ) throws SerializableException { UserInfo user = fromClient ( webUser ) ; commitUser ( user ) ; } public static void commitUser ( UserInfo user ) throws SerializableException { UserInfo searchUser = new UserInfo ( user . getUserName ( ) ) ; EntityWrapper < UserInfo > db = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = db . query ( searchUser ) ; UserInfo target = userList . get ( 0 ) ; if ( userList . size ( ) != 1 ) { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "User does not exist" ) ; } update ( target , user ) ; db . commit ( ) ; } public static String getAdminEmail ( ) throws SerializableException { UserInfo searchUser = new UserInfo ( ) ; searchUser . setIsAdministrator ( true ) ; EntityWrapper < UserInfo > db = new EntityWrapper < UserInfo > ( ) ; List < UserInfo > userList = db . query ( searchUser ) ; if ( userList . size ( ) < 1 || userList . isEmpty ( ) ) { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "Administrator account not found" ) ; } UserInfo first = userList . get ( 0 ) ; String addr = first . getEmail ( ) ; if ( addr == null || addr . equals ( "" ) ) { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "Email address is not set" ) ; } db . commit ( ) ; return addr ; } public static String getReplyToEmail ( ) { return Configuration . getConfiguration ( ) . getReplyToEmail ( ) ; } public static void deleteImage ( String imageId ) throws SerializableException { ImageInfo searchImg = new ImageInfo ( ) ; searchImg . setImageId ( imageId ) ; EntityWrapper < ImageInfo > db = new EntityWrapper < ImageInfo > ( ) ; List < ImageInfo > imgList = db . query ( searchImg ) ; if ( imgList . size ( ) > 0 && ! imgList . isEmpty ( ) ) { ImageInfo foundimgSearch = imgList . get ( 0 ) ; foundimgSearch . setImageState ( "deregistered" ) ; db . commit ( ) ; } else { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "Specified image was not found, sorry." ) ; } } public static void disableImage ( String imageId ) throws SerializableException { ImageInfo searchImg = new ImageInfo ( ) ; searchImg . setImageId ( imageId ) ; EntityWrapper < ImageInfo > db = new EntityWrapper < ImageInfo > ( ) ; List < ImageInfo > imgList = db . query ( searchImg ) ; if ( imgList . size ( ) > 0 && ! imgList . isEmpty ( ) ) { ImageInfo foundimgSearch = imgList . get ( 0 ) ; foundimgSearch . setImageState ( "deregistered" ) ; db . commit ( ) ; } else { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "Specified image was not found, sorry." ) ; } } public static void enableImage ( String imageId ) throws SerializableException { ImageInfo searchImg = new ImageInfo ( ) ; searchImg . setImageId ( imageId ) ; EntityWrapper < ImageInfo > db = new EntityWrapper < ImageInfo > ( ) ; List < ImageInfo > imgList = db . query ( searchImg ) ; if ( imgList . size ( ) > 0 && ! imgList . isEmpty ( ) ) { ImageInfo foundimgSearch = imgList . get ( 0 ) ; foundimgSearch . setImageState ( "available" ) ; db . commit ( ) ; } else { db . rollback ( ) ; throw EucalyptusManagement . makeFault ( "Specified image was not found, sorry." ) ; } } public static String getInternalIpAddress ( ) { String ipAddr = null ; String localAddr = "127.0.0.1" ; List < NetworkInterface > ifaces = null ; try { ifaces = Collections . list ( NetworkInterface . getNetworkInterfaces ( ) ) ; } catch ( SocketException e1 ) { } for ( NetworkInterface iface : ifaces ) try { if ( ! iface . isLoopback ( ) && ! iface . isVirtual ( ) && iface . isUp ( ) ) { for ( InetAddress iaddr : Collections . list ( iface . getInetAddresses ( ) ) ) { if ( ! iaddr . isSiteLocalAddress ( ) && ! ( iaddr instanceof Inet6Address ) ) { ipAddr = iaddr . getHostAddress ( ) ; } else if ( iaddr . isSiteLocalAddress ( ) && ! ( iaddr instanceof Inet6Address ) ) { localAddr = iaddr . getHostAddress ( ) ; } } } } catch ( SocketException e1 ) { } return ipAddr == null ? localAddr : ipAddr ; } public static SystemConfigWeb getSystemConfig ( ) throws SerializableException { EntityWrapper < SystemConfiguration > db = new EntityWrapper < SystemConfiguration > ( ) ; SystemConfiguration sysConf ; try { sysConf = db . getUnique ( new SystemConfiguration ( ) ) ; validateSystemConfiguration ( sysConf ) ; } catch ( EucalyptusCloudException e ) { sysConf = validateSystemConfiguration ( null ) ; } finally { db . commit ( ) ; } return new SystemConfigWeb ( sysConf . getStorageUrl ( ) , sysConf . getStorageDir ( ) , sysConf . getStorageMaxBucketsPerUser ( ) , sysConf . getStorageMaxBucketSizeInMB ( ) , sysConf . getStorageMaxCacheSizeInMB ( ) , sysConf . getStorageMaxTotalSnapshotSizeInGb ( ) , sysConf . getStorageMaxTotalVolumeSizeInGb ( ) , sysConf . getStorageMaxVolumeSizeInGB ( ) , sysConf . getStorageVolumesDir ( ) , sysConf . getDefaultKernel ( ) , sysConf . getDefaultRamdisk ( ) , sysConf . getMaxUserPublicAddresses ( ) , sysConf . isDoDynamicPublicAddresses ( ) , sysConf . getSystemReservedPublicAddresses ( ) ) ; } private static SystemConfiguration validateSystemConfiguration ( SystemConfiguration sysConf ) { if ( sysConf == null ) { sysConf = new SystemConfiguration ( ) ; } if ( sysConf . getStorageUrl ( ) == null ) { String ipAddr = getInternalIpAddress ( ) ; String wUrl = String . format ( "http://%s:8773/services/" + WalrusProperties . SERVICE_NAME , ipAddr ) ; sysConf . setStorageUrl ( wUrl ) ; } if ( sysConf . getStorageDir ( ) == null ) { sysConf . setStorageDir ( WalrusProperties . bucketRootDirectory . replaceAll ( "//" , "/" ) ) ; } if ( sysConf . getStorageMaxBucketsPerUser ( ) == null ) { sysConf . setStorageMaxBucketsPerUser ( WalrusProperties . MAX_BUCKETS_PER_USER ) ; } if ( sysConf . getStorageMaxBucketSizeInMB ( ) == null ) { sysConf . setStorageMaxBucketSizeInMB ( ( int ) ( WalrusProperties . MAX_BUCKET_SIZE / WalrusProperties . M ) ) ; } if ( sysConf . getStorageMaxCacheSizeInMB ( ) == null ) { sysConf . setStorageMaxCacheSizeInMB ( ( int ) ( WalrusProperties . IMAGE_CACHE_SIZE / WalrusProperties . M ) ) ; } if ( sysConf . getStorageMaxTotalSnapshotSizeInGb ( ) == null ) { sysConf . setStorageMaxTotalSnapshotSizeInGb ( StorageProperties . MAX_TOTAL_SNAPSHOT_SIZE ) ; } if ( sysConf . getStorageMaxTotalVolumeSizeInGb ( ) == null ) { sysConf . setStorageMaxTotalVolumeSizeInGb ( StorageProperties . MAX_TOTAL_VOLUME_SIZE ) ; } if ( sysConf . getStorageMaxVolumeSizeInGB ( ) == null ) { sysConf . setStorageMaxVolumeSizeInGB ( StorageProperties . MAX_VOLUME_SIZE ) ; } if ( sysConf . getStorageVolumesDir ( ) == null ) { sysConf . setStorageVolumesDir ( StorageProperties . storageRootDirectory ) ; } if ( sysConf . getDefaultKernel ( ) == null ) { ImageInfo q = new ImageInfo ( ) ; EntityWrapper < ImageInfo > db2 = new EntityWrapper < ImageInfo > ( ) ; q . setImageType ( EucalyptusProperties . IMAGE_KERNEL ) ; List < ImageInfo > res = db2 . query ( q ) ; if ( res . size ( ) > 0 ) sysConf . setDefaultKernel ( res . get ( 0 ) . getImageId ( ) ) ; } if ( sysConf . getDefaultRamdisk ( ) == null ) { ImageInfo q = new ImageInfo ( ) ; EntityWrapper < ImageInfo > db2 = new EntityWrapper < ImageInfo > ( ) ; q . setImageType ( EucalyptusProperties . IMAGE_RAMDISK ) ; List < ImageInfo > res = db2 . query ( q ) ; if ( res . size ( ) > 0 ) sysConf . setDefaultRamdisk ( res . get ( 0 ) . getImageId ( ) ) ; } if ( sysConf . getMaxUserPublicAddresses ( ) == null ) { sysConf . setMaxUserPublicAddresses ( 5 ) ; } if ( sysConf . isDoDynamicPublicAddresses ( ) == null ) { sysConf . setDoDynamicPublicAddresses ( true ) ; } if ( sysConf . getSystemReservedPublicAddresses ( ) == null ) { sysConf . setSystemReservedPublicAddresses ( 10 ) ; } return sysConf ; } public static void setSystemConfig ( final SystemConfigWeb systemConfig ) { EntityWrapper < SystemConfiguration > db = new EntityWrapper < SystemConfiguration > ( ) ; try { SystemConfiguration sysConf = db . getUnique ( new SystemConfiguration ( ) ) ; sysConf . setStorageUrl ( systemConfig . getStorageUrl ( ) ) ; sysConf . setStorageDir ( systemConfig . getStoragePath ( ) ) ; sysConf . setDefaultKernel ( systemConfig . getDefaultKernelId ( ) ) ; sysConf . setDefaultRamdisk ( systemConfig . getDefaultRamdiskId ( ) ) ; sysConf . setStorageMaxBucketsPerUser ( systemConfig . getStorageMaxBucketsPerUser ( ) ) ; sysConf . setStorageMaxBucketSizeInMB ( systemConfig . getStorageMaxBucketSizeInMB ( ) ) ; sysConf . setStorageMaxCacheSizeInMB ( systemConfig . getStorageMaxCacheSizeInMB ( ) ) ; sysConf . setStorageMaxTotalVolumeSizeInGb ( systemConfig . getStorageVolumesTotalInGB ( ) ) ; sysConf . setStorageMaxTotalSnapshotSizeInGb ( systemConfig . getStorageSnapshotsTotalInGB ( ) ) ; sysConf . setStorageMaxVolumeSizeInGB ( systemConfig . getStorageMaxVolumeSizeInGB ( ) ) ; sysConf . setStorageVolumesDir ( systemConfig . getStorageVolumesPath ( ) ) ; sysConf . setMaxUserPublicAddresses ( systemConfig . getMaxUserPublicAddresses ( ) ) ; sysConf . setDoDynamicPublicAddresses ( systemConfig . isDoDynamicPublicAddresses ( ) ) ; sysConf . setSystemReservedPublicAddresses ( systemConfig . getSystemReservedPublicAddresses ( ) ) ; db . commit ( ) ; WalrusProperties . update ( ) ; StorageProperties . update ( ) ; } catch ( EucalyptusCloudException e ) { db . add ( new SystemConfiguration ( systemConfig . getStorageUrl ( ) , systemConfig . getDefaultKernelId ( ) , systemConfig . getDefaultRamdiskId ( ) , systemConfig . getStoragePath ( ) , systemConfig . getStorageMaxBucketsPerUser ( ) , systemConfig . getStorageMaxBucketSizeInMB ( ) , systemConfig . getStorageMaxCacheSizeInMB ( ) , systemConfig . getStorageVolumesTotalInGB ( ) , systemConfig . getStorageSnapshotsTotalInGB ( ) , systemConfig . getStorageMaxVolumeSizeInGB ( ) , systemConfig . getStorageVolumesPath ( ) , systemConfig . getMaxUserPublicAddresses ( ) , systemConfig . isDoDynamicPublicAddresses ( ) , systemConfig . getSystemReservedPublicAddresses ( ) ) ) ; db . commit ( ) ; WalrusProperties . update ( ) ; StorageProperties . update ( ) ; } } private static String getExternalIpAddress ( ) { String ipAddr = null ; HttpClient httpClient = new HttpClient ( ) ; GetMethod method = new GetMethod ( "https://my.rightscale.com/whoami?api_version=1.0&cloud=0" ) ; Integer timeoutMs = new Integer ( 3 * 1000 ) ; method . getParams ( ) . setSoTimeout ( timeoutMs ) ; try { httpClient . executeMethod ( method ) ; String str = method . getResponseBodyAsString ( ) ; Matcher matcher = Pattern . compile ( ".*your ip is (.*)" ) . matcher ( str ) ; if ( matcher . find ( ) ) { ipAddr = matcher . group ( 1 ) ; } } catch ( MalformedURLException e ) { LOG . warn ( "Malformed URL exception: " + e . getMessage ( ) ) ; e . printStackTrace ( ) ; } catch ( IOException e ) { LOG . warn ( "I/O exception: " + e . getMessage ( ) ) ; e . printStackTrace ( ) ; } finally { method . releaseConnection ( ) ; } return ipAddr ; } public static CloudInfoWeb getCloudInfo ( boolean setExternalHostPort ) throws SerializableException { String cloudRegisterId = null ; try { cloudRegisterId = EucalyptusProperties . getSystemConfiguration ( ) . getRegistrationId ( ) ; } catch ( EucalyptusCloudException e ) { cloudRegisterId = "this should never be unset!" ; } CloudInfoWeb cloudInfo = new CloudInfoWeb ( ) ; cloudInfo . setInternalHostPort ( getInternalIpAddress ( ) + ":8443" ) ; if ( setExternalHostPort ) { String ipAddr = getExternalIpAddress ( ) ; if ( ipAddr != null ) { cloudInfo . setExternalHostPort ( ipAddr + ":8443" ) ; } } cloudInfo . setServicePath ( "/register" ) ; cloudInfo . setCloudId ( cloudRegisterId ) ; return cloudInfo ; } public static SystemConfigWeb getUsage ( ) throws SerializableException { EntityWrapper < SystemConfiguration > db = new EntityWrapper < SystemConfiguration > ( ) ; SystemConfiguration sysConf ; try { sysConf = db . getUnique ( new SystemConfiguration ( ) ) ; validateSystemConfiguration ( sysConf ) ; } catch ( EucalyptusCloudException e ) { sysConf = validateSystemConfiguration ( null ) ; } finally { db . commit ( ) ; } return new SystemConfigWeb ( sysConf . getStorageUrl ( ) , sysConf . getStorageDir ( ) , sysConf . getStorageMaxBucketsPerUser ( ) , sysConf . getStorageMaxBucketSizeInMB ( ) , sysConf . getStorageMaxCacheSizeInMB ( ) , sysConf . getStorageMaxTotalSnapshotSizeInGb ( ) , sysConf . getStorageMaxTotalVolumeSizeInGb ( ) , sysConf . getStorageMaxVolumeSizeInGB ( ) , sysConf . getStorageVolumesDir ( ) , sysConf . getDefaultKernel ( ) , sysConf . getDefaultRamdisk ( ) , sysConf . getMaxUserPublicAddresses ( ) , sysConf . isDoDynamicPublicAddresses ( ) , sysConf . getSystemReservedPublicAddresses ( ) ) ; } } 