<<<<<<< HEAD
public class AptanaFileSearchPage extends FileSearchPage { public Integer getElementLimit1 ( ) { if ( Compatibility . isTableLimited ( ) ) { return new Integer ( Compatibility . getTableLimit ( ) ) ; } return new Integer ( - 1 ) ; } protected void evaluateChangedElements ( Match [ ] matches , Set changedElements ) { for ( int i = 0 ; i < matches . length ; i ++ ) { changedElements . add ( matches [ i ] . getElement ( ) ) ; } } private final class MatchesTableLabelProvider implements ITableLabelProvider , ILabelProvider { private WorkbenchLabelProvider fLabelProvider = new WorkbenchLabelProvider ( ) ; private String [ ] fArgs = new String [ 2 ] ; private static final String fgSeparatorFormat = "{0} - {1}" ; public Image getColumnImage ( Object element , int columnIndex ) { if ( columnIndex == 0 ) { return fLabelProvider . getImage ( ( ( Match ) element ) . getElement ( ) ) ; } return null ; } public String getText ( IResource resource ) { String text ; if ( ! resource . exists ( ) ) { text = SearchMessages . FileLabelProvider_removed_resource_label ; } else { IPath path = resource . getFullPath ( ) . removeLastSegments ( 1 ) ; if ( path . getDevice ( ) == null ) { path = path . makeRelative ( ) ; } if ( ( AptanaFileSearchPage . this . fOrder == AptanaFileSearchPage . SHOW_LABEL ) || ( AptanaFileSearchPage . this . fOrder == AptanaFileSearchPage . SHOW_LABEL_PATH ) ) { text = this . fLabelProvider . getText ( resource ) ; if ( ( path != null ) && ( AptanaFileSearchPage . this . fOrder == AptanaFileSearchPage . SHOW_LABEL_PATH ) ) { this . fArgs [ 0 ] = text ; this . fArgs [ 1 ] = path . toString ( ) ; text = MessageFormat . format ( MatchesTableLabelProvider . fgSeparatorFormat , this . fArgs ) ; } } else { if ( path != null ) { text = path . toString ( ) ; } else { text = "" ; } if ( AptanaFileSearchPage . this . fOrder == AptanaFileSearchPage . SHOW_PATH_LABEL ) { this . fArgs [ 0 ] = text ; this . fArgs [ 1 ] = this . fLabelProvider . getText ( resource ) ; text = MessageFormat . format ( MatchesTableLabelProvider . fgSeparatorFormat , this . fArgs ) ; } } } return text ; } public String getColumnText ( Object element , int columnIndex ) { if ( ! ( element instanceof AptanaFileMatch ) ) { return "" ; } AptanaFileMatch match = ( AptanaFileMatch ) element ; if ( columnIndex == 0 ) { IFile file = match . getFile ( ) ; if ( file == null ) { return match . getElement ( ) . toString ( ) ; } return this . getText ( file ) ; } if ( columnIndex == 1 ) { return Integer . toString ( match . getLineNumber ( ) ) ; } return "" ; } public void addListener ( ILabelProviderListener listener ) { AptanaFileSearchPage . this . baseLabelProvider . addListener ( listener ) ; } public void dispose ( ) { } public boolean isLabelProperty ( Object element , String property ) { return AptanaFileSearchPage . this . baseLabelProvider . isLabelProperty ( element , property ) ; } public void removeListener ( ILabelProviderListener listener ) { AptanaFileSearchPage . this . baseLabelProvider . removeListener ( listener ) ; } public Image getImage ( Object element ) { return null ; } public String getText ( Object element ) { StringBuilder bld = new StringBuilder ( ) ; bld . append ( this . getColumnText ( element , 0 ) ) ; bld . append ( '\t' ) ; bld . append ( this . getColumnText ( element , 1 ) ) ; bld . append ( '\t' ) ; bld . append ( ( ( AptanaFileMatch ) element ) . getLineContent ( ) ) ; return bld . toString ( ) ; } } static final Object [ ] NO_ELEMENTS = new Object [ 0 ] ; static final Match [ ] NO_MATCH = new Match [ 0 ] ; private static final int LAYOUT_MATCHES = 4 ; ITreeContentProvider provider ; boolean turnOff ; public static final int SHOW_LABEL = 1 ; public static final int SHOW_LABEL_PATH = 2 ; public static final int SHOW_PATH_LABEL = 3 ; private int fOrder = AptanaFileSearchPage . SHOW_LABEL_PATH ; protected void fillContextMenu ( IMenuManager mgr ) { try { super . fillContextMenu ( mgr ) ; Separator find = ( Separator ) mgr . find ( IContextMenuConstants . GROUP_REORGANIZE ) ; IContributionItem [ ] items = find . getParent ( ) . getItems ( ) ; int indexOf = Arrays . asList ( items ) . indexOf ( find ) ; mgr . remove ( items [ indexOf + 1 ] ) ; mgr . remove ( items [ indexOf + 2 ] ) ; doAdd ( mgr ) ; } catch ( ClassCastException e ) { doAdd ( mgr ) ; } if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { Separator find = ( Separator ) mgr . find ( IContextMenuConstants . GROUP_VIEWER_SETUP ) ; IContributionItem [ ] items = find . getParent ( ) . getItems ( ) ; int indexOf = Arrays . asList ( items ) . indexOf ( find ) ; MenuManager contributionItem = ( MenuManager ) items [ indexOf + 1 ] ; IContributionItem [ ] items2 = contributionItem . getItems ( ) ; ActionContributionItem it0 = ( ActionContributionItem ) items2 [ 0 ] ; ActionContributionItem it1 = ( ActionContributionItem ) items2 [ 1 ] ; it0 . getAction ( ) . setChecked ( this . fOrder == AptanaFileSearchPage . SHOW_LABEL_PATH ) ; it1 . getAction ( ) . setChecked ( this . fOrder == AptanaFileSearchPage . SHOW_PATH_LABEL ) ; } } private void doAdd ( IMenuManager mgr ) { IStructuredSelection selection = ( IStructuredSelection ) getViewer ( ) . getSelection ( ) ; if ( ! selection . isEmpty ( ) ) { ReplaceAction replaceSelection = new ReplaceAction ( getSite ( ) . getShell ( ) , ( FileSearchResult ) getInput ( ) , selection . toArray ( ) , true ) ; replaceSelection . setText ( SearchMessages . ReplaceAction_label_selected ) ; mgr . appendToGroup ( IContextMenuConstants . GROUP_REORGANIZE , replaceSelection ) ; } ReplaceAction replaceAll = new ReplaceAction ( getSite ( ) . getShell ( ) , ( FileSearchResult ) getInput ( ) , null , true ) ; replaceAll . setText ( SearchMessages . ReplaceAction_label_all ) ; mgr . appendToGroup ( IContextMenuConstants . GROUP_REORGANIZE , replaceAll ) ; } public String getLabel ( ) { AbstractTextSearchResult input = this . getInput ( ) ; if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { if ( input == null ) { return "" ; } String label = input . getLabel ( ) ; TableViewer viewer = ( TableViewer ) this . getViewer ( ) ; int itemCount = viewer . getTable ( ) . getItemCount ( ) ; int matchCount = this . getInput ( ) . getMatchCount ( ) ; if ( itemCount < matchCount ) { return Messages . format ( com . aptana . ide . search . Messages . AptanaFileSearchPage_NOT_ALL_MATCHES , new Object [ ] { label , new Integer ( itemCount ) , new Integer ( matchCount ) } ) ; } } return super . getLabel ( ) ; } public int getDisplayedMatchCount ( Object element ) { if ( showLineMatches ( ) ) { if ( element instanceof IFile || element instanceof File ) { AbstractTextSearchResult result = getInput ( ) ; if ( result == null ) { return 0 ; } return this . getInput ( ) . getMatchCount ( ) ; } return 0 ; } return super . getDisplayedMatchCount ( element ) ; } public Match [ ] getDisplayedMatches ( Object element ) { if ( showLineMatches ( ) ) { if ( element instanceof IFile || element instanceof File ) { AbstractTextSearchResult result = getInput ( ) ; if ( result == null ) { return EMPTY_MATCH_ARRAY ; } return this . getInput ( ) . getMatches ( element ) ; } return EMPTY_MATCH_ARRAY ; } return super . getDisplayedMatches ( element ) ; } private boolean showLineMatches ( ) { AbstractTextSearchResult input = getInput ( ) ; return getLayout ( ) == FLAG_LAYOUT_TREE && input != null && ! ( ( FileSearchQuery ) input . getQuery ( ) ) . isFileNameSearch ( ) ; } public void init ( IPageSite site ) { super . init ( site ) ; site . getActionBars ( ) . getMenuManager ( ) . appendToGroup ( IContextMenuConstants . GROUP_VIEWER_SETUP , this . fFlatAction ) ; } private SetLayoutAction fFlatAction = new SetLayoutAction ( this , com . aptana . ide . search . Messages . AptanaFileSearchPage_ShowMatches , com . aptana . ide . search . Messages . AptanaFileSearchPage_ShowMatchesTooltip , AptanaFileSearchPage . LAYOUT_MATCHES ) ; public AptanaFileSearchPage ( ) { fFlatAction . setImageDescriptor ( Activator . imageDescriptorFromPlugin ( Activator . PLUGIN_ID , "/icons/verticalOrientation.gif" ) ) ; } int layout ; private static final String KEY_LAYOUT = "org.eclipse.search.resultpage.layout" ; private static final String KEY_SORTING = "org.eclipse.search.resultpage.sorting" ; private MatchesContentProvider structuredContentProvider ; private Listener listener ; private Listener listener1 ; public void setSortOrder ( int sortOrder ) { if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { this . fOrder = sortOrder ; this . getSettings ( ) . put ( AptanaFileSearchPage . KEY_SORTING , sortOrder ) ; this . getViewer ( ) . refresh ( ) ; return ; } super . setSortOrder ( sortOrder ) ; } public void restoreState ( IMemento memento ) { try { this . layout = this . getSettings ( ) . getInt ( AptanaFileSearchPage . KEY_LAYOUT ) ; } catch ( NumberFormatException e ) { layout = FLAG_LAYOUT_TREE ; } if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { this . getSettings ( ) . put ( AptanaFileSearchPage . KEY_LAYOUT , AbstractTextSearchViewPage . FLAG_LAYOUT_FLAT ) ; } if ( memento != null ) { Integer l = memento . getInteger ( AptanaFileSearchPage . KEY_LAYOUT ) ; if ( l != null ) { this . layout = l . intValue ( ) ; if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { memento . putInteger ( AptanaFileSearchPage . KEY_LAYOUT , AbstractTextSearchViewPage . FLAG_LAYOUT_FLAT ) ; } } } super . restoreState ( memento ) ; try { this . fOrder = this . getSettings ( ) . getInt ( AptanaFileSearchPage . KEY_SORTING ) ; } catch ( NumberFormatException e ) { this . fOrder = AptanaFileSearchPage . SHOW_LABEL_PATH ; } if ( memento != null ) { Integer value = memento . getInteger ( AptanaFileSearchPage . KEY_SORTING ) ; if ( value != null ) { this . fOrder = value . intValue ( ) ; } } } public void createControl ( Composite parent ) { super . createControl ( parent ) ; if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { this . layout = 1 ; this . setLayout ( AptanaFileSearchPage . LAYOUT_MATCHES ) ; } } public void saveState ( IMemento memento ) { memento . putInteger ( AptanaFileSearchPage . KEY_LAYOUT , this . layout ) ; } public void setLayout ( int layout ) { if ( this . layout == layout ) { return ; } if ( layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { this . getControl ( ) . setRedraw ( false ) ; if ( this . getLayout ( ) != AbstractTextSearchViewPage . FLAG_LAYOUT_FLAT ) { super . setLayout ( AbstractTextSearchViewPage . FLAG_LAYOUT_FLAT ) ; } this . layout = layout ; this . reconfigureTableViewer ( ) ; this . getControl ( ) . setRedraw ( true ) ; ( ( Composite ) this . getControl ( ) ) . layout ( true , true ) ; this . getControl ( ) . redraw ( ) ; Separator find = ( Separator ) this . getSite ( ) . getActionBars ( ) . getMenuManager ( ) . find ( IContextMenuConstants . GROUP_VIEWER_SETUP ) ; IContributionItem [ ] items = find . getParent ( ) . getItems ( ) ; int indexOf = Arrays . asList ( items ) . indexOf ( find ) ; SubContributionItem contributionItem = ( SubContributionItem ) items [ indexOf + 1 ] ; ActionContributionItem ac = ( ActionContributionItem ) contributionItem . getInnerItem ( ) ; ac . getAction ( ) . setChecked ( false ) ; contributionItem = ( SubContributionItem ) items [ indexOf + 3 ] ; ac = ( ActionContributionItem ) contributionItem . getInnerItem ( ) ; ac . getAction ( ) . setChecked ( true ) ; find . update ( ) ; this . getSettings ( ) . put ( AptanaFileSearchPage . KEY_LAYOUT , layout ) ; } else { if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { this . layout = layout ; if ( layout == AbstractTextSearchViewPage . FLAG_LAYOUT_FLAT ) { this . getControl ( ) . setRedraw ( false ) ; super . setLayout ( AbstractTextSearchViewPage . FLAG_LAYOUT_TREE ) ; super . setLayout ( AbstractTextSearchViewPage . FLAG_LAYOUT_FLAT ) ; ( ( Composite ) this . getControl ( ) ) . layout ( true , true ) ; this . getControl ( ) . setRedraw ( true ) ; return ; } } this . layout = layout ; super . setLayout ( layout ) ; } } public Match getCurrentMatch ( ) { if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { StackTraceElement [ ] stackTrace = new Exception ( ) . getStackTrace ( ) ; String methodName = stackTrace [ 1 ] . getMethodName ( ) ; if ( methodName . equals ( "gotoNextMatch" ) ) { return null ; } if ( methodName . equals ( "gotoPreviousMatch" ) ) { return null ; } IStructuredSelection selection = ( IStructuredSelection ) this . getViewer ( ) . getSelection ( ) ; Object element = selection . getFirstElement ( ) ; return ( Match ) element ; } return super . getCurrentMatch ( ) ; } private PixelConverter metrics ; private DecoratingFileSearchLabelProvider baseLabelProvider ; public void internalRemoveSelected ( ) { if ( this . layout != AptanaFileSearchPage . LAYOUT_MATCHES ) { super . internalRemoveSelected ( ) ; } else { TableViewer cc = ( TableViewer ) this . getViewer ( ) ; StructuredSelection ss = ( StructuredSelection ) cc . getSelection ( ) ; List list = ss . toList ( ) ; Match [ ] ms = new Match [ list . size ( ) ] ; list . toArray ( ms ) ; this . getInput ( ) . removeMatches ( ms ) ; getViewPart ( ) . updateLabel ( ) ; } } protected void handleSearchResultChanged ( final SearchResultEvent e ) { if ( this . layout != AptanaFileSearchPage . LAYOUT_MATCHES ) { super . handleSearchResultChanged ( e ) ; return ; } if ( e instanceof MatchEvent ) { MatchEvent me = ( MatchEvent ) e ; int kind = me . getKind ( ) ; if ( ( Display . getCurrent ( ) != null ) && ( kind == MatchEvent . REMOVED ) ) { TableViewer cc = ( TableViewer ) this . getViewer ( ) ; Table table = cc . getTable ( ) ; int selectionIndex = table . getSelectionIndex ( ) ; cc . refresh ( ) ; if ( selectionIndex != - 1 ) { if ( selectionIndex < table . getItemCount ( ) ) { TableItem item = cc . getTable ( ) . getItem ( selectionIndex ) ; cc . setSelection ( new StructuredSelection ( item . getData ( ) ) ) ; } } } else { super . handleSearchResultChanged ( e ) ; } } else if ( e instanceof RemoveAllEvent ) { super . handleSearchResultChanged ( e ) ; } } private void reconfigureTableViewer ( ) { TableViewer tViewer = ( TableViewer ) this . getViewer ( ) ; TableColumn [ ] columns = tViewer . getTable ( ) . getColumns ( ) ; for ( int a = 0 ; a < columns . length ; a ++ ) { columns [ a ] . dispose ( ) ; } this . metrics = new PixelConverter ( tViewer . getControl ( ) ) ; tViewer . getTable ( ) . setHeaderVisible ( true ) ; TableColumn clmn = new TableColumn ( tViewer . getTable ( ) , SWT . LEFT ) ; clmn . setText ( com . aptana . ide . search . Messages . AptanaFileSearchPage_File ) ; TableColumn clmn1 = new TableColumn ( tViewer . getTable ( ) , SWT . LEFT ) ; clmn1 . setText ( com . aptana . ide . search . Messages . AptanaFileSearchPage_Line ) ; TableColumn clmn2 = new TableColumn ( tViewer . getTable ( ) , SWT . LEFT ) ; clmn2 . setText ( com . aptana . ide . search . Messages . AptanaFileSearchPage_Source ) ; TableLayout tableLayout = new TableLayout ( ) ; tableLayout . addColumnData ( new ColumnWeightData ( 1 ) ) ; tableLayout . addColumnData ( new ColumnPixelData ( 50 ) ) ; tableLayout . addColumnData ( new ColumnWeightData ( 1 ) ) ; PreferenceUtils . persist ( Activator . getDefault ( ) . getPreferenceStore ( ) , tViewer . getTable ( ) , "tviewer" ) ; this . listener = new Listener ( ) { public void handleEvent ( Event event ) { if ( event . index == 2 ) { AptanaFileMatch aptanaFileMatch = ( ( AptanaFileMatch ) event . item . getData ( ) ) ; if ( aptanaFileMatch != null ) { event . gc . drawText ( aptanaFileMatch . getLineContent ( ) , event . x , event . y ) ; } } } } ; this . listener1 = new Listener ( ) { public void handleEvent ( Event event ) { if ( event . index == 2 ) { AptanaFileMatch aptanaFileMatch = ( ( AptanaFileMatch ) event . item . getData ( ) ) ; if ( aptanaFileMatch != null ) { event . width = AptanaFileSearchPage . this . metrics . convertWidthInCharsToPixels ( aptanaFileMatch . getLineContent ( ) . length ( ) ) ; } } } } ; tViewer . getTable ( ) . addListener ( SWT . PaintItem , this . listener ) ; tViewer . getTable ( ) . setLayout ( tableLayout ) ; IBaseLabelProvider labelProvider = tViewer . getLabelProvider ( ) ; labelProvider = new DecoratingFileSearchLabelProvider ( new FileLabelProvider ( this , FileLabelProvider . SHOW_LABEL_PATH ) ) ; tViewer . setLabelProvider ( labelProvider ) ; baseLabelProvider = ( DecoratingFileSearchLabelProvider ) labelProvider ; tViewer . setInput ( null ) ; tViewer . setLabelProvider ( new MatchesTableLabelProvider ( ) ) ; final IContentProvider contentProvider = tViewer . getContentProvider ( ) ; this . structuredContentProvider = new MatchesContentProvider ( this , contentProvider ) ; tViewer . setContentProvider ( this . structuredContentProvider ) ; tViewer . setInput ( this . getInput ( ) ) ; tViewer . getTable ( ) . getParent ( ) . layout ( true ) ; } protected void clear ( ) { StructuredViewer viewer = this . getViewer ( ) ; if ( this . layout == AptanaFileSearchPage . LAYOUT_MATCHES ) { viewer . getControl ( ) . setRedraw ( false ) ; viewer . getControl ( ) . removeListener ( SWT . PaintItem , this . listener ) ; viewer . getControl ( ) . removeListener ( SWT . MeasureItem , this . listener1 ) ; super . clear ( ) ; viewer . getControl ( ) . setRedraw ( true ) ; viewer . getControl ( ) . addListener ( SWT . PaintItem , this . listener ) ; viewer . getControl ( ) . addListener ( SWT . MeasureItem , this . listener1 ) ; } else { super . clear ( ) ; } } protected void elementsChanged ( Object [ ] objects ) { if ( this . layout != AptanaFileSearchPage . LAYOUT_MATCHES ) { super . elementsChanged ( objects ) ; } else { this . structuredContentProvider . elementsChanged ( objects ) ; } } protected void configureTreeViewer ( TreeViewer viewer ) { super . configureTreeViewer ( viewer ) ; FileTreeContentProvider provider2 = new FileTreeContentProvider ( this , viewer ) { } ; viewer . setContentProvider ( provider2 ) ; try { Field field = FileSearchPage . class . getDeclaredField ( "fContentProvider" ) ; field . setAccessible ( true ) ; field . set ( this , provider2 ) ; } catch ( Exception e ) { IdeLog . logError ( Activator . getDefault ( ) , "Error during conifguration using reflection" , e ) ; } final DecoratingFileSearchLabelProvider labelProvider = new DecoratingFileSearchLabelProvider ( new FileLabelProvider ( this , FileLabelProvider . SHOW_LABEL_PATH ) ) ; DecoratingLabelProvider decoratingLabelProvider = new DecoratingLabelProvider ( labelProvider , new AptanaExtraDecorator ( this ) ) { public void setLabelDecorator ( ILabelDecorator decorator ) { if ( decorator != null ) { AptanaFileSearchPage . this . turnOff = true ; } labelProvider . setLabelDecorator ( decorator ) ; AptanaFileSearchPage . this . turnOff = false ; } public void dispose ( ) { } } ; viewer . setInput ( getInput ( ) ) ; this . provider = ( ITreeContentProvider ) viewer . getContentProvider ( ) ; viewer . setLabelProvider ( decoratingLabelProvider ) ; } } 
=======
public class SoapDemo extends MIDlet implements CommandListener { private Display display ; Form mainForm = new Form ( "Hello World WebService" ) ; TextField nameField = new TextField ( "Your name" , "" , 456 , TextField . ANY ) ; Command getCommand = new Command ( "send" , Command . SCREEN , 1 ) ; public SoapDemo ( ) { mainForm . append ( nameField ) ; mainForm . addCommand ( getCommand ) ; mainForm . setCommandListener ( this ) ; } public void startApp ( ) { display = Display . getDisplay ( this ) ; display . setCurrent ( mainForm ) ; } public void pauseApp ( ) { } public void destroyApp ( boolean unconditional ) { } public void commandAction ( Command c , Displayable s ) { if ( c == getCommand ) { final TextBox t = new TextBox ( "" , "" , 256 , 0 ) ; Thread thr = new Thread ( ) { public void run ( ) { try { SoapObject client = new SoapObject ( "" , "getObject" ) ; client . addProperty ( "name" , nameField . getString ( ) ) ; SoapSerializationEnvelope envelope = new SoapSerializationEnvelope ( SoapEnvelope . VER11 ) ; envelope . bodyOut = client ; HttpTransport ht = new HttpTransport ( "http://localhost:8080/axis/services/AxisService" ) ; ht . call ( "" , envelope ) ; SoapObject ret = new SoapObject ( "http://ws.wessendorf.net" , "CustomObject" ) ; ret = ( SoapObject ) envelope . getResponse ( ) ; t . setString ( ret . getProperty ( 0 ) . toString ( ) ) ; } catch ( SoapFault sf ) { String faultString = "Code: " + sf . faultcode + "\nString: " + sf . faultstring ; t . setString ( faultString ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; t . setString ( e . getMessage ( ) ) ; } } } ; thr . start ( ) ; display . setCurrent ( t ) ; } else { destroyApp ( false ) ; notifyDestroyed ( ) ; } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
