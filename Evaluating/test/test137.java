abstract class MetaWeblogAPI implements IWeblogAPI { private static final Logger LOG = Logger . getLogger ( MetaWeblogAPI . class . getName ( ) ) ; protected static final String ERR_FAILED_TO_CONTACT = "Failed to connect to the blog API." ; protected static final String ERR_FAILED_CATEGORIES = "Failed to fetch categories." ; protected static final String ERR_FAILED_BLOGS = "Failed to fetch blogs." ; private final String system ; MetaWeblogAPI ( String system ) { this . system = system ; } public String validateBlog ( TargetBlog blog ) { if ( StringUtils . isEmpty ( blog . getApiURL ( ) ) ) { return Strings . message ( "ptb.prefs.details.setup.status.nourl" ) ; } String result ; String apiUser = blog . getUser ( ) ; String apiPassword = blog . getPassword ( ) ; String originalURL = blog . getApiURL ( ) ; String apiURL = StringUtils . fixURL ( originalURL ) ; if ( ! apiURL . equals ( originalURL ) ) blog . setApiURL ( apiURL ) ; try { URL url = new URL ( apiURL ) ; result = checkForURL ( url , apiUser , apiPassword ) ; if ( result != null ) { String suggestedURL = suggestURL ( url ) ; if ( suggestedURL != null ) { url = new URL ( suggestedURL ) ; result = checkForURL ( url , apiUser , apiPassword ) ; if ( result == null ) blog . setApiURL ( url . toString ( ) ) ; } } } catch ( MalformedURLException e ) { LOG . log ( Level . FINE , ERR_FAILED_CATEGORIES , e ) ; result = Strings . message ( "ptb.prefs.details.setup.status.badurl" ) ; } return result ; } String suggestURL ( URL url ) { String suggestion = null ; String defaultXMLRPCFile = getDefaultXMLRPCFile ( ) ; if ( defaultXMLRPCFile != null ) { String urlS = url . toString ( ) ; if ( ! urlS . endsWith ( "/" ) ) urlS += "/" ; suggestion = urlS + defaultXMLRPCFile ; } return suggestion ; } protected abstract String getDefaultXMLRPCFile ( ) ; private static String checkForURL ( URL apiURL , String apiUser , String apiPassword ) { String msg = null ; boolean detected ; try { XmlRpcClient cl = new XmlRpcClient ( apiURL ) ; Vector < String > params = new Vector < String > ( 3 ) ; params . add ( "0" ) ; params . add ( apiUser ) ; params . add ( apiPassword ) ; Object res = cl . execute ( "blogger.getUsersBlogs" , params ) ; detected = ( res instanceof List && ( ( List ) res ) . size ( ) > 0 ) ; } catch ( IOException e ) { LOG . log ( Level . FINE , ERR_FAILED_TO_CONTACT , e ) ; detected = false ; } catch ( XmlRpcException e ) { LOG . log ( Level . INFO , ERR_FAILED_TO_CONTACT , e ) ; msg = e . getMessage ( ) ; if ( StringUtils . isEmpty ( msg ) ) msg = null ; detected = false ; } return detected ? null : msg != null ? msg : Strings . message ( "ptb.prefs.details.setup.status.undetected" ) ; } public String toString ( ) { return system ; } public TargetBlog . Category [ ] getCategories ( TargetBlog blog ) { return getCategories ( blog , "metaWeblog.getCategories" ) ; } protected TargetBlog . Category [ ] getCategories ( TargetBlog blog , String apiCall ) { TargetBlog . Category [ ] categories = null ; URL url = getApiURL ( blog ) ; if ( url != null ) { XmlRpcClient cl = new XmlRpcClient ( url ) ; Vector < String > params = new Vector < String > ( 3 ) ; params . add ( getBlogID ( blog ) ) ; params . add ( blog . getUser ( ) ) ; params . add ( blog . getPassword ( ) ) ; try { Object res = cl . execute ( apiCall , params ) ; categories = res == null ? null : parseFetchedCategories ( res ) ; } catch ( IOException e ) { LOG . log ( Level . FINE , ERR_FAILED_CATEGORIES , e ) ; } catch ( XmlRpcException e ) { LOG . log ( Level . WARNING , ERR_FAILED_CATEGORIES , e ) ; } } return categories ; } protected TargetBlog . Category [ ] parseFetchedCategories ( Object res ) { List cats = ( List ) res ; TargetBlog . Category [ ] categories = new TargetBlog . Category [ cats . size ( ) ] ; for ( int i = 0 ; i < cats . size ( ) ; i ++ ) { Map category = ( Map ) cats . get ( i ) ; try { String id = ( String ) category . get ( "categoryId" ) ; String name = ( String ) category . get ( "categoryName" ) ; categories [ i ] = new TargetBlog . Category ( id , name ) ; } catch ( NumberFormatException e ) { LOG . log ( Level . WARNING , "Skipping category. Invalid ID format." , e ) ; } } return categories ; } public TargetBlog . Blog [ ] getBlogs ( TargetBlog blog ) { TargetBlog . Blog [ ] blogs = null ; URL url = getApiURL ( blog ) ; if ( url != null ) { XmlRpcClient cl = new XmlRpcClient ( url ) ; Vector < String > params = new Vector < String > ( 3 ) ; params . add ( getBlogID ( blog ) ) ; params . add ( blog . getUser ( ) ) ; params . add ( blog . getPassword ( ) ) ; try { List bs = ( List ) cl . execute ( "blogger.getUsersBlogs" , params ) ; if ( bs != null ) { blogs = new TargetBlog . Blog [ bs . size ( ) ] ; for ( int i = 0 ; i < bs . size ( ) ; i ++ ) { Map b = ( Map ) bs . get ( i ) ; try { String ids = ( String ) b . get ( "blogid" ) ; String name = ( String ) b . get ( "blogName" ) ; blogs [ i ] = new TargetBlog . Blog ( ids , name ) ; } catch ( NumberFormatException e ) { LOG . log ( Level . WARNING , "Skipping blog. Invalid ID format." , e ) ; } } } } catch ( IOException e ) { LOG . log ( Level . FINE , ERR_FAILED_BLOGS , e ) ; } catch ( XmlRpcException e ) { LOG . log ( Level . WARNING , ERR_FAILED_BLOGS , e ) ; } } return blogs ; } protected static String getBlogID ( TargetBlog prefs ) { TargetBlog . Blog blog = prefs . getBlog ( ) ; return blog != null ? blog . id : "0" ; } public void newPost ( TargetBlog prefs , WeblogPost post ) throws WeblogAPIException { newPost0 ( prefs , post ) ; } protected Object newPost0 ( TargetBlog prefs , WeblogPost post ) throws WeblogAPIException { Object res ; URL apiURL = getApiURL ( prefs ) ; if ( apiURL == null ) throw new WeblogAPIException ( "Blog is incorrectly configured." ) ; Map < String , Object > content = new Hashtable < String , Object > ( ) ; content . put ( "title" , post . title ) ; content . put ( "description" , post . description ) ; if ( post . sourceURL != null && StringUtils . isNotEmpty ( post . sourceTitle ) ) { content . put ( "source" , source ( post . sourceURL , post . sourceTitle ) ) ; } String [ ] catNames = null ; List < TargetBlog . Category > categories = post . categories ; if ( categories == null ) { TargetBlog . Category catdef = prefs . getDefaultCategory ( ) ; if ( catdef != null ) { catNames = new String [ ] { catdef . name } ; } } else { catNames = new String [ categories . size ( ) ] ; int i = 0 ; for ( TargetBlog . Category c : categories ) catNames [ i ++ ] = c . name ; } if ( catNames != null ) content . put ( "categories" , catNames ) ; content . put ( "mt_convert_breaks" , "0" ) ; if ( post . dateCreated != null ) { Calendar now = new GregorianCalendar ( ) ; Calendar local = new GregorianCalendar ( ) ; local . setTime ( post . dateCreated ) ; local . set ( Calendar . HOUR_OF_DAY , now . get ( Calendar . HOUR_OF_DAY ) ) ; local . set ( Calendar . MINUTE , now . get ( Calendar . MINUTE ) ) ; TimeZone tz = TimeZone . getDefault ( ) ; local . add ( Calendar . MILLISECOND , - ( tz . getRawOffset ( ) + tz . getDSTSavings ( ) ) ) ; content . put ( "date_created_gmt" , local . getTime ( ) ) ; content . put ( "dateCreated" , local . getTime ( ) ) ; } if ( StringUtils . isNotEmpty ( post . excerpt ) ) content . put ( "mt_excerpt" , post . excerpt . trim ( ) ) ; setSpecificContentFields ( content , post ) ; XmlRpcClient cl = new XmlRpcClient ( apiURL ) ; Vector < Object > params = new Vector < Object > ( 5 ) ; params . add ( getBlogID ( prefs ) ) ; params . add ( prefs . getUser ( ) ) ; params . add ( prefs . getPassword ( ) ) ; params . add ( content ) ; params . add ( post . publish ) ; try { res = cl . execute ( "metaWeblog.newPost" , params ) ; } catch ( Throwable e ) { throw new WeblogAPIException ( "Failed to create a post." , e ) ; } return res ; } protected void setSpecificContentFields ( Map < String , Object > content , WeblogPost post ) { content . put ( "mt_allow_comments" , post . allowComments ? "1" : "0" ) ; content . put ( "mt_allow_pings" , post . allowTrackbacks ? "1" : "0" ) ; } private static Map < String , String > source ( URL sourceURL , String sourceTitle ) { Map < String , String > source = new Hashtable < String , String > ( ) ; source . put ( "url" , sourceURL . toString ( ) ) ; source . put ( "name" , sourceTitle ) ; return source ; } protected static URL getApiURL ( TargetBlog prefs ) { URL url ; try { url = new URL ( prefs . getApiURL ( ) ) ; } catch ( MalformedURLException e ) { url = null ; } return url ; } public boolean isApiUrlApplicable ( ) { return true ; } } 