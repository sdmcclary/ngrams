class BrowserViewer extends Composite { public static final int LOCATION_BAR = 1 << 1 ; public static final int BUTTON_BAR = 1 << 2 ; protected static final String PROPERTY_TITLE = "title" ; private static final int MAX_HISTORY = 50 ; public Clipboard clipboard ; public Combo combo ; protected boolean showToolbar ; protected boolean showURLbar ; protected ToolItem back ; protected ToolItem forward ; protected BusyIndicator busy ; protected boolean loading ; protected static java . util . List history ; protected Browser browser ; protected boolean newWindow ; protected IBrowserViewerContainer container ; protected String title ; protected int progressWorked = 0 ; protected List propertyListeners ; public static interface ILocationListener { public void locationChanged ( String url ) ; public void historyChanged ( String [ ] history2 ) ; } public ILocationListener locationListener ; public static interface IBackNextListener { public void updateBackNextBusy ( ) ; } public IBackNextListener backNextListener ; public BrowserViewer ( Composite parent , int style ) { super ( parent , SWT . NONE ) ; if ( ( style & LOCATION_BAR ) != 0 ) showURLbar = true ; if ( ( style & BUTTON_BAR ) != 0 ) showToolbar = true ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; layout . horizontalSpacing = 0 ; layout . verticalSpacing = 0 ; layout . numColumns = 1 ; setLayout ( layout ) ; setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; clipboard = new Clipboard ( parent . getDisplay ( ) ) ; if ( showToolbar || showURLbar ) { Composite toolbarComp = new Composite ( this , SWT . NONE ) ; toolbarComp . setLayout ( new ToolbarLayout ( ) ) ; toolbarComp . setLayoutData ( new GridData ( GridData . VERTICAL_ALIGN_BEGINNING | GridData . FILL_HORIZONTAL ) ) ; if ( showToolbar ) createToolbar ( toolbarComp ) ; if ( showURLbar ) createLocationBar ( toolbarComp ) ; if ( showToolbar | showURLbar ) { busy = new BusyIndicator ( toolbarComp , SWT . NONE ) ; busy . setLayoutData ( new GridData ( GridData . HORIZONTAL_ALIGN_END ) ) ; busy . addMouseListener ( new MouseListener ( ) { public void mouseDoubleClick ( MouseEvent e ) { } public void mouseDown ( MouseEvent e ) { setURL ( "http://www.eclipse.org" ) ; } public void mouseUp ( MouseEvent e ) { } } ) ; } PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , ContextIds . WEB_BROWSER ) ; } try { this . browser = new Browser ( this , ( style & SWT . MOZILLA ) != 0 ? SWT . MOZILLA : SWT . NONE ) ; } catch ( SWTError e ) { if ( e . code != SWT . ERROR_NO_HANDLES ) { WebBrowserUtil . openError ( Messages . errorCouldNotLaunchInternalWebBrowser ) ; return ; } throw e ; } if ( showURLbar ) updateHistory ( ) ; if ( showToolbar ) updateBackNextBusy ( ) ; if ( browser != null ) { browser . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( browser , ContextIds . WEB_BROWSER ) ; } addBrowserListeners ( ) ; } public Browser getBrowser ( ) { return browser ; } public void home ( ) { browser . setText ( "" ) ; } public void setURL ( String url ) { setURL ( url , true ) ; } protected void updateBackNextBusy ( ) { back . setEnabled ( isBackEnabled ( ) ) ; forward . setEnabled ( isForwardEnabled ( ) ) ; busy . setBusy ( loading ) ; if ( backNextListener != null ) backNextListener . updateBackNextBusy ( ) ; } protected void updateLocation ( ) { if ( locationListener != null ) locationListener . historyChanged ( null ) ; if ( locationListener != null ) locationListener . locationChanged ( null ) ; } private void addBrowserListeners ( ) { if ( browser == null ) return ; browser . addStatusTextListener ( new StatusTextListener ( ) { public void changed ( StatusTextEvent event ) { if ( container != null ) { IStatusLineManager status = container . getActionBars ( ) . getStatusLineManager ( ) ; status . setMessage ( event . text ) ; } } } ) ; browser . addOpenWindowListener ( new OpenWindowListener ( ) { public void open ( WindowEvent event ) { Shell shell2 = new Shell ( getShell ( ) , SWT . SHELL_TRIM ) ; shell2 . setLayout ( new FillLayout ( ) ) ; shell2 . setText ( Messages . viewWebBrowserTitle ) ; shell2 . setImage ( getShell ( ) . getImage ( ) ) ; if ( event . location != null ) shell2 . setLocation ( event . location ) ; if ( event . size != null ) shell2 . setSize ( event . size ) ; int style = 0 ; if ( event . addressBar ) style += LOCATION_BAR ; if ( event . toolBar ) style += BUTTON_BAR ; BrowserViewer browser2 = new BrowserViewer ( shell2 , 0 ) ; browser2 . newWindow = true ; event . browser = browser2 . browser ; } } ) ; browser . addVisibilityWindowListener ( new VisibilityWindowListener ( ) { public void hide ( WindowEvent e ) { } public void show ( WindowEvent e ) { Browser browser2 = ( Browser ) e . widget ; if ( browser2 . getParent ( ) . getParent ( ) instanceof Shell ) { Shell shell = ( Shell ) browser2 . getParent ( ) . getParent ( ) ; if ( e . location != null ) shell . setLocation ( e . location ) ; if ( e . size != null ) shell . setSize ( shell . computeSize ( e . size . x , e . size . y ) ) ; shell . open ( ) ; } } } ) ; browser . addCloseWindowListener ( new CloseWindowListener ( ) { public void close ( WindowEvent event ) { if ( newWindow ) getShell ( ) . dispose ( ) ; else container . close ( ) ; } } ) ; browser . addProgressListener ( new ProgressListener ( ) { public void changed ( ProgressEvent event ) { if ( event . total == 0 ) return ; boolean done = ( event . current == event . total ) ; int percentProgress = event . current * 100 / event . total ; if ( container != null ) { IProgressMonitor monitor = container . getActionBars ( ) . getStatusLineManager ( ) . getProgressMonitor ( ) ; if ( done ) { monitor . done ( ) ; progressWorked = 0 ; } else if ( progressWorked == 0 ) { monitor . beginTask ( "" , event . total ) ; progressWorked = percentProgress ; } else { monitor . worked ( event . current - progressWorked ) ; progressWorked = event . current ; } } if ( showToolbar ) { if ( ! busy . isBusy ( ) && ! done ) loading = true ; else if ( busy . isBusy ( ) && done ) loading = false ; updateBackNextBusy ( ) ; updateHistory ( ) ; } } public void completed ( ProgressEvent event ) { if ( container != null ) { IProgressMonitor monitor = container . getActionBars ( ) . getStatusLineManager ( ) . getProgressMonitor ( ) ; monitor . done ( ) ; } if ( showToolbar ) { loading = false ; updateBackNextBusy ( ) ; updateHistory ( ) ; } } } ) ; if ( showToolbar ) { browser . addLocationListener ( new LocationListener ( ) { public void changed ( LocationEvent event ) { if ( ! event . top ) return ; if ( combo != null ) { if ( ! "about:blank" . equals ( event . location ) ) { combo . setText ( event . location ) ; addToHistory ( event . location ) ; updateHistory ( ) ; } } } public void changing ( LocationEvent event ) { } } ) ; } browser . addTitleListener ( new TitleListener ( ) { public void changed ( TitleEvent event ) { String oldTitle = title ; title = event . title ; firePropertyChangeEvent ( PROPERTY_TITLE , oldTitle , title ) ; } } ) ; } public void addPropertyChangeListener ( PropertyChangeListener listener ) { if ( propertyListeners == null ) propertyListeners = new ArrayList ( ) ; propertyListeners . add ( listener ) ; } public void removePropertyChangeListener ( PropertyChangeListener listener ) { if ( propertyListeners != null ) propertyListeners . remove ( listener ) ; } protected void firePropertyChangeEvent ( String propertyName , Object oldValue , Object newValue ) { if ( propertyListeners == null ) return ; PropertyChangeEvent event = new PropertyChangeEvent ( this , propertyName , oldValue , newValue ) ; try { int size = propertyListeners . size ( ) ; PropertyChangeListener [ ] pcl = new PropertyChangeListener [ size ] ; propertyListeners . toArray ( pcl ) ; for ( int i = 0 ; i < size ; i ++ ) try { pcl [ i ] . propertyChange ( event ) ; } catch ( Exception e ) { } } catch ( Exception e ) { } } public boolean forward ( ) { if ( browser == null ) return false ; return browser . forward ( ) ; } public boolean back ( ) { if ( browser == null ) return false ; return browser . back ( ) ; } public boolean isBackEnabled ( ) { if ( browser == null ) return false ; return browser . isBackEnabled ( ) ; } public boolean isForwardEnabled ( ) { if ( browser == null ) return false ; return browser . isForwardEnabled ( ) ; } public void stop ( ) { if ( browser != null ) browser . stop ( ) ; } private boolean navigate ( String url ) { Trace . trace ( Trace . FINER , "Navigate: " + url ) ; if ( url != null && url . equals ( getURL ( ) ) ) { refresh ( ) ; return true ; } if ( browser != null ) return browser . setUrl ( url ) ; return false ; } public void refresh ( ) { if ( browser != null ) browser . refresh ( ) ; try { Thread . sleep ( 50 ) ; } catch ( Exception e ) { } } private void setURL ( String url , boolean browse ) { Trace . trace ( Trace . FINEST , "setURL: " + url + " " + browse ) ; if ( url == null ) { home ( ) ; return ; } if ( "eclipse" . equalsIgnoreCase ( url ) ) url = "http://www.eclipse.org" ; else if ( "wtp" . equalsIgnoreCase ( url ) ) url = "http://www.eclipse.org/webtools/" ; if ( browse ) navigate ( url ) ; addToHistory ( url ) ; updateHistory ( ) ; } protected void addToHistory ( String url ) { if ( history == null ) history = WebBrowserPreference . getInternalWebBrowserHistory ( ) ; int found = - 1 ; int size = history . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { String s = ( String ) history . get ( i ) ; if ( s . equals ( url ) ) { found = i ; break ; } } if ( found == - 1 ) { if ( size >= MAX_HISTORY ) history . remove ( size - 1 ) ; history . add ( 0 , url ) ; WebBrowserPreference . setInternalWebBrowserHistory ( history ) ; } else if ( found != 0 ) { history . remove ( found ) ; history . add ( 0 , url ) ; WebBrowserPreference . setInternalWebBrowserHistory ( history ) ; } } public void dispose ( ) { super . dispose ( ) ; showToolbar = false ; if ( busy != null ) busy . dispose ( ) ; busy = null ; browser = null ; if ( clipboard != null ) clipboard . dispose ( ) ; clipboard = null ; removeSynchronizationListener ( ) ; } private ToolBar createLocationBar ( Composite parent ) { combo = new Combo ( parent , SWT . DROP_DOWN ) ; updateHistory ( ) ; combo . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent we ) { try { if ( combo . getSelectionIndex ( ) != - 1 ) { setURL ( combo . getItem ( combo . getSelectionIndex ( ) ) ) ; } } catch ( Exception e ) { } } } ) ; combo . addListener ( SWT . DefaultSelection , new Listener ( ) { public void handleEvent ( Event e ) { setURL ( combo . getText ( ) ) ; } } ) ; ToolBar toolbar = new ToolBar ( parent , SWT . FLAT ) ; ToolItem go = new ToolItem ( toolbar , SWT . NONE ) ; go . setImage ( ImageResource . getImage ( ImageResource . IMG_ELCL_NAV_GO ) ) ; go . setHotImage ( ImageResource . getImage ( ImageResource . IMG_CLCL_NAV_GO ) ) ; go . setDisabledImage ( ImageResource . getImage ( ImageResource . IMG_DLCL_NAV_GO ) ) ; go . setToolTipText ( Messages . actionWebBrowserGo ) ; go . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { setURL ( combo . getText ( ) ) ; } } ) ; return toolbar ; } private ToolBar createToolbar ( Composite parent ) { ToolBar toolbar = new ToolBar ( parent , SWT . FLAT ) ; back = new ToolItem ( toolbar , SWT . NONE ) ; back . setImage ( ImageResource . getImage ( ImageResource . IMG_ELCL_NAV_BACKWARD ) ) ; back . setHotImage ( ImageResource . getImage ( ImageResource . IMG_CLCL_NAV_BACKWARD ) ) ; back . setDisabledImage ( ImageResource . getImage ( ImageResource . IMG_DLCL_NAV_BACKWARD ) ) ; back . setToolTipText ( Messages . actionWebBrowserBack ) ; back . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { back ( ) ; } } ) ; forward = new ToolItem ( toolbar , SWT . NONE ) ; forward . setImage ( ImageResource . getImage ( ImageResource . IMG_ELCL_NAV_FORWARD ) ) ; forward . setHotImage ( ImageResource . getImage ( ImageResource . IMG_CLCL_NAV_FORWARD ) ) ; forward . setDisabledImage ( ImageResource . getImage ( ImageResource . IMG_DLCL_NAV_FORWARD ) ) ; forward . setToolTipText ( Messages . actionWebBrowserForward ) ; forward . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { forward ( ) ; } } ) ; ToolItem stop = new ToolItem ( toolbar , SWT . NONE ) ; stop . setImage ( ImageResource . getImage ( ImageResource . IMG_ELCL_NAV_STOP ) ) ; stop . setHotImage ( ImageResource . getImage ( ImageResource . IMG_CLCL_NAV_STOP ) ) ; stop . setDisabledImage ( ImageResource . getImage ( ImageResource . IMG_DLCL_NAV_STOP ) ) ; stop . setToolTipText ( Messages . actionWebBrowserStop ) ; stop . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { stop ( ) ; } } ) ; ToolItem refresh = new ToolItem ( toolbar , SWT . NONE ) ; refresh . setImage ( ImageResource . getImage ( ImageResource . IMG_ELCL_NAV_REFRESH ) ) ; refresh . setHotImage ( ImageResource . getImage ( ImageResource . IMG_CLCL_NAV_REFRESH ) ) ; refresh . setDisabledImage ( ImageResource . getImage ( ImageResource . IMG_DLCL_NAV_REFRESH ) ) ; refresh . setToolTipText ( Messages . actionWebBrowserRefresh ) ; refresh . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent event ) { refresh ( ) ; } } ) ; return toolbar ; } public String getURL ( ) { if ( browser != null ) return browser . getUrl ( ) ; return null ; } public boolean setFocus ( ) { if ( browser != null ) { browser . setFocus ( ) ; updateHistory ( ) ; return true ; } return super . setFocus ( ) ; } protected void updateHistory ( ) { if ( combo == null ) return ; String temp = combo . getText ( ) ; if ( history == null ) history = WebBrowserPreference . getInternalWebBrowserHistory ( ) ; String [ ] historyList = new String [ history . size ( ) ] ; history . toArray ( historyList ) ; combo . setItems ( historyList ) ; combo . setText ( temp ) ; } public IBrowserViewerContainer getContainer ( ) { return container ; } public void setContainer ( IBrowserViewerContainer container ) { if ( container == null && this . container != null ) { IStatusLineManager manager = this . container . getActionBars ( ) . getStatusLineManager ( ) ; if ( manager != null ) manager . getProgressMonitor ( ) . done ( ) ; } this . container = container ; } protected File file ; protected long timestamp ; protected Thread fileListenerThread ; protected LocationListener locationListener2 ; protected Object syncObject = new Object ( ) ; protected void addSynchronizationListener ( ) { if ( fileListenerThread != null ) return ; fileListenerThread = new Thread ( "Browser file synchronization" ) { public void run ( ) { while ( fileListenerThread != null ) { try { Thread . sleep ( 2000 ) ; } catch ( Exception e ) { } synchronized ( syncObject ) { if ( file != null && file . lastModified ( ) != timestamp ) { timestamp = file . lastModified ( ) ; Display . getDefault ( ) . syncExec ( new Runnable ( ) { public void run ( ) { refresh ( ) ; } } ) ; } } } } } ; fileListenerThread . setDaemon ( true ) ; fileListenerThread . setPriority ( Thread . MIN_PRIORITY ) ; locationListener2 = new LocationListener ( ) { public void changed ( LocationEvent event ) { File temp = getFile ( event . location ) ; if ( temp != null && temp . exists ( ) ) { synchronized ( syncObject ) { file = temp ; timestamp = file . lastModified ( ) ; } } else file = null ; } public void changing ( LocationEvent event ) { } } ; browser . addLocationListener ( locationListener2 ) ; File temp = getFile ( browser . getUrl ( ) ) ; if ( temp != null && temp . exists ( ) ) { file = temp ; timestamp = file . lastModified ( ) ; } fileListenerThread . start ( ) ; } protected static File getFile ( String location ) { if ( location == null ) return null ; if ( location . startsWith ( "file:/" ) ) location = location . substring ( 6 ) ; return new File ( location ) ; } protected void removeSynchronizationListener ( ) { if ( fileListenerThread == null ) return ; fileListenerThread = null ; browser . removeLocationListener ( locationListener2 ) ; locationListener2 = null ; } } 