<<<<<<< HEAD
public class UnifiedOutlinePage extends ContentOutlinePage implements ISelectionChangedListener , IUnifiedOutlinePage { private static final class OpenExternalAction extends Action { IResolvableItem item ; String editorId ; OpenExternalAction ( IResolvableItem item ) { IEditorDescriptor editorDescriptor ; try { editorDescriptor = IDE . getEditorDescriptor ( item . getEditorInput ( ) . getName ( ) ) ; editorId = editorDescriptor . getId ( ) ; this . setImageDescriptor ( editorDescriptor . getImageDescriptor ( ) ) ; } catch ( PartInitException e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , e . getMessage ( ) ) ; } this . item = item ; this . setToolTipText ( Messages . UnifiedOutlinePage_Open ) ; } public void run ( ) { IEditorInput input = item . getEditorInput ( ) ; IWorkbenchPage activePage = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; try { IEditorPart openEditor = IDE . openEditor ( activePage , input , editorId ) ; if ( openEditor instanceof ITextEditor ) { ITextEditor ed = ( ITextEditor ) openEditor ; if ( item instanceof IRange ) { int position = ( ( IRange ) item ) . getStartingOffset ( ) ; ed . selectAndReveal ( position , 0 ) ; return ; } if ( item instanceof OutlineItem ) { int position = ( ( OutlineItem ) item ) . getStartingOffset ( ) ; ed . selectAndReveal ( position , 0 ) ; return ; } } return ; } catch ( PartInitException e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , e . getMessage ( ) ) ; return ; } } } private Composite _composite ; private SashForm _outlineSash ; private SashForm _outlineTabsSash ; private CTabFolder _outlineTabs ; private UnifiedEditor _editor ; private PatternFilter _filter ; private TreeViewer _treeViewer ; private boolean _hide ; private ActionContributionItem _sortItem ; private ActionContributionItem _collapseItem ; private ActionContributionItem _expandItem ; private ActionContributionItem _hidePrivateItem ; private ActionContributionItem _splitItem ; private HidePrivateAction _hidePrivateAction ; private Map < String , ContributedOutline > _outlines ; private UnifiedOutlineProvider outlineProvider ; private BaseFilter [ ] _filters ; private IActionBars _actionBars ; private ActionContributionItem openAction ; public UnifiedOutlinePage ( UnifiedEditor editor ) { this . _editor = editor ; editor . getViewer ( ) . getTextWidget ( ) . addFocusListener ( new FocusAdapter ( ) { public void focusGained ( FocusEvent e ) { if ( outlineProvider != null ) { outlineProvider . pageActivated ( UnifiedOutlinePage . this ) ; } } } ) ; editor . getViewer ( ) . getTextWidget ( ) . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { if ( outlineProvider != null ) { outlineProvider . pageClosed ( UnifiedOutlinePage . this ) ; } } } ) ; this . _outlines = new HashMap < String , ContributedOutline > ( ) ; } public void addOutline ( ContributedOutline outline , String name ) { this . _outlines . put ( name , outline ) ; } private Composite createComposite ( Composite parent ) { GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; Composite result = new Composite ( parent , SWT . NONE ) ; result . setLayout ( contentAreaLayout ) ; result . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; return result ; } private void createContributedOutlines ( CTabFolder outlineTabs , SashForm outlineSash ) { Iterator < String > iter = this . _outlines . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = iter . next ( ) ; ContributedOutline outline = this . _outlines . get ( key ) ; CTabItem tab = new CTabItem ( outlineTabs , SWT . NONE ) ; Composite previewComp = new Composite ( outlineSash , SWT . NONE ) ; GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = true ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; previewComp . setLayout ( contentAreaLayout ) ; previewComp . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label outlineLabel = new Label ( previewComp , SWT . NONE ) ; outlineLabel . setText ( key ) ; outlineLabel . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; tab . setText ( key ) ; SashForm preForm = new SashForm ( outlineTabs , SWT . NONE ) ; contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; preForm . setLayout ( contentAreaLayout ) ; preForm . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; outline . createControl ( preForm ) ; tab . setControl ( preForm ) ; } } public void createControl ( Composite parent ) { this . _composite = createComposite ( parent ) ; createFilters ( this . _composite ) ; this . _outlineSash = this . createSash ( this . _composite ) ; this . createSourceSash ( this . _outlineSash ) ; this . _outlineTabsSash = this . createOutlineTabs ( this . _composite ) ; this . _filter = new PatternFilter ( ) { protected boolean isLeafMatch ( Viewer viewer , Object element ) { boolean result = true ; String label = null ; if ( element instanceof OutlineItem ) { label = ( ( OutlineItem ) element ) . getLabel ( ) ; } else if ( element instanceof IParseNode ) { label = UnifiedOutlineProvider . getInstance ( ) . getText ( element ) ; } if ( label != null ) { result = this . wordMatches ( label ) ; } return result ; } } ; this . _filter . setIncludeLeadingWildcard ( true ) ; this . _treeViewer = this . createTreeViewer ( this . _outlineTabsSash , this . _filter ) ; this . _treeViewer . addFilter ( new UnifiedViewerFilter ( this ) ) ; for ( BaseFilter filter : this . _filters ) { this . _treeViewer . addFilter ( filter ) ; } this . _treeViewer . addSelectionChangedListener ( this ) ; this . updateProviders ( ) ; this . refresh ( ) ; } private void createFilters ( Composite result ) { ToolBar toolBar = new ToolBar ( result , SWT . HORIZONTAL ) ; toolBar . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , false ) ) ; List < BaseFilter > filters = new ArrayList < BaseFilter > ( ) ; EditorFileContext fileContext = this . _editor . getFileContext ( ) ; String language = fileContext . getDefaultLanguage ( ) ; for ( FilterActionInfo filterInfo : UnifiedOutlineProvider . getInstance ( ) . getFilterActionInfos ( language ) ) { final BaseFilter filter = filterInfo . getFilter ( ) ; ToolItem item = new ToolItem ( toolBar , SWT . CHECK ) ; filters . add ( filter ) ; item . setImage ( filterInfo . getImageDescriptor ( ) . createImage ( ) ) ; item . setToolTipText ( filterInfo . getToolTip ( ) ) ; item . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { ToolItem item = ( ToolItem ) e . widget ; filter . setActive ( item . getSelection ( ) ) ; _treeViewer . refresh ( true ) ; } } ) ; } this . _filters = filters . toArray ( new BaseFilter [ filters . size ( ) ] ) ; } private SashForm createOutlineTabs ( Composite parent ) { this . _outlineTabs = new CTabFolder ( parent , SWT . BOTTOM ) ; this . _outlineTabs . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; SashForm sourceForm = new SashForm ( this . _outlineTabs , SWT . NONE ) ; sourceForm . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; CTabItem sourceTab = new CTabItem ( this . _outlineTabs , SWT . NONE ) ; sourceTab . setText ( Messages . UnifiedOutlinePage_Source ) ; sourceTab . setControl ( sourceForm ) ; this . _outlineTabs . setSelection ( sourceTab ) ; this . createContributedOutlines ( this . _outlineTabs , this . _outlineSash ) ; return sourceForm ; } private SashForm createSash ( Composite parent ) { GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; GridData gridData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; gridData . exclude = true ; SashForm result = new SashForm ( parent , SWT . VERTICAL ) ; result . setLayoutData ( gridData ) ; result . setLayout ( contentAreaLayout ) ; result . setVisible ( false ) ; return result ; } private void createSourceSash ( Composite parent ) { Composite previewComp = new Composite ( parent , SWT . NONE ) ; GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; previewComp . setLayout ( contentAreaLayout ) ; previewComp . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label outlineLabel = new Label ( previewComp , SWT . NONE ) ; outlineLabel . setText ( Messages . UnifiedOutlinePage_Source ) ; outlineLabel . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; } private TreeViewer createTreeViewer ( Composite parent , PatternFilter filter ) { FilteredTree tree = null ; try { Constructor < FilteredTree > cons = FilteredTree . class . getConstructor ( Composite . class , int . class , PatternFilter . class , boolean . class ) ; tree = cons . newInstance ( parent , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL , filter , true ) ; } catch ( Exception e ) { tree = new FilteredTree ( parent , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL , filter ) ; } TreeViewer result = tree . getViewer ( ) ; outlineProvider = UnifiedOutlineProvider . getInstance ( ) ; outlineProvider . setOutlinePage ( this ) ; result . setLabelProvider ( outlineProvider ) ; result . setContentProvider ( outlineProvider ) ; result . setInput ( this . _editor ) ; result . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { IStructuredSelection selection = ( IStructuredSelection ) event . getSelection ( ) ; if ( selection . size ( ) == 1 ) { Object item = selection . getFirstElement ( ) ; if ( item != null && item instanceof OutlineItem ) { OutlineItem outlineItem = ( OutlineItem ) selection . getFirstElement ( ) ; if ( _treeViewer != null && _treeViewer . getTree ( ) != null && ! _treeViewer . getTree ( ) . isDisposed ( ) && _treeViewer . getTree ( ) . isFocusControl ( ) ) { _editor . selectAndReveal ( outlineItem . getStartingOffset ( ) , 0 ) ; } } } } } ) ; result . setComparer ( new IElementComparer ( ) { public boolean equals ( Object a , Object b ) { boolean result = false ; if ( a instanceof OutlineItem && b instanceof OutlineItem ) { OutlineItem item1 = ( OutlineItem ) a ; OutlineItem item2 = ( OutlineItem ) b ; result = item1 . equals ( item2 ) ; } else if ( a instanceof IParseNode && b instanceof IParseNode ) { if ( a == b ) { result = true ; } else { IParseNode node1 = ( IParseNode ) a ; IParseNode node2 = ( IParseNode ) b ; String path1 = node1 . getUniquePath ( ) ; String path2 = node2 . getUniquePath ( ) ; result = path1 . equals ( path2 ) ; } } else { result = ( a == b ) ; } return result ; } public int hashCode ( Object element ) { return 0 ; } } ) ; return result ; } public void dispose ( ) { super . dispose ( ) ; } public Map < String , ContributedOutline > getContributedOutlines ( ) { return this . _outlines ; } public Control getControl ( ) { return this . _composite ; } public SashForm getOutlineSash ( ) { return this . _outlineSash ; } public CTabFolder getOutlineTabs ( ) { return this . _outlineTabs ; } public TreeViewer getTreeViewer ( ) { return this . _treeViewer ; } public UnifiedEditor getUnifiedEditor ( ) { return this . _editor ; } public boolean hidePrivateMembers ( ) { return this . _hide ; } public void refresh ( ) { if ( ! _treeViewer . getControl ( ) . isDisposed ( ) ) { this . _treeViewer . refresh ( ) ; } } private void removeOpenActionIfNeeded ( ) { if ( this . openAction != null ) { _actionBars . getToolBarManager ( ) . remove ( openAction ) ; openAction = null ; _actionBars . getToolBarManager ( ) . update ( false ) ; } } public void selectionChanged ( SelectionChangedEvent event ) { IStructuredSelection selection = ( IStructuredSelection ) event . getSelection ( ) ; if ( selection . size ( ) == 1 ) { Object element = selection . getFirstElement ( ) ; if ( element instanceof IResolvableItem ) { IResolvableItem item = ( IResolvableItem ) element ; if ( item . isResolvable ( ) ) { if ( openAction != null ) { _actionBars . getToolBarManager ( ) . remove ( openAction ) ; } openAction = new ActionContributionItem ( new OpenExternalAction ( item ) ) ; _actionBars . getToolBarManager ( ) . add ( openAction ) ; _actionBars . getToolBarManager ( ) . update ( false ) ; while ( ! item . stillHighlight ( ) ) { item = item . getParentItem ( ) ; if ( item == null ) { return ; } } if ( item instanceof IParseNode ) { int position = ( ( IParseNode ) item ) . getStartingOffset ( ) ; this . _editor . selectAndReveal ( position , 0 ) ; return ; } } else { removeOpenActionIfNeeded ( ) ; } } removeOpenActionIfNeeded ( ) ; if ( element instanceof IRange ) { int position = ( ( IRange ) element ) . getStartingOffset ( ) ; this . _editor . selectAndReveal ( position , 0 ) ; } } else { removeOpenActionIfNeeded ( ) ; this . _editor . getViewer ( ) . removeRangeIndication ( ) ; } } public void setActionBars ( IActionBars actionBars ) { if ( this . _outlines . size ( ) > 0 ) { SplitOutlinesAction splitAction = new SplitOutlinesAction ( this ) ; splitAction . setEnabled ( this . _composite . isReparentable ( ) ) ; this . _splitItem = new ActionContributionItem ( splitAction ) ; actionBars . getToolBarManager ( ) . add ( this . _splitItem ) ; } this . _actionBars = actionBars ; SortAction sortAction = new SortAction ( this ) ; IPreferenceStore store = UnifiedEditorsPlugin . getDefault ( ) . getPreferenceStore ( ) ; boolean sort = store . getBoolean ( IPreferenceConstants . SORT_OUTLINE_ALPHABETICALLY ) ; sortAction . setChecked ( sort ) ; if ( sort ) { getTreeViewer ( ) . setSorter ( SortAction . SORTER ) ; } this . _sortItem = new ActionContributionItem ( sortAction ) ; actionBars . getToolBarManager ( ) . add ( this . _sortItem ) ; this . _hidePrivateAction = new HidePrivateAction ( this ) ; this . _hidePrivateItem = new ActionContributionItem ( this . _hidePrivateAction ) ; actionBars . getToolBarManager ( ) . add ( this . _hidePrivateItem ) ; CollapseAction collapseAction = new CollapseAction ( this ) ; this . _collapseItem = new ActionContributionItem ( collapseAction ) ; actionBars . getToolBarManager ( ) . add ( this . _collapseItem ) ; Action expandAction = new Action ( Messages . UnifiedOutlinePage_ExpandAll ) { public void run ( ) { getTreeViewer ( ) . expandAll ( ) ; } } ; expandAction . setImageDescriptor ( UnifiedEditorsPlugin . getImageDescriptor ( "icons/expandall.gif" ) ) ; expandAction . setToolTipText ( Messages . UnifiedOutlinePage_CollapseAll ) ; this . _expandItem = new ActionContributionItem ( expandAction ) ; actionBars . getToolBarManager ( ) . add ( this . _expandItem ) ; super . setActionBars ( actionBars ) ; } public void contributeToQuickOutlineMenu ( IMenuManager manager ) { if ( this . _outlines . size ( ) > 0 ) { SplitOutlinesAction splitAction = new SplitOutlinesAction ( this ) ; splitAction . setEnabled ( this . _composite . isReparentable ( ) ) ; this . _splitItem = new ActionContributionItem ( splitAction ) ; manager . add ( this . _splitItem ) ; } SortAction sortAction = new SortAction ( this ) ; IPreferenceStore store = UnifiedEditorsPlugin . getDefault ( ) . getPreferenceStore ( ) ; boolean sort = store . getBoolean ( IPreferenceConstants . SORT_OUTLINE_ALPHABETICALLY ) ; sortAction . setChecked ( sort ) ; if ( sort ) { getTreeViewer ( ) . setSorter ( SortAction . SORTER ) ; } this . _sortItem = new ActionContributionItem ( sortAction ) ; manager . add ( this . _sortItem ) ; this . _hidePrivateAction = new HidePrivateAction ( this ) ; this . _hidePrivateItem = new ActionContributionItem ( this . _hidePrivateAction ) ; manager . add ( this . _hidePrivateItem ) ; CollapseAction collapseAction = new CollapseAction ( this ) ; this . _collapseItem = new ActionContributionItem ( collapseAction ) ; manager . add ( this . _collapseItem ) ; Action expandAction = new Action ( Messages . UnifiedOutlinePage_ExpandAll ) { public void run ( ) { getTreeViewer ( ) . expandAll ( ) ; } } ; expandAction . setImageDescriptor ( UnifiedEditorsPlugin . getImageDescriptor ( "icons/expandall.gif" ) ) ; expandAction . setToolTipText ( Messages . UnifiedOutlinePage_CollapseAll ) ; this . _expandItem = new ActionContributionItem ( expandAction ) ; manager . add ( this . _expandItem ) ; } public void setFocus ( ) { this . _treeViewer . getControl ( ) . setFocus ( ) ; } public void togglePrivateMemberVisibility ( ) { this . _hide = ( this . _hide == false ) ; this . refresh ( ) ; } private void updateProviders ( ) { EditorFileContext fileContext = _editor . getFileContext ( ) ; if ( fileContext != null ) { UnifiedOutlineProvider provider = UnifiedOutlineProvider . getInstance ( ) ; provider . setCurrentLanguage ( fileContext . getDefaultLanguage ( ) ) ; provider . fireBeforeRefreshEvent ( fileContext ) ; } } } 
=======
public abstract class HttpMessage { protected Map < String , String > headers ; public abstract String firstLine ( ) ; protected byte [ ] body ; protected String httpVersion ; public HttpMessage ( ) { super ( ) ; } public Map < String , String > getHeaders ( ) { return headers ; } public void setHeaders ( Map < String , String > headers ) { this . headers = headers ; } public void setHeader ( String key , String value ) { if ( this . headers == null ) { this . headers = new HashMap < String , String > ( ) ; } this . headers . put ( key , value ) ; } public String getHeader ( String headerName ) { return getHeader ( headerName , null ) ; } public String getHeader ( String headerName , String defaultValue ) { if ( headers != null ) { String lcHeader = headerName . toLowerCase ( ) ; if ( headers . containsKey ( lcHeader ) ) { return headers . get ( lcHeader ) ; } } return defaultValue ; } public byte [ ] getBody ( ) { return body ; } public void setBody ( byte [ ] body ) { this . body = body ; } public void setBody ( String body ) { try { setBody ( body . getBytes ( "UTF-8" ) ) ; } catch ( UnsupportedEncodingException uee ) { throw new RuntimeException ( uee ) ; } } public String toString ( ) { return this . getClass ( ) . getName ( ) + "(" + this . firstLine ( ) . trim ( ) + ")" ; } public String getHttpVersion ( ) { return httpVersion ; } public void setHttpVersion ( String httpVersion ) { this . httpVersion = httpVersion ; } protected String checkHttpVersion ( String v ) throws IOException { if ( v . startsWith ( "HTTP/" ) ) { return v . substring ( 5 ) ; } else { throw new IOException ( "Invalid http version string: " + v ) ; } } public void writeOn ( OutputStream o ) throws IOException { BufferedWriter w = new BufferedWriter ( new OutputStreamWriter ( o ) ) ; w . write ( this . firstLine ( ) ) ; if ( headers != null ) { for ( Entry < String , String > entry : headers . entrySet ( ) ) { w . write ( entry . getKey ( ) + ": " + entry . getValue ( ) + "\r\n" ) ; } } w . write ( "\r\n" ) ; w . flush ( ) ; if ( body != null ) { o . write ( body ) ; } } protected abstract void readFirstLine ( PushbackInputStream r ) throws IOException ; public boolean readFrom ( InputStream s ) { PushbackInputStream r = new PushbackInputStream ( s ) ; try { readFirstLine ( r ) ; readHeaders ( r ) ; return readBody ( s ) ; } catch ( NumberFormatException nfe ) { return false ; } catch ( IOException ioe ) { return false ; } } protected boolean readBody ( InputStream s ) throws IOException { if ( headers != null && headers . containsKey ( "content-length" ) ) { int contentLength = Integer . parseInt ( ( String ) headers . get ( "content-length" ) ) ; body = new byte [ contentLength ] ; int readCount = 0 ; int remaining = contentLength ; while ( readCount < contentLength ) { int n = s . read ( body , readCount , remaining ) ; if ( n == - 1 ) return false ; readCount += n ; remaining -= n ; } } return true ; } protected void readHeaders ( PushbackInputStream r ) throws IOException { headers = null ; while ( true ) { if ( consumeEol ( r ) ) { break ; } String key = readUpTo ( r , ':' ) ; String value = readUpToEol ( r ) ; setHeader ( key . trim ( ) . toLowerCase ( ) , value . trim ( ) ) ; } } protected boolean consumeEol ( PushbackInputStream r ) throws IOException { int ch = r . read ( ) ; if ( ch == - 1 ) { return false ; } if ( ch == '\r' ) { ch = r . read ( ) ; if ( ch != - 1 && ch != '\n' ) { r . unread ( ch ) ; } return true ; } if ( ch == '\n' ) { return true ; } r . unread ( ch ) ; return false ; } protected String readUpTo ( PushbackInputStream r , char separator ) throws IOException { StringBuffer buf = new StringBuffer ( ) ; while ( true ) { int ch = r . read ( ) ; if ( ch == - 1 || ch == separator ) { return buf . toString ( ) ; } if ( ch == '\r' || ch == '\n' ) { throw new IOException ( "Unexpected embedded CR or LF" ) ; } buf . append ( ( char ) ch ) ; } } protected String readUpToEol ( PushbackInputStream r ) throws IOException { StringBuffer buf = new StringBuffer ( ) ; while ( true ) { if ( consumeEol ( r ) ) { return buf . toString ( ) ; } int ch = r . read ( ) ; if ( ch == - 1 ) { throw new IOException ( "Unexpected EOF" ) ; } buf . append ( ( char ) ch ) ; } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
