class SyncSettingsPanel extends JPanel implements IRegistrationListener { private JTextField tfEmail = new JTextField ( ) ; private JPasswordField tfPassword = new JPasswordField ( ) ; private JLabel lbLastSyncIn = new JLabel ( "unknown" ) ; private JLabel lbLastSyncOut = new JLabel ( "unknown" ) ; private JTextField tfSyncPeriod = new JTextField ( ) ; private AbstractDialog parentDialog ; private ServicePreferences servicePrefs ; private JRadioButton rbModePeriodical ; private JRadioButton rbModeEachRun ; private JRadioButton rbModeManual ; private JCheckBox chFeedList ; private JCheckBox chPreferences ; private JButton btnSyncNow ; private CustomPopupButton btnMoreSyncOptions ; public SyncSettingsPanel ( AbstractDialog parentDiag , ServicePreferences prefs , ValueModel triggerChannel ) { this . parentDialog = parentDiag ; servicePrefs = prefs ; LinkLabel lnkSignUp = new LinkLabel ( Strings . message ( "service.registration.signup" ) , ResourceUtils . getString ( "server.signup.url" ) ) ; initComponents ( triggerChannel ) ; JPanel buttonBar = new JPanel ( ) ; buttonBar . add ( btnSyncNow ) ; buttonBar . add ( btnMoreSyncOptions ) ; BBFormBuilder builder = new BBFormBuilder ( "7dlu, pref, 2dlu, pref:grow, 2dlu, 20dlu, 2dlu, 80dlu:grow" ) ; builder . setDefaultDialogBorder ( ) ; builder . appendSeparator ( Strings . message ( "service.registration.account.information" ) ) ; builder . append ( Strings . message ( "service.registration.email" ) , 2 , tfEmail , 5 ) ; builder . append ( Strings . message ( "service.registration.password" ) , 2 , tfPassword , 5 ) ; builder . append ( "" , 2 , lnkSignUp , 5 ) ; builder . appendSeparator ( Strings . message ( "service.sync.mode.of.operation" ) ) ; builder . setLeadingColumnOffset ( 1 ) ; builder . append ( rbModePeriodical , 3 ) ; builder . append ( tfSyncPeriod ) ; builder . append ( Strings . message ( "service.sync.days" ) , 1 ) ; builder . append ( rbModeEachRun , 7 ) ; builder . append ( rbModeManual , 7 ) ; builder . appendSeparator ( Strings . message ( "service.sync.what.to.synchronize" ) ) ; builder . append ( chFeedList , 7 ) ; builder . append ( chPreferences , 7 ) ; builder . appendSeparator ( Strings . message ( "service.sync.statistics" ) ) ; builder . append ( Strings . message ( "service.sync.last.sync.in" ) , lbLastSyncIn , 5 ) ; builder . append ( Strings . message ( "service.sync.last.sync.out" ) , lbLastSyncOut , 5 ) ; builder . setLeadingColumnOffset ( 0 ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( buttonBar , 8 ) ; setLayout ( new BorderLayout ( ) ) ; add ( builder . getPanel ( ) , BorderLayout . CENTER ) ; } private void initComponents ( ValueModel triggerChannel ) { btnSyncNow = new JButton ( new SyncWrapperAction ( SyncFullAction . getInstance ( ) ) ) ; final JPopupMenu menu = new JPopupMenu ( ) ; menu . add ( new SyncWrapperAction ( SyncInAction . getInstance ( ) ) ) ; menu . add ( new SyncWrapperAction ( SyncOutAction . getInstance ( ) ) ) ; btnMoreSyncOptions = new CustomPopupButton ( btnSyncNow , Strings . message ( "service.sync.more" ) , menu ) ; rbModePeriodical = ComponentsFactory . createRadioButton ( Strings . message ( "service.sync.synchronize.every" ) ) ; rbModeEachRun = ComponentsFactory . createRadioButton ( Strings . message ( "service.sync.synchronize.each.application.run" ) ) ; rbModeManual = ComponentsFactory . createRadioButton ( Strings . message ( "service.sync.manual.synchronization.only" ) ) ; ButtonGroup bg = new ButtonGroup ( ) ; bg . add ( rbModePeriodical ) ; bg . add ( rbModeEachRun ) ; bg . add ( rbModeManual ) ; rbModePeriodical . addItemListener ( new PeriodicalSelectionListener ( ) ) ; tfSyncPeriod . setEnabled ( false ) ; chFeedList = ComponentsFactory . createCheckBox ( Strings . message ( "service.sync.feed.list" ) , new ToggleButtonAdapter ( new BufferedValueModel ( new PropertyAdapter ( servicePrefs , ServicePreferences . PROP_SYNC_FEEDS ) , triggerChannel ) ) ) ; chFeedList . addActionListener ( new FullSyncEnabled ( ) ) ; chPreferences = ComponentsFactory . createCheckBox ( Strings . message ( "service.sync.preferences" ) , new ToggleButtonAdapter ( new BufferedValueModel ( new PropertyAdapter ( servicePrefs , ServicePreferences . PROP_SYNC_PREFERENCES ) , triggerChannel ) ) ) ; new MandatoryCheckBoxController ( chFeedList , chPreferences ) ; tfEmail . setDocument ( new DocumentAdapter ( new BufferedValueModel ( new PropertyAdapter ( servicePrefs , "email" ) , triggerChannel ) ) ) ; tfPassword . setDocument ( new DocumentAdapter ( new BufferedValueModel ( new PropertyAdapter ( servicePrefs , "password" ) , triggerChannel ) ) ) ; tfSyncPeriod . setDocument ( new DocumentAdapter ( new BufferedValueModel ( new PropertyAdapter ( new ServicePreferencesWrapper ( servicePrefs ) , "syncPeriod" ) , triggerChannel ) ) ) ; updateFullSyncButton ( ) ; updateSyncDatesView ( ) ; selectMode ( ) ; } private void updateSyncDatesView ( ) { Date lastSyncInDate = servicePrefs . getLastSyncInDate ( ) ; Date lastSyncOutDate = servicePrefs . getLastSyncOutDate ( ) ; String strSyncIn = lastSyncInDate == null ? Strings . message ( "service.sync.not.performed" ) : DateUtils . dateToString ( lastSyncInDate ) + " [" + servicePrefs . getLastSyncInStatus ( ) + "]" ; String strSyncOut = lastSyncOutDate == null ? Strings . message ( "service.sync.not.performed" ) : DateUtils . dateToString ( lastSyncOutDate ) + " [" + servicePrefs . getLastSyncOutStatus ( ) + "]" ; lbLastSyncIn . setText ( strSyncIn ) ; lbLastSyncOut . setText ( strSyncOut ) ; } private void selectMode ( ) { int mode = servicePrefs . getSyncMode ( ) ; JRadioButton selected = null ; switch ( mode ) { case ServicePreferences . SYNC_MODE_EACH_RUN : selected = rbModeEachRun ; break ; case ServicePreferences . SYNC_MODE_MANUAL : selected = rbModeManual ; break ; case ServicePreferences . SYNC_MODE_PERIODICAL : selected = rbModePeriodical ; break ; default : break ; } if ( selected != null ) selected . setSelected ( true ) ; } public void writeMode ( ) { int mode ; if ( rbModeEachRun . isSelected ( ) ) { mode = ServicePreferences . SYNC_MODE_EACH_RUN ; } else if ( rbModePeriodical . isSelected ( ) ) { mode = ServicePreferences . SYNC_MODE_PERIODICAL ; } else { mode = ServicePreferences . SYNC_MODE_MANUAL ; } servicePrefs . setSyncMode ( mode ) ; } private void updateFullSyncButton ( ) { boolean enabled = SyncFullAction . getInstance ( ) . isEnabled ( ) && GlobalController . SINGLETON . isInitializationFinished ( ) ; btnSyncNow . setEnabled ( enabled ) ; } public void registeredSuccessfully ( String email , String password ) { final String textEmail = tfEmail . getText ( ) ; if ( textEmail == null || textEmail . trim ( ) . length ( ) == 0 ) { tfEmail . setText ( email ) ; tfPassword . setText ( password ) ; } } private class SyncWrapperAction extends AbstractAction implements PropertyChangeListener { private Action act ; public SyncWrapperAction ( Action action ) { this . act = action ; action . addPropertyChangeListener ( this ) ; } public void actionPerformed ( ActionEvent e ) { parentDialog . doApply ( ) ; act . actionPerformed ( e ) ; } public boolean isEnabled ( ) { return act . isEnabled ( ) ; } public Object getValue ( String key ) { return act . getValue ( key ) ; } public void putValue ( String key , Object newValue ) { act . putValue ( key , newValue ) ; } public void propertyChange ( PropertyChangeEvent evt ) { firePropertyChange ( evt . getPropertyName ( ) , evt . getOldValue ( ) , evt . getNewValue ( ) ) ; if ( evt . getPropertyName ( ) . equals ( "enabled" ) && evt . getNewValue ( ) == Boolean . TRUE ) { updateFullSyncButton ( ) ; updateSyncDatesView ( ) ; } } } public static class ServicePreferencesWrapper { private ServicePreferences prefs ; public ServicePreferencesWrapper ( ServicePreferences prefobject ) { this . prefs = prefobject ; } public String getSyncPeriod ( ) { return Integer . toString ( prefs . getSyncPeriod ( ) ) ; } public void setSyncPeriod ( String period ) { prefs . setSyncPeriod ( Integer . parseInt ( period ) ) ; } } private class PeriodicalSelectionListener implements ItemListener { public void itemStateChanged ( ItemEvent e ) { tfSyncPeriod . setEnabled ( rbModePeriodical . isSelected ( ) ) ; } } private class FullSyncEnabled implements ActionListener { public void actionPerformed ( ActionEvent e ) { updateFullSyncButton ( ) ; } } } 