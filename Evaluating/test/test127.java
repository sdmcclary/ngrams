public abstract class AbstractFeed implements IFeed { private static final Logger LOG = Logger . getLogger ( AbstractFeed . class . getName ( ) ) ; private long id ; private final List < IFeedListener > listeners ; private AtomicInteger processingCount ; private IGuide [ ] guides ; private final Object guidesLock = new Object ( ) ; private String invalidnessReason ; protected int rating ; private long lastVisitTime = 0 ; private FeedType type ; private FeedHandlingType handlingType ; private boolean customViewModeEnabled ; private int customViewMode ; private long lastUpdateTime ; private int views ; private int clickthroughs ; private Boolean ascendingSorting ; private boolean autoSaveArticles ; private String autoSaveArticlesFolder ; private String autoSaveArticlesNameFormat ; private boolean autoSaveEnclosures ; private String autoSaveEnclosuresFolder ; private String autoSaveEnclosuresNameFormat ; public AbstractFeed ( ) { guides = new IGuide [ 0 ] ; processingCount = new AtomicInteger ( 0 ) ; listeners = new CopyOnWriteArrayList < IFeedListener > ( ) ; invalidnessReason = null ; id = - 1 ; rating = RATING_NOT_SET ; type = FeedType . TEXT ; handlingType = FeedHandlingType . DEFAULT ; customViewModeEnabled = false ; customViewMode = IFeedDisplayConstants . MODE_BRIEF ; lastUpdateTime = - 1 ; views = 0 ; clickthroughs = 0 ; ascendingSorting = null ; autoSaveArticles = false ; autoSaveEnclosures = false ; } public long getID ( ) { return id ; } public void setID ( long aId ) { id = aId ; } public void addParentGuide ( IGuide aGuide ) { synchronized ( guidesLock ) { if ( indexOfParentGuide ( aGuide ) == - 1 ) { IGuide [ ] newList = new IGuide [ guides . length + 1 ] ; for ( int i = 0 ; i < guides . length ; i ++ ) newList [ i ] = guides [ i ] ; newList [ guides . length ] = aGuide ; guides = newList ; } } } public void removeParentGuide ( IGuide aGuide ) { synchronized ( guidesLock ) { int index = indexOfParentGuide ( aGuide ) ; if ( index != - 1 ) { IGuide [ ] newList = new IGuide [ guides . length - 1 ] ; for ( int i = 0 ; i < index ; i ++ ) newList [ i ] = guides [ i ] ; for ( int i = index + 1 ; i < guides . length ; i ++ ) newList [ i - 1 ] = guides [ i ] ; guides = newList ; } } } private int indexOfParentGuide ( IGuide aGuide ) { int index = - 1 ; for ( int i = 0 ; index == - 1 && i < guides . length ; i ++ ) { if ( guides [ i ] == aGuide ) index = i ; } return index ; } public boolean belongsTo ( IGuide guide ) { return indexOfParentGuide ( guide ) != - 1 ; } public boolean isDynamic ( ) { return false ; } public IGuide [ ] getParentGuides ( ) { return guides ; } public void processingStarted ( ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Start Processing  : " + getTitle ( ) ) ; } int cnt = processingCount . getAndIncrement ( ) ; if ( cnt == 1 ) firePropertyChanged ( PROP_PROCESSING , FALSE , TRUE , false , true ) ; } public void processingFinished ( ) { if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Finish Processing : " + getTitle ( ) ) ; } int cnt = processingCount . decrementAndGet ( ) ; if ( cnt <= 0 ) { if ( cnt < 0 ) { processingCount . compareAndSet ( cnt , 0 ) ; if ( LOG . isLoggable ( Level . WARNING ) ) { LOG . warning ( MessageFormat . format ( Strings . error ( "feed.processing.counter.got.below.0" ) , getTitle ( ) ) ) ; } } firePropertyChanged ( PROP_PROCESSING , TRUE , FALSE , false , true ) ; } } public boolean isProcessing ( ) { return processingCount . get ( ) > 0 ; } public synchronized boolean isRead ( ) { return getUnreadArticlesCount ( ) == 0 ; } public synchronized void setRead ( boolean read ) { int count = getArticlesCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { IArticle article = getArticleAt ( count - i - 1 ) ; article . setRead ( read ) ; } } public int getUnreadArticlesCount ( ) { int unread = 0 ; synchronized ( this ) { int count = getArticlesCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { IArticle article = getArticleAt ( i ) ; if ( ! article . isRead ( ) ) unread ++ ; } } return unread ; } public boolean isInvalid ( ) { return getInvalidnessReason ( ) != null ; } public void setInvalidnessReason ( String reason ) { String oldReason = invalidnessReason ; invalidnessReason = StringUtils . intern ( reason ) ; firePropertyChanged ( PROP_INVALIDNESS_REASON , oldReason , invalidnessReason , false , true ) ; } public String getInvalidnessReason ( ) { return invalidnessReason ; } public void addListener ( IFeedListener l ) { if ( ! listeners . contains ( l ) ) listeners . add ( l ) ; } public void removeListener ( IFeedListener l ) { listeners . remove ( l ) ; } protected void firePropertyChanged ( String property , Object oldValue , Object newValue ) { firePropertyChanged ( property , oldValue , newValue , false , false ) ; } protected void firePropertyChanged ( String property , int oldValue , int newValue ) { firePropertyChanged ( property , new Integer ( oldValue ) , new Integer ( newValue ) ) ; } protected void firePropertyChanged ( String property , Object oldValue , Object newValue , boolean syncProperty , boolean visibilityProperty ) { if ( property == null ) throw new NullPointerException ( Strings . error ( "unspecified.property" ) ) ; if ( ! CommonUtils . areDifferent ( oldValue , newValue ) ) return ; for ( IFeedListener listener : listeners ) listener . propertyChanged ( this , property , oldValue , newValue ) ; if ( syncProperty ) registerUpdate ( ) ; if ( visibilityProperty ) invalidateVisibilityCache ( ) ; } protected void fireArticleAdded ( IArticle article ) { for ( IFeedListener listener : listeners ) listener . articleAdded ( this , article ) ; } protected void fireArticleRemoved ( IArticle article ) { for ( IFeedListener listener : listeners ) listener . articleRemoved ( this , article ) ; } public String toString ( ) { return MessageFormat . format ( Strings . message ( "feed.string.representation" ) , getTitle ( ) , getUnreadArticlesCount ( ) , getArticlesCount ( ) ) ; } public int getRating ( ) { return rating ; } public void setRating ( int aRating ) { if ( aRating != RATING_NOT_SET && ( aRating < RATING_MIN || aRating > RATING_MAX ) ) throw new IllegalArgumentException ( MessageFormat . format ( Strings . error ( "incorrect.rating.value" ) , aRating ) ) ; int oldRating = rating ; rating = aRating ; firePropertyChanged ( PROP_RATING , oldRating , rating , true , true ) ; } public long getLastVisitTime ( ) { return lastVisitTime ; } public void setLastVisitTime ( final long time ) { final long oldLastVisitTime = lastVisitTime ; lastVisitTime = time ; firePropertyChanged ( PROP_LAST_VISIT_TIME , oldLastVisitTime , lastVisitTime ) ; } public FeedType getType ( ) { return type ; } public void setType ( FeedType aType ) { FeedType oldType = type ; type = aType ; firePropertyChanged ( PROP_TYPE , oldType , type , true , false ) ; } public FeedHandlingType getHandlingType ( ) { return handlingType ; } public void setHandlingType ( FeedHandlingType type ) { if ( type == null ) type = FeedHandlingType . DEFAULT ; FeedHandlingType oldType = handlingType ; handlingType = type ; firePropertyChanged ( PROP_HANDLING_TYPE , oldType , handlingType , true , false ) ; } public boolean isCustomViewModeEnabled ( ) { return customViewModeEnabled ; } public void setCustomViewModeEnabled ( boolean enabled ) { boolean oldValue = customViewModeEnabled ; customViewModeEnabled = enabled ; firePropertyChanged ( PROP_CUSTOM_VIEW_MODE_ENABLED , oldValue , enabled , true , false ) ; } public int getCustomViewMode ( ) { return customViewMode ; } public void setCustomViewMode ( int mode ) { if ( mode == - 1 ) return ; int oldValue = customViewMode ; customViewMode = mode ; firePropertyChanged ( PROP_CUSTOM_VIEW_MODE , oldValue , customViewMode , true , false ) ; } public long getLastUpdateTime ( ) { return lastUpdateTime ; } public void setLastUpdateTime ( long time ) { long oldValue = lastUpdateTime ; lastUpdateTime = time ; firePropertyChanged ( PROP_LAST_UPDATE_TIME , oldValue , time ) ; } protected void registerUpdate ( ) { setLastUpdateTime ( System . currentTimeMillis ( ) ) ; } public int getViews ( ) { return views ; } public void setViews ( int views ) { int oldVal = this . views ; this . views = views ; firePropertyChanged ( PROP_VIEWS , oldVal , views ) ; } public int getClickthroughs ( ) { return clickthroughs ; } public void setClickthroughs ( int times ) { int oldVal = clickthroughs ; clickthroughs = times ; firePropertyChanged ( PROP_CLICKTHROUGHS , oldVal , clickthroughs ) ; } protected static boolean isDuplicate ( IArticle article , int from , int to , List < IArticle > articles ) { from -- ; to -- ; String [ ] words = article . getTitleWords ( ) ; if ( words . length == 0 ) return false ; for ( IArticle art : articles ) { if ( art == article ) continue ; String [ ] aw = art . getTitleWords ( ) ; if ( wordsEqual ( words , aw , from , to ) ) return true ; } return false ; } static boolean wordsEqual ( String [ ] words1 , String [ ] words2 , int from , int to ) { if ( words1 . length <= to || words2 . length <= to ) return false ; boolean match = false ; while ( from <= to && ( match = words1 [ from ] . equalsIgnoreCase ( words2 [ from ] ) ) ) from ++ ; return match ; } public int getClassesMask ( ) { return FeedClassifier . classify ( this ) ; } private static IFeedVisibilityResolver feedVisibilityResolver ; private static final long VISIBILITY_CACHE_EXPIRE_PERIOD = 600000 ; private volatile long visibilityCacheExpires = 0 ; private volatile boolean visibilityCache = true ; private final ReentrantReadWriteLock visibilityCL = new ReentrantReadWriteLock ( ) ; public static void setFeedVisibilityResolver ( IFeedVisibilityResolver fvis ) { AbstractFeed . feedVisibilityResolver = fvis ; } public boolean isVisible ( ) { boolean visible ; long time = System . currentTimeMillis ( ) ; visibilityCL . readLock ( ) . lock ( ) ; if ( visibilityCacheExpires < time ) { visibilityCL . readLock ( ) . unlock ( ) ; visibilityCL . writeLock ( ) . lock ( ) ; try { if ( visibilityCacheExpires < time ) { visibilityCacheExpires = time + VISIBILITY_CACHE_EXPIRE_PERIOD ; visibilityCache = isVisibleNoCache ( ) ; } } finally { visibilityCL . readLock ( ) . lock ( ) ; visibilityCL . writeLock ( ) . unlock ( ) ; } } visible = visibilityCache ; visibilityCL . readLock ( ) . unlock ( ) ; return visible ; } public void invalidateVisibilityCache ( ) { visibilityCacheExpires = 0 ; } protected boolean isVisibleNoCache ( ) { return feedVisibilityResolver == null || isProcessing ( ) || feedVisibilityResolver . isVisible ( this ) ; } public Boolean getAscendingSorting ( ) { return ascendingSorting ; } public void setAscendingSorting ( Boolean asc ) { Boolean old = ascendingSorting ; ascendingSorting = asc ; firePropertyChanged ( PROP_ASCENDING_SORTING , old , asc , true , false ) ; } public void setAutoSaveArticles ( boolean en ) { boolean old = autoSaveArticles ; autoSaveArticles = en ; firePropertyChanged ( PROP_AUTO_SAVE_ARTICLES , old , en ) ; } public boolean isAutoSaveArticles ( ) { return autoSaveArticles ; } public void setAutoSaveArticlesFolder ( String folder ) { String old = autoSaveArticlesFolder ; autoSaveArticlesFolder = folder ; firePropertyChanged ( PROP_AUTO_SAVE_ARTICLES_FOLDER , old , folder ) ; } public String getAutoSaveArticlesFolder ( ) { return autoSaveArticlesFolder ; } public void setAutoSaveArticlesNameFormat ( String nameFormat ) { String old = autoSaveArticlesNameFormat ; autoSaveArticlesNameFormat = nameFormat ; firePropertyChanged ( PROP_AUTO_SAVE_ARTICLES_NAME_FORMAT , old , nameFormat ) ; } public String getAutoSaveArticlesNameFormat ( ) { return autoSaveArticlesNameFormat ; } public void setAutoSaveEnclosures ( boolean en ) { boolean old = autoSaveEnclosures ; autoSaveEnclosures = en ; firePropertyChanged ( PROP_AUTO_SAVE_ENCLOSURES , old , en ) ; } public boolean isAutoSaveEnclosures ( ) { return autoSaveEnclosures ; } public void setAutoSaveEnclosuresFolder ( String folder ) { String old = autoSaveEnclosuresFolder ; autoSaveEnclosuresFolder = folder ; firePropertyChanged ( PROP_AUTO_SAVE_ENCLOSURES_FOLDER , old , folder ) ; } public String getAutoSaveEnclosuresFolder ( ) { return autoSaveEnclosuresFolder ; } public void setAutoSaveEnclosuresNameFormat ( String nameFormat ) { String old = autoSaveEnclosuresNameFormat ; autoSaveEnclosuresNameFormat = nameFormat ; firePropertyChanged ( PROP_AUTO_SAVE_ENCLOSURES_NAME_FORMAT , old , nameFormat ) ; } public String getAutoSaveEnclosuresNameFormat ( ) { return autoSaveEnclosuresNameFormat ; } } 