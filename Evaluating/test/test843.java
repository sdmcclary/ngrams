public class PreferenceInitializer implements IStartup { private static final String EMPTY = "" ; private static final String SEMI_COLON = ";" ; private final IPreferenceStore jdtPreferenceStore ; public PreferenceInitializer ( ) { this ( PreferenceConstants . getPreferenceStore ( ) ) ; } public PreferenceInitializer ( IPreferenceStore jdtPreferenceStore ) { this . jdtPreferenceStore = jdtPreferenceStore ; } void initializeFavorites ( ) { Set imports = new LinkedHashSet ( getJDTImports ( ) ) ; imports . addAll ( getDefaultFavorites ( ) ) ; String join = join ( imports , SEMI_COLON ) ; jdtPreferenceStore . setValue ( PreferenceConstants . CODEASSIST_FAVORITE_STATIC_MEMBERS , join ) ; try { ( ( ScopedPreferenceStore ) jdtPreferenceStore ) . save ( ) ; } catch ( IOException e ) { } } public Set getJDTImports ( ) { String preference = jdtPreferenceStore . getString ( PreferenceConstants . CODEASSIST_FAVORITE_STATIC_MEMBERS ) ; if ( EMPTY . equals ( preference . trim ( ) ) ) { return new HashSet ( ) ; } String [ ] imports = preference . split ( SEMI_COLON ) ; return new LinkedHashSet ( Arrays . asList ( imports ) ) ; } private LinkedHashSet getDefaultFavorites ( ) { LinkedHashSet orderedSet = new LinkedHashSet ( ) ; orderedSet . add ( importStatement ( "org.hamcrest.MatcherAssert" ) ) ; orderedSet . add ( importStatement ( "org.hamcrest.CoreMatchers" ) ) ; orderedSet . add ( importStatement ( "org.junit.matchers.JUnitMatchers" ) ) ; orderedSet . add ( importStatement ( "org.junit.Assert" ) ) ; return orderedSet ; } public void propertyChange ( PropertyChangeEvent event ) { initializeFavorites ( ) ; } private String importStatement ( String clazz ) { return clazz + ".*" ; } private String join ( Collection toJoin , String delimiter ) { if ( ( toJoin == null ) || ( toJoin . size ( ) == 0 ) ) return "" ; StringBuffer result = new StringBuffer ( ) ; Iterator iterator = toJoin . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object object = iterator . next ( ) ; result . append ( object ) ; result . append ( delimiter ) ; } result . lastIndexOf ( delimiter ) ; result . replace ( result . length ( ) - delimiter . length ( ) , result . length ( ) , "" ) ; return result . toString ( ) ; } public void earlyStartup ( ) { new PreferenceInitializer ( ) . initializeFavorites ( ) ; } } 