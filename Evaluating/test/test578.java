public class PreviewPreferencePage extends PreferencePage implements IWorkbenchPreferencePage { private CheckboxTableViewer previewViewer ; private Label description ; private Composite displayArea ; private Group browsers ; private Button useCustomTemplate ; private Text defaultTemplate ; private Button useUrl ; private Label globalUrlLabel ; private Text globalUrlText ; private Button browseButton ; private Button useTempFiles ; protected Control createContents ( Composite parent ) { displayArea = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = 1 ; layout . makeColumnsEqualWidth = false ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; layout . verticalSpacing = 5 ; layout . horizontalSpacing = 0 ; displayArea . setLayout ( layout ) ; displayArea . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , true , true ) ) ; useTempFiles = new Button ( displayArea , SWT . CHECK ) ; useTempFiles . setText ( Messages . PreviewPreferencePage_UseTempFilesText ) ; useTempFiles . setSelection ( getPreferenceStore ( ) . getBoolean ( IPreferenceConstants . USE_TEMP_FILES_FOR_PREVIEW ) ) ; description = new Label ( displayArea , SWT . WRAP ) ; description . setText ( Messages . PreviewPreferencePage_DescriptionText ) ; browsers = new Group ( displayArea , SWT . NONE ) ; GridLayout gridLayout = new GridLayout ( ) ; gridLayout . numColumns = 1 ; browsers . setLayout ( gridLayout ) ; browsers . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , true , true ) ) ; browsers . setText ( Messages . PreviewPreferencePage_BrowsersText ) ; Table table = new Table ( browsers , SWT . CHECK | SWT . BORDER | SWT . SINGLE ) ; table . setFont ( parent . getFont ( ) ) ; previewViewer = new CheckboxTableViewer ( table ) ; previewViewer . setContentProvider ( new ArrayContentProvider ( ) ) ; previewViewer . setLabelProvider ( new LabelProvider ( ) ) ; previewViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { if ( Platform . getOS ( ) . equals ( Platform . OS_MACOSX ) ) { if ( previewViewer . getChecked ( "Firefox" ) && ! previewViewer . getChecked ( "Safari" ) ) { MessageDialog . openInformation ( getShell ( ) , Messages . PreviewPreferencePage_FirefoxIssueTitle , Messages . PreviewPreferencePage_FireFoxIssueMessage ) ; previewViewer . setChecked ( "Firefox" , false ) ; } } } } ) ; table . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; addPreviewBrowsers ( ) ; addCheckedBrowsers ( ) ; Label templateDescription = new Label ( displayArea , SWT . LEFT | SWT . WRAP ) ; templateDescription . setText ( Messages . PreviewPreferencePage_TemplateDescText ) ; GridData tdData = new GridData ( SWT . FILL , SWT . FILL , true , false ) ; tdData . verticalIndent = 5 ; templateDescription . setLayoutData ( tdData ) ; boolean useTemplate = getPreferenceStore ( ) . getBoolean ( IPreferenceConstants . CSSEDITOR_BROWSER_USE_TEMPLATE_PREFERENCE ) ; useCustomTemplate = new Button ( displayArea , SWT . RADIO ) ; useCustomTemplate . setText ( Messages . PreviewPreferencePage_UseCustomTemplateText ) ; useCustomTemplate . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { boolean template = useCustomTemplate . getSelection ( ) ; defaultTemplate . setEnabled ( template ) ; globalUrlText . setEnabled ( ! template ) ; browseButton . setEnabled ( ! template ) ; } } ) ; useCustomTemplate . setSelection ( useTemplate ) ; Group template = new Group ( displayArea , SWT . NONE ) ; template . setText ( Messages . PreviewPreferencePage_TemplateGroupTitle ) ; GridLayout tLayout = new GridLayout ( 1 , true ) ; tLayout . marginHeight = 0 ; tLayout . marginWidth = 0 ; template . setLayout ( tLayout ) ; GridData tData = new GridData ( GridData . FILL , GridData . FILL , true , false ) ; tData . horizontalIndent = 13 ; template . setLayoutData ( tData ) ; defaultTemplate = new Text ( template , SWT . MULTI | SWT . BORDER | SWT . WRAP | SWT . H_SCROLL | SWT . V_SCROLL ) ; GridData dtData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; dtData . heightHint = 225 ; dtData . widthHint = 500 ; defaultTemplate . setText ( getPreferenceStore ( ) . getString ( IPreferenceConstants . CSSEDITOR_BROWSER_TEMPLATE_PREFERENCE ) ) ; defaultTemplate . setLayoutData ( dtData ) ; defaultTemplate . setEnabled ( useTemplate ) ; useUrl = new Button ( displayArea , SWT . RADIO ) ; useUrl . setText ( Messages . PreviewPreferencePage_UseUrlText ) ; useUrl . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { boolean url = useUrl . getSelection ( ) ; defaultTemplate . setEnabled ( ! url ) ; globalUrlText . setEnabled ( url ) ; browseButton . setEnabled ( url ) ; } } ) ; useUrl . setSelection ( ! useTemplate ) ; Composite globalUrl = new Composite ( displayArea , SWT . NONE ) ; GridLayout guLayout = new GridLayout ( 3 , false ) ; guLayout . marginHeight = 0 ; guLayout . marginWidth = 0 ; guLayout . marginBottom = 10 ; globalUrl . setLayout ( guLayout ) ; GridData gData = new GridData ( GridData . FILL , GridData . FILL , true , false ) ; gData . horizontalIndent = 15 ; globalUrl . setLayoutData ( gData ) ; globalUrlLabel = new Label ( globalUrl , SWT . LEFT ) ; globalUrlLabel . setText ( Messages . PreviewPreferencePage_UrlLabel ) ; globalUrlText = new Text ( globalUrl , SWT . SINGLE | SWT . BORDER ) ; globalUrlText . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , true , false ) ) ; globalUrlText . setText ( getPreferenceStore ( ) . getString ( IPreferenceConstants . CSSEDITOR_BROWSER_URL_PREFERENCE ) ) ; globalUrlText . setEnabled ( ! useTemplate ) ; browseButton = new Button ( globalUrl , SWT . PUSH ) ; browseButton . setText ( Messages . PreviewPreferencePage_BrowseText ) ; browseButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { FileDialog dialog = new FileDialog ( browseButton . getShell ( ) , SWT . OPEN ) ; String file = dialog . open ( ) ; if ( file != null ) { globalUrlText . setText ( file ) ; } } } ) ; browseButton . setEnabled ( ! useTemplate ) ; return displayArea ; } private void addPreviewBrowsers ( ) { IExtensionRegistry reg = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = reg . getExtensionPoint ( UnifiedEditorsPlugin . BROWSER_EXTENSION_POINT ) ; IExtension [ ] extensions = ep . getExtensions ( ) ; List < String > browserPreviews = new ArrayList < String > ( ) ; IConfigurationElement [ ] ce ; String browserClass ; String browserName ; for ( int i = 0 ; i < extensions . length ; i ++ ) { ce = extensions [ i ] . getConfigurationElements ( ) ; for ( int j = 0 ; j < ce . length ; j ++ ) { browserClass = ce [ j ] . getAttribute ( UnifiedEditorsPlugin . CLASS_ATTR ) ; browserName = BrowserExtensionLoader . getBrowserLabel ( ce [ j ] ) ; if ( browserClass != null && browserName != null ) { browserPreviews . add ( browserName ) ; } } } Collections . sort ( browserPreviews ) ; previewViewer . setInput ( browserPreviews . toArray ( ) ) ; } private void addCheckedBrowsers ( ) { String all_browsers = this . getPreferenceStore ( ) . getString ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE ) ; String [ ] browsers = all_browsers . split ( "," ) ; for ( int i = 0 ; i < browsers . length ; i ++ ) { previewViewer . setChecked ( browsers [ i ] , true ) ; } } public boolean performOk ( ) { getPreferenceStore ( ) . setValue ( IPreferenceConstants . CSSEDITOR_BROWSER_URL_PREFERENCE , globalUrlText . getText ( ) ) ; getPreferenceStore ( ) . setValue ( IPreferenceConstants . CSSEDITOR_BROWSER_TEMPLATE_PREFERENCE , defaultTemplate . getText ( ) ) ; getPreferenceStore ( ) . setValue ( IPreferenceConstants . CSSEDITOR_BROWSER_USE_TEMPLATE_PREFERENCE , useCustomTemplate . getSelection ( ) ) ; ArrayList < String > al = new ArrayList < String > ( ) ; Object [ ] elements = previewViewer . getCheckedElements ( ) ; for ( int i = 0 ; i < elements . length ; i ++ ) { al . add ( elements [ i ] . toString ( ) ) ; } getPreferenceStore ( ) . setValue ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE , StringUtils . join ( "," , ( String [ ] ) al . toArray ( new String [ 0 ] ) ) ) ; getPreferenceStore ( ) . setValue ( IPreferenceConstants . USE_TEMP_FILES_FOR_PREVIEW , useTempFiles . getSelection ( ) ) ; return true ; } protected void performDefaults ( ) { super . performDefaults ( ) ; String prefs = getPreferenceStore ( ) . getDefaultString ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE ) ; previewViewer . setCheckedElements ( prefs . split ( "," ) ) ; String url = getPreferenceStore ( ) . getDefaultString ( IPreferenceConstants . CSSEDITOR_BROWSER_URL_PREFERENCE ) ; globalUrlText . setText ( url ) ; String template = getPreferenceStore ( ) . getDefaultString ( IPreferenceConstants . CSSEDITOR_BROWSER_TEMPLATE_PREFERENCE ) ; defaultTemplate . setText ( template ) ; boolean useTemplate = getPreferenceStore ( ) . getDefaultBoolean ( IPreferenceConstants . CSSEDITOR_BROWSER_USE_TEMPLATE_PREFERENCE ) ; useCustomTemplate . setSelection ( useTemplate ) ; useUrl . setSelection ( ! useTemplate ) ; defaultTemplate . setEnabled ( useTemplate ) ; globalUrlText . setEnabled ( ! useTemplate ) ; browseButton . setEnabled ( ! useTemplate ) ; useTempFiles . setSelection ( getPreferenceStore ( ) . getDefaultBoolean ( IPreferenceConstants . USE_TEMP_FILES_FOR_PREVIEW ) ) ; } public void init ( IWorkbench workbench ) { setPreferenceStore ( CSSPlugin . getDefault ( ) . getPreferenceStore ( ) ) ; } } 