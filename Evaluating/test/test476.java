public class MetaCharset extends AbstractDatatype { public static final MetaCharset THE_INSTANCE = new MetaCharset ( ) ; public MetaCharset ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { String lower = toAsciiLowerCase ( literal ) ; if ( ! lower . startsWith ( "text/html;" ) ) { throw newDatatypeException ( "The legacy encoding declaration did not start with " , "text/html;" , "." ) ; } if ( lower . length ( ) == 10 ) { throw newDatatypeException ( "The legacy encoding declaration ended prematurely." ) ; } int offset = 10 ; paramloop : for ( int i = 10 ; i < lower . length ( ) ; i ++ ) { char c = lower . charAt ( i ) ; switch ( c ) { case ' ' : case '\t' : case '\n' : case '' : case '\r' : offset ++ ; continue ; case 'c' : break paramloop ; default : throw newDatatypeException ( "The legacy encoding declaration" + " did not start with space characters or " , "charset=" , " after the semicolon. " + " Found “" + c + "” instead." ) ; } } if ( ! lower . startsWith ( "charset=" , offset ) ) { throw newDatatypeException ( "The legacy encoding declaration" + "did not contain " , "charset=" , " after the semicolon." ) ; } offset += 8 ; if ( lower . length ( ) == offset ) { throw newDatatypeException ( "The empty string is not a valid character encoding name." ) ; } for ( int i = offset ; i < lower . length ( ) ; i ++ ) { char c = lower . charAt ( i ) ; if ( ! ( ( c >= '0' && c <= '9' ) || ( c >= 'a' && c <= 'z' ) || c == '-' || c == '!' || c == '#' || c == '$' || c == '%' || c == '&' || c == '\'' || c == '+' || c == '_' || c == '`' || c == '{' || c == '}' || c == '~' || c == '^' ) ) { throw newDatatypeException ( "The legacy encoding contained " , c , ", which is not a valid character in an encoding name." ) ; } } String encodingName = lower . substring ( offset ) ; if ( "replacement" . equals ( encodingName ) || ! CharsetData . isPreferred ( encodingName ) ) { String preferred = CharsetData . preferredForLabel ( encodingName ) ; if ( preferred == null || "replacement" . equals ( preferred ) ) { throw newDatatypeException ( "“" + encodingName + "” is not a valid character encoding name." ) ; } throw newDatatypeException ( "“" + encodingName + "” is not a preferred encoding name." + " The preferred label for this encoding is “" + preferred + "”." ) ; } } @ Override public String getName ( ) { return "legacy character encoding declaration" ; } } 