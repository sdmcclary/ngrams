<<<<<<< HEAD
public final class FeedRenderingSettings extends Model implements IFRS , PropertyChangeListener { private static final Logger LOG = Logger . getLogger ( FeedRenderingSettings . class . getName ( ) ) ; private static final int RGB_MASK = 0xffffff ; private static final String RESOURCE_DEFAULT_THEME_NAME = "theme.default.name" ; private HashMap < String , Object > settings = new HashMap < String , Object > ( ) ; private IFRS parent ; public static final Integer VIEW_MODE_FULL = IFeedDisplayConstants . MODE_FULL ; public static final Integer VIEW_MODE_BRIEF = IFeedDisplayConstants . MODE_BRIEF ; public static final Integer VIEW_MODE_MINIMAL = IFeedDisplayConstants . MODE_MINIMAL ; private ITheme theme ; public void setParent ( IFRS aParent ) { if ( this . parent == aParent ) return ; if ( this . parent != null ) this . removeListener ( this ) ; IFRS oldParent = this . parent ; this . parent = aParent ; if ( this . parent != null ) { this . parent . addListener ( this ) ; } for ( int i = 0 ; i < RenderingSettingsNames . KEYS . length ; i ++ ) { if ( ! isOverwritten ( RenderingSettingsNames . KEYS [ i ] ) ) firePropertyChange ( RenderingSettingsNames . KEYS [ i ] , oldParent == null ? null : oldParent . get ( RenderingSettingsNames . KEYS [ i ] ) , aParent == null ? null : aParent . get ( RenderingSettingsNames . KEYS [ i ] ) ) ; } } public Object get ( final String key ) { Object oval = settings . get ( key ) ; return ( oval == null && parent != null ) ? parent . get ( key ) : oval ; } public void set ( final String key , final Object value ) { Object oldValue = get ( key ) ; if ( value == null ) { settings . remove ( key ) ; } else { settings . put ( key , value ) ; } fireChange ( key , oldValue , get ( key ) ) ; } public void fireChange ( final String key , final Object oldValue , final Object newValue ) { firePropertyChange ( key , oldValue , newValue ) ; } private boolean isOverwritten ( final String property ) { return settings . get ( property ) != null ; } public void reset ( ) { final Set < String > set = settings . keySet ( ) ; String [ ] keys = set . toArray ( new String [ set . size ( ) ] ) ; for ( String key : keys ) { Object oval = settings . get ( key ) ; settings . remove ( key ) ; firePropertyChange ( key , oval , get ( key ) ) ; } } public void restoreFrom ( Preferences preferences ) { setBoolean ( RenderingSettingsNames . IS_GROUPING_ENABLED , preferences ) ; setBoolean ( RenderingSettingsNames . IS_SHOW_EMPTY_GROUPS , preferences ) ; setBoolean ( RenderingSettingsNames . IS_ARTICLE_DATE_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_SORTING_ASCENDING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_SUPPRESSING_OLDER_THAN , preferences ) ; setBoolean ( RenderingSettingsNames . IS_DISPLAYING_FULL_TITLES , preferences ) ; setBoolean ( RenderingSettingsNames . IS_STARZ_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_UNREAD_IN_FEEDS_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_ACTIVITY_CHART_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_UNREAD_IN_GUIDES_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_ICON_IN_GUIDES_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_TEXT_IN_GUIDES_SHOWING , preferences ) ; setBoolean ( RenderingSettingsNames . IS_BIG_ICON_IN_GUIDES , preferences ) ; setInteger ( RenderingSettingsNames . SUPPRESS_OLDER_THAN , preferences ) ; setInteger ( RenderingSettingsNames . ARTICLE_SIZE_LIMIT , preferences ) ; setInteger ( RenderingSettingsNames . ARTICLE_VIEW_MODE , preferences ) ; setInteger ( RenderingSettingsNames . ARTICLE_FILTER , preferences ) ; String defaultThemeName = ResourceUtils . getString ( RESOURCE_DEFAULT_THEME_NAME ) ; String themeName = preferences . get ( RenderingSettingsNames . THEME , defaultThemeName ) ; ITheme restoredTheme = ThemeSupport . getThemeByName ( themeName ) ; if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Default theme name : " + defaultThemeName ) ; LOG . fine ( "Stored theme name  : " + themeName ) ; LOG . fine ( "Loaded theme name  : " + restoredTheme . getName ( ) ) ; } if ( restoredTheme == null ) restoredTheme = ThemeSupport . getThemeByName ( defaultThemeName ) ; setTheme ( restoredTheme ) ; setInteger ( RenderingSettingsNames . ARTICLE_FONT_BIAS , preferences ) ; String mcfS = preferences . get ( RenderingSettingsNames . MAIN_CONTENT_FONT , null ) ; Font fnt = mcfS == null ? null : Font . decode ( mcfS ) ; setMainContentFont ( fnt ) ; } private void setBoolean ( final String key , final Preferences prefs ) { if ( prefs . get ( "render." + key , null ) != null ) { set ( key , Boolean . valueOf ( prefs . getBoolean ( "render." + key , false ) ) ) ; } else { set ( key , null ) ; } } private void setInteger ( final String key , final Preferences prefs ) { if ( prefs . get ( "render." + key , null ) != null ) { set ( key , new Integer ( prefs . getInt ( "render." + key , 0 ) ) ) ; } else { set ( key , null ) ; } } public void storeIn ( Preferences prefs ) { String [ ] keys = settings . keySet ( ) . toArray ( new String [ 0 ] ) ; for ( final String key : keys ) { final Object oval = settings . get ( key ) ; if ( oval == null ) continue ; final String newKey = "render." + key ; if ( oval instanceof Boolean ) { prefs . putBoolean ( newKey , ( Boolean ) oval ) ; } else if ( oval instanceof Integer ) { prefs . putInt ( newKey , ( Integer ) oval ) ; } else if ( oval instanceof String ) { prefs . put ( newKey , ( String ) oval ) ; } else if ( oval instanceof Color ) { final Color cval = ( Color ) oval ; prefs . put ( newKey , "#" + Integer . toHexString ( cval . getRGB ( ) & RGB_MASK ) ) ; } else if ( oval instanceof Font ) { final Font fval = ( Font ) oval ; putFont ( prefs , newKey , fval ) ; } } if ( theme != null ) prefs . put ( RenderingSettingsNames . THEME , theme . getName ( ) ) ; if ( getMainContentFont ( ) != null ) putFont ( prefs , RenderingSettingsNames . MAIN_CONTENT_FONT , getMainContentFont ( ) ) ; } private void putFont ( Preferences prefs , String key , Font font ) { prefs . put ( key , UifUtilities . fontToString ( font ) ) ; } public void addListener ( PropertyChangeListener l ) { super . addPropertyChangeListener ( l ) ; } public void removeListener ( PropertyChangeListener l ) { super . removePropertyChangeListener ( l ) ; } public void propertyChange ( PropertyChangeEvent evt ) { final String property = evt . getPropertyName ( ) ; if ( ! isOverwritten ( property ) ) { firePropertyChange ( property , evt . getOldValue ( ) , evt . getNewValue ( ) ) ; } } public int getArticleViewMode ( ) { return ( Integer ) get ( RenderingSettingsNames . ARTICLE_VIEW_MODE ) ; } public void setArticleViewMode ( int mode ) { set ( RenderingSettingsNames . ARTICLE_VIEW_MODE , new Integer ( mode ) ) ; } public boolean isGroupingEnabled ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_GROUPING_ENABLED ) ; } public void setGroupingEnabled ( boolean groupingEnabled ) { set ( RenderingSettingsNames . IS_GROUPING_ENABLED , Boolean . valueOf ( groupingEnabled ) ) ; } public boolean isShowEmptyGroups ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_SHOW_EMPTY_GROUPS ) ; } public void setShowEmptyGroups ( boolean showEmptyGroups ) { set ( RenderingSettingsNames . IS_SHOW_EMPTY_GROUPS , Boolean . valueOf ( showEmptyGroups ) ) ; } public boolean isArticleDateShowing ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_ARTICLE_DATE_SHOWING ) ; } public void setArticleDateShowing ( boolean articleDateShowing ) { set ( RenderingSettingsNames . IS_ARTICLE_DATE_SHOWING , Boolean . valueOf ( articleDateShowing ) ) ; } public boolean isShowStarz ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_STARZ_SHOWING ) ; } public void setShowStarz ( boolean showStarz ) { set ( RenderingSettingsNames . IS_STARZ_SHOWING , Boolean . valueOf ( showStarz ) ) ; } public void setShowUnreadInFeeds ( boolean showUnreadInFeeds ) { set ( RenderingSettingsNames . IS_UNREAD_IN_FEEDS_SHOWING , Boolean . valueOf ( showUnreadInFeeds ) ) ; } public boolean isShowUnreadInFeeds ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_UNREAD_IN_FEEDS_SHOWING ) ; } public boolean isShowActivityChart ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_ACTIVITY_CHART_SHOWING ) ; } public void setShowActivityChart ( boolean showActivityChart ) { set ( RenderingSettingsNames . IS_ACTIVITY_CHART_SHOWING , Boolean . valueOf ( showActivityChart ) ) ; } public void setShowUnreadInGuides ( boolean show ) { set ( RenderingSettingsNames . IS_UNREAD_IN_GUIDES_SHOWING , Boolean . valueOf ( show ) ) ; } public boolean isShowUnreadInGuides ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_UNREAD_IN_GUIDES_SHOWING ) ; } public void setShowIconInGuides ( boolean show ) { set ( RenderingSettingsNames . IS_ICON_IN_GUIDES_SHOWING , Boolean . valueOf ( show ) ) ; } public boolean isShowIconInGuides ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_ICON_IN_GUIDES_SHOWING ) ; } public void setShowTextInGuides ( boolean show ) { set ( RenderingSettingsNames . IS_TEXT_IN_GUIDES_SHOWING , Boolean . valueOf ( show ) ) ; } public boolean isShowTextInGuides ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_TEXT_IN_GUIDES_SHOWING ) ; } public void setBigIconInGuides ( boolean big ) { set ( RenderingSettingsNames . IS_BIG_ICON_IN_GUIDES , Boolean . valueOf ( big ) ) ; } public boolean isBigIconInGuides ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_BIG_ICON_IN_GUIDES ) ; } public Font getArticleBodyFont ( ) { return getTheme ( ) . getFontWithBias ( ThemeKey . Font . ARTICLE_TEXT , getArticleFontBias ( ) ) ; } public Font getArticleTitleFont ( ) { return getTheme ( ) . getFontWithBias ( ThemeKey . Font . ARTICLE_TITLE , getArticleFontBias ( ) ) ; } public Font getArticleDateFont ( ) { return getTheme ( ) . getFontWithBias ( ThemeKey . Font . ARTICLE_DATE , getArticleFontBias ( ) ) ; } public Font getDividerTextFont ( ) { return getTheme ( ) . getFontWithBias ( ThemeKey . Font . ARTICLEGROUP , getArticleFontBias ( ) ) ; } public Color getSelectedArticleBackground ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . ARTICLE_SEL_BG ) ; } public Color getArticleBackground ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . ARTICLE_UNSEL_BG ) ; } public Color getArticleBodyBackground ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . ARTICLE_UNSEL_BG ) ; } public Color getArticleTitleBackground ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . ARTICLE_UNSEL_BG ) ; } public Color getArticleListFeedNameForeground ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . ARTICLELIST_FEEDNAME_FG ) ; } public Font getArticleListFeedNameFont ( ) { return getTheme ( ) . getFont ( ThemeKey . Font . ARTICLELIST_FEEDNAME ) ; } public Color getGroupingDividerColor ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . ARTICLEGROUP_BG ) ; } public boolean isSuppressingOlderThan ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_SUPPRESSING_OLDER_THAN ) ; } public void setSuppressingOlderThan ( boolean suppressingOlderThan ) { set ( RenderingSettingsNames . IS_SUPPRESSING_OLDER_THAN , Boolean . valueOf ( suppressingOlderThan ) ) ; } public int getSuppressOlderThan ( ) { return ( Integer ) get ( RenderingSettingsNames . SUPPRESS_OLDER_THAN ) ; } public void setSuppressOlderThan ( int suppressOlderThan ) { set ( RenderingSettingsNames . SUPPRESS_OLDER_THAN , new Integer ( suppressOlderThan ) ) ; } public void setSuppressOlderThanString ( String valueAsString ) { Integer value = Integer . valueOf ( valueAsString ) ; setSuppressOlderThan ( value ) ; } public String getSuppressOlderThanString ( ) { return String . valueOf ( getSuppressOlderThan ( ) ) ; } public boolean isSortingAscending ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_SORTING_ASCENDING ) ; } public void setSortingAscending ( boolean sortingAscending ) { set ( RenderingSettingsNames . IS_SORTING_ASCENDING , Boolean . valueOf ( sortingAscending ) ) ; } public int getArticleSizeLimit ( ) { return ( Integer ) get ( RenderingSettingsNames . ARTICLE_SIZE_LIMIT ) ; } public void setArticleSizeLimit ( int articleSizeLimit ) { set ( RenderingSettingsNames . ARTICLE_SIZE_LIMIT , new Integer ( articleSizeLimit ) ) ; } public int getArticleFontBias ( ) { return ( Integer ) get ( RenderingSettingsNames . ARTICLE_FONT_BIAS ) ; } public void setArticleFontBias ( int articleFontBiasChangeAmount ) { int oldFontBias = getArticleFontBias ( ) ; int newFontBias ; if ( articleFontBiasChangeAmount == 0 ) { newFontBias = 0 ; set ( RenderingSettingsNames . ARTICLE_FONT_BIAS , new Integer ( newFontBias ) ) ; } else { newFontBias = oldFontBias + articleFontBiasChangeAmount ; set ( RenderingSettingsNames . ARTICLE_FONT_BIAS , new Integer ( newFontBias ) ) ; } fireChange ( RenderingSettingsNames . ARTICLE_FONT_BIAS , oldFontBias , newFontBias ) ; } public int getArticleFilter ( ) { return ( Integer ) get ( RenderingSettingsNames . ARTICLE_FILTER ) ; } public void setArticleFilter ( int artFilter ) { set ( RenderingSettingsNames . ARTICLE_FILTER , new Integer ( artFilter ) ) ; } public Color getRegisteredBlogLinkColor ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . BLOGLINK_DISC_BG ) ; } public Color getUnregisteredBlogLinkColor ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . BLOGLINK_UNDISC_BG ) ; } public boolean isDisplayingFullTitles ( ) { return ( Boolean ) get ( RenderingSettingsNames . IS_DISPLAYING_FULL_TITLES ) ; } public void setDisplayingFullTitles ( boolean value ) { set ( RenderingSettingsNames . IS_DISPLAYING_FULL_TITLES , Boolean . valueOf ( value ) ) ; } public ITheme getTheme ( ) { ITheme theTheme = theme ; if ( theTheme == null && parent != null ) theTheme = parent . getTheme ( ) ; return theTheme ; } public void setTheme ( ITheme aTheme ) { if ( aTheme == null ) throw new IllegalArgumentException ( Strings . error ( "unspecified.theme" ) ) ; ITheme oldTheme = theme ; theme = aTheme ; firePropertyChange ( RenderingSettingsNames . THEME , oldTheme , theme ) ; } public Color getArticleTitleColor ( boolean aSelected ) { ThemeKey . Color key = aSelected ? ThemeKey . Color . ARTICLE_TITLE_SEL_FG : ThemeKey . Color . ARTICLE_TITLE_UNSEL_FG ; return getTheme ( ) . getColor ( key ) ; } public Color getArticleTextColor ( boolean aSelected ) { ThemeKey . Color key = aSelected ? ThemeKey . Color . ARTICLE_TEXT_SEL_FG : ThemeKey . Color . ARTICLE_TEXT_UNSEL_FG ; return getTheme ( ) . getColor ( key ) ; } public Color getArticleDateColor ( boolean aSelected ) { ThemeKey . Color key = aSelected ? ThemeKey . Color . ARTICLE_DATE_SEL_FG : ThemeKey . Color . ARTICLE_DATE_UNSEL_FG ; return getTheme ( ) . getColor ( key ) ; } public Color getFeedsListSelectedBackground ( ) { return getTheme ( ) . getColor ( ThemeKey . Color . FEEDSLIST_SEL_BG ) ; } public Color getFeedsListBackground ( boolean alternating ) { ThemeKey . Color key = alternating ? ThemeKey . Color . FEEDSLIST_ALT_BG : ThemeKey . Color . FEEDSLIST_BG ; return getTheme ( ) . getColor ( key ) ; } public Color getFeedsListForeground ( boolean selected ) { ThemeKey . Color key = selected ? ThemeKey . Color . FEEDSLIST_SEL_FG : ThemeKey . Color . FEEDSLIST_FG ; return getTheme ( ) . getColor ( key ) ; } public Font getMainContentFont ( ) { return getTheme ( ) . getFont ( ThemeKey . Font . MAIN ) ; } public void setMainContentFont ( Font font ) { Font oldFont = getMainContentFont ( ) ; if ( ! oldFont . equals ( font ) ) { Theme . setMainFontOverride ( font ) ; firePropertyChange ( RenderingSettingsNames . THEME , null , theme ) ; } } } 
=======
public class UnionNameClassNormalizer extends NameClassNormalizer { public UnionNameClassNormalizer ( ) { super ( new NullNameClass ( ) ) ; } public void add ( NameClass nameClass ) { setNameClass ( new ChoiceNameClass ( getNameClass ( ) , nameClass ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
