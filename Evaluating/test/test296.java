<<<<<<< HEAD
@ SuppressWarnings ( "boxing" ) public class MSSQLDetector implements INetworkServiceDetector { private final Pattern responsePattern = Pattern . compile ( "(^\\x04\\x01\\x00\\x25|^\\x05\\x6e\\x00|;MSSQLSERVER;).*" , Pattern . MULTILINE | Pattern . DOTALL ) ; static Map < Integer , String > versionToOS = new HashMap < Integer , String > ( ) ; static { versionToOS . put ( 0x09000c6e , "2005 SP2+Q940128" ) ; versionToOS . put ( 0x09000c6b , "2005 SP2+Q938243" ) ; versionToOS . put ( 0x09000c69 , "2005 SP2+Q939563" ) ; versionToOS . put ( 0x09000c63 , "2005 SP2+Q937745" ) ; versionToOS . put ( 0x09000c57 , "2005 SP2+Q934459" ) ; versionToOS . put ( 0x09000c54 , "2005 SP2+Q934226" ) ; versionToOS . put ( 0x09000c51 , "2005 SP2+Q933564" ) ; versionToOS . put ( 0x09000c50 , "2005 SP2+Q933097 (Cumulative HF1)" ) ; versionToOS . put ( 0x09000bee , "2005 SP2+Q934458" ) ; versionToOS . put ( 0x09000bea , "2005 SP2+Q933508" ) ; versionToOS . put ( 0x09000be3 , "2005 SP2+Q933508 (use this if SP2 was applied prior to 3/8)" ) ; versionToOS . put ( 0x09000be2 , "2005 'Fixed' SP2 (use this if SP2 was NOT applied yet - orig. RTM removed)" ) ; versionToOS . put ( 0x09000bd3 , "2005 SP2 CTP (November)" ) ; versionToOS . put ( 0x09000bd2 , "2005 SP1+Q929376" ) ; versionToOS . put ( 0x090008c5 , "2005 SP1+Q933573" ) ; versionToOS . put ( 0x090008ba , "2005 SP1+Q937343" ) ; versionToOS . put ( 0x090008b8 , "2005 SP1+Q937277" ) ; versionToOS . put ( 0x090008b5 , "2005 SP1+Q935446" ) ; versionToOS . put ( 0x090008af , "2005 SP1+Q932393" ) ; versionToOS . put ( 0x090008ad , "2005 SP1+Q931593" ) ; versionToOS . put ( 0x090008a8 , "2005 SP1+Q931821" ) ; versionToOS . put ( 0x090008a7 , "2005 SP1+Q931666" ) ; versionToOS . put ( 0x090008a1 , "2005 SP1+Q929278" ) ; versionToOS . put ( 0x0900089a , "2005 SP1+Q927643" ) ; versionToOS . put ( 0x09000899 , "2005 SP1+Q927289" ) ; versionToOS . put ( 0x09000893 , "2005 SP1+Q926240" ) ; versionToOS . put ( 0x09000892 , "2005 SP1+Q925744" ) ; versionToOS . put ( 0x09000890 , "2005 SP1+Q924954/925335" ) ; versionToOS . put ( 0x0900088f , "2005 SP1+Q925135" ) ; versionToOS . put ( 0x0900088e , "2005 SP1+Q925227" ) ; versionToOS . put ( 0x0900088d , "2005 SP1+Q925153" ) ; versionToOS . put ( 0x0900088b , "2005 SP1+Q923849" ) ; versionToOS . put ( 0x0900086c , "2005 SP1+Q919611" ) ; versionToOS . put ( 0x09000802 , "2005 SP1+.NET Vulnerability fix" ) ; versionToOS . put ( 0x090007ff , "2005 SP1 RTM" ) ; versionToOS . put ( 0x090007f8 , "2005 SP1 CTP" ) ; versionToOS . put ( 0x090007ed , "SP1 Beta" ) ; versionToOS . put ( 0x09000619 , "2005 RTM+Q932556" ) ; versionToOS . put ( 0x09000616 , "2005 RTM+Q926493" ) ; versionToOS . put ( 0x09000612 , "2005 RTM+Q926292" ) ; versionToOS . put ( 0x0900060f , "2005 RTM+Q922804" ) ; versionToOS . put ( 0x0900060b , "2005 RTM+Q918276" ) ; versionToOS . put ( 0x09000603 , "2005 RTM+Q917738" ) ; versionToOS . put ( 0x09000602 , "2005 RTM+Q917824" ) ; versionToOS . put ( 0x09000600 , "2005 RTM+Q917016" ) ; versionToOS . put ( 0x090005fe , "2005 RTM+Q916706" ) ; versionToOS . put ( 0x090005fd , "2005 RTM+Q916086" ) ; versionToOS . put ( 0x090005fc , "2005 RTM+Q916046" ) ; versionToOS . put ( 0x090005fb , "2005 RTM+Q915918" ) ; versionToOS . put ( 0x090005ef , "2005 RTM+Q913494" ) ; versionToOS . put ( 0x090005ea , "2005 RTM+Q912471" ) ; versionToOS . put ( 0x090005df , "2005 RTM+Q911662" ) ; versionToOS . put ( 0x090005de , "2005 RTM+Q915793" ) ; versionToOS . put ( 0x090005dc , "2005 RTM+Q910416" ) ; versionToOS . put ( 0x0900057e , "2005 RTM+Q932557" ) ; versionToOS . put ( 0x09000577 , "2005 RTM" ) ; versionToOS . put ( 0x09000522 , "September CTP Release" ) ; versionToOS . put ( 0x090004a3 , "June CTP Release" ) ; versionToOS . put ( 0x0900045c , "April CTP Release" ) ; versionToOS . put ( 0x09000442 , "March CTP Release (may list as Feb.)" ) ; versionToOS . put ( 0x090003d5 , "December CTP Release" ) ; versionToOS . put ( 0x090003b7 , "October CTP Release" ) ; versionToOS . put ( 0x09000395 , "Internal build (?)" ) ; versionToOS . put ( 0x09000354 , "Beta 2" ) ; versionToOS . put ( 0x09000351 , "Internal build (?)" ) ; versionToOS . put ( 0x0900034c , "Internal build (?)" ) ; versionToOS . put ( 0x09000344 , "Express Ed. Tech Preview" ) ; versionToOS . put ( 0x09000337 , "Internal build (IDW4)" ) ; versionToOS . put ( 0x09000316 , "Internal build (IDW3)" ) ; versionToOS . put ( 0x090002ff , "Internal build (IDW2)" ) ; versionToOS . put ( 0x090002eb , "Internal build (IDW)" ) ; versionToOS . put ( 0x09000285 , "MS Internal (?)" ) ; versionToOS . put ( 0x09000260 , "Beta 1" ) ; versionToOS . put ( 0x0700047e , "7.0 SP4+Q891116" ) ; versionToOS . put ( 0x07000478 , "7.0 SP4+Q830233" ) ; versionToOS . put ( 0x07000477 , "7.0 SP4+Q829015" ) ; versionToOS . put ( 0x07000449 , "7.0 SP4+Q822756" ) ; versionToOS . put ( 0x07000446 , "7.0 SP4+Q815495" ) ; versionToOS . put ( 0x07000437 , "329499" ) ; versionToOS . put ( 0x07000436 , "7.0 SP4+Q327068" ) ; versionToOS . put ( 0x07000435 , "7.0 SP4+Q316333" ) ; versionToOS . put ( 0x07000427 , "7.0 SP4 - All languages" ) ; versionToOS . put ( 0x07000409 , "7.0 SP3+Q324469" ) ; versionToOS . put ( 0x07000402 , "7.0 SP3+Q319851" ) ; versionToOS . put ( 0x070003ec , "7.0 SP3+Q304851" ) ; versionToOS . put ( 0x070003e4 , "7.0 SP3+Q299717" ) ; versionToOS . put ( 0x070003d2 , "7.0 SP3+Q285870" ) ; versionToOS . put ( 0x070003d1 , "7.0 SP3+Q284351" ) ; versionToOS . put ( 0x070003ca , "7.0 SP3+Q283837/282243" ) ; versionToOS . put ( 0x070003c1 , "7.0 SP3 - All languages" ) ; versionToOS . put ( 0x07000399 , "7.0 SP2+Q283837" ) ; versionToOS . put ( 0x07000397 , "7.0 SP2+Q282243" ) ; versionToOS . put ( 0x07000396 , "7.0 SP2+Q280380" ) ; versionToOS . put ( 0x07000395 , "7.0 SP2+Q279180" ) ; versionToOS . put ( 0x0700038e , "7.0 SP2+Q275901" ) ; versionToOS . put ( 0x07000389 , "7.0 SP2+Q274266" ) ; versionToOS . put ( 0x07000379 , "7.0 SP2+Q243741" ) ; versionToOS . put ( 0x0700036f , "7.0 SP2+Q281185" ) ; versionToOS . put ( 0x07000359 , "7.0 SP2+Q260346" ) ; versionToOS . put ( 0x0700034a , "7.0 SP2" ) ; versionToOS . put ( 0x07000347 , "7.0 SP2 Unidentified" ) ; versionToOS . put ( 0x07000343 , "7.0 SP2 Beta" ) ; versionToOS . put ( 0x07000308 , "7.0 SP1+Q258087" ) ; versionToOS . put ( 0x07000302 , "7.0 SP1+Q252905" ) ; versionToOS . put ( 0x070002e9 , "7.0 SP1+Q253738" ) ; versionToOS . put ( 0x070002d2 , "7.0 SP1+Q239458" ) ; versionToOS . put ( 0x070002bb , "7.0 SP1" ) ; versionToOS . put ( 0x070002b1 , "7.0 SP1 Beta" ) ; versionToOS . put ( 0x070002a5 , "7.0 MSDE O2K Dev" ) ; versionToOS . put ( 0x07000296 , "7.0 Gold+Q232707" ) ; versionToOS . put ( 0x07000292 , "7.0 Gold+Q244763" ) ; versionToOS . put ( 0x07000291 , "7.0 Gold+Q229875" ) ; versionToOS . put ( 0x07000283 , "7.0 Gold+Q220156" ) ; versionToOS . put ( 0x0700026f , "7.0 Gold (RTM), no SP" ) ; versionToOS . put ( 0x07000247 , "7.0 RC1" ) ; versionToOS . put ( 0x07000205 , "7.0 Beta 3" ) ; versionToOS . put ( 0x063201df , "6.5 Post SP5a" ) ; versionToOS . put ( 0x063201a0 , "6.5 Bad SP5a" ) ; versionToOS . put ( 0x0632019f , "6.5 Bad SP5" ) ; versionToOS . put ( 0x06320153 , "6.5 Y2K Hotfix" ) ; versionToOS . put ( 0x06320129 , "6.5 Site Server 3" ) ; versionToOS . put ( 0x06320119 , "6.5 SP4" ) ; versionToOS . put ( 0x06320103 , "6.5 SP3 SBS Only" ) ; versionToOS . put ( 0x06320102 , "6.5 SP3" ) ; versionToOS . put ( 0x063200fc , "6.5 Bad SP3" ) ; versionToOS . put ( 0x063200f0 , "6.5 SP2" ) ; versionToOS . put ( 0x063200d5 , "6.5 SP1" ) ; versionToOS . put ( 0x063200c9 , "6.5 Gold" ) ; versionToOS . put ( 0x06000097 , "6.0 SP3" ) ; versionToOS . put ( 0x0600008b , "6.0 SP2" ) ; versionToOS . put ( 0x0600007c , "6.0 SP1" ) ; versionToOS . put ( 0x06000079 , "6.0 No SP" ) ; versionToOS . put ( 0x080008c9 , "2000 SP4+Q936232" ) ; versionToOS . put ( 0x080008c8 , "2000 SP4+Q935950" ) ; versionToOS . put ( 0x080008c5 , "2000 SP4+Q933573" ) ; versionToOS . put ( 0x080008c4 , "2000 SP4+Q934203" ) ; versionToOS . put ( 0x080008be , "2000 SP4+Q931932" ) ; versionToOS . put ( 0x080008b8 , "2000 SP4+Q928568" ) ; versionToOS . put ( 0x080008b7 , "2000 SP4+Q928079" ) ; versionToOS . put ( 0x080008aa , "2000 SP4+Q925297" ) ; versionToOS . put ( 0x080008a1 , "2000 SP4+Q923797" ) ; versionToOS . put ( 0x0800089f , "2000 SP4+Q923344" ) ; versionToOS . put ( 0x08000899 , "2000 SP4+Q920930" ) ; versionToOS . put ( 0x08000897 , "2000 SP4+Q919221" ) ; versionToOS . put ( 0x08000894 , "2000 SP4+Q919165" ) ; versionToOS . put ( 0x08000890 , "2000 SP4+Q917606" ) ; versionToOS . put ( 0x08000884 , "2000 SP4+Q913684 (64bit)" ) ; versionToOS . put ( 0x0800087c , "2000 SP4+Q910707" ) ; versionToOS . put ( 0x0800087b , "2000 SP4+Q909369" ) ; versionToOS . put ( 0x08000878 , "2000 SP4+Q907813" ) ; versionToOS . put ( 0x08000877 , "2000 SP4+Q921293" ) ; versionToOS . put ( 0x08000876 , "2000 SP4+Q909734" ) ; versionToOS . put ( 0x08000872 , "2000 SP4+Q904660" ) ; versionToOS . put ( 0x0800086c , "2000 SP4+Q906790" ) ; versionToOS . put ( 0x08000864 , "2000 SP4+Q899430/31/900390/404/901212/902150/955" ) ; versionToOS . put ( 0x08000863 , "2000 SP4+Q899410" ) ; versionToOS . put ( 0x08000861 , "2000 SP4+Q826906/836651" ) ; versionToOS . put ( 0x080007f8 , "2000 SP4+Q899761" ) ; versionToOS . put ( 0x080007f7 , "2000 SP4  " ) ; versionToOS . put ( 0x080007ea , "2000 SP4 Beta" ) ; versionToOS . put ( 0x0800060b , "2000 SP3+Q899410" ) ; versionToOS . put ( 0x0800040d , "2000 SP3+Q930484" ) ; versionToOS . put ( 0x0800040c , "2000 SP3+Q929410" ) ; versionToOS . put ( 0x0800040b , "2000 SP3+Q917593" ) ; versionToOS . put ( 0x0800040a , "2000 SP3+Q915328" ) ; versionToOS . put ( 0x08000405 , "2000 SP3+Q902852" ) ; versionToOS . put ( 0x08000403 , "2000 SP3+Q900416" ) ; versionToOS . put ( 0x08000401 , "2000 SP3+Q899428/899430" ) ; versionToOS . put ( 0x08000400 , "2000 SP3+Q898709" ) ; versionToOS . put ( 0x080003fd , "2000 SP3+Q887700" ) ; versionToOS . put ( 0x080003fc , "2000 SP3+Q896985" ) ; versionToOS . put ( 0x080003fb , "2000 SP3+Q897572" ) ; versionToOS . put ( 0x080003f9 , "2000 SP3+Q896425" ) ; versionToOS . put ( 0x080003f6 , "2000 SP3+Q895123/187" ) ; versionToOS . put ( 0x080003f5 , "2000 SP3+Q891866" ) ; versionToOS . put ( 0x080003f1 , "2000 SP3+Q894257" ) ; versionToOS . put ( 0x080003ef , "2000 SP3+Q893312" ) ; versionToOS . put ( 0x080003e8 , "2000 SP3+Q891585" ) ; versionToOS . put ( 0x080003e5 , "2000 SP3+Q891311" ) ; versionToOS . put ( 0x080003e4 , "2000 SP3+Q891017/891268" ) ; versionToOS . put ( 0x080003e2 , "2000 SP3+Q890942/768/767" ) ; versionToOS . put ( 0x080003e1 , "2000 SP3+Q890925/888444/890742" ) ; versionToOS . put ( 0x080003df , "2000 SP3+Q889314" ) ; versionToOS . put ( 0x080003de , "2000 SP3+Q890200" ) ; versionToOS . put ( 0x080003dc , "2000 SP3+Q889166" ) ; versionToOS . put ( 0x080003d9 , "2000 SP3+Q889239" ) ; versionToOS . put ( 0x080003d4 , "2000 SP3+Q887974" ) ; versionToOS . put ( 0x080003d1 , "2000 SP3+Q888007 " ) ; versionToOS . put ( 0x080003cd , "2000 SP3+Q884554" ) ; versionToOS . put ( 0x080003cc , "2000 SP3+Q885290" ) ; versionToOS . put ( 0x080003ca , "2000 SP3+Q872842" ) ; versionToOS . put ( 0x080003c7 , "2000 SP3+Q878501" ) ; versionToOS . put ( 0x080003c2 , "2000 SP3+Q883415" ) ; versionToOS . put ( 0x080003c1 , "2000 SP3+Q873446" ) ; versionToOS . put ( 0x080003bf , "2000 SP3+Q878500" ) ; versionToOS . put ( 0x080003bd , "2000 SP3+Q870994" ) ; versionToOS . put ( 0x080003bb , "2000 SP3+Q867798" ) ; versionToOS . put ( 0x080003ba , "2000 SP3+Q843282" ) ; versionToOS . put ( 0x080003b8 , "2000 SP3+Q867878/867879/867880" ) ; versionToOS . put ( 0x080003b0 , "2000 SP3+Q839280" ) ; versionToOS . put ( 0x080003a9 , "2000 SP3+Q841776" ) ; versionToOS . put ( 0x080003a8 , "2000 SP3+Q841627" ) ; versionToOS . put ( 0x080003a7 , "2000 SP3+Q841401" ) ; versionToOS . put ( 0x080003a6 , "2000 SP3+Q841404" ) ; versionToOS . put ( 0x080003a5 , "2000 SP3+Q840856" ) ; versionToOS . put ( 0x080003a1 , "2000 SP3+Q839529" ) ; versionToOS . put ( 0x080003a0 , "2000 SP3+Q839589" ) ; versionToOS . put ( 0x0800039f , "2000 SP3+Q839688" ) ; versionToOS . put ( 0x0800039e , "2000 SP3+Q839523" ) ; versionToOS . put ( 0x0800039b , "2000 SP3+Q838460" ) ; versionToOS . put ( 0x0800039a , "2000 SP3+Q837970" ) ; versionToOS . put ( 0x08000397 , "2000 SP3+Q837957" ) ; versionToOS . put ( 0x08000394 , "2000 SP3+Q317989" ) ; versionToOS . put ( 0x08000393 , "2000 SP3+Q837401" ) ; versionToOS . put ( 0x08000391 , "2000 SP3+Q836651" ) ; versionToOS . put ( 0x0800038f , "2000 SP3+Q837957" ) ; versionToOS . put ( 0x0800038e , "2000 SP3+Q834798" ) ; versionToOS . put ( 0x0800038c , "2000 SP3+Q834290" ) ; versionToOS . put ( 0x08000388 , "2000 SP3+Q834453" ) ; versionToOS . put ( 0x0800037c , "2000 SP3+Q833710" ) ; versionToOS . put ( 0x0800037b , "2000 SP3+Q836141" ) ; versionToOS . put ( 0x0800036f , "2000 SP3+Q832977" ) ; versionToOS . put ( 0x0800036e , "2000 SP3+Q831950" ) ; versionToOS . put ( 0x0800036c , "2000 SP3+Q830912/831997/831999" ) ; versionToOS . put ( 0x08000369 , "2000 SP3+Q830887" ) ; versionToOS . put ( 0x08000367 , "2000 SP3+Q830767/830860" ) ; versionToOS . put ( 0x08000366 , "2000 SP3+Q830262" ) ; versionToOS . put ( 0x08000365 , "2000 SP3+Q830588" ) ; versionToOS . put ( 0x08000363 , "2000 SP3+Q830366" ) ; versionToOS . put ( 0x08000362 , "2000 SP3+Q830366" ) ; versionToOS . put ( 0x08000361 , "2000 SP3+Q830395/828945" ) ; versionToOS . put ( 0x0800035f , "2000 SP3+Q829205/829444" ) ; versionToOS . put ( 0x0800035b , "2000 SP3+Q821334 *May contain errors*" ) ; versionToOS . put ( 0x0800035a , "2000 SP3+Q828637" ) ; versionToOS . put ( 0x08000359 , "2000 SP3+Q828017/827714/828308" ) ; versionToOS . put ( 0x08000358 , "2000 SP3+Q828096" ) ; versionToOS . put ( 0x08000356 , "2000 SP3+Q828699" ) ; versionToOS . put ( 0x08000354 , "2000 SP3+Q830466/827954" ) ; versionToOS . put ( 0x08000353 , "2000 SP3+Q826754" ) ; versionToOS . put ( 0x08000352 , "2000 SP3+Q826860/826815/826906" ) ; versionToOS . put ( 0x08000350 , "2000 SP3+Q826822" ) ; versionToOS . put ( 0x0800034f , "2000 SP3+Q826433" ) ; versionToOS . put ( 0x0800034d , "2000 SP3+Q826364/825854" ) ; versionToOS . put ( 0x0800034c , "2000 SP3+Q826080" ) ; versionToOS . put ( 0x0800034a , "2000 SP3+Q825043" ) ; versionToOS . put ( 0x08000349 , "2000 SP3+Q825225" ) ; versionToOS . put ( 0x08000348 , "2000 SP3+Q319477/319477" ) ; versionToOS . put ( 0x08000347 , "2000 SP3+Q823877/824027/820788" ) ; versionToOS . put ( 0x08000345 , "2000 SP3+Q821741/548/740/823514" ) ; versionToOS . put ( 0x08000333 , "2000 SP3+Q826161" ) ; versionToOS . put ( 0x08000332 , "2000 SP3+Q821277/337/818388/826161/821280" ) ; versionToOS . put ( 0x08000330 , "2000 SP3+Q818766" ) ; versionToOS . put ( 0x0800032e , "2000 SP3+Q819662" ) ; versionToOS . put ( 0x0800032b , "2000 SP3+Q819248/819662/818897" ) ; versionToOS . put ( 0x08000327 , "2000 SP3+Q818899" ) ; versionToOS . put ( 0x08000324 , "2000 SP3+Q818729" ) ; versionToOS . put ( 0x08000321 , "2000 SP3+Q818540" ) ; versionToOS . put ( 0x08000320 , "2000 SP3+Q818414/097/188" ) ; versionToOS . put ( 0x0800031e , "2000 SP3+Q817464" ) ; versionToOS . put ( 0x0800031a , "2000 SP3+Q817464/813524/816440/817709" ) ; versionToOS . put ( 0x08000317 , "2000 SP3+Q815249" ) ; versionToOS . put ( 0x08000316 , "2000 SP3+Q817081" ) ; versionToOS . put ( 0x08000315 , "2000 SP3+Q816840" ) ; versionToOS . put ( 0x08000314 , "2000 SP3+Q816985" ) ; versionToOS . put ( 0x0800030d , "2000 SP3+Q815057" ) ; versionToOS . put ( 0x0800030c , "2000 SP3+Q816084/810185" ) ; versionToOS . put ( 0x0800030b , "2000 SP3+Q814035" ) ; versionToOS . put ( 0x08000308 , "2000 SP3+Unidentified" ) ; versionToOS . put ( 0x08000307 , "2000 SP3+Q815115" ) ; versionToOS . put ( 0x08000301 , "2000 SP3+Q814889/93" ) ; versionToOS . put ( 0x080002fb , "2000 SP3+Q814113" ) ; versionToOS . put ( 0x080002fa , "2000 SP3+Q814032" ) ; versionToOS . put ( 0x080002f8 , "2000 SP3/SP3a" ) ; versionToOS . put ( 0x080002e7 , "2000 SP2+Q818406/763" ) ; versionToOS . put ( 0x080002e5 , "2000 SP2+Q818096" ) ; versionToOS . put ( 0x080002e0 , "2000 SP2+Q816937" ) ; versionToOS . put ( 0x080002df , "2000 SP2+Q814889" ) ; versionToOS . put ( 0x080002dd , "2000 SP2+Q813759" ) ; versionToOS . put ( 0x080002da , "2000 SP2+Q813769" ) ; versionToOS . put ( 0x080002d8 , "2000 SP2+Q814460" ) ; versionToOS . put ( 0x080002d5 , "2000 SP2+Q812995/813494" ) ; versionToOS . put ( 0x080002d3 , "2000 SP2+Q812798" ) ; versionToOS . put ( 0x080002d1 , "2000 SP2+Q812250/812393" ) ; versionToOS . put ( 0x080002ce , "2000 SP2+Q811703" ) ; versionToOS . put ( 0x080002cb , "2000 SP2+Q810688/811611" ) ; versionToOS . put ( 0x080002ca , "2000 SP2+Q811478" ) ; versionToOS . put ( 0x080002c9 , "2000 SP2/3+Q811205" ) ; versionToOS . put ( 0x080002c6 , "2000 SP2/3+Q811052" ) ; versionToOS . put ( 0x080002c1 , "2000 SP2+Q810920" ) ; versionToOS . put ( 0x080002bf , "2000 SP2+Q810526" ) ; versionToOS . put ( 0x080002be , "2000 SP2+Q328551" ) ; versionToOS . put ( 0x080002bd , "2000 SP2+Q810026/810163" ) ; versionToOS . put ( 0x080002bc , "2000 SP2+Q810072" ) ; versionToOS . put ( 0x080002b8 , "2000 SP2+Q810052/10" ) ; versionToOS . put ( 0x080002b7 , "2000 SP2+Q331885/965/968" ) ; versionToOS . put ( 0x080002b5 , "2000 SP2+Q330212" ) ; versionToOS . put ( 0x080002b1 , "2000 SP2+Q329499" ) ; versionToOS . put ( 0x080002b0 , "2000 SP2+Q329487" ) ; versionToOS . put ( 0x080002ae , "2000 SP2+Q316333" ) ; versionToOS . put ( 0x080002aa , "2000 SP3+Q319851" ) ; versionToOS . put ( 0x080002a7 , "2000 SP2+Q316333" ) ; versionToOS . put ( 0x080002a6 , "2000 SP2+Q328354" ) ; versionToOS . put ( 0x0800029b , "2000 SP2+8/14 fix" ) ; versionToOS . put ( 0x08000299 , "2000 SP2+8/8 fix" ) ; versionToOS . put ( 0x08000295 , "2000 SP2+Q326999" ) ; versionToOS . put ( 0x0800028f , "2000 SP2+7/24 fix" ) ; versionToOS . put ( 0x0800028c , "2000 SP2+Q810010?" ) ; versionToOS . put ( 0x0800028a , "2000 SP2+Q322853" ) ; versionToOS . put ( 0x08000284 , "2000 SP2+Q324186" ) ; versionToOS . put ( 0x08000260 , "2000 SP2+Q319507" ) ; versionToOS . put ( 0x0800025c , "2000 SP2+3/29 fix" ) ; versionToOS . put ( 0x08000252 , "2000 SP2+Q319477/319477" ) ; versionToOS . put ( 0x08000242 , "2000 SP2+Q317979/318045" ) ; versionToOS . put ( 0x08000231 , "2000 SP2+1/29 fix" ) ; versionToOS . put ( 0x0800022e , "2000 SP2+Q314003/315395" ) ; versionToOS . put ( 0x08000228 , "2000 SP2+Q313002/5" ) ; versionToOS . put ( 0x08000216 , "2000 SP2.01" ) ; versionToOS . put ( 0x08000214 , "2000 SP2" ) ; versionToOS . put ( 0x080001db , "2000 SP1+1/29 fix" ) ; versionToOS . put ( 0x080001da , "2000 SP1+Q315395" ) ; versionToOS . put ( 0x080001d9 , "2000 SP1+Q314003" ) ; versionToOS . put ( 0x080001d7 , "2000 SP1+Q313302" ) ; versionToOS . put ( 0x080001d5 , "2000 SP1+Q313005" ) ; versionToOS . put ( 0x080001c4 , "2000 SP1+Q308547" ) ; versionToOS . put ( 0x080001bc , "2000 SP1+Q307540/307655" ) ; versionToOS . put ( 0x080001bb , "2000 SP1+Q307538" ) ; versionToOS . put ( 0x080001ac , "2000 SP1+Q304850" ) ; versionToOS . put ( 0x08000180 , "2000 SP1" ) ; versionToOS . put ( 0x0800011f , "2000 No SP+Q297209" ) ; versionToOS . put ( 0x080000fb , "2000 No SP+Q300194" ) ; versionToOS . put ( 0x080000fa , "2000 No SP+Q291683" ) ; versionToOS . put ( 0x080000f9 , "2000 No SP+Q288122" ) ; versionToOS . put ( 0x080000ef , "2000 No SP+Q285290" ) ; versionToOS . put ( 0x080000e9 , "2000 No SP+Q282416" ) ; versionToOS . put ( 0x080000e7 , "2000 No SP+Q282279" ) ; versionToOS . put ( 0x080000e2 , "2000 No SP+Q278239" ) ; versionToOS . put ( 0x080000e1 , "2000 No SP+Q281663" ) ; versionToOS . put ( 0x080000df , "2000 No SP+Q280380" ) ; versionToOS . put ( 0x080000de , "2000 No SP+Q281769" ) ; versionToOS . put ( 0x080000da , "2000 No SP+Q279183" ) ; versionToOS . put ( 0x080000d9 , "2000 No SP+Q279293/279296" ) ; versionToOS . put ( 0x080000d3 , "2000 No SP+Q276329" ) ; versionToOS . put ( 0x080000d2 , "2000 No SP+Q275900" ) ; versionToOS . put ( 0x080000cd , "2000 No SP+Q274330" ) ; versionToOS . put ( 0x080000cc , "2000 No SP+Q274329" ) ; versionToOS . put ( 0x080000c2 , "2000 RTM/No SP" ) ; versionToOS . put ( 0x080000be , "2000 Gold, no SP" ) ; versionToOS . put ( 0x08000064 , "2000 Beta 2" ) ; versionToOS . put ( 0x0800004e , "2000 EAP5" ) ; versionToOS . put ( 0x0800002f , "2000 EAP4" ) ; } public Map < String , String > detect ( String trigger , String response ) { if ( ! responsePattern . matcher ( response ) . matches ( ) ) return null ; Map < String , String > answer = new HashMap < String , String > ( ) ; answer . put ( "serviceType" , "MSSQL" ) ; byte [ ] data = null ; try { data = response . getBytes ( "iso-8859-1" ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } if ( data == null || data . length == 0 ) { return answer ; } ByteBuffer buffer = ByteBuffer . wrap ( data ) ; if ( buffer . get ( ) != 0x04 ) { return answer ; } if ( buffer . get ( ) != 0x01 ) { return answer ; } int buflen = buffer . getShort ( ) & 0xffff ; if ( buflen < 19 ) { return answer ; } buffer . position ( 0x0b ) ; if ( buffer . getShort ( ) != 6 ) { return answer ; } buffer . position ( 0x09 ) ; int index = buffer . getShort ( ) + 8 ; if ( ( index + 6 ) > buflen ) { return answer ; } buffer . position ( index ) ; int version = buffer . getInt ( ) ; String versionString = String . format ( "%d.%d.%d" , version > > 24 , ( version > > 16 ) & 0xff , version & 0xffff ) ; answer . put ( "version" , versionString ) ; String banner = versionString ; String os = versionToOS . get ( version ) ; if ( os != null ) { answer . put ( "os" , "Windows " + os ) ; banner = banner + " " + os ; } else { answer . put ( "os" , "Windows" ) ; } answer . put ( "arch" , "i386" ) ; answer . put ( "banner" , banner ) ; return answer ; } public PortSet getPorts ( ) { return new PortSet ( "1433" ) ; } public String getProtocol ( ) { return "tcp" ; } } 
=======
class AttachPlaceholderAction extends ResultAction { AttachPlaceholderAction ( ModeUsage modeUsage ) { super ( modeUsage ) ; } void perform ( ContentHandler handler , SectionState state ) { state . attachPlaceholder ( getModeUsage ( ) , handler ) ; } ResultAction changeCurrentMode ( Mode mode ) { return new AttachPlaceholderAction ( getModeUsage ( ) . changeCurrentMode ( mode ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
