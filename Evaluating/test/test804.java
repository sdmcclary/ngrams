public class MockitoClasspathFixProcessor extends ClasspathFixProcessor { public MockitoClasspathFixProcessor ( ) { } @ Override public ClasspathFixProposal [ ] getFixImportProposals ( final IJavaProject project , String missingType ) throws CoreException { if ( missingType == null ) return null ; if ( missingType . startsWith ( "org.mockito" ) ) { return new ClasspathFixProposal [ ] { new ClasspathFixProposal ( ) { @ Override public Change createChange ( IProgressMonitor monitor ) throws CoreException { if ( monitor == null ) { monitor = new NullProgressMonitor ( ) ; } monitor . beginTask ( Messages . MockitoClasspathFixProcessor_beginAddMockitoLibraryTask , 1 ) ; IClasspathEntry entry = new MockitoEntry ( ) . getContainer ( ) ; IClasspathEntry [ ] oldEntries = project . getRawClasspath ( ) ; ArrayList < IClasspathEntry > newEntries = new ArrayList < IClasspathEntry > ( oldEntries . length + 1 ) ; boolean added = false ; for ( int i = 0 ; i < oldEntries . length ; i ++ ) { IClasspathEntry curr = oldEntries [ i ] ; if ( curr . getEntryKind ( ) == IClasspathEntry . CPE_CONTAINER ) { IPath path = curr . getPath ( ) ; if ( path . equals ( entry . getPath ( ) ) ) { return new NullChange ( ) ; } else if ( path . matchingFirstSegments ( entry . getPath ( ) ) > 0 ) { if ( ! added ) { curr = entry ; added = true ; } else { curr = null ; } } } if ( curr != null ) { newEntries . add ( curr ) ; } } if ( ! added ) { newEntries . add ( entry ) ; } final IClasspathEntry [ ] newCPEntries = ( IClasspathEntry [ ] ) newEntries . toArray ( new IClasspathEntry [ newEntries . size ( ) ] ) ; Change newClasspathChange = newClasspathChange ( project , newCPEntries , project . getOutputLocation ( ) ) ; if ( newClasspathChange != null ) { return newClasspathChange ; } return new NullChange ( ) ; } @ Override public String getAdditionalProposalInfo ( ) { return Messages . MockitoClasspathFixProcessor_AdditionalProposalInfo ; } @ Override public String getDisplayString ( ) { return getAdditionalProposalInfo ( ) ; } @ Override public Image getImage ( ) { return JavaUI . getSharedImages ( ) . getImage ( ISharedImages . IMG_OBJS_LIBRARY ) ; } @ Override public int getRelevance ( ) { return 15 ; } } } ; } return null ; } } 