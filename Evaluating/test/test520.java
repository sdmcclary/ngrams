public class ContactProxy2 implements IContactProxy { private final static String TAG = "ContactProxy2" ; private HashMap < String , Boolean > mUpdatable ; public InputStream getPhoto ( ContentResolver cr , String id ) { if ( cr == null || id == null ) { return null ; } Uri contact = Uri . withAppendedPath ( Contacts . CONTENT_URI , id ) ; return Contacts . openContactPhotoInputStream ( cr , contact ) ; } public PhoneContact confirmContact ( ContentResolver cr , String id , String lookup ) { Uri lookupUri = Contacts . getLookupUri ( Long . parseLong ( id ) , lookup ) ; Cursor c = cr . query ( lookupUri , new String [ ] { Contacts . _ID , Contacts . LOOKUP_KEY } , null , null , null ) ; try { if ( c . moveToFirst ( ) ) { id = c . getString ( c . getColumnIndex ( Contacts . _ID ) ) ; lookup = c . getString ( c . getColumnIndex ( Contacts . LOOKUP_KEY ) ) ; } else { Log . v ( TAG , String . format ( "Could not confirm contact %s with lookup %s" , id , lookup ) ) ; } } finally { c . close ( ) ; } return new PhoneContact ( id , null , lookup ) ; } public void updatePhoto ( ContentResolver cr , byte [ ] photo , String id , boolean markDirty , boolean fromthumb ) { if ( cr == null || id == null ) { return ; } long rawId = queryForRawContactId ( cr , Long . parseLong ( id ) ) ; if ( rawId < 0 ) { return ; } writeDisplayPhoto ( cr , rawId , photo ) ; if ( photo == null ) { id = String . valueOf ( rawId ) ; ContentValues values = new ContentValues ( ) ; int photoRow = - 1 ; String where = ContactsContract . Data . RAW_CONTACT_ID + " == " + id + " AND " + Data . MIMETYPE + "=='" + ContactsContract . CommonDataKinds . Photo . CONTENT_ITEM_TYPE + "'" ; Cursor cursor = cr . query ( ContactsContract . Data . CONTENT_URI , null , where , null , null ) ; int idIdx = cursor . getColumnIndexOrThrow ( ContactsContract . Data . _ID ) ; int idphotoid = cursor . getColumnIndexOrThrow ( ContactsContract . Data . PHOTO_FILE_ID ) ; long photo_file_id = 0 ; if ( cursor . moveToFirst ( ) ) { photoRow = cursor . getInt ( idIdx ) ; photo_file_id = cursor . getLong ( idphotoid ) ; } cursor . close ( ) ; if ( photoRow < 0 && photo == null ) { return ; } values . put ( ContactsContract . Data . RAW_CONTACT_ID , id ) ; values . put ( ContactsContract . Data . IS_SUPER_PRIMARY , 1 ) ; values . put ( ContactsContract . CommonDataKinds . Photo . PHOTO , photo ) ; values . put ( ContactsContract . CommonDataKinds . Photo . PHOTO_FILE_ID , photo_file_id ) ; values . put ( ContactsContract . Data . MIMETYPE , ContactsContract . CommonDataKinds . Photo . CONTENT_ITEM_TYPE ) ; Uri uri = ContentUris . withAppendedId ( ContactsContract . Data . CONTENT_URI , photoRow ) ; Uri updateUri = uri . buildUpon ( ) . appendQueryParameter ( ContactsContract . CALLER_IS_SYNCADAPTER , "true" ) . build ( ) ; if ( photoRow >= 0 ) { if ( photo == null ) { cr . update ( uri , values , null , null ) ; } else { cr . update ( uri , values , null , null ) ; } } else { uri = ContactsContract . Data . CONTENT_URI ; cr . insert ( uri , values ) ; } } } public Uri writeDisplayPhoto ( ContentResolver cr , long rawContactId , byte [ ] photo ) { Uri rawContactPhotoUri = Uri . withAppendedPath ( ContentUris . withAppendedId ( RawContacts . CONTENT_URI , rawContactId ) , RawContacts . DisplayPhoto . CONTENT_DIRECTORY ) ; try { AssetFileDescriptor fd = cr . openAssetFileDescriptor ( rawContactPhotoUri , "rw" ) ; OutputStream os = fd . createOutputStream ( ) ; if ( photo == null ) photo = new byte [ 1 ] ; os . write ( photo ) ; os . close ( ) ; fd . close ( ) ; } catch ( IOException e ) { } return rawContactPhotoUri ; } public boolean isContactUpdatable ( ContentResolver cr , String id ) { return queryForRawContactId ( cr , Long . parseLong ( id ) ) > - 1 ; } private void ensureUpdatableLoaded ( ) { if ( mUpdatable == null ) { mUpdatable = new HashMap < String , Boolean > ( ) ; SyncAdapterType [ ] types = ContentResolver . getSyncAdapterTypes ( ) ; for ( SyncAdapterType type : types ) { Log . d ( TAG , type . accountType + " " + type . supportsUploading ( ) ) ; mUpdatable . put ( type . accountType , type . supportsUploading ( ) ) ; } } } private long queryForRawContactId ( ContentResolver cr , long contactId ) { Cursor rawContactIdCursor = null ; long rawContactId = - 1 ; if ( cr != null ) { try { rawContactIdCursor = cr . query ( RawContacts . CONTENT_URI , new String [ ] { RawContacts . _ID , RawContacts . ACCOUNT_NAME , RawContacts . ACCOUNT_TYPE } , RawContacts . CONTACT_ID + "=" + contactId , null , null ) ; if ( rawContactIdCursor != null ) { while ( rawContactIdCursor . moveToNext ( ) && rawContactId < 0 ) { String accountName = rawContactIdCursor . getString ( rawContactIdCursor . getColumnIndex ( RawContacts . ACCOUNT_NAME ) ) ; String accountType = rawContactIdCursor . getString ( rawContactIdCursor . getColumnIndex ( RawContacts . ACCOUNT_TYPE ) ) ; Log . d ( TAG , accountType != null ? accountType : "empty" ) ; ensureUpdatableLoaded ( ) ; if ( accountType == null || accountType . length ( ) == 0 || accountType . toLowerCase ( ) . contains ( "htc.android.pcsc" ) || ( mUpdatable . containsKey ( accountType ) && mUpdatable . get ( accountType ) ) ) { rawContactId = rawContactIdCursor . getLong ( 0 ) ; } } } } finally { if ( rawContactIdCursor != null ) { rawContactIdCursor . close ( ) ; } } } return rawContactId ; } public String getLookup ( ContentResolver resolver , Uri contact ) { Cursor cursor = null ; String lookup = null ; try { cursor = resolver . query ( contact , new String [ ] { Contacts . _ID , Contacts . LOOKUP_KEY } , null , null , null ) ; if ( cursor . moveToFirst ( ) ) { lookup = cursor . getString ( cursor . getColumnIndex ( Contacts . LOOKUP_KEY ) ) ; } else { lookup = null ; } } finally { if ( cursor != null ) { cursor . close ( ) ; } } return lookup ; } public Uri getContentUri ( ) { return ContactsContract . Contacts . CONTENT_URI ; } } 