public class SoapEnvelope { public static final int VER10 = 100 ; public static final int VER11 = 110 ; public static final int VER12 = 120 ; public static final String ENV2001 = "http://www.w3.org/2001/12/soap-envelope" ; public static final String ENC2001 = "http://www.w3.org/2001/12/soap-encoding" ; public static final String ENV = "http://schemas.xmlsoap.org/soap/envelope/" ; public static final String ENC = "http://schemas.xmlsoap.org/soap/encoding/" ; public static final String XSD = "http://www.w3.org/2001/XMLSchema" ; public static final String XSI = "http://www.w3.org/2001/XMLSchema-instance" ; public static final String XSD1999 = "http://www.w3.org/1999/XMLSchema" ; public static final String XSI1999 = "http://www.w3.org/1999/XMLSchema-instance" ; public static boolean stringToBoolean ( String booleanAsString ) { if ( booleanAsString == null ) return false ; booleanAsString = booleanAsString . trim ( ) . toLowerCase ( ) ; return ( booleanAsString . equals ( "1" ) || booleanAsString . equals ( "true" ) ) ; } public Object bodyIn ; public Object bodyOut ; public Element [ ] headerIn ; public Element [ ] headerOut ; public String encodingStyle ; public int version ; public String env ; public String enc ; public String xsi ; public String xsd ; public SoapEnvelope ( int version ) { this . version = version ; if ( version == SoapEnvelope . VER10 ) { xsi = SoapEnvelope . XSI1999 ; xsd = SoapEnvelope . XSD1999 ; } else { xsi = SoapEnvelope . XSI ; xsd = SoapEnvelope . XSD ; } if ( version < SoapEnvelope . VER12 ) { enc = SoapEnvelope . ENC ; env = SoapEnvelope . ENV ; } else { enc = SoapEnvelope . ENC2001 ; env = SoapEnvelope . ENV2001 ; } } public void parse ( XmlPullParser parser ) throws IOException , XmlPullParserException { parser . nextTag ( ) ; parser . require ( XmlPullParser . START_TAG , env , "Envelope" ) ; encodingStyle = parser . getAttributeValue ( env , "encodingStyle" ) ; parser . nextTag ( ) ; if ( parser . getEventType ( ) == XmlPullParser . START_TAG && parser . getNamespace ( ) . equals ( env ) && parser . getName ( ) . equals ( "Header" ) ) { parseHeader ( parser ) ; parser . require ( XmlPullParser . END_TAG , env , "Header" ) ; parser . nextTag ( ) ; } parser . require ( XmlPullParser . START_TAG , env , "Body" ) ; encodingStyle = parser . getAttributeValue ( env , "encodingStyle" ) ; parseBody ( parser ) ; parser . require ( XmlPullParser . END_TAG , env , "Body" ) ; parser . nextTag ( ) ; parser . require ( XmlPullParser . END_TAG , env , "Envelope" ) ; } public void parseHeader ( XmlPullParser parser ) throws IOException , XmlPullParserException { parser . nextTag ( ) ; Node headers = new Node ( ) ; headers . parse ( parser ) ; int count = 0 ; for ( int i = 0 ; i < headers . getChildCount ( ) ; i ++ ) { Element child = headers . getElement ( i ) ; if ( child != null ) count ++ ; } headerIn = new Element [ count ] ; count = 0 ; for ( int i = 0 ; i < headers . getChildCount ( ) ; i ++ ) { Element child = headers . getElement ( i ) ; if ( child != null ) headerIn [ count ++ ] = child ; } } public void parseBody ( XmlPullParser parser ) throws IOException , XmlPullParserException { parser . nextTag ( ) ; if ( parser . getEventType ( ) == XmlPullParser . START_TAG && parser . getNamespace ( ) . equals ( env ) && parser . getName ( ) . equals ( "Fault" ) ) { SoapFault fault = new SoapFault ( ) ; fault . parse ( parser ) ; bodyIn = fault ; } else { Node node = ( bodyIn instanceof Node ) ? ( Node ) bodyIn : new Node ( ) ; node . parse ( parser ) ; bodyIn = node ; } } public void write ( XmlSerializer writer ) throws IOException { writer . setPrefix ( "i" , xsi ) ; writer . setPrefix ( "d" , xsd ) ; writer . setPrefix ( "c" , enc ) ; writer . setPrefix ( "v" , env ) ; writer . startTag ( env , "Envelope" ) ; writer . startTag ( env , "Header" ) ; writeHeader ( writer ) ; writer . endTag ( env , "Header" ) ; writer . startTag ( env , "Body" ) ; writeBody ( writer ) ; writer . endTag ( env , "Body" ) ; writer . endTag ( env , "Envelope" ) ; } public void writeHeader ( XmlSerializer writer ) throws IOException { if ( headerOut != null ) { for ( int i = 0 ; i < headerOut . length ; i ++ ) { headerOut [ i ] . write ( writer ) ; } } } public void writeBody ( XmlSerializer writer ) throws IOException { if ( encodingStyle != null ) writer . attribute ( env , "encodingStyle" , encodingStyle ) ; ( ( Node ) bodyOut ) . write ( writer ) ; } public void setOutputSoapObject ( Object soapObject ) { bodyOut = soapObject ; } } 