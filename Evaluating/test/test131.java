public final class UserPreferences extends Model { public static final String KEY_MARK_READ_WHEN_CHANGING_CHANNELS = "state.markReadWhenChangingChannels" ; public static final String PROP_MARK_READ_WHEN_CHANGING_CHANNELS = "markReadWhenChangingChannels" ; public static final String KEY_MARK_READ_WHEN_CHANGING_GUIDES = "state.markReadWhenChangingGuides" ; public static final String PROP_MARK_READ_WHEN_CHANGING_GUIDES = "markReadWhenChangingGuides" ; public static final String KEY_BACKGROUND_DEBUG_MODE = "state.backgroundDebugMode" ; public static final String PROP_BACKGROUND_DEBUG_MODE = "backgroundDebugMode" ; public static final String KEY_AUTO_PURGE_INTERVAL_MINUTES = "state.autoPurgeIntervalMinutes" ; public static final String PROP_AUTO_PURGE_INTERVAL_MINUTES = "autoPurgeIntervalMinutes" ; public static final String KEY_PURGE_COUNT = "state.purgeCount" ; public static final String PROP_PURGE_COUNT = "purgeCount" ; public static final String KEY_WEBSTAT_INTERVAL = "state.webStatIntervalMinutes" ; public static final String PROP_WEBSTAT_INTERVAL = "webStatIntervalString" ; public static final String KEY_RSS_POLL_MIN = "state.rssPollIntervalMinutes" ; public static final String PROP_RSS_POLL_MIN = "rssPollInterval" ; public static final String KEY_INTERNET_BROWSER = "state.internetBrowser" ; public static final String PROP_INTERNET_BROWSER = "internetBrowser" ; public static final String KEY_MARK_READ_AFTER_DELAY = "state.markReadAfterDelay" ; public static final String PROP_MARK_READ_AFTER_DELAY = "markReadAfterDelay" ; public static final String KEY_MARK_READ_AFTER_SECONDS = "state.markReadAfterSeconds" ; public static final String PROP_MARK_READ_AFTER_SECONDS = "markReadAfterSeconds" ; public static final String KEY_USE_PERSISTENCE = "state.usingPersistence" ; public static final String PROP_USE_PERSISTENCE = "usingPersistence" ; public static final String KEY_GOOD_CHANNEL_STARZ = "state.goodChannelStarz" ; public static final String PROP_GOOD_CHANNEL_STARZ = "goodChannelStarz" ; public static final String PROP_SORTING_ENABLED = "sortingEnabled" ; public static final String PROP_SORT_BY_CLASS_1 = "sortByClass1" ; public static final String PROP_REVERSED_SORT_BY_CLASS_1 = "reversedSortByClass1" ; public static final String PROP_SORT_BY_CLASS_2 = "sortByClass2" ; public static final String PROP_REVERSED_SORT_BY_CLASS_2 = "reversedSortByClass2" ; public static final String PROP_FEED_SELECTION_DELAY = "feedSelectionDelay" ; public static final String PROP_PRESERVE_UNREAD = "preserveUnread" ; public static final String PROP_COPY_LINKS_IN_HREF_FORMAT = "copyLinksInHrefFormat" ; public static final String PROP_AA_TEXT = "antiAliasText" ; public static final String PROP_TAGS_STORAGE = "tagsStorage" ; public static final String PROP_TAGS_AUTOFETCH = "tagsAutoFetch" ; public static final String PROP_TAGS_DELICIOUS_PASSWORD = "tagsDeliciousPassword" ; public static final String PROP_TAGS_DELICIOUS_USER = "tagsDeliciousUser" ; public static final int TAGS_STORAGE_NONE = 0 ; public static final int TAGS_STORAGE_BB_SERVICE = 1 ; public static final int TAGS_STORAGE_DELICIOUS = 2 ; public static final String PROP_CHECKING_FOR_UPDATES_ON_STARTUP = "checkingForUpdatesOnStartup" ; public static final String PROP_ALWAYS_USE_ENGLISH = "alwaysUseEnglish" ; private boolean alwaysUseEnglish = DEFAULT_ALWAYS_USE_ENGLISH ; public static final String PROP_SHOW_TOOLBAR_LABELS = "showToolbarLabels" ; public static final String PROP_SHOW_UNREAD_BUTTON_MENU = "showUnreadButtonMenu" ; public static final String PROP_SHOW_TOOLBAR = "showToolbar" ; public static final String PROP_UPDATE_READING_LISTS = "updateReadingLists" ; public static final String PROP_UPDATE_FEEDS = "updateFeeds" ; public static final String PROP_READING_LIST_UPDATE_PERIOD = "readingListUpdatePeriod" ; public static final String PROP_FEED_IMPORT_LIMIT = "feedImportLimit" ; public static final String PROP_ON_READING_LIST_UPDATE_ACTIONS = "onReadingListUpdateActions" ; public static final int RL_UPDATE_NONE = 0 ; public static final int RL_UPDATE_NOTIFY = 1 ; public static final int RL_UPDATE_CONFIRM = 2 ; public static final boolean DEFAULT_MARK_READ_WHEN_CHANGING_CHANNELS = false ; public static final boolean DEFAULT_MARK_READ_WHEN_CHANGING_GUIDES = false ; private static final boolean DEFAULT_BACKGROUNDDEBUGMODE = false ; private static final int DEFAULT_PURGE_INTERVAL_MINUTES = 60 ; private static final String DEFAULT_INTERNET_BROWSER = Constants . EMPTY_STRING ; public static final boolean DEFAULT_MARK_READ_AFTER_DELAY = true ; public static final int DEFAULT_MARK_READ_AFTER_SECONDS = 5 ; private static final boolean DEFAULT_USE_PERSISTENCE = true ; private static final boolean DEFAULT_COPY_LINKS_IN_HREF_FORMAT = false ; private static final boolean DEFAULT_AA_TEXT = false ; private static final int DEFAULT_TAGS_STORAGE = TAGS_STORAGE_BB_SERVICE ; private static final boolean DEFAULT_TAGS_AUTOFETCH = false ; private static final String DEFAULT_TAGS_DELICIOUS_PASSWORD = Constants . EMPTY_STRING ; private static final String DEFAULT_TAGS_DELICIOUS_USER = Constants . EMPTY_STRING ; public static final boolean DEFAULT_CHECKING_FOR_UPDATES_ON_STARTUP = true ; public static final boolean DEFAULT_SHOW_TOOLBAR_LABELS = true ; public static final boolean DEFAULT_SHOW_TOOLBAR = true ; public static final boolean DEFAULT_UPDATE_READING_LISTS = true ; public static final boolean DEFAULT_UPDATE_FEEDS = true ; private static final int DEFAULT_ON_READING_LIST_UPDATE_ACTIONS = RL_UPDATE_NONE ; public static final boolean DEFAULT_ALWAYS_USE_ENGLISH = false ; public static final boolean DEFAULT_SHOW_UNREAD_BUTTON_MENU = true ; public static final int DEFAULT_WEBSTAT_MINS = 240 ; public static final int DEFAULT_PURGE_COUNT = 30 ; public static final int DEFAULT_RSS_POLL_MIN = 60 ; public static final boolean DEFAULT_SORTING_ENABLED = true ; public static final int DEFAULT_SORT_BY_CLASS_1 = FeedClass . READ ; public static final boolean DEFAULT_REVERSED_SORT_BY_CLASS_1 = false ; public static final int DEFAULT_SORT_BY_CLASS_2 = FeedClass . LOW_RATED ; public static final boolean DEFAULT_REVERSED_SORT_BY_CLASS_2 = false ; public static final boolean DEFAULT_SHOW_ONLY_GOOD_CHANNELS = true ; public static final int DEFAULT_GOOD_CHANNEL_STARZ = 1 ; private static final int DEFAULT_FEED_SELECTION_DELAY = 200 ; public static final boolean DEFAULT_PRESERVE_UNREAD = false ; private static final int DEFAULT_FEED_IMPORT_LIMITATION = 100 ; public static final int MAX_FEED_IMPORT_LIMITATION = 500 ; private boolean markReadWhenChangingChannels = DEFAULT_MARK_READ_WHEN_CHANGING_CHANNELS ; private boolean markReadWhenChangingGuides = DEFAULT_MARK_READ_WHEN_CHANGING_GUIDES ; private boolean backgroundDebugMode = DEFAULT_BACKGROUNDDEBUGMODE ; private int autoPurgeInterval = DEFAULT_PURGE_INTERVAL_MINUTES ; private int purgeCount = DEFAULT_PURGE_COUNT ; private int webStatInterval = DEFAULT_WEBSTAT_MINS ; private int rssPollInterval = DEFAULT_RSS_POLL_MIN ; private String internetBrowser = DEFAULT_INTERNET_BROWSER ; private boolean markReadAfterDelay = DEFAULT_MARK_READ_AFTER_DELAY ; private int markReadAfterSeconds = DEFAULT_MARK_READ_AFTER_SECONDS ; private boolean usingPersistence = DEFAULT_USE_PERSISTENCE ; private int goodChannelStarz = DEFAULT_GOOD_CHANNEL_STARZ ; private boolean showOnlyGoodChannels = DEFAULT_SHOW_ONLY_GOOD_CHANNELS ; private boolean sortingEnabled = DEFAULT_SORTING_ENABLED ; private int sortByClass1 = DEFAULT_SORT_BY_CLASS_1 ; private boolean reversedSortByClass1 = DEFAULT_REVERSED_SORT_BY_CLASS_1 ; private int sortByClass2 = DEFAULT_SORT_BY_CLASS_2 ; private boolean reversedSortByClass2 = DEFAULT_REVERSED_SORT_BY_CLASS_2 ; private int feedSelectionDelay = DEFAULT_FEED_SELECTION_DELAY ; private boolean preserveUnread = DEFAULT_PRESERVE_UNREAD ; private boolean copyLinksInHrefFormat = DEFAULT_COPY_LINKS_IN_HREF_FORMAT ; private boolean antiAliasText = DEFAULT_AA_TEXT ; private int tagsStorage = DEFAULT_TAGS_STORAGE ; private boolean tagsAutoFetch = DEFAULT_TAGS_AUTOFETCH ; private String tagsDeliciousUser = DEFAULT_TAGS_DELICIOUS_USER ; private String tagsDeliciousPassword = DEFAULT_TAGS_DELICIOUS_PASSWORD ; private boolean checkingForUpdatesOnStartup = DEFAULT_CHECKING_FOR_UPDATES_ON_STARTUP ; private boolean showToolbarLabels = DEFAULT_SHOW_TOOLBAR_LABELS ; private boolean showUnreadButtonMenu = DEFAULT_SHOW_UNREAD_BUTTON_MENU ; private boolean showToolbar = DEFAULT_SHOW_TOOLBAR ; private long readingListUpdatePeriod = ReadingList . DEFAULT_PERIOD ; private int feedImportLimit = DEFAULT_FEED_IMPORT_LIMITATION ; private boolean updateReadingLists = DEFAULT_UPDATE_READING_LISTS ; private boolean updateFeeds = DEFAULT_UPDATE_FEEDS ; private int onReadingListUpdateActions = DEFAULT_ON_READING_LIST_UPDATE_ACTIONS ; public static final String PROP_GUIDE_SELECTION_MODE = "guideSelectionMode" ; public static final int GSM_NO_FEED = 0 ; public static final int GSM_FIRST_FEED = 1 ; public static final int GSM_LAST_SEEN_FEED = 2 ; public static final int DEFAULT_GUIDE_SELECTION_MODE = GSM_LAST_SEEN_FEED ; private int guideSelectionMode = DEFAULT_GUIDE_SELECTION_MODE ; public static final String PROP_PROXY_ENABLED = "proxyEnabled" ; public static final String PROP_PROXY_HOST = "proxyHost" ; public static final String PROP_PROXY_PORT = "proxyPort" ; public static final String PROP_PROXY_EXCLUSIONS = "proxyExclusions" ; public static final String PROP_SHOWING_NEW_PUB_ALERT = "showingNewPubAlert" ; public static final boolean DEFAULT_SHOWING_NEW_PUB_ALERT = true ; private boolean showingNewPubAlert = DEFAULT_SHOWING_NEW_PUB_ALERT ; public static final String PROP_BROWSE_ON_DBL_CLICK = "browseOnDblClick" ; public static final boolean DEFAULT_BROWSE_ON_DBL_CLICK = false ; private boolean browseOnDblClick = DEFAULT_BROWSE_ON_DBL_CLICK ; private static final String PROP_LAST_UPDATE_TIME = "lastUpdateTime" ; private Date lastUpdateTime ; public static final String PROP_PING_ON_RL_PUBLICATION = "pingOnReadingListPublication" ; private static final boolean DEFAULT_PING_ON_RL_PUBLICATION = false ; private boolean pingOnReadingListPublication = DEFAULT_PING_ON_RL_PUBLICATION ; public static final String PROP_PING_ON_RL_PUBLICATION_URL = "pingOnReadingListPublicationURL" ; private static final String DEFAULT_PING_ON_RL_PUBLICATION_URL = "" ; private String pingOnReadingListPublicationURL = DEFAULT_PING_ON_RL_PUBLICATION_URL ; public static final String PROP_NOTIFICATIONS_ENABLED = "notificationsEnabled" ; private static final boolean DEFAULT_NOTIFICATIONS_ENABLED = true ; private boolean notificationsEnabled = DEFAULT_NOTIFICATIONS_ENABLED ; public static final String PROP_SOUND_ON_NEW_ARTICLES = "soundOnNewArticles" ; private static final boolean DEFAULT_SOUND_ON_NEW_ARTICLES = false ; private boolean soundOnNewArticles = DEFAULT_SOUND_ON_NEW_ARTICLES ; public static final String PROP_SOUND_ON_NO_UNREAD = "soundOnNoUnread" ; private static final boolean DEFAULT_SOUND_ON_NO_UNREAD = true ; private boolean soundOnNoUnread = DEFAULT_SOUND_ON_NO_UNREAD ; public static final String PROP_NOTIFICATIONS_SHOW_PERIOD = "notificationsShowPeriod" ; private static final int DEFAULT_NOTIFICATIONS_SHOW_PERIOD = - 1 ; private int notificationsShowPeriod = DEFAULT_NOTIFICATIONS_SHOW_PERIOD ; public static final String PROP_NO_DISCOVERY_EXTENSIONS = "noDiscoveryExtensions" ; private static final String DEFAULT_NO_DISCOVERY_EXTENSIONS = "" ; private String noDiscoveryExtensions = DEFAULT_NO_DISCOVERY_EXTENSIONS ; public static final String PROP_SHOW_APPICON_IN_SYSTRAY = "showAppIconInSystray" ; private static final boolean DEFAULT_SHOW_APPICON_IN_SYSTRAY = false ; private boolean showAppIconInSystray = DEFAULT_SHOW_APPICON_IN_SYSTRAY ; public static final String PROP_MINIMIZE_TO_SYSTRAY = "minimizeToSystray" ; private static final boolean DEFAULT_MINIMIZE_TO_SYSTRAY = false ; private boolean minimizeToSystray = DEFAULT_MINIMIZE_TO_SYSTRAY ; private final ViewModePreferences viewModePreferences = new ViewModePreferences ( ) ; private final BloggingPreferences bloggingPreferences = new BloggingPreferences ( ) ; private final TwitterPreferences twitterPreferences = new TwitterPreferences ( ) ; public static final int DIB_MODE_INVISIBLE = 0 ; public static final int DIB_MODE_SHOW_UNREAD_ARTICLES = 1 ; public static final int DIB_MODE_SHOW_UNREAD_FEEDS = 2 ; public static final String PROP_DIB_MODE = "dockIconBadgeMode" ; private static final int DEFAULT_DIB_BADGE_MODE = DIB_MODE_SHOW_UNREAD_ARTICLES ; private int dockIconBadgeMode = DEFAULT_DIB_BADGE_MODE ; public static final Set FEED_VISIBILITY_PROPERTIES = new HashSet ( ) { { add ( PROP_GOOD_CHANNEL_STARZ ) ; } } ; private transient int selectedPrefsPage = - 1 ; public static final String PROP_BRIEF_SENTENCES = "briefSentences" ; public static final String PROP_BRIEF_MAX_LENGTH = "briefMaxLength" ; public static final String PROP_BRIEF_MIN_LENGTH = "briefMinLength" ; public static final String PROP_PIN_TAGGING = "pinTagging" ; private static final boolean DEFAULT_PIN_TAGGING = false ; private boolean pinTagging = DEFAULT_PIN_TAGGING ; public static final String PROP_PIN_TAGS = "pinTags" ; private static final String DEFAULT_PIN_TAGS = "" ; private String pinTags = DEFAULT_PIN_TAGS ; public static final String PROP_PAGE_SIZE = "pageSize" ; private static final int DEFAULT_PAGE_SIZE = DEFAULT_PURGE_COUNT ; private int pageSize = DEFAULT_PAGE_SIZE ; public static final String PROP_AUTO_EXPAND_MINI = "autoExpandMini" ; private static final boolean DEFAULT_AUTO_EXPAND_MINI = false ; private boolean autoExpandMini = DEFAULT_AUTO_EXPAND_MINI ; public static final String PROP_WH_IGNORE = "whIgnore" ; public static final String DEFAULT_WH_IGNORE = "http://technorati.com/*" ; private String whIgnore = DEFAULT_WH_IGNORE ; public static final String PROP_WH_NOSELFLINKS = "whNoSelfLinks" ; public static final boolean DEFAULT_WH_NOSELFLINKS = true ; private boolean whNoSelfLinks = DEFAULT_WH_NOSELFLINKS ; public static final String PROP_WH_SUPPRESS_SAME_SOURCE_LINKS = "whSuppressSameSourceLinks" ; public static final boolean DEFAULT_WH_SUPPRESS_SAME_SOURCE_LINKS = true ; private boolean whSuppressSameSourceLinks = DEFAULT_WH_SUPPRESS_SAME_SOURCE_LINKS ; public static final String PROP_WH_TARGET_GUIDE = "whTargetGuide" ; public static final String DEFAULT_WH_TARGET_GUIDE = "" ; private String whTargetGuide = DEFAULT_WH_TARGET_GUIDE ; public static final String PROP_WH_SETTINGS_CHANGE_TIME = "whSettingsChangeTime" ; private static final long DEFAULT_WH_SETTINGS_CHANGE_TIME = 0 ; private long whSettingsChangeTime = DEFAULT_WH_SETTINGS_CHANGE_TIME ; public static final String PROP_CW_FREQUENCY = "cwFrequency" ; private static final long DEFAULT_CW_FREQUENCY = 0 ; private long cwFrequency = DEFAULT_CW_FREQUENCY ; public static final String PROP_CW_LAST_CLEANUP = "cwLastCleanup" ; private static final long DEFAULT_CW_LAST_CLEANUP = 0 ; private long cwLastCleanup = DEFAULT_CW_LAST_CLEANUP ; public ViewModePreferences getViewModePreferences ( ) { return viewModePreferences ; } public BloggingPreferences getBloggingPreferences ( ) { return bloggingPreferences ; } public TwitterPreferences getTwitterPreferences ( ) { return twitterPreferences ; } public boolean isMarkReadWhenChangingChannels ( ) { return markReadWhenChangingChannels ; } public void setMarkReadWhenChangingChannels ( boolean newValue ) { boolean oldValue = isMarkReadWhenChangingChannels ( ) ; markReadWhenChangingChannels = newValue ; firePropertyChange ( KEY_MARK_READ_WHEN_CHANGING_CHANNELS , oldValue , newValue ) ; } public boolean isMarkReadWhenChangingGuides ( ) { return markReadWhenChangingGuides ; } public void setMarkReadWhenChangingGuides ( boolean newValue ) { boolean oldValue = isMarkReadWhenChangingGuides ( ) ; markReadWhenChangingGuides = newValue ; firePropertyChange ( KEY_MARK_READ_WHEN_CHANGING_GUIDES , oldValue , newValue ) ; } public boolean isBackgroundDebugMode ( ) { return backgroundDebugMode ; } public void setBackgroundDebugMode ( boolean newValue ) { boolean oldValue = isBackgroundDebugMode ( ) ; backgroundDebugMode = newValue ; firePropertyChange ( KEY_BACKGROUND_DEBUG_MODE , oldValue , newValue ) ; } public int getAutoPurgeIntervalMinutes ( ) { return autoPurgeInterval ; } public void setAutoPurgeIntervalMinutes ( int val ) { int oldvalue = getAutoPurgeIntervalMinutes ( ) ; autoPurgeInterval = val ; firePropertyChange ( KEY_AUTO_PURGE_INTERVAL_MINUTES , oldvalue , val ) ; } public String getAutoPurgeIntervalMinutesString ( ) { return Integer . toString ( autoPurgeInterval ) ; } public void setAutoPurgeIntervalMinutesString ( String val ) { setAutoPurgeIntervalMinutes ( Integer . parseInt ( val ) ) ; } public int getPurgeCount ( ) { return purgeCount ; } public void setPurgeCount ( int count ) { int oldvalue = getPurgeCount ( ) ; purgeCount = count ; firePropertyChange ( PROP_PURGE_COUNT , oldvalue , count ) ; } public String getPurgeCountString ( ) { return Integer . toString ( purgeCount ) ; } public void setPurgeCountString ( String val ) { setPurgeCount ( Integer . parseInt ( val ) ) ; } public int getWebStatInterval ( ) { return webStatInterval ; } public void setWebStatInterval ( int count ) { int oldvalue = getWebStatInterval ( ) ; webStatInterval = count ; firePropertyChange ( KEY_WEBSTAT_INTERVAL , oldvalue , count ) ; } public String getWebStatIntervalString ( ) { return Integer . toString ( webStatInterval ) ; } public void setWebStatIntervalString ( String val ) { setWebStatInterval ( Integer . parseInt ( val ) ) ; } public int getRssPollInterval ( ) { return rssPollInterval ; } public void setRssPollInterval ( int count ) { int oldvalue = getRssPollInterval ( ) ; rssPollInterval = count ; firePropertyChange ( PROP_RSS_POLL_MIN , oldvalue , count ) ; } public String getRssPollIntervalString ( ) { return Integer . toString ( rssPollInterval ) ; } public void setRssPollIntervalString ( String val ) { setRssPollInterval ( Integer . parseInt ( val ) ) ; } public String getInternetBrowser ( ) { return internetBrowser ; } public void setInternetBrowser ( String value ) { String oldValue = getInternetBrowser ( ) ; internetBrowser = value ; firePropertyChange ( KEY_INTERNET_BROWSER , oldValue , value ) ; } public boolean isMarkReadAfterDelay ( ) { return markReadAfterDelay ; } public void setMarkReadAfterDelay ( boolean newValue ) { boolean oldValue = isMarkReadAfterDelay ( ) ; markReadAfterDelay = newValue ; firePropertyChange ( KEY_MARK_READ_AFTER_DELAY , oldValue , newValue ) ; } public int getMarkReadAfterSeconds ( ) { return markReadAfterSeconds ; } public void setMarkReadAfterSeconds ( int newValue ) { int oldValue = getMarkReadAfterSeconds ( ) ; markReadAfterSeconds = newValue ; firePropertyChange ( KEY_MARK_READ_AFTER_SECONDS , oldValue , newValue ) ; } public String getMarkReadAfterSecondsString ( ) { return Integer . toString ( markReadAfterSeconds ) ; } public void setMarkReadAfterSecondsString ( String newValue ) { setMarkReadAfterSeconds ( Integer . parseInt ( newValue ) ) ; } public boolean isUsingPersistence ( ) { return usingPersistence ; } public void setUsingPersistence ( boolean aUsingPersistence ) { boolean oldValue = usingPersistence ; usingPersistence = aUsingPersistence ; firePropertyChange ( KEY_USE_PERSISTENCE , oldValue , usingPersistence ) ; } public int getGoodChannelStarz ( ) { return goodChannelStarz ; } public void setGoodChannelStarz ( int starz ) { int oldValue = goodChannelStarz ; goodChannelStarz = starz ; firePropertyChange ( PROP_GOOD_CHANNEL_STARZ , oldValue , goodChannelStarz ) ; } public boolean isShowOnlyGoodChannels ( ) { return showOnlyGoodChannels ; } public boolean isSortingEnabled ( ) { return sortingEnabled ; } public void setSortingEnabled ( boolean value ) { boolean oldValue = sortingEnabled ; sortingEnabled = value ; firePropertyChange ( PROP_SORTING_ENABLED , oldValue , value ) ; } public int getSortByClass1 ( ) { return sortByClass1 ; } public void setSortByClass1 ( int classMask ) { int oldMask = sortByClass1 ; sortByClass1 = classMask ; firePropertyChange ( PROP_SORT_BY_CLASS_1 , oldMask , sortByClass1 ) ; } public boolean isReversedSortByClass1 ( ) { return reversedSortByClass1 ; } public void setReversedSortByClass1 ( boolean value ) { boolean oldValue = reversedSortByClass1 ; reversedSortByClass1 = value ; firePropertyChange ( PROP_REVERSED_SORT_BY_CLASS_1 , oldValue , value ) ; } public int getSortByClass2 ( ) { return sortByClass2 ; } public void setSortByClass2 ( int classMask ) { int oldMask = sortByClass2 ; sortByClass2 = classMask ; firePropertyChange ( PROP_SORT_BY_CLASS_2 , oldMask , sortByClass2 ) ; } public boolean isReversedSortByClass2 ( ) { return reversedSortByClass2 ; } public void setReversedSortByClass2 ( boolean value ) { boolean oldValue = reversedSortByClass2 ; reversedSortByClass2 = value ; firePropertyChange ( PROP_REVERSED_SORT_BY_CLASS_2 , oldValue , value ) ; } public int getFeedSelectionDelay ( ) { return feedSelectionDelay ; } public void setFeedSelectionDelay ( int aFeedSelectionDelay ) { int oldValue = feedSelectionDelay ; feedSelectionDelay = aFeedSelectionDelay ; firePropertyChange ( PROP_FEED_SELECTION_DELAY , oldValue , feedSelectionDelay ) ; } public boolean isPreserveUnread ( ) { return preserveUnread ; } public void setPreserveUnread ( boolean value ) { boolean oldValue = preserveUnread ; preserveUnread = value ; firePropertyChange ( PROP_PRESERVE_UNREAD , oldValue , preserveUnread ) ; } public boolean isCopyLinksInHrefFormat ( ) { return copyLinksInHrefFormat ; } public void setCopyLinksInHrefFormat ( boolean aValue ) { copyLinksInHrefFormat = aValue ; } public boolean isAntiAliasText ( ) { return antiAliasText ; } public void setAntiAliasText ( boolean aAntiAliasText ) { antiAliasText = aAntiAliasText ; } public int getTagsStorage ( ) { return tagsStorage ; } public void setTagsStorage ( int aTagsStorage ) { int oldValue = tagsStorage ; tagsStorage = aTagsStorage ; firePropertyChange ( PROP_TAGS_STORAGE , oldValue , tagsStorage ) ; } public boolean isTagsAutoFetch ( ) { return tagsAutoFetch ; } public void setTagsAutoFetch ( boolean aValue ) { boolean oldValue = tagsAutoFetch ; tagsAutoFetch = aValue ; firePropertyChange ( PROP_TAGS_AUTOFETCH , oldValue , aValue ) ; } public String getTagsDeliciousPassword ( ) { return tagsDeliciousPassword ; } public void setTagsDeliciousPassword ( String aPassword ) { String oldValue = tagsDeliciousPassword ; tagsDeliciousPassword = aPassword ; firePropertyChange ( PROP_TAGS_DELICIOUS_PASSWORD , oldValue , aPassword ) ; } public String getTagsDeliciousUser ( ) { return tagsDeliciousUser ; } public void setTagsDeliciousUser ( String aUsername ) { String oldValue = tagsDeliciousUser ; tagsDeliciousUser = aUsername ; firePropertyChange ( PROP_TAGS_DELICIOUS_USER , oldValue , aUsername ) ; } public boolean isCheckingForUpdatesOnStartup ( ) { return checkingForUpdatesOnStartup ; } public void setCheckingForUpdatesOnStartup ( boolean value ) { boolean oldValue = checkingForUpdatesOnStartup ; checkingForUpdatesOnStartup = value ; firePropertyChange ( PROP_CHECKING_FOR_UPDATES_ON_STARTUP , oldValue , value ) ; } public boolean isShowToolbarLabels ( ) { return showToolbarLabels ; } public void setShowToolbarLabels ( boolean value ) { boolean old = showToolbarLabels ; showToolbarLabels = value ; firePropertyChange ( PROP_SHOW_TOOLBAR_LABELS , old , value ) ; } public boolean isShowUnreadButtonMenu ( ) { return showUnreadButtonMenu ; } public void setShowUnreadButtonMenu ( boolean value ) { boolean old = showUnreadButtonMenu ; showUnreadButtonMenu = value ; firePropertyChange ( PROP_SHOW_UNREAD_BUTTON_MENU , old , value ) ; } public boolean isShowToolbar ( ) { return showToolbar ; } public void setShowToolbar ( boolean show ) { boolean old = showToolbar ; showToolbar = show ; firePropertyChange ( PROP_SHOW_TOOLBAR , old , show ) ; } public long getReadingListUpdatePeriod ( ) { return readingListUpdatePeriod ; } public void setReadingListUpdatePeriod ( long period ) { long old = readingListUpdatePeriod ; readingListUpdatePeriod = period ; firePropertyChange ( PROP_READING_LIST_UPDATE_PERIOD , old , period ) ; } public int getFeedImportLimit ( ) { return feedImportLimit ; } public void setFeedImportLimit ( int limit ) { int old = feedImportLimit ; feedImportLimit = limit ; firePropertyChange ( PROP_FEED_IMPORT_LIMIT , old , limit ) ; } public boolean isUpdateFeeds ( ) { return updateFeeds ; } public void setUpdateFeeds ( boolean update ) { boolean old = updateFeeds ; updateFeeds = update ; firePropertyChange ( PROP_UPDATE_FEEDS , old , updateFeeds ) ; } public boolean isUpdateReadingLists ( ) { return updateReadingLists ; } public void setUpdateReadingLists ( boolean update ) { boolean old = updateReadingLists ; updateReadingLists = update ; firePropertyChange ( PROP_UPDATE_READING_LISTS , old , updateReadingLists ) ; } public int getOnReadingListUpdateActions ( ) { return onReadingListUpdateActions ; } public void setOnReadingListUpdateActions ( int action ) { int old = onReadingListUpdateActions ; onReadingListUpdateActions = action ; firePropertyChange ( PROP_ON_READING_LIST_UPDATE_ACTIONS , old , action ) ; } public int getGuideSelectionMode ( ) { return guideSelectionMode ; } public void setGuideSelectionMode ( int mode ) { int oldValue = guideSelectionMode ; guideSelectionMode = mode ; firePropertyChange ( PROP_GUIDE_SELECTION_MODE , oldValue , mode ) ; } public boolean isProxyEnabled ( ) { return CustomProxySelector . INSTANCE . isProxyEnabled ( ) ; } public void setProxyEnabled ( boolean enabled ) { boolean oldValue = isProxyEnabled ( ) ; CustomProxySelector . INSTANCE . setProxyEnabled ( enabled ) ; firePropertyChange ( PROP_PROXY_ENABLED , oldValue , enabled ) ; } public String getProxyHost ( ) { return CustomProxySelector . INSTANCE . getProxyHost ( ) ; } public void setProxyHost ( String host ) { String oldValue = getProxyHost ( ) ; CustomProxySelector . INSTANCE . setProxyHost ( host ) ; firePropertyChange ( PROP_PROXY_HOST , oldValue , host ) ; } public int getProxyPort ( ) { return CustomProxySelector . INSTANCE . getProxyPort ( ) ; } public void setProxyPort ( int port ) { int oldValue = getProxyPort ( ) ; CustomProxySelector . INSTANCE . setProxyPort ( port ) ; firePropertyChange ( PROP_PROXY_PORT , oldValue , port ) ; } public String getProxyExclusions ( ) { return CustomProxySelector . INSTANCE . getProxyExclusions ( ) ; } public void setProxyExclusions ( String excl ) { String old = getProxyExclusions ( ) ; CustomProxySelector . INSTANCE . setProxyExclusions ( excl ) ; firePropertyChange ( PROP_PROXY_EXCLUSIONS , old , excl ) ; } public boolean isShowingNewPubAlert ( ) { return showingNewPubAlert ; } public void setShowingNewPubAlert ( boolean show ) { boolean oldValue = showingNewPubAlert ; showingNewPubAlert = show ; firePropertyChange ( PROP_SHOWING_NEW_PUB_ALERT , oldValue , show ) ; } public boolean isBrowseOnDblClick ( ) { return browseOnDblClick ; } public void setBrowseOnDblClick ( boolean flag ) { boolean oldValue = browseOnDblClick ; browseOnDblClick = flag ; firePropertyChange ( PROP_BROWSE_ON_DBL_CLICK , oldValue , flag ) ; } public Date getLastUpdateTime ( ) { return lastUpdateTime ; } public void setLastUpdateTime ( Date date ) { Date oldDate = lastUpdateTime ; lastUpdateTime = date ; firePropertyChange ( PROP_LAST_UPDATE_TIME , oldDate , lastUpdateTime ) ; } public boolean isPingOnReadingListPublication ( ) { return pingOnReadingListPublication ; } public void setPingOnReadingListPublication ( boolean flag ) { boolean oldValue = pingOnReadingListPublication ; pingOnReadingListPublication = flag ; firePropertyChange ( PROP_PING_ON_RL_PUBLICATION , oldValue , flag ) ; } public String getPingOnReadingListPublicationURL ( ) { return pingOnReadingListPublicationURL ; } public void setPingOnReadingListPublicationURL ( String url ) { String oldValue = pingOnReadingListPublicationURL ; pingOnReadingListPublicationURL = url ; firePropertyChange ( PROP_PING_ON_RL_PUBLICATION_URL , oldValue , url ) ; } public boolean isNotificationsEnabled ( ) { return notificationsEnabled ; } public void setNotificationsEnabled ( boolean flag ) { boolean oldVal = notificationsEnabled ; notificationsEnabled = flag ; firePropertyChange ( PROP_NOTIFICATIONS_ENABLED , oldVal , flag ) ; } public boolean isSoundOnNewArticles ( ) { return soundOnNewArticles ; } public void setSoundOnNewArticles ( boolean flag ) { boolean oldVal = soundOnNewArticles ; soundOnNewArticles = flag ; firePropertyChange ( PROP_SOUND_ON_NEW_ARTICLES , oldVal , flag ) ; } public boolean isSoundOnNoUnread ( ) { return soundOnNoUnread ; } public void setSoundOnNoUnread ( boolean flag ) { boolean old = soundOnNoUnread ; soundOnNoUnread = flag ; firePropertyChange ( PROP_SOUND_ON_NO_UNREAD , old , flag ) ; } public int getNotificationsShowPeriod ( ) { return notificationsShowPeriod ; } public void setNotificationsShowPeriod ( int seconds ) { int oldValue = notificationsShowPeriod ; notificationsShowPeriod = seconds ; firePropertyChange ( PROP_NOTIFICATIONS_SHOW_PERIOD , oldValue , seconds ) ; } public String getNoDiscoveryExtensions ( ) { return noDiscoveryExtensions ; } public void setNoDiscoveryExtensions ( String exts ) { String old = noDiscoveryExtensions ; noDiscoveryExtensions = exts ; firePropertyChange ( PROP_NO_DISCOVERY_EXTENSIONS , old , exts ) ; } public boolean isShowAppIconInSystray ( ) { return showAppIconInSystray ; } public void setShowAppIconInSystray ( boolean show ) { boolean oldShow = showAppIconInSystray ; showAppIconInSystray = show ; firePropertyChange ( PROP_SHOW_APPICON_IN_SYSTRAY , oldShow , show ) ; } public boolean isMinimizeToSystray ( ) { return minimizeToSystray ; } public void setMinimizeToSystray ( boolean toSystray ) { boolean oldToSystray = minimizeToSystray ; minimizeToSystray = toSystray ; firePropertyChange ( PROP_MINIMIZE_TO_SYSTRAY , oldToSystray , toSystray ) ; } public int getDockIconBadgeMode ( ) { return dockIconBadgeMode ; } public void setDockIconBadgeMode ( int mode ) { int oldMode = dockIconBadgeMode ; dockIconBadgeMode = mode ; firePropertyChange ( PROP_DIB_MODE , oldMode , mode ) ; } public int getBriefSentences ( ) { return AbstractArticle . getBriefSentences ( ) ; } public void setBriefSentences ( int limit ) { int old = getBriefSentences ( ) ; AbstractArticle . setBriefSentences ( limit ) ; firePropertyChange ( PROP_BRIEF_SENTENCES , old , limit ) ; } public int getBriefMinLength ( ) { return AbstractArticle . getBriefMinLength ( ) ; } public void setBriefMinLength ( int min ) { int old = getBriefMinLength ( ) ; AbstractArticle . setBriefMinLength ( min ) ; firePropertyChange ( PROP_BRIEF_MIN_LENGTH , old , min ) ; } public int getBriefMaxLength ( ) { return AbstractArticle . getBriefMaxLength ( ) ; } public void setBriefMaxLength ( int max ) { int old = getBriefMaxLength ( ) ; AbstractArticle . setBriefMaxLength ( max ) ; firePropertyChange ( PROP_BRIEF_MAX_LENGTH , old , max ) ; } public boolean isPinTagging ( ) { return pinTagging ; } public void setPinTagging ( boolean en ) { boolean old = pinTagging ; pinTagging = en ; firePropertyChange ( PROP_PIN_TAGGING , old , pinTagging ) ; } public String getPinTags ( ) { return pinTags ; } public void setPinTags ( String tags ) { String old = pinTags ; pinTags = tags ; firePropertyChange ( PROP_PIN_TAGS , old , tags ) ; } public String getWhIgnore ( ) { return whIgnore ; } public void setWhIgnore ( String patterns ) { String old = whIgnore ; whIgnore = patterns ; firePropertyChange ( PROP_WH_IGNORE , old , patterns ) ; } public boolean isWhNoSelfLinks ( ) { return whNoSelfLinks ; } public void setWhNoSelfLinks ( boolean dontCount ) { boolean old = whNoSelfLinks ; whNoSelfLinks = dontCount ; firePropertyChange ( PROP_WH_NOSELFLINKS , old , whNoSelfLinks ) ; } public boolean isWhSuppressSameSourceLinks ( ) { return whSuppressSameSourceLinks ; } public void setWhSuppressSameSourceLinks ( boolean suppress ) { boolean old = whSuppressSameSourceLinks ; whSuppressSameSourceLinks = suppress ; firePropertyChange ( PROP_WH_SUPPRESS_SAME_SOURCE_LINKS , old , whSuppressSameSourceLinks ) ; } public String getWhTargetGuide ( ) { return whTargetGuide ; } public void setWhTargetGuide ( String title ) { String old = whTargetGuide ; whTargetGuide = title ; firePropertyChange ( PROP_WH_TARGET_GUIDE , old , title ) ; } public long getWhSettingsChangeTime ( ) { return whSettingsChangeTime ; } public void setWhSettingsChangeTime ( long time ) { long old = whSettingsChangeTime ; whSettingsChangeTime = time ; firePropertyChange ( PROP_WH_SETTINGS_CHANGE_TIME , old , time ) ; } public long getCwFrequency ( ) { return cwFrequency ; } public void setCwFrequncy ( long time ) { long old = cwFrequency ; cwFrequency = time ; firePropertyChange ( PROP_CW_FREQUENCY , old , time ) ; } public long getCwLastCleanup ( ) { return cwLastCleanup ; } public void setCwLastCleanup ( long time ) { long old = cwLastCleanup ; cwLastCleanup = time ; firePropertyChange ( PROP_CW_LAST_CLEANUP , old , time ) ; } public boolean isAlwaysUseEnglish ( ) { return alwaysUseEnglish ; } public void setAlwaysUseEnglish ( boolean alwaysUseEnglish ) { boolean old = this . alwaysUseEnglish ; this . alwaysUseEnglish = alwaysUseEnglish ; firePropertyChange ( PROP_ALWAYS_USE_ENGLISH , old , alwaysUseEnglish ) ; } public boolean isAutoExpandMini ( ) { return autoExpandMini ; } public void setAutoExpandMini ( boolean autoExpandMini ) { boolean old = this . autoExpandMini ; this . autoExpandMini = autoExpandMini ; firePropertyChange ( PROP_AUTO_EXPAND_MINI , old , autoExpandMini ) ; } public void restoreFrom ( Preferences prefs ) { setBackgroundDebugMode ( prefs . getBoolean ( KEY_BACKGROUND_DEBUG_MODE , DEFAULT_BACKGROUNDDEBUGMODE ) ) ; setMarkReadWhenChangingChannels ( prefs . getBoolean ( KEY_MARK_READ_WHEN_CHANGING_CHANNELS , DEFAULT_MARK_READ_WHEN_CHANGING_CHANNELS ) ) ; setMarkReadWhenChangingGuides ( prefs . getBoolean ( KEY_MARK_READ_WHEN_CHANGING_GUIDES , DEFAULT_MARK_READ_WHEN_CHANGING_GUIDES ) ) ; setAutoPurgeIntervalMinutes ( prefs . getInt ( KEY_AUTO_PURGE_INTERVAL_MINUTES , DEFAULT_PURGE_INTERVAL_MINUTES ) ) ; setPurgeCount ( prefs . getInt ( KEY_PURGE_COUNT , DEFAULT_PURGE_COUNT ) ) ; setRssPollInterval ( prefs . getInt ( KEY_RSS_POLL_MIN , DEFAULT_RSS_POLL_MIN ) ) ; setInternetBrowser ( prefs . get ( KEY_INTERNET_BROWSER , DEFAULT_INTERNET_BROWSER ) ) ; setMarkReadAfterDelay ( prefs . getBoolean ( KEY_MARK_READ_AFTER_DELAY , DEFAULT_MARK_READ_AFTER_DELAY ) ) ; setMarkReadAfterSeconds ( prefs . getInt ( KEY_MARK_READ_AFTER_SECONDS , DEFAULT_MARK_READ_AFTER_SECONDS ) ) ; setUsingPersistence ( prefs . getBoolean ( KEY_USE_PERSISTENCE , DEFAULT_USE_PERSISTENCE ) ) ; setGoodChannelStarz ( prefs . getInt ( KEY_GOOD_CHANNEL_STARZ , DEFAULT_GOOD_CHANNEL_STARZ ) ) ; setSortingEnabled ( prefs . getBoolean ( PROP_SORTING_ENABLED , DEFAULT_SORTING_ENABLED ) ) ; setSortByClass1 ( prefs . getInt ( PROP_SORT_BY_CLASS_1 , DEFAULT_SORT_BY_CLASS_1 ) ) ; setReversedSortByClass1 ( prefs . getBoolean ( PROP_REVERSED_SORT_BY_CLASS_1 , DEFAULT_REVERSED_SORT_BY_CLASS_1 ) ) ; setSortByClass2 ( prefs . getInt ( PROP_SORT_BY_CLASS_2 , DEFAULT_SORT_BY_CLASS_2 ) ) ; setReversedSortByClass2 ( prefs . getBoolean ( PROP_REVERSED_SORT_BY_CLASS_2 , DEFAULT_REVERSED_SORT_BY_CLASS_2 ) ) ; setFeedSelectionDelay ( prefs . getInt ( PROP_FEED_SELECTION_DELAY , DEFAULT_FEED_SELECTION_DELAY ) ) ; setPreserveUnread ( prefs . getBoolean ( PROP_PRESERVE_UNREAD , DEFAULT_PRESERVE_UNREAD ) ) ; setCopyLinksInHrefFormat ( prefs . getBoolean ( PROP_COPY_LINKS_IN_HREF_FORMAT , DEFAULT_COPY_LINKS_IN_HREF_FORMAT ) ) ; setAntiAliasText ( prefs . getBoolean ( PROP_AA_TEXT , DEFAULT_AA_TEXT ) ) ; setTagsStorage ( prefs . getInt ( PROP_TAGS_STORAGE , DEFAULT_TAGS_STORAGE ) ) ; setTagsDeliciousUser ( prefs . get ( PROP_TAGS_DELICIOUS_USER , DEFAULT_TAGS_DELICIOUS_USER ) ) ; setTagsDeliciousPassword ( prefs . get ( PROP_TAGS_DELICIOUS_PASSWORD , DEFAULT_TAGS_DELICIOUS_PASSWORD ) ) ; setTagsAutoFetch ( prefs . getBoolean ( PROP_TAGS_AUTOFETCH , DEFAULT_TAGS_AUTOFETCH ) ) ; setCheckingForUpdatesOnStartup ( prefs . getBoolean ( PROP_CHECKING_FOR_UPDATES_ON_STARTUP , DEFAULT_CHECKING_FOR_UPDATES_ON_STARTUP ) ) ; setShowToolbarLabels ( prefs . getBoolean ( PROP_SHOW_TOOLBAR_LABELS , DEFAULT_SHOW_TOOLBAR_LABELS ) ) ; setShowUnreadButtonMenu ( prefs . getBoolean ( PROP_SHOW_UNREAD_BUTTON_MENU , DEFAULT_SHOW_UNREAD_BUTTON_MENU ) ) ; setShowToolbar ( prefs . getBoolean ( PROP_SHOW_TOOLBAR , DEFAULT_SHOW_TOOLBAR ) ) ; setReadingListUpdatePeriod ( prefs . getLong ( PROP_READING_LIST_UPDATE_PERIOD , ReadingList . DEFAULT_PERIOD ) ) ; setFeedImportLimit ( prefs . getInt ( PROP_FEED_IMPORT_LIMIT , DEFAULT_FEED_IMPORT_LIMITATION ) ) ; setUpdateFeeds ( prefs . getBoolean ( PROP_UPDATE_FEEDS , DEFAULT_UPDATE_FEEDS ) ) ; setUpdateReadingLists ( prefs . getBoolean ( PROP_UPDATE_READING_LISTS , DEFAULT_UPDATE_READING_LISTS ) ) ; setOnReadingListUpdateActions ( prefs . getInt ( PROP_ON_READING_LIST_UPDATE_ACTIONS , DEFAULT_ON_READING_LIST_UPDATE_ACTIONS ) ) ; setGuideSelectionMode ( prefs . getInt ( PROP_GUIDE_SELECTION_MODE , DEFAULT_GUIDE_SELECTION_MODE ) ) ; setProxyEnabled ( prefs . getBoolean ( PROP_PROXY_ENABLED , false ) ) ; setProxyHost ( prefs . get ( PROP_PROXY_HOST , "" ) ) ; setProxyPort ( prefs . getInt ( PROP_PROXY_PORT , 80 ) ) ; setProxyExclusions ( prefs . get ( PROP_PROXY_EXCLUSIONS , "" ) ) ; setShowingNewPubAlert ( prefs . getBoolean ( PROP_SHOWING_NEW_PUB_ALERT , DEFAULT_SHOWING_NEW_PUB_ALERT ) ) ; setBrowseOnDblClick ( prefs . getBoolean ( PROP_BROWSE_ON_DBL_CLICK , DEFAULT_BROWSE_ON_DBL_CLICK ) ) ; long lastUpdateTimeL = prefs . getLong ( PROP_LAST_UPDATE_TIME , - 1 ) ; setLastUpdateTime ( lastUpdateTimeL == - 1 ? null : new Date ( lastUpdateTimeL ) ) ; setPingOnReadingListPublication ( prefs . getBoolean ( PROP_PING_ON_RL_PUBLICATION , DEFAULT_PING_ON_RL_PUBLICATION ) ) ; setPingOnReadingListPublicationURL ( prefs . get ( PROP_PING_ON_RL_PUBLICATION_URL , DEFAULT_PING_ON_RL_PUBLICATION_URL ) ) ; viewModePreferences . restore ( prefs ) ; bloggingPreferences . restore ( prefs ) ; twitterPreferences . restore ( prefs ) ; setNotificationsEnabled ( prefs . getBoolean ( PROP_NOTIFICATIONS_ENABLED , DEFAULT_NOTIFICATIONS_ENABLED ) ) ; setNotificationsShowPeriod ( prefs . getInt ( PROP_NOTIFICATIONS_SHOW_PERIOD , DEFAULT_NOTIFICATIONS_SHOW_PERIOD ) ) ; setSoundOnNewArticles ( prefs . getBoolean ( PROP_SOUND_ON_NEW_ARTICLES , DEFAULT_SOUND_ON_NEW_ARTICLES ) ) ; setSoundOnNoUnread ( prefs . getBoolean ( PROP_SOUND_ON_NO_UNREAD , DEFAULT_SOUND_ON_NO_UNREAD ) ) ; setNoDiscoveryExtensions ( prefs . get ( PROP_NO_DISCOVERY_EXTENSIONS , DEFAULT_NO_DISCOVERY_EXTENSIONS ) ) ; setShowAppIconInSystray ( prefs . getBoolean ( PROP_SHOW_APPICON_IN_SYSTRAY , DEFAULT_SHOW_APPICON_IN_SYSTRAY ) ) ; setMinimizeToSystray ( prefs . getBoolean ( PROP_MINIMIZE_TO_SYSTRAY , DEFAULT_MINIMIZE_TO_SYSTRAY ) ) ; setDockIconBadgeMode ( prefs . getInt ( PROP_DIB_MODE , DEFAULT_DIB_BADGE_MODE ) ) ; setBriefSentences ( prefs . getInt ( PROP_BRIEF_SENTENCES , AbstractArticle . DEFAULT_BRIEF_SENTENCES ) ) ; setBriefMinLength ( prefs . getInt ( PROP_BRIEF_MIN_LENGTH , AbstractArticle . DEFAULT_BRIEF_MIN_LENGTH ) ) ; setBriefMaxLength ( prefs . getInt ( PROP_BRIEF_MAX_LENGTH , AbstractArticle . DEFAULT_BRIEF_MAX_LENGTH ) ) ; setPinTagging ( prefs . getBoolean ( PROP_PIN_TAGGING , DEFAULT_PIN_TAGGING ) ) ; setPinTags ( prefs . get ( PROP_PIN_TAGS , DEFAULT_PIN_TAGS ) ) ; setPageSize ( prefs . getInt ( PROP_PAGE_SIZE , DEFAULT_PAGE_SIZE ) ) ; setWhIgnore ( prefs . get ( PROP_WH_IGNORE , DEFAULT_WH_IGNORE ) . replaceAll ( "\\s" , "\n" ) ) ; setWhNoSelfLinks ( prefs . getBoolean ( PROP_WH_NOSELFLINKS , DEFAULT_WH_NOSELFLINKS ) ) ; setWhSuppressSameSourceLinks ( prefs . getBoolean ( PROP_WH_SUPPRESS_SAME_SOURCE_LINKS , DEFAULT_WH_SUPPRESS_SAME_SOURCE_LINKS ) ) ; setWhTargetGuide ( prefs . get ( PROP_WH_TARGET_GUIDE , DEFAULT_WH_TARGET_GUIDE ) ) ; setWhSettingsChangeTime ( prefs . getLong ( PROP_WH_SETTINGS_CHANGE_TIME , DEFAULT_WH_SETTINGS_CHANGE_TIME ) ) ; setAlwaysUseEnglish ( prefs . getBoolean ( PROP_ALWAYS_USE_ENGLISH , DEFAULT_ALWAYS_USE_ENGLISH ) ) ; setCwFrequncy ( prefs . getLong ( PROP_CW_FREQUENCY , DEFAULT_CW_FREQUENCY ) ) ; setCwLastCleanup ( prefs . getLong ( PROP_CW_LAST_CLEANUP , DEFAULT_CW_LAST_CLEANUP ) ) ; setAutoExpandMini ( prefs . getBoolean ( PROP_AUTO_EXPAND_MINI , DEFAULT_AUTO_EXPAND_MINI ) ) ; } public void storeIn ( Preferences prefs ) { prefs . putBoolean ( KEY_BACKGROUND_DEBUG_MODE , isBackgroundDebugMode ( ) ) ; prefs . putBoolean ( KEY_MARK_READ_WHEN_CHANGING_CHANNELS , isMarkReadWhenChangingChannels ( ) ) ; prefs . putBoolean ( KEY_MARK_READ_WHEN_CHANGING_GUIDES , isMarkReadWhenChangingGuides ( ) ) ; prefs . putInt ( KEY_AUTO_PURGE_INTERVAL_MINUTES , getAutoPurgeIntervalMinutes ( ) ) ; prefs . putInt ( KEY_PURGE_COUNT , getPurgeCount ( ) ) ; prefs . putInt ( KEY_RSS_POLL_MIN , getRssPollInterval ( ) ) ; prefs . put ( KEY_INTERNET_BROWSER , getInternetBrowser ( ) ) ; prefs . putBoolean ( KEY_MARK_READ_AFTER_DELAY , isMarkReadAfterDelay ( ) ) ; prefs . putInt ( KEY_MARK_READ_AFTER_SECONDS , getMarkReadAfterSeconds ( ) ) ; prefs . putBoolean ( KEY_USE_PERSISTENCE , isUsingPersistence ( ) ) ; prefs . putInt ( KEY_GOOD_CHANNEL_STARZ , getGoodChannelStarz ( ) ) ; prefs . putBoolean ( PROP_SORTING_ENABLED , isSortingEnabled ( ) ) ; prefs . putInt ( PROP_SORT_BY_CLASS_1 , getSortByClass1 ( ) ) ; prefs . putBoolean ( PROP_REVERSED_SORT_BY_CLASS_1 , isReversedSortByClass1 ( ) ) ; prefs . putInt ( PROP_SORT_BY_CLASS_2 , getSortByClass2 ( ) ) ; prefs . putBoolean ( PROP_REVERSED_SORT_BY_CLASS_2 , isReversedSortByClass2 ( ) ) ; prefs . putInt ( PROP_FEED_SELECTION_DELAY , getFeedSelectionDelay ( ) ) ; prefs . putBoolean ( PROP_PRESERVE_UNREAD , isPreserveUnread ( ) ) ; prefs . putBoolean ( PROP_COPY_LINKS_IN_HREF_FORMAT , isCopyLinksInHrefFormat ( ) ) ; prefs . putBoolean ( PROP_AA_TEXT , isAntiAliasText ( ) ) ; prefs . putInt ( PROP_TAGS_STORAGE , getTagsStorage ( ) ) ; prefs . put ( PROP_TAGS_DELICIOUS_USER , getTagsDeliciousUser ( ) ) ; prefs . put ( PROP_TAGS_DELICIOUS_PASSWORD , getTagsDeliciousPassword ( ) ) ; prefs . putBoolean ( PROP_TAGS_AUTOFETCH , isTagsAutoFetch ( ) ) ; prefs . putBoolean ( PROP_CHECKING_FOR_UPDATES_ON_STARTUP , isCheckingForUpdatesOnStartup ( ) ) ; prefs . putBoolean ( PROP_SHOW_TOOLBAR_LABELS , isShowToolbarLabels ( ) ) ; prefs . putBoolean ( PROP_SHOW_UNREAD_BUTTON_MENU , isShowUnreadButtonMenu ( ) ) ; prefs . putBoolean ( PROP_SHOW_TOOLBAR , isShowToolbar ( ) ) ; prefs . putLong ( PROP_READING_LIST_UPDATE_PERIOD , getReadingListUpdatePeriod ( ) ) ; prefs . putInt ( PROP_FEED_IMPORT_LIMIT , getFeedImportLimit ( ) ) ; prefs . putBoolean ( PROP_UPDATE_FEEDS , isUpdateFeeds ( ) ) ; prefs . putBoolean ( PROP_UPDATE_READING_LISTS , isUpdateReadingLists ( ) ) ; prefs . putInt ( PROP_ON_READING_LIST_UPDATE_ACTIONS , getOnReadingListUpdateActions ( ) ) ; prefs . putInt ( PROP_GUIDE_SELECTION_MODE , getGuideSelectionMode ( ) ) ; prefs . putBoolean ( PROP_PROXY_ENABLED , isProxyEnabled ( ) ) ; prefs . put ( PROP_PROXY_HOST , getProxyHost ( ) ) ; prefs . putInt ( PROP_PROXY_PORT , getProxyPort ( ) ) ; prefs . put ( PROP_PROXY_EXCLUSIONS , getProxyExclusions ( ) ) ; prefs . putBoolean ( PROP_SHOWING_NEW_PUB_ALERT , isShowingNewPubAlert ( ) ) ; prefs . putBoolean ( PROP_BROWSE_ON_DBL_CLICK , isBrowseOnDblClick ( ) ) ; Date time = getLastUpdateTime ( ) ; prefs . putLong ( PROP_LAST_UPDATE_TIME , time == null ? - 1 : time . getTime ( ) ) ; prefs . putBoolean ( PROP_PING_ON_RL_PUBLICATION , isPingOnReadingListPublication ( ) ) ; prefs . put ( PROP_PING_ON_RL_PUBLICATION_URL , getPingOnReadingListPublicationURL ( ) ) ; viewModePreferences . store ( prefs ) ; bloggingPreferences . store ( prefs ) ; twitterPreferences . store ( prefs ) ; prefs . putBoolean ( PROP_NOTIFICATIONS_ENABLED , isNotificationsEnabled ( ) ) ; prefs . putBoolean ( PROP_SOUND_ON_NEW_ARTICLES , isSoundOnNewArticles ( ) ) ; prefs . putBoolean ( PROP_SOUND_ON_NO_UNREAD , isSoundOnNoUnread ( ) ) ; prefs . putInt ( PROP_NOTIFICATIONS_SHOW_PERIOD , getNotificationsShowPeriod ( ) ) ; prefs . put ( PROP_NO_DISCOVERY_EXTENSIONS , getNoDiscoveryExtensions ( ) ) ; prefs . putBoolean ( PROP_SHOW_APPICON_IN_SYSTRAY , isShowAppIconInSystray ( ) ) ; prefs . putBoolean ( PROP_MINIMIZE_TO_SYSTRAY , isMinimizeToSystray ( ) ) ; prefs . putInt ( PROP_DIB_MODE , getDockIconBadgeMode ( ) ) ; prefs . putInt ( PROP_BRIEF_SENTENCES , getBriefSentences ( ) ) ; prefs . putInt ( PROP_BRIEF_MIN_LENGTH , getBriefMinLength ( ) ) ; prefs . putInt ( PROP_BRIEF_MAX_LENGTH , getBriefMaxLength ( ) ) ; prefs . putBoolean ( PROP_PIN_TAGGING , isPinTagging ( ) ) ; prefs . put ( PROP_PIN_TAGS , getPinTags ( ) ) ; prefs . putInt ( PROP_PAGE_SIZE , getPageSize ( ) ) ; prefs . put ( PROP_WH_IGNORE , getWhIgnore ( ) . replaceAll ( "\\n" , " " ) ) ; prefs . putBoolean ( PROP_WH_NOSELFLINKS , isWhNoSelfLinks ( ) ) ; prefs . putBoolean ( PROP_WH_SUPPRESS_SAME_SOURCE_LINKS , isWhSuppressSameSourceLinks ( ) ) ; prefs . put ( PROP_WH_TARGET_GUIDE , getWhTargetGuide ( ) ) ; prefs . putLong ( PROP_WH_SETTINGS_CHANGE_TIME , getWhSettingsChangeTime ( ) ) ; prefs . putBoolean ( PROP_ALWAYS_USE_ENGLISH , isAlwaysUseEnglish ( ) ) ; prefs . putLong ( PROP_CW_FREQUENCY , getCwFrequency ( ) ) ; prefs . putLong ( PROP_CW_LAST_CLEANUP , getCwLastCleanup ( ) ) ; prefs . putBoolean ( PROP_AUTO_EXPAND_MINI , isAutoExpandMini ( ) ) ; } public int getSelectedPrefsPage ( ) { return selectedPrefsPage ; } public void setSelectedPrefsPage ( int index ) { this . selectedPrefsPage = index ; } public int getPageSize ( ) { return pageSize ; } public void setPageSize ( int pageSize ) { int old = this . pageSize ; this . pageSize = pageSize ; firePropertyChange ( PROP_PAGE_SIZE , old , pageSize ) ; } } 