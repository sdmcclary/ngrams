public class BaseTextEditor extends TextEditor { private String directoryHint ; protected void performSave ( boolean overwrite , IProgressMonitor progressMonitor ) { super . performSave ( overwrite , progressMonitor ) ; onSaveComplete ( ) ; } protected void onSaveComplete ( ) { } protected void performSaveAs ( IProgressMonitor progressMonitor ) { IEditorInput input = getEditorInput ( ) ; String oldPath = CoreUIUtils . getPathFromEditorInput ( input ) ; File newFile = null ; File oldFile = oldPath == null ? null : new File ( oldPath ) ; IFile file = ( input instanceof IFileEditorInput ) ? ( ( IFileEditorInput ) input ) . getFile ( ) : null ; if ( file != null ) { super . performSaveAs ( progressMonitor ) ; String newPath = CoreUIUtils . getPathFromEditorInput ( getEditorInput ( ) ) ; newFile = new File ( newPath ) ; } else { newFile = doExternalSaveAs ( progressMonitor ) ; } onSaveAsComplete ( oldFile , newFile ) ; } protected void onSaveAsComplete ( final File oldFile , final File newFile ) { } private File doExternalSaveAs ( IProgressMonitor progressMonitor ) { Shell shell = getSite ( ) . getShell ( ) ; IDocumentProvider provider = getDocumentProvider ( ) ; IEditorInput input = getEditorInput ( ) ; FileDialog fileDialog = new FileDialog ( shell , SWT . SAVE ) ; String fileName = getDefaultSaveAsFile ( ) ; fileDialog . setFileName ( getBaseFilename ( fileName ) ) ; FileDialogFilterInfo filterInfo = getFileDialogFilterInformation ( fileName ) ; String [ ] fileExtensions = filterInfo . getFilterExtensions ( ) ; if ( fileExtensions != null && fileExtensions . length > 0 ) { fileDialog . setFilterExtensions ( fileExtensions ) ; fileDialog . setFilterNames ( filterInfo . getFilterNames ( ) ) ; } if ( directoryHint != null ) { File f = new File ( directoryHint ) ; if ( f . exists ( ) ) { fileDialog . setFilterPath ( directoryHint ) ; } } String text = fileDialog . open ( ) ; if ( text == null ) { if ( progressMonitor != null ) { progressMonitor . setCanceled ( true ) ; } return null ; } File file = new File ( text ) ; final IEditorInput newInput = CoreUIUtils . createJavaFileEditorInput ( file ) ; boolean success = false ; try { provider . aboutToChange ( newInput ) ; provider . saveDocument ( progressMonitor , newInput , provider . getDocument ( input ) , true ) ; success = true ; } catch ( CoreException x ) { IStatus status = x . getStatus ( ) ; if ( status == null || status . getSeverity ( ) != IStatus . CANCEL ) { String title = Messages . BaseTextEditor_SaveFileError ; String msg = StringUtils . format ( Messages . BaseTextEditor_ErrorSaving , new Object [ ] { x . getMessage ( ) } ) ; if ( status != null ) { switch ( status . getSeverity ( ) ) { case IStatus . INFO : MessageDialog . openInformation ( shell , title , msg ) ; break ; case IStatus . WARNING : MessageDialog . openWarning ( shell , title , msg ) ; break ; default : MessageDialog . openError ( shell , title , msg ) ; } } else { MessageDialog . openError ( shell , title , msg ) ; } } } finally { provider . changed ( newInput ) ; if ( success ) { setInput ( newInput ) ; } } if ( progressMonitor != null ) { progressMonitor . setCanceled ( ! success ) ; } if ( success ) { return file ; } else { return null ; } } protected FileDialogFilterInfo getFileDialogFilterInformation ( String fileName ) { FileDialogFilterInfo filterInfo = null ; String fileExtension = getFileExtension ( fileName ) ; if ( ! fileExtension . equals ( StringUtils . EMPTY ) ) { filterInfo = new FileDialogFilterInfo ( ) ; filterInfo . setFilterExtensions ( new String [ ] { "*" + fileExtension , "All Files (*.*)" } ) ; filterInfo . setFilterNames ( new String [ ] { "*" + fileExtension , Messages . BaseTextEditor_AllFiles } ) ; } else { filterInfo = new FileDialogFilterInfo ( ) ; filterInfo . setFilterExtensions ( new String [ ] { "*.*" } ) ; filterInfo . setFilterNames ( new String [ ] { Messages . BaseTextEditor_AllFiles } ) ; } return filterInfo ; } protected String getDefaultSaveAsFile ( ) { IEditorInput input = this . getEditorInput ( ) ; if ( input instanceof IFileEditorInput ) { IFileEditorInput fileInput = ( IFileEditorInput ) input ; return fileInput . getFile ( ) . getLocation ( ) . toOSString ( ) ; } else if ( input instanceof IPathEditorInput ) { IPathEditorInput pathInput = ( IPathEditorInput ) input ; return pathInput . getPath ( ) . toOSString ( ) ; } else if ( input instanceof IURIEditorInput ) { IURIEditorInput uriInput = ( IURIEditorInput ) input ; return uriInput . getURI ( ) . getPath ( ) ; } else if ( input instanceof NonExistingFileEditorInput ) { NonExistingFileEditorInput nonExist = ( NonExistingFileEditorInput ) input ; IPath path = nonExist . getPath ( input ) ; String fileName = getTitle ( ) ; String lastSegment = path . lastSegment ( ) ; int extIndex = lastSegment . lastIndexOf ( "." ) ; if ( extIndex != - 1 ) { fileName = fileName + lastSegment . substring ( extIndex ) ; } return fileName ; } return null ; } protected String getFileExtension ( String fileName ) { String lastSegment = fileName ; int extIndex = lastSegment . lastIndexOf ( "." ) ; if ( extIndex != - 1 ) { return lastSegment . substring ( extIndex ) ; } else { return StringUtils . EMPTY ; } } private static String getBaseFilename ( String filepath ) { int index = filepath . lastIndexOf ( File . separator ) ; return ( index < 0 ) ? filepath : filepath . substring ( index + 1 ) ; } public String getParentDirectoryHint ( ) { return directoryHint ; } public void setParentDirectoryHint ( String hint ) { directoryHint = hint ; } protected class FileDialogFilterInfo { private String [ ] filterNames ; private String [ ] filterExtensions ; public FileDialogFilterInfo ( ) { } public String [ ] getFilterExtensions ( ) { return filterExtensions ; } public void setFilterExtensions ( String [ ] filterExtensions ) { this . filterExtensions = filterExtensions ; } public String [ ] getFilterNames ( ) { return filterNames ; } public void setFilterNames ( String [ ] filterNames ) { this . filterNames = filterNames ; } } } 