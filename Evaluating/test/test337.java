public class OutputModule extends AbstractQuercusModule implements ModuleStartupListener { private static final L10N L = new L10N ( OutputModule . class ) ; private static final StringValue HTTP_ACCEPT_ENCODING = new ConstStringValue ( "HTTP_ACCEPT_ENCODING" ) ; private static final IniDefinitions _iniDefinitions = new IniDefinitions ( ) ; private enum Encoding { NONE , GZIP , DEFLATE } ; private static class GZOutputPair { public StringBuilderOutputStream _tempStream ; public OutputStream _outputStream ; } public IniDefinitions getIniDefinitions ( ) { return _iniDefinitions ; } public void startup ( Env env ) { boolean isOutputBuffering = INI_OUTPUT_BUFFERING . getAsBoolean ( env ) ; String handlerName = INI_OUTPUT_HANDLER . getAsString ( env ) ; if ( handlerName != null && ! "" . equals ( handlerName ) && env . getFunction ( handlerName ) != null ) { Callback callback = env . createCallback ( env . createStringOld ( handlerName ) ) ; ob_start ( env , callback , 0 , true ) ; } else if ( isOutputBuffering ) { ob_start ( env , null , 0 , true ) ; } ob_implicit_flush ( env , isOutputBuffering ) ; } public Value flush ( Env env ) { try { env . getOriginalOut ( ) . flush ( ) ; } catch ( IOException e ) { } return NullValue . NULL ; } public static Value ob_clean ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) { ob . clean ( ) ; return BooleanValue . TRUE ; } else return BooleanValue . FALSE ; } public static boolean ob_end_clean ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) { ob . clean ( ) ; Callback callback = ob . getCallback ( ) ; if ( callback != null ) { ob . setCallback ( null ) ; } } return env . popOutputBuffer ( ) ; } public static boolean ob_end_flush ( Env env ) { return env . popOutputBuffer ( ) ; } public static Value ob_get_clean ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) { Value result = ob . getContents ( ) ; ob . clean ( ) ; return result ; } else return BooleanValue . FALSE ; } public static Value ob_get_contents ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) return ob . getContents ( ) ; else return BooleanValue . FALSE ; } public static Value ob_get_flush ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; Value result = BooleanValue . FALSE ; if ( ob != null ) { result = ob . getContents ( ) ; } env . popOutputBuffer ( ) ; return result ; } public static Value ob_flush ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) { ob . flush ( ) ; return BooleanValue . TRUE ; } else return BooleanValue . FALSE ; } public static Value ob_get_length ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) return LongValue . create ( ob . getLength ( ) ) ; else return BooleanValue . FALSE ; } public static Value ob_get_level ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; if ( ob != null ) return LongValue . create ( ob . getLevel ( ) ) ; else return LongValue . ZERO ; } private static void listHandlers ( Env env , OutputBuffer ob , ArrayValue handlers ) { if ( ob == null ) return ; listHandlers ( env , ob . getNext ( ) , handlers ) ; Callback callback = ob . getCallback ( ) ; if ( callback != null ) handlers . put ( env . createStringOld ( callback . getCallbackName ( ) ) ) ; else handlers . put ( env . createStringOld ( "default output handler" ) ) ; } public static Value ob_list_handlers ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; ArrayValue handlers = new ArrayValueImpl ( ) ; listHandlers ( env , ob , handlers ) ; return handlers ; } private static void putCommonStatus ( ArrayValue element , OutputBuffer ob , Env env , boolean fullStatus ) { LongValue type = LongValue . ONE ; Callback callback = ob . getCallback ( ) ; if ( callback != null && callback . isInternal ( ) ) type = LongValue . ZERO ; element . put ( env . createStringOld ( "type" ) , type ) ; if ( fullStatus && callback != null && callback == UrlRewriterCallback . getInstance ( env ) ) element . put ( env . createStringOld ( "buffer_size" ) , LongValue . ZERO ) ; LongValue status = ob . haveFlushed ( ) ? LongValue . ONE : LongValue . ZERO ; element . put ( env . createStringOld ( "status" ) , status ) ; StringValue name ; if ( callback != null ) name = env . createStringOld ( callback . getCallbackName ( ) ) ; else name = env . createStringOld ( "default output handler" . intern ( ) ) ; element . put ( env . createStringOld ( "name" . intern ( ) ) , name ) ; Value del = ob . getEraseFlag ( ) ? BooleanValue . TRUE : BooleanValue . FALSE ; element . put ( env . createStringOld ( "del" ) , del ) ; } private static void getFullStatus ( OutputBuffer ob , Env env , ArrayValue result ) { if ( ob == null ) return ; getFullStatus ( ob . getNext ( ) , env , result ) ; ArrayValue element = new ArrayValueImpl ( ) ; element . put ( env . createStringOld ( "chunk_size" ) , LongValue . create ( ob . getChunkSize ( ) ) ) ; element . put ( env . createStringOld ( "size" ) , LongValue . create ( - 1 ) ) ; element . put ( env . createStringOld ( "block_size" ) , LongValue . create ( - 1 ) ) ; putCommonStatus ( element , ob , env , true ) ; result . put ( element ) ; } public static Value ob_get_status ( Env env , @ Optional boolean full_status ) { if ( full_status ) { OutputBuffer ob = env . getOutputBuffer ( ) ; ArrayValue result = new ArrayValueImpl ( ) ; getFullStatus ( ob , env , result ) ; return result ; } OutputBuffer ob = env . getOutputBuffer ( ) ; ArrayValue result = new ArrayValueImpl ( ) ; if ( ob != null ) { result . put ( env . createStringOld ( "level" ) , LongValue . create ( ob . getLevel ( ) ) ) ; putCommonStatus ( result , ob , env , false ) ; } return result ; } public static Value ob_implicit_flush ( Env env , @ Optional ( "true" ) boolean flag ) { if ( env . getOriginalOut ( ) != null ) env . getOriginalOut ( ) . setImplicitFlush ( flag ) ; return NullValue . NULL ; } public static boolean ob_start ( Env env , @ Optional Callback callback , @ Optional int chunkSize , @ Optional ( "true" ) boolean erase ) { if ( callback != null && callback . getCallbackName ( ) . equals ( "ob_gzhandler" ) ) { OutputBuffer ob = env . getOutputBuffer ( ) ; for ( ; ob != null ; ob = ob . getNext ( ) ) { Callback cb = ob . getCallback ( ) ; if ( cb . getCallbackName ( ) . equals ( "ob_gzhandler" ) ) { env . warning ( L . l ( "output handler 'ob_gzhandler' cannot be used twice" ) ) ; return false ; } } } env . pushOutputBuffer ( callback , chunkSize , erase ) ; return true ; } public static UrlRewriterCallback pushUrlRewriter ( Env env ) { UrlRewriterCallback rewriter = UrlRewriterCallback . getInstance ( env ) ; if ( rewriter == null ) { OutputBuffer ob = env . getOutputBuffer ( ) ; rewriter = new UrlRewriterCallback ( env ) ; if ( ob != null && ob . getCallback ( ) == null ) ob . setCallback ( rewriter ) ; else ob_start ( env , rewriter , 0 , true ) ; } return rewriter ; } public static boolean output_add_rewrite_var ( Env env , String name , String value ) { UrlRewriterCallback rewriter = pushUrlRewriter ( env ) ; rewriter . addRewriterVar ( name , value ) ; return true ; } public static boolean output_reset_rewrite_vars ( Env env ) { UrlRewriterCallback rewriter = UrlRewriterCallback . getInstance ( env ) ; rewriter . resetRewriterVars ( ) ; return true ; } public static Value ob_gzhandler ( Env env , StringValue buffer , int state ) { Encoding encoding = Encoding . NONE ; Value _SERVER = env . getGlobalVar ( "_SERVER" ) ; String [ ] acceptedList = _SERVER . get ( HTTP_ACCEPT_ENCODING ) . toString ( ) . split ( "," ) ; for ( String accepted : acceptedList ) { accepted = accepted . trim ( ) ; if ( accepted . equalsIgnoreCase ( "gzip" ) ) { encoding = Encoding . GZIP ; break ; } else if ( accepted . equalsIgnoreCase ( "deflate" ) ) { encoding = Encoding . DEFLATE ; break ; } } if ( encoding == Encoding . NONE ) return BooleanValue . FALSE ; GZOutputPair pair = null ; StringValue result = env . createBinaryBuilder ( ) ; if ( ( state & ( 1 << OutputBuffer . PHP_OUTPUT_HANDLER_START ) ) != 0 ) { HttpModule . header ( env , env . createStringOld ( "Vary: Accept-Encoding" ) , true , 0 ) ; pair = new GZOutputPair ( ) ; pair . _tempStream = new StringBuilderOutputStream ( result ) ; pair . _tempStream . setStringBuilder ( result ) ; try { if ( encoding == Encoding . GZIP ) { HttpModule . header ( env , env . createStringOld ( "Content-Encoding: gzip" ) , true , 0 ) ; pair . _outputStream = new GZIPOutputStream ( pair . _tempStream ) ; } else if ( encoding == Encoding . DEFLATE ) { HttpModule . header ( env , env . createStringOld ( "Content-Encoding: deflate" ) , true , 0 ) ; pair . _outputStream = new DeflaterOutputStream ( pair . _tempStream ) ; } } catch ( IOException e ) { return BooleanValue . FALSE ; } env . setGzStream ( pair ) ; } else { pair = ( GZOutputPair ) env . getGzStream ( ) ; if ( pair == null ) return BooleanValue . FALSE ; pair . _tempStream . setStringBuilder ( result ) ; } try { buffer . writeTo ( pair . _outputStream ) ; pair . _outputStream . flush ( ) ; if ( ( state & ( 1 << OutputBuffer . PHP_OUTPUT_HANDLER_END ) ) != 0 ) { pair . _outputStream . close ( ) ; } } catch ( IOException e ) { return BooleanValue . FALSE ; } pair . _tempStream . setStringBuilder ( null ) ; return result ; } static final IniDefinition INI_OUTPUT_BUFFERING = _iniDefinitions . add ( "output_buffering" , false , PHP_INI_PERDIR ) ; static final IniDefinition INI_OUTPUT_HANDLER = _iniDefinitions . add ( "output_handler" , "" , PHP_INI_PERDIR ) ; static final IniDefinition INI_IMPLICIT_FLUSH = _iniDefinitions . add ( "implicit_flush" , false , PHP_INI_ALL ) ; } 