public class JavaScriptRunner implements IMonkeyScriptRunner { IPath path ; IWorkbenchWindow window ; StoredScript storedScript ; ClassLoader old_classloader ; JavaScriptClassLoader classloader ; private static final IActivityManager activityManager = PlatformUI . getWorkbench ( ) . getActivitySupport ( ) . getActivityManager ( ) ; public JavaScriptRunner ( IPath path , IWorkbenchWindow window ) { this . path = path ; if ( window == null ) { this . window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; } else { this . window = window ; } } public StoredScript getStoredScript ( ) { return storedScript ; } public Object run ( String entryName , Object [ ] functionArgs ) throws RunMonkeyException { Object result = null ; try { Context cx = Context . enter ( ) ; Scriptable sharedScope = null ; String fileName = this . path . toPortableString ( ) ; Map < String , StoredScript > scriptStore = EclipseMonkeyPlugin . getDefault ( ) . getScriptStore ( ) ; storedScript = ( scriptStore . get ( fileName ) ) ; if ( storedScript == null ) { MessageBox box = new MessageBox ( PlatformUI . getWorkbench ( ) . getDisplay ( ) . getActiveShell ( ) , SWT . OK | SWT . ICON_ERROR ) ; box . setText ( Messages . JavaScriptRunner_TTL_Error_executing_script ) ; box . setMessage ( MessageFormat . format ( Messages . JavaScriptRunner_MSG_Error_executing_script , fileName ) ) ; box . open ( ) ; return null ; } if ( ! storedScript . metadata . ensure_doms_are_loaded ( window ) ) { return null ; } String sharedScopeName = storedScript . metadata . getScopeName ( ) ; if ( sharedScopeName != null ) { Map < String , Object > scopeStore = EclipseMonkeyPlugin . getDefault ( ) . getScopeStore ( ) ; sharedScope = ( Scriptable ) scopeStore . get ( sharedScopeName ) ; if ( sharedScope == null ) { sharedScope = new JavaScriptGlobal ( cx ) ; scopeStore . put ( sharedScopeName , sharedScope ) ; } } defineDynamicVariables ( path ) ; ClassLoader oldLoader = null ; try { Scriptable compiledScope = ( Scriptable ) storedScript . extra . get ( "compiledScope" ) ; boolean needs_compiling = compiledScope == null ; if ( needs_compiling ) { compiledScope = new JavaScriptGlobal ( cx ) ; storedScript . extra . put ( "compiledScope" , compiledScope ) ; if ( sharedScope != null ) { compiledScope . setParentScope ( sharedScope ) ; } } defineStandardGlobalVariables ( compiledScope ) ; defineExtensionGlobalVariables ( compiledScope , storedScript . metadata ) ; if ( needs_compiling ) { String contents = Utilities . getFileContents ( path ) ; Script compiledScript = cx . compileString ( contents , fileName , 1 , null ) ; compiledScope . put ( JavaScriptGlobal . LOCATION_PROPERTY , compiledScope , this . path ) ; JavaScriptClassLoader cl = new JavaScriptClassLoader ( ) ; compiledScope . put ( JavaScriptGlobal . CLASS_LOADER_PROPERTY , compiledScope , cl ) ; compiledScript . exec ( cx , compiledScope ) ; storedScript . extra . put ( "compiledScript" , compiledScript ) ; EclipseMonkeyPlugin . getDefault ( ) . notifyScriptsChanged ( ) ; } Object fObj = compiledScope . get ( entryName , compiledScope ) ; if ( ! ( fObj instanceof Function ) ) { throw new EvaluatorException ( MessageFormat . format ( Messages . JavaScriptRunner_ERR_MSG_function_not_defined , entryName ) , fileName , 0 , "" , 0 ) ; } else { Object scriptsLoader = compiledScope . get ( JavaScriptGlobal . CLASS_LOADER_PROPERTY , compiledScope ) ; if ( scriptsLoader != null && scriptsLoader instanceof ClassLoader ) { cx . setApplicationClassLoader ( ( ClassLoader ) scriptsLoader ) ; oldLoader = cx . getApplicationClassLoader ( ) ; } Function f = ( Function ) fObj ; result = f . call ( cx , compiledScope , compiledScope , functionArgs ) ; } } finally { if ( oldLoader != null ) { cx . setApplicationClassLoader ( oldLoader ) ; } undefineDynamicVariables ( path ) ; } } catch ( WrappedException x ) { error ( x , x . getWrappedException ( ) . toString ( ) ) ; } catch ( EvaluatorException x ) { error ( x , x . lineSource ( ) + "\n" + x . details ( ) ) ; } catch ( RhinoException x ) { error ( x , x . details ( ) ) ; } catch ( IOException x ) { error ( x , this . path . toString ( ) , x . toString ( ) ) ; } catch ( CoreException x ) { error ( x , this . path . toString ( ) , x . toString ( ) ) ; } finally { Context . exit ( ) ; } if ( result instanceof NativeJavaObject ) { result = ( ( NativeJavaObject ) result ) . unwrap ( ) ; } return result ; } private void defineStandardGlobalVariables ( Scriptable scope ) { Object wrappedWindow = Context . javaToJS ( window , scope ) ; ScriptableObject . putProperty ( scope , "window" , wrappedWindow ) ; } private static final boolean isActivityEnabled ( IConfigurationElement element ) { String extensionId = element . getAttribute ( "id" ) ; String extensionPluginId = element . getNamespaceIdentifier ( ) ; String extensionString = null ; if ( extensionPluginId != null && extensionId != null && extensionPluginId . length ( ) > 0 && extensionId . length ( ) > 0 ) { extensionString = extensionPluginId + "/" + extensionId ; } if ( extensionString != null ) { final IIdentifier id = activityManager . getIdentifier ( extensionString ) ; if ( id != null ) { return id . isEnabled ( ) ; } } return true ; } private void defineExtensionGlobalVariables ( Scriptable scope , ScriptMetadata metadata ) throws IOException { IExtensionRegistry registry = Platform . getExtensionRegistry ( ) ; IExtensionPoint point = registry . getExtensionPoint ( "org.eclipse.eclipsemonkey.dom" ) ; if ( point != null ) { IExtension [ ] extensions = point . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] configurations = extension . getConfigurationElements ( ) ; for ( int j = 0 ; j < configurations . length ; j ++ ) { IConfigurationElement element = configurations [ j ] ; if ( ! isActivityEnabled ( element ) ) { continue ; } try { IExtension declaring = element . getDeclaringExtension ( ) ; String declaring_plugin_id = declaring . getNamespaceIdentifier ( ) ; if ( metadata . containsDOM_by_plugin ( declaring_plugin_id ) ) { String variableName = element . getAttribute ( "variableName" ) ; Object object = element . createExecutableExtension ( "class" ) ; IMonkeyDOMFactory factory = ( IMonkeyDOMFactory ) object ; Object rootObject = factory . getDOMroot ( ) ; Object wrappedRoot = Context . javaToJS ( rootObject , scope ) ; ScriptableObject . putProperty ( scope , variableName , wrappedRoot ) ; } } catch ( InvalidRegistryObjectException x ) { } catch ( CoreException x ) { } } } } point = registry . getExtensionPoint ( "org.eclipse.eclipsemonkey.lang.javascript.javascript_dom" ) ; if ( point != null ) { IExtension [ ] extensions = point . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] configurations = extension . getConfigurationElements ( ) ; for ( int j = 0 ; j < configurations . length ; j ++ ) { IConfigurationElement element = configurations [ j ] ; try { if ( ! isActivityEnabled ( element ) ) { continue ; } IExtension declaring = element . getDeclaringExtension ( ) ; String declaring_plugin_id = declaring . getNamespaceIdentifier ( ) ; if ( metadata . containsDOM_by_plugin ( declaring_plugin_id ) ) { String variableName = element . getAttribute ( "variableName" ) ; String basedOnDOM = element . getAttribute ( "basedOn" ) ; if ( basedOnDOM != null && basedOnDOM . trim ( ) . length ( ) > 0 ) { Pattern p = Pattern . compile ( "\\s*(\\p{Graph}+)\\/((\\p{Alnum}|\\.)+)" , Pattern . DOTALL ) ; Matcher m = p . matcher ( basedOnDOM ) ; while ( m . find ( ) ) { metadata . getDOMs ( ) . add ( new DOMDescriptor ( m . group ( 1 ) , m . group ( 2 ) ) ) ; } if ( metadata . ensure_doms_are_loaded ( window ) == false ) { throw new IOException ( "Cannot load the required DOM extension:\n\n" + basedOnDOM + "\n" ) ; } } Object object = element . createExecutableExtension ( "class" ) ; IJavaScriptDOMFactory factory = ( IJavaScriptDOMFactory ) object ; Object rootObject = factory . getDOMroot ( scope ) ; Object wrappedRoot = Context . javaToJS ( rootObject , scope ) ; ScriptableObject . putProperty ( scope , variableName , wrappedRoot ) ; } } catch ( InvalidRegistryObjectException x ) { } catch ( CoreException x ) { } } } } } private void error ( RhinoException x , String string ) throws RunMonkeyException { RunMonkeyException e = new RunMonkeyException ( x . getClass ( ) . getName ( ) , x . sourceName ( ) , new Integer ( x . lineNumber ( ) ) , string ) ; MessageConsoleStream cs = JavaScriptGlobal . getConsoleStream ( ) ; cs . println ( e . toString ( ) ) ; throw e ; } private void defineDynamicVariables ( IPath path ) { Utilities . state ( ) . begin ( path ) ; Utilities . state ( ) . set ( Utilities . SCRIPT_NAME , path . toPortableString ( ) ) ; } private void undefineDynamicVariables ( IPath path ) { Utilities . state ( ) . end ( path ) ; } private void error ( Exception x , String fileName , String string ) throws RunMonkeyException { RunMonkeyException e = new RunMonkeyException ( x . getClass ( ) . getName ( ) , fileName , null , string ) ; MessageConsoleStream cs = JavaScriptGlobal . getConsoleStream ( ) ; cs . println ( e . toString ( ) ) ; throw e ; } } 