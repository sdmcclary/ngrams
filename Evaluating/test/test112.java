<<<<<<< HEAD
public class Facebook { private HttpServletRequest request ; private HttpServletResponse response ; protected FacebookRestClient apiClient ; protected String apiKey ; protected String secret ; protected Map < String , String > fbParams ; protected Long user ; private static String FACEBOOK_URL_PATTERN = "^https?://([^/]*\\.)?facebook\\.com(:\\d+)?/.*" ; public Facebook ( HttpServletRequest request , HttpServletResponse response , String apiKey , String secret ) { this . request = request ; this . response = response ; this . apiKey = apiKey ; this . secret = secret ; this . apiClient = new FacebookRestClient ( this . apiKey , this . secret ) ; validateFbParams ( ) ; String friends = fbParams . get ( "friends" ) ; if ( friends != null && ! friends . equals ( "" ) ) { List < Long > friendsList = new ArrayList < Long > ( ) ; for ( String friend : friends . split ( "," ) ) { friendsList . add ( Long . parseLong ( friend ) ) ; } apiClient . _setFriendsList ( friendsList ) ; } String added = fbParams . get ( "added" ) ; if ( added != null ) { apiClient . added = new Boolean ( added . equals ( "1" ) ) ; } } public FacebookRestClient getFacebookRestClient ( ) { return apiClient ; } public FacebookRestClient get_api_client ( ) { return getFacebookRestClient ( ) ; } public String getSecret ( ) { return secret ; } public String getApiKey ( ) { return apiKey ; } private void validateFbParams ( ) { fbParams = getValidFbParams ( _getRequestParams ( ) , 48 * 3600 , FacebookParam . SIGNATURE . toString ( ) ) ; if ( fbParams != null && ! fbParams . isEmpty ( ) ) { String tmpSt = fbParams . get ( FacebookParam . USER . getSignatureName ( ) ) ; Long user_id = tmpSt != null ? Long . valueOf ( tmpSt ) : null ; String session_key = fbParams . get ( FacebookParam . SESSION_KEY . getSignatureName ( ) ) ; tmpSt = fbParams . get ( FacebookParam . EXPIRES . getSignatureName ( ) ) ; Long expires = tmpSt != null ? Long . valueOf ( tmpSt ) : null ; setUser ( user_id , session_key , expires ) ; } else { Map < String , String > cookieParams = _getCookiesParams ( ) ; fbParams = getValidFbParams ( cookieParams , null , this . apiKey ) ; if ( fbParams != null && ! fbParams . isEmpty ( ) ) { String tmpSt = fbParams . get ( FacebookParam . USER . getSignatureName ( ) ) ; Long user_id = tmpSt != null ? Long . valueOf ( tmpSt ) : null ; String session_key = fbParams . get ( FacebookParam . SESSION_KEY . getSignatureName ( ) ) ; setUser ( user_id , session_key , null ) ; } else if ( request . getParameter ( "auth_token" ) != null ) { try { doGetSession ( request . getParameter ( "auth_token" ) ) ; setUser ( apiClient . _getUserId ( ) , apiClient . _getSessionKey ( ) , apiClient . _getExpires ( ) ) ; } catch ( Exception e ) { } } } } public String doGetSession ( String authToken ) { try { return apiClient . auth_getSession ( authToken ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } private void setUser ( Long user_id , String session_key , Long expires ) { if ( ! inFbCanvas ( ) ) { Map < String , String > cookiesInfo = _getCookiesParams ( ) ; String cookieUser = cookiesInfo . get ( this . apiKey + "_user" ) ; if ( cookieUser == null || ! cookieUser . equals ( user_id + "" ) ) { Map < String , String > cookies = new HashMap < String , String > ( ) ; cookies . put ( "user" , user_id + "" ) ; cookies . put ( "session_key" , session_key ) ; String sig = generateSig ( cookies , this . secret ) ; int age = 0 ; if ( expires != null ) { age = ( int ) ( expires . longValue ( ) - ( System . currentTimeMillis ( ) / 1000 ) ) ; } for ( Map . Entry < String , String > entry : cookies . entrySet ( ) ) { addCookie ( this . apiKey + "_" + entry . getKey ( ) , entry . getValue ( ) , age ) ; } addCookie ( this . apiKey , sig , age ) ; } } this . user = user_id ; this . apiClient . _setSessionKey ( session_key ) ; } private void addCookie ( String key , String value , int age ) { Cookie cookie = new Cookie ( key , value ) ; if ( age > 0 ) { cookie . setMaxAge ( age ) ; } cookie . setPath ( request . getContextPath ( ) ) ; response . addCookie ( cookie ) ; } private Map < String , String > getValidFbParams ( Map < String , String > params , Integer timeout , String namespace ) { if ( namespace == null ) namespace = "fb_sig" ; String prefix = namespace + "_" ; int prefix_len = prefix . length ( ) ; Map < String , String > fb_params = new HashMap < String , String > ( ) ; for ( Entry < String , String > requestParam : params . entrySet ( ) ) { if ( requestParam . getKey ( ) . indexOf ( prefix ) == 0 ) { fb_params . put ( requestParam . getKey ( ) . substring ( prefix_len ) , requestParam . getValue ( ) ) ; } } if ( timeout != null ) { if ( ! fb_params . containsKey ( FacebookParam . TIME . getSignatureName ( ) ) ) { return new HashMap < String , String > ( ) ; } String tmpTime = fb_params . get ( FacebookParam . TIME . getSignatureName ( ) ) ; if ( tmpTime . indexOf ( '.' ) > 0 ) tmpTime = tmpTime . substring ( 0 , tmpTime . indexOf ( '.' ) ) ; long time = Long . parseLong ( tmpTime ) ; if ( System . currentTimeMillis ( ) / 1000 - time > timeout ) { return new HashMap < String , String > ( ) ; } } if ( ! params . containsKey ( namespace ) || ! verifySignature ( fb_params , params . get ( namespace ) ) ) { return new HashMap < String , String > ( ) ; } return fb_params ; } private void redirect ( String url ) { try { if ( inFbCanvas ( ) ) { String out = "<fb:redirect url=\"" + url + "\"/>" ; response . getWriter ( ) . print ( out ) ; response . flushBuffer ( ) ; } else if ( url . matches ( FACEBOOK_URL_PATTERN ) ) { String out = "<html><script type=\"text/javascript\">\ntop.location.href = \"" + url + "\";\n</script></html>" ; response . setHeader ( "Content-Type" , "text/html" ) ; response . getWriter ( ) . print ( out ) ; response . flushBuffer ( ) ; } else { response . sendRedirect ( url ) ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } public boolean inFrame ( ) { return fbParams . containsKey ( FacebookParam . IN_CANVAS . getSignatureName ( ) ) || fbParams . containsKey ( FacebookParam . IN_IFRAME . getSignatureName ( ) ) ; } public boolean inFbCanvas ( ) { return fbParams . containsKey ( FacebookParam . IN_CANVAS . getSignatureName ( ) ) ; } public boolean isAdded ( ) { return "1" . equals ( fbParams . get ( FacebookParam . ADDED . getSignatureName ( ) ) ) ; } public boolean isLogin ( ) { return getUser ( ) != null ; } public Long get_loggedin_user ( ) { return getUser ( ) ; } public Long getUser ( ) { return this . user ; } private String currentUrl ( ) { String url = request . getScheme ( ) + "://" + request . getServerName ( ) ; int port = request . getServerPort ( ) ; if ( port != 80 ) { url += ":" + port ; } url += request . getRequestURI ( ) ; return url ; } public boolean requireLogin ( String next ) { if ( getUser ( ) != null ) return false ; redirect ( getLoginUrl ( next , inFrame ( ) ) ) ; return true ; } public boolean requireAdd ( String next ) { if ( getUser ( ) != null && isAdded ( ) ) return false ; redirect ( getAddUrl ( next ) ) ; return true ; } public boolean requireFrame ( String next ) { if ( ! inFrame ( ) ) { redirect ( getLoginUrl ( next , true ) ) ; return true ; } return false ; } public String getLoginUrl ( String next , boolean canvas ) { String url = getFacebookUrl ( null ) + "/login.php?v=1.0&api_key=" + apiKey ; try { url += next != null ? "&next=" + URLEncoder . encode ( next , "UTF-8" ) : "" ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } url += canvas ? "&canvas" : "" ; return url ; } public String getAddUrl ( String next ) { String url = getFacebookUrl ( null ) + "/add.php?api_key=" + apiKey ; try { url += next != null ? "&next=" + URLEncoder . encode ( next , "UTF-8" ) : "" ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } return url ; } public static String getFacebookUrl ( String subDomain ) { if ( subDomain == null || subDomain . equals ( "" ) ) subDomain = "www" ; return "http://" + subDomain + ".facebook.com" ; } public static String generateSig ( Map < String , String > params , String secret ) { SortedSet < String > keys = new TreeSet < String > ( params . keySet ( ) ) ; keys . remove ( FacebookParam . SIGNATURE . toString ( ) ) ; String str = "" ; for ( String key : keys ) { str += key + "=" + params . get ( key ) ; } str += secret ; try { MessageDigest md = MessageDigest . getInstance ( "MD5" ) ; md . update ( str . getBytes ( "UTF-8" ) ) ; StringBuilder result = new StringBuilder ( ) ; for ( byte b : md . digest ( ) ) { result . append ( Integer . toHexString ( ( b & 0xf0 ) > > > 4 ) ) ; result . append ( Integer . toHexString ( b & 0x0f ) ) ; } return result . toString ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public boolean verifySignature ( Map < String , String > params , String expected_sig ) { return generateSig ( params , secret ) . equals ( expected_sig ) ; } private Map < String , String > _getRequestParams ( ) { Map < String , String > results = new HashMap < String , String > ( ) ; Map < String , String [ ] > map = request . getParameterMap ( ) ; for ( Entry < String , String [ ] > entry : map . entrySet ( ) ) { results . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; } return results ; } private Map < String , String > _getCookiesParams ( ) { Map < String , String > results = new HashMap < String , String > ( ) ; Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies != null ) { for ( Cookie cookie : cookies ) { results . put ( cookie . getName ( ) , cookie . getValue ( ) ) ; } } return results ; } } 
=======
class ErrorNameClass implements NameClass { public boolean contains ( Name name ) { return false ; } public int containsSpecificity ( Name name ) { return SPECIFICITY_NONE ; } public void accept ( NameClassVisitor visitor ) { visitor . visitError ( ) ; } public boolean isOpen ( ) { return false ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
