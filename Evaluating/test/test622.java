<<<<<<< HEAD
final class ContentAssistSubjectControlAdapter implements IContentAssistSubjectControl { private ITextViewer fViewer ; private IContentAssistSubjectControl fContentAssistSubjectControl ; ContentAssistSubjectControlAdapter ( IContentAssistSubjectControl contentAssistSubjectControl ) { Assert . isNotNull ( contentAssistSubjectControl ) ; fContentAssistSubjectControl = contentAssistSubjectControl ; } public ContentAssistSubjectControlAdapter ( ITextViewer viewer ) { Assert . isNotNull ( viewer ) ; fViewer = viewer ; } public int getLineHeight ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getLineHeight ( ) ; } return fViewer . getTextWidget ( ) . getLineHeight ( ) ; } public Control getControl ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getControl ( ) ; } return fViewer . getTextWidget ( ) ; } public Point getLocationAtOffset ( int offset ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getLocationAtOffset ( offset ) ; } int charCount = fViewer . getTextWidget ( ) . getCharCount ( ) ; int tempOffset = offset ; if ( tempOffset > charCount ) { tempOffset = charCount ; } if ( tempOffset < 0 ) { tempOffset = 0 ; } return fViewer . getTextWidget ( ) . getLocationAtOffset ( tempOffset ) ; } public Point getWidgetSelectionRange ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getWidgetSelectionRange ( ) ; } return fViewer . getTextWidget ( ) . getSelectionRange ( ) ; } public Point getSelectedRange ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getSelectedRange ( ) ; } return fViewer . getSelectedRange ( ) ; } public int getCaretOffset ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getCaretOffset ( ) ; } return fViewer . getTextWidget ( ) . getCaretOffset ( ) ; } public String getLineDelimiter ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getLineDelimiter ( ) ; } return fViewer . getTextWidget ( ) . getLineDelimiter ( ) ; } public void addKeyListener ( KeyListener keyListener ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . addKeyListener ( keyListener ) ; } else { fViewer . getTextWidget ( ) . addKeyListener ( keyListener ) ; } } public void removeKeyListener ( KeyListener keyListener ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . removeKeyListener ( keyListener ) ; } else { fViewer . getTextWidget ( ) . removeKeyListener ( keyListener ) ; } } public IDocument getDocument ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . getDocument ( ) ; } return fViewer . getDocument ( ) ; } public boolean prependVerifyKeyListener ( VerifyKeyListener verifyKeyListener ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . prependVerifyKeyListener ( verifyKeyListener ) ; } else if ( fViewer instanceof ITextViewerExtension ) { ITextViewerExtension e = ( ITextViewerExtension ) fViewer ; e . prependVerifyKeyListener ( verifyKeyListener ) ; return true ; } else { StyledText textWidget = fViewer . getTextWidget ( ) ; if ( Helper . okToUse ( textWidget ) ) { textWidget . addVerifyKeyListener ( verifyKeyListener ) ; return true ; } } return false ; } public boolean appendVerifyKeyListener ( VerifyKeyListener verifyKeyListener ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . appendVerifyKeyListener ( verifyKeyListener ) ; } else if ( fViewer instanceof ITextViewerExtension ) { ITextViewerExtension extension = ( ITextViewerExtension ) fViewer ; extension . appendVerifyKeyListener ( verifyKeyListener ) ; return true ; } else { StyledText textWidget = fViewer . getTextWidget ( ) ; if ( Helper . okToUse ( textWidget ) ) { textWidget . addVerifyKeyListener ( verifyKeyListener ) ; return true ; } } return false ; } public void removeVerifyKeyListener ( VerifyKeyListener verifyKeyListener ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . removeVerifyKeyListener ( verifyKeyListener ) ; } else if ( fViewer instanceof ITextViewerExtension ) { ITextViewerExtension extension = ( ITextViewerExtension ) fViewer ; extension . removeVerifyKeyListener ( verifyKeyListener ) ; } else { StyledText textWidget = fViewer . getTextWidget ( ) ; if ( Helper . okToUse ( textWidget ) ) { textWidget . removeVerifyKeyListener ( verifyKeyListener ) ; } } } public void setEventConsumer ( IEventConsumer eventConsumer ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . setEventConsumer ( eventConsumer ) ; } else { fViewer . setEventConsumer ( eventConsumer ) ; } } public void setSelectedRange ( int i , int j ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . setSelectedRange ( i , j ) ; } else { fViewer . setSelectedRange ( i , j ) ; } } public void revealRange ( int i , int j ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . revealRange ( i , j ) ; } else { fViewer . revealRange ( i , j ) ; } } public boolean supportsVerifyKeyListener ( ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . supportsVerifyKeyListener ( ) ; } return true ; } public char [ ] getCompletionProposalAutoActivationCharacters ( ContentAssistant contentAssistant , int offset ) { if ( fContentAssistSubjectControl != null ) { return contentAssistant . getCompletionProposalAutoActivationCharacters ( fContentAssistSubjectControl , offset ) ; } return contentAssistant . getCompletionProposalAutoActivationCharacters ( fViewer , offset ) ; } char [ ] getContextInformationAutoActivationCharacters ( ContentAssistant contentAssistant , int offset ) { if ( fContentAssistSubjectControl != null ) { return contentAssistant . getContextInformationAutoActivationCharacters ( fContentAssistSubjectControl , offset ) ; } return contentAssistant . getContextInformationAutoActivationCharacters ( fViewer , offset ) ; } CompletionProposalPopup createCompletionProposalPopup ( ContentAssistant contentAssistant , AdditionalInfoController controller ) { if ( fContentAssistSubjectControl != null ) { return new CompletionProposalPopup ( contentAssistant , fContentAssistSubjectControl , controller ) ; } return new CompletionProposalPopup ( contentAssistant , fViewer , controller ) ; } ContextInformationPopup createContextInfoPopup ( ContentAssistant contentAssistant ) { if ( fContentAssistSubjectControl != null ) { return new ContextInformationPopup ( contentAssistant , fContentAssistSubjectControl ) ; } return new ContextInformationPopup ( contentAssistant , fViewer ) ; } public IContextInformationValidator getContextInformationValidator ( ContentAssistant contentAssistant , int offset ) { if ( fContentAssistSubjectControl != null ) { return contentAssistant . getContextInformationValidator ( fContentAssistSubjectControl , offset ) ; } return contentAssistant . getContextInformationValidator ( fViewer , offset ) ; } public IContextInformationPresenter getContextInformationPresenter ( ContentAssistant contentAssistant , int offset ) { if ( fContentAssistSubjectControl != null ) { return contentAssistant . getContextInformationPresenter ( fContentAssistSubjectControl , offset ) ; } return contentAssistant . getContextInformationPresenter ( fViewer , offset ) ; } public void installValidator ( ContextFrame frame ) { if ( fContentAssistSubjectControl != null ) { if ( frame . fValidator instanceof ISubjectControlContextInformationValidator ) { ( ( ISubjectControlContextInformationValidator ) frame . fValidator ) . install ( frame . fInformation , fContentAssistSubjectControl , frame . fOffset ) ; } } else { frame . fValidator . install ( frame . fInformation , fViewer , frame . fOffset ) ; } } public void installContextInformationPresenter ( ContextFrame frame ) { if ( fContentAssistSubjectControl != null ) { if ( frame . fPresenter instanceof ISubjectControlContextInformationPresenter ) { ( ( ISubjectControlContextInformationPresenter ) frame . fValidator ) . install ( frame . fInformation , fContentAssistSubjectControl , frame . fBeginOffset ) ; } } else { frame . fPresenter . install ( frame . fInformation , fViewer , frame . fBeginOffset ) ; } } public IContextInformation [ ] computeContextInformation ( ContentAssistant contentAssistant , int offset ) { if ( fContentAssistSubjectControl != null ) { return contentAssistant . computeContextInformation ( fContentAssistSubjectControl , offset ) ; } return contentAssistant . computeContextInformation ( fViewer , offset ) ; } public boolean addSelectionListener ( SelectionListener selectionListener ) { if ( fContentAssistSubjectControl != null ) { return fContentAssistSubjectControl . addSelectionListener ( selectionListener ) ; } fViewer . getTextWidget ( ) . addSelectionListener ( selectionListener ) ; return true ; } public void removeSelectionListener ( SelectionListener selectionListener ) { if ( selectionListener != null ) { if ( fContentAssistSubjectControl != null ) { fContentAssistSubjectControl . removeSelectionListener ( selectionListener ) ; } else { fViewer . getTextWidget ( ) . removeSelectionListener ( selectionListener ) ; } } } } 
=======
public class MimeType extends AbstractDatatype { public static final MimeType THE_INSTANCE = new MimeType ( ) ; private enum State { AT_START , IN_SUPERTYPE , AT_SUBTYPE_START , IN_SUBTYPE , SEMICOLON_SEEN , WS_BEFORE_SEMICOLON , IN_PARAM_NAME , EQUALS_SEEN , IN_QUOTED_STRING , IN_UNQUOTED_STRING , IN_QUOTED_PAIR , CLOSE_QUOTE_SEEN } private MimeType ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { State state = State . AT_START ; for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; switch ( state ) { case AT_START : if ( isTokenChar ( c ) ) { state = State . IN_SUPERTYPE ; continue ; } else { throw newDatatypeException ( i , "Expected a token character but saw " , c , " instead." ) ; } case IN_SUPERTYPE : if ( isTokenChar ( c ) ) { continue ; } else if ( c == '/' ) { state = State . AT_SUBTYPE_START ; continue ; } else { throw newDatatypeException ( i , "Expected a token character or “/” but saw " , c , " instead." ) ; } case AT_SUBTYPE_START : if ( isTokenChar ( c ) ) { state = State . IN_SUBTYPE ; continue ; } else { throw newDatatypeException ( i , "Expected a token character but saw " , c , " instead." ) ; } case IN_SUBTYPE : if ( isTokenChar ( c ) ) { continue ; } else if ( c == ';' ) { state = State . SEMICOLON_SEEN ; continue ; } else if ( isWhitespace ( c ) ) { state = State . WS_BEFORE_SEMICOLON ; continue ; } else { throw newDatatypeException ( i , "Expected a token character, whitespace or a semicolon but saw " , c , " instead." ) ; } case WS_BEFORE_SEMICOLON : if ( isWhitespace ( c ) ) { continue ; } else if ( c == ';' ) { state = State . SEMICOLON_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected whitespace or a semicolon but saw " , c , " instead." ) ; } case SEMICOLON_SEEN : if ( isWhitespace ( c ) ) { continue ; } else if ( isTokenChar ( c ) ) { state = State . IN_PARAM_NAME ; continue ; } else { throw newDatatypeException ( i , "Expected whitespace or a token character but saw " , c , " instead." ) ; } case IN_PARAM_NAME : if ( isTokenChar ( c ) ) { continue ; } else if ( c == '=' ) { state = State . EQUALS_SEEN ; continue ; } case EQUALS_SEEN : if ( c == '\"' ) { state = State . IN_QUOTED_STRING ; continue ; } else if ( isTokenChar ( c ) ) { state = State . IN_UNQUOTED_STRING ; continue ; } else { throw newDatatypeException ( i , "Expected a double quote or a token character but saw " , c , " instead." ) ; } case IN_QUOTED_STRING : if ( c == '\\' ) { state = State . IN_QUOTED_PAIR ; continue ; } else if ( c == '\"' ) { state = State . CLOSE_QUOTE_SEEN ; continue ; } else if ( isQDTextChar ( c ) ) { continue ; } else { throw newDatatypeException ( i , "Expected a non-control ASCII character but saw " , c , " instead." ) ; } case IN_QUOTED_PAIR : if ( c <= 127 ) { state = State . IN_QUOTED_STRING ; continue ; } else { throw newDatatypeException ( i , "Expected an ASCII character but saw " , c , " instead." ) ; } case CLOSE_QUOTE_SEEN : if ( c == ';' ) { state = State . SEMICOLON_SEEN ; continue ; } else if ( isWhitespace ( c ) ) { state = State . WS_BEFORE_SEMICOLON ; continue ; } else { throw newDatatypeException ( i , "Expected an ASCII character but saw " , c , " instead." ) ; } case IN_UNQUOTED_STRING : if ( isTokenChar ( c ) ) { continue ; } else if ( c == ';' ) { state = State . SEMICOLON_SEEN ; continue ; } else if ( isWhitespace ( c ) ) { state = State . WS_BEFORE_SEMICOLON ; continue ; } else { throw newDatatypeException ( i , "Expected a token character, whitespace or a semicolon but saw " , c , " instead." ) ; } } } switch ( state ) { case IN_SUBTYPE : case IN_UNQUOTED_STRING : case CLOSE_QUOTE_SEEN : return ; case AT_START : throw newDatatypeException ( "Expected a MIME type but saw the empty string." ) ; case IN_SUPERTYPE : case AT_SUBTYPE_START : throw newDatatypeException ( literal . length ( ) - 1 , "Subtype missing." ) ; case EQUALS_SEEN : case IN_PARAM_NAME : throw newDatatypeException ( literal . length ( ) - 1 , "Parameter value missing." ) ; case IN_QUOTED_PAIR : case IN_QUOTED_STRING : throw newDatatypeException ( literal . length ( ) - 1 , "Unfinished quoted string." ) ; case SEMICOLON_SEEN : throw newDatatypeException ( literal . length ( ) - 1 , "Semicolon seen but there was no parameter following it." ) ; case WS_BEFORE_SEMICOLON : throw newDatatypeException ( literal . length ( ) - 1 , "Extraneous trailing whitespace." ) ; } } private boolean isQDTextChar ( char c ) { return ( c >= ' ' && c <= 126 ) || ( c == '\n' ) || ( c == '\r' ) || ( c == '\t' ) ; } private boolean isTokenChar ( char c ) { return ( c >= 33 && c <= 126 ) && ! ( c == '(' || c == ')' || c == '<' || c == '>' || c == '@' || c == ',' || c == ';' || c == ':' || c == '\\' || c == '\"' || c == '/' || c == '[' || c == ']' || c == '?' || c == '=' || c == '{' || c == '}' ) ; } @ Override public String getName ( ) { return "MIME type" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
