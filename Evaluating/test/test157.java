public class CustomPopupButton extends JPanel { private final JButton mainButton ; private final JPopupMenu popupMenu ; private final String arrowCaption ; private AbstractButton arrowButton ; private boolean mouseIsOver ; public CustomPopupButton ( JButton mainButton , String arrowCaption , JPopupMenu popupMenu ) { this . mainButton = mainButton ; this . popupMenu = popupMenu ; this . arrowCaption = arrowCaption ; mouseIsOver = false ; build ( ) ; } public void addTo ( JToolBar toolBar ) { toolBar . add ( mainButton ) ; toolBar . add ( arrowButton ) ; adjustButtonHeights ( ) ; } protected void build ( ) { arrowButton = createArrowButton ( ) ; mainButton . getModel ( ) . addChangeListener ( new MainButtonChangeListener ( ) ) ; mainButton . addMouseListener ( new MainButtonMouseListener ( ) ) ; popupMenu . addPopupMenuListener ( new RolloverPopupMenuListener ( ) ) ; setLayout ( new GridBagLayout ( ) ) ; GridBagConstraints gbc = new GridBagConstraints ( ) ; gbc . fill = GridBagConstraints . VERTICAL ; gbc . anchor = GridBagConstraints . WEST ; gbc . gridwidth = 1 ; gbc . gridheight = GridBagConstraints . REMAINDER ; gbc . weightx = 0.0 ; add ( mainButton , gbc ) ; gbc . gridwidth = GridBagConstraints . REMAINDER ; add ( arrowButton , gbc ) ; setOpaque ( false ) ; } private AbstractButton createArrowButton ( ) { Icon mainButtonIcon = mainButton . getIcon ( ) ; int iconHeight = mainButtonIcon != null ? mainButtonIcon . getIconHeight ( ) : 16 ; AbstractButton button ; int horizontalInsets ; if ( arrowCaption == null ) { Icon arrowIcon = new ArrowIcon ( ) ; Icon compoundIcon = new CompoundIcon ( new NullIcon ( new Dimension ( arrowIcon . getIconWidth ( ) , iconHeight ) ) , arrowIcon , CompoundIcon . CENTER ) ; button = new ToolBarButton ( compoundIcon ) ; horizontalInsets = 0 ; } else { button = new JButton ( arrowCaption ) ; horizontalInsets = 5 ; } button . setModel ( new DelegatingButtonModel ( mainButton . getModel ( ) ) ) ; button . addActionListener ( new ArrowButtonActionListener ( ) ) ; button . addMouseListener ( new ArrowButtonMouseListener ( ) ) ; Insets insets = button . getMargin ( ) ; button . setMargin ( new Insets ( insets . top , horizontalInsets , insets . bottom , horizontalInsets ) ) ; return button ; } private class ArrowButtonActionListener implements ActionListener { public void actionPerformed ( ActionEvent e ) { popupMenu . show ( mainButton , 0 , mainButton . getHeight ( ) ) ; arrowButton . getModel ( ) . setArmed ( true ) ; } } private class ArrowButtonMouseListener extends MouseAdapter { public void mouseEntered ( MouseEvent e ) { mouseIsOver = true ; mainButton . getModel ( ) . setRollover ( true ) ; } public void mouseExited ( MouseEvent e ) { mouseIsOver = false ; mainButton . getModel ( ) . setRollover ( popupMenu . isVisible ( ) ) ; } } private class MainButtonChangeListener implements ChangeListener { public void stateChanged ( ChangeEvent e ) { arrowButton . repaint ( ) ; } } private class MainButtonMouseListener extends MouseAdapter { public void mouseEntered ( MouseEvent e ) { mouseIsOver = true ; arrowButton . getModel ( ) . setRollover ( true ) ; } public void mouseExited ( MouseEvent e ) { mouseIsOver = false ; arrowButton . getModel ( ) . setRollover ( popupMenu . isVisible ( ) ) ; } } private class RolloverPopupMenuListener implements PopupMenuListener { public void popupMenuCanceled ( PopupMenuEvent e ) { } public void popupMenuWillBecomeInvisible ( PopupMenuEvent e ) { arrowButton . getModel ( ) . setRollover ( mouseIsOver ) ; arrowButton . getModel ( ) . setPressed ( false ) ; } public void popupMenuWillBecomeVisible ( PopupMenuEvent e ) { arrowButton . getModel ( ) . setRollover ( true ) ; arrowButton . getModel ( ) . setPressed ( true ) ; } } public float getAlignmentX ( ) { return mainButton . getAlignmentX ( ) ; } public Dimension getMaximumSize ( ) { return getPreferredSize ( ) ; } public void updateUI ( ) { super . updateUI ( ) ; if ( null == popupMenu ) return ; ComponentTreeUtils . updateComponentTreeUI ( popupMenu ) ; adjustButtonHeights ( ) ; } private void adjustButtonHeights ( ) { Dimension d = mainButton . getMinimumSize ( ) ; d . width = arrowButton . getMinimumSize ( ) . width ; arrowButton . setMaximumSize ( d ) ; } private static class ArrowIcon implements Icon { private static final int ICON_HEIGHT = 4 ; private static final int ICON_WIDTH = 2 * ICON_HEIGHT + 1 ; public int getIconWidth ( ) { return ICON_WIDTH ; } public int getIconHeight ( ) { return ICON_HEIGHT ; } public void paintIcon ( Component c , Graphics g , int x , int y ) { AbstractButton b = ( AbstractButton ) c ; ButtonModel m = b . getModel ( ) ; int w = getIconWidth ( ) - 2 ; int h = ICON_HEIGHT ; g . translate ( x , y ) ; g . setColor ( UIManager . getColor ( m . isEnabled ( ) ? "controlText" : "textInactiveText" ) ) ; for ( int i = 0 ; i < h ; i ++ ) g . drawLine ( i + 1 , i , w - i , i ) ; g . translate ( - x , - y ) ; } } private static final class DelegatingButtonModel extends DefaultButtonModel { private final ButtonModel delegate ; private DelegatingButtonModel ( ButtonModel delegate ) { this . delegate = delegate ; } public boolean isRollover ( ) { return delegate . isRollover ( ) ; } public boolean isArmed ( ) { return super . isArmed ( ) || delegate . isArmed ( ) ; } public boolean isPressed ( ) { return super . isPressed ( ) || delegate . isPressed ( ) ; } public void setRollover ( boolean b ) { delegate . setRollover ( b ) ; } } } 