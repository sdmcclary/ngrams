public class SmartSyncLabelProvider implements ITableLabelProvider , ITableColorProvider { private FileLabelProvider fImages ; private Color fNewColor ; private Color fOverwriteColor ; private Color fUpdateColor ; private Color fDeleteColor ; private Color fMixedColor ; private Display fDisplay ; private int fSyncDirection ; private int fPresentationType ; private boolean fDeleteRemoteFiles ; private boolean fDeleteLocalFiles ; public SmartSyncLabelProvider ( Display display ) { fDisplay = display ; fImages = new FileLabelProvider ( ) ; fNewColor = new Color ( fDisplay , new RGB ( 216 , 191 , 216 ) ) ; fOverwriteColor = new Color ( fDisplay , new RGB ( 255 , 165 , 0 ) ) ; fUpdateColor = new Color ( fDisplay , new RGB ( 173 , 216 , 230 ) ) ; fDeleteColor = fDisplay . getSystemColor ( SWT . COLOR_RED ) ; fMixedColor = new Color ( fDisplay , new RGB ( 164 , 164 , 164 ) ) ; } public void setSyncDirection ( int direction ) { fSyncDirection = direction ; } public void setPresentationType ( int type ) { fPresentationType = type ; } public void setDeleteRemoteFiles ( boolean delete ) { fDeleteRemoteFiles = delete ; } public void setDeleteLocalFiles ( boolean delete ) { fDeleteLocalFiles = delete ; } public void addListener ( ILabelProviderListener listener ) { } public void removeListener ( ILabelProviderListener listener ) { } public boolean isLabelProperty ( Object element , String property ) { return false ; } public void dispose ( ) { fImages . dispose ( ) ; disposeColor ( fNewColor ) ; disposeColor ( fOverwriteColor ) ; disposeColor ( fUpdateColor ) ; disposeColor ( fMixedColor ) ; } public String getColumnText ( Object element , int columnIndex ) { if ( element instanceof ISyncResource ) { ISyncResource resource = ( ISyncResource ) element ; switch ( columnIndex ) { case 0 : if ( fPresentationType == OptionsToolBar . TREE_VIEW ) { return ( ( ISyncResource ) element ) . getName ( ) ; } if ( fPresentationType == OptionsToolBar . FLAT_VIEW ) { return ( ( ISyncResource ) element ) . getPath ( ) . toString ( ) ; } case 2 : if ( resource . isSkipped ( ) ) { return Messages . SmartSyncDialog_Skipped ; } if ( fSyncDirection == DirectionToolBar . FORCE_UPLOAD || fSyncDirection == DirectionToolBar . UPLOAD ) { return "" ; } switch ( resource . getSyncState ( ) ) { case SyncState . ServerItemIsNewer : if ( fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD ) { return Messages . SmartSyncDialog_Overwrite ; } return Messages . SmartSyncDialog_Update ; case SyncFolder . MIXED : return Messages . SmartSyncDialog_Modified ; case SyncState . ClientItemDeleted : case SyncState . ClientItemOnly : return fDeleteLocalFiles ? Messages . SmartSyncDialog_Delete : "" ; case SyncState . ServerItemOnly : if ( fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD || fSyncDirection == DirectionToolBar . DOWNLOAD || ! fDeleteRemoteFiles ) { return Messages . SmartSyncDialog_New ; } default : return "" ; } case 3 : if ( resource . isSkipped ( ) ) { return Messages . SmartSyncDialog_Skipped ; } if ( fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD || fSyncDirection == DirectionToolBar . DOWNLOAD ) { return "" ; } switch ( resource . getSyncState ( ) ) { case SyncState . ClientItemIsNewer : if ( fSyncDirection == DirectionToolBar . FORCE_UPLOAD ) { return Messages . SmartSyncDialog_Overwrite ; } return Messages . SmartSyncDialog_Update ; case SyncFolder . MIXED : return Messages . SmartSyncDialog_Modified ; case SyncState . ServerItemDeleted : case SyncState . ServerItemOnly : return fDeleteRemoteFiles ? Messages . SmartSyncDialog_Delete : "" ; case SyncState . ClientItemOnly : if ( fSyncDirection == DirectionToolBar . FORCE_UPLOAD || fSyncDirection == DirectionToolBar . UPLOAD || ! fDeleteLocalFiles ) { return Messages . SmartSyncDialog_New ; } default : return "" ; } case 4 : VirtualFileSyncPair pair = resource . getPair ( ) ; return pair == null ? "" : getModificationDate ( pair . getSourceFile ( ) ) ; case 5 : pair = resource . getPair ( ) ; return pair == null ? "" : getModificationDate ( pair . getDestinationFile ( ) ) ; default : return "" ; } } return "" ; } public Image getColumnImage ( Object element , int columnIndex ) { if ( columnIndex == 0 ) { if ( element instanceof ISyncResource ) { ISyncResource resource = ( ISyncResource ) element ; int state = resource . getTransferState ( ) ; if ( state == ISyncResource . ERROR ) { return SyncingUIPlugin . getImage ( "icons/full/obj16/no.png" ) ; } if ( state == ISyncResource . SYNCED ) { return SyncingUIPlugin . getImage ( "icons/full/obj16/ok.png" ) ; } return SyncingUIPlugin . getImage ( "icons/full/obj16/empty.png" ) ; } if ( element instanceof SyncFile ) { SyncFile file = ( SyncFile ) element ; if ( file . getPair ( ) != null ) { if ( file . getPair ( ) . getSourceFile ( ) != null ) { return fImages . getImage ( file . getPair ( ) . getSourceFile ( ) ) ; } if ( file . getPair ( ) . getDestinationFile ( ) != null ) { return fImages . getImage ( file . getPair ( ) . getDestinationFile ( ) ) ; } } } else if ( element instanceof SyncFolder ) { return CoreUIPlugin . getImage ( "icons/full/obj16/folder.gif" ) ; } } else if ( columnIndex == 1 ) { if ( element instanceof ISyncResource ) { ISyncResource resource = ( ISyncResource ) element ; if ( resource . isSkipped ( ) ) { return SyncingUIPlugin . getImage ( "icons/full/obj16/checked.gif" ) ; } return SyncingUIPlugin . getImage ( "icons/full/obj16/unchecked.gif" ) ; } } return null ; } public Color getBackground ( Object element , int columnIndex ) { if ( element instanceof ISyncResource ) { ISyncResource resource = ( ISyncResource ) element ; Color color = fDisplay . getSystemColor ( SWT . COLOR_LIST_BACKGROUND ) ; switch ( columnIndex ) { case 2 : if ( resource . isSkipped ( ) ) { return color ; } if ( fSyncDirection == DirectionToolBar . FORCE_UPLOAD || fSyncDirection == DirectionToolBar . UPLOAD ) { return null ; } switch ( resource . getSyncState ( ) ) { case SyncState . ClientItemDeleted : case SyncState . ClientItemOnly : return fDeleteLocalFiles ? fDeleteColor : null ; case SyncState . ServerItemOnly : if ( fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD || fSyncDirection == DirectionToolBar . DOWNLOAD || ! fDeleteRemoteFiles ) { return fNewColor ; } return null ; case SyncState . ServerItemIsNewer : if ( fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD ) { return fOverwriteColor ; } return fUpdateColor ; case SyncFolder . MIXED : return fMixedColor ; default : return null ; } case 3 : if ( resource . isSkipped ( ) ) { return color ; } if ( fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD || fSyncDirection == DirectionToolBar . DOWNLOAD ) { return null ; } switch ( resource . getSyncState ( ) ) { case SyncState . ServerItemDeleted : case SyncState . ServerItemOnly : return fDeleteRemoteFiles ? fDeleteColor : null ; case SyncState . ClientItemOnly : if ( fSyncDirection == DirectionToolBar . FORCE_UPLOAD || fSyncDirection == DirectionToolBar . UPLOAD || ! fDeleteLocalFiles ) { return fNewColor ; } return null ; case SyncState . ClientItemIsNewer : if ( fSyncDirection == DirectionToolBar . FORCE_UPLOAD ) { return fOverwriteColor ; } return fUpdateColor ; case SyncFolder . MIXED : return fMixedColor ; default : return null ; } default : return null ; } } return null ; } public Color getForeground ( Object element , int columnIndex ) { if ( element instanceof ISyncResource ) { ISyncResource resource = ( ISyncResource ) element ; if ( ! resource . isSkipped ( ) ) { Color color = fDisplay . getSystemColor ( SWT . COLOR_WHITE ) ; if ( columnIndex == 2 ) { if ( ( resource . getSyncState ( ) == SyncState . ClientItemOnly || resource . getSyncState ( ) == SyncState . ClientItemDeleted ) && fDeleteLocalFiles && ( fSyncDirection == DirectionToolBar . BOTH || fSyncDirection == DirectionToolBar . DOWNLOAD || fSyncDirection == DirectionToolBar . FORCE_DOWNLOAD ) ) { return color ; } } else if ( columnIndex == 3 ) { if ( ( resource . getSyncState ( ) == SyncState . ServerItemOnly || resource . getSyncState ( ) == SyncState . ServerItemDeleted ) && fDeleteRemoteFiles && ( fSyncDirection == DirectionToolBar . BOTH || fSyncDirection == DirectionToolBar . UPLOAD || fSyncDirection == DirectionToolBar . FORCE_UPLOAD ) ) { return color ; } } } } return null ; } private static void disposeColor ( Color color ) { if ( color != null && ! color . isDisposed ( ) ) { color . dispose ( ) ; } } private static String getModificationDate ( IFileStore file ) { if ( file == null ) { return "" ; } Date d = new Date ( file . fetchInfo ( ) . getLastModified ( ) ) ; DateFormat df = DateFormat . getDateTimeInstance ( DateFormat . MEDIUM , DateFormat . MEDIUM ) ; return df . format ( d ) ; } } 