<<<<<<< HEAD
public class SiteConnectionManager implements ISiteConnectionManager { protected static final String STATE_FILENAME = "sites" ; private static final String ELEMENT_ROOT = "sites" ; private static final String ELEMENT_SITE = "site" ; private static SiteConnectionManager instance ; private List < SiteConnection > connections = Collections . synchronizedList ( new ArrayList < SiteConnection > ( ) ) ; private boolean dirty = false ; private ListenerList listeners = new ListenerList ( ) ; private SiteConnectionManager ( ) { } public static SiteConnectionManager getInstance ( ) { if ( instance == null ) { instance = new SiteConnectionManager ( ) ; } return instance ; } public void loadState ( IPath path ) { File file = path . toFile ( ) ; if ( file . exists ( ) ) { connections . clear ( ) ; FileReader reader = null ; try { reader = new FileReader ( file ) ; XMLMemento memento = XMLMemento . createReadRoot ( reader ) ; for ( IMemento child : memento . getChildren ( ELEMENT_SITE ) ) { SiteConnection siteConnection = restoreConnection ( child ) ; if ( siteConnection != null && siteConnection . shouldRestore ( ) ) { connections . add ( siteConnection ) ; } } } catch ( IOException e ) { IdeLog . logError ( SyncingPlugin . getDefault ( ) , Messages . SiteConnectionManager_ERR_FailedToLoadConnections , e ) ; } catch ( CoreException e ) { try { load15State ( file ) ; } catch ( Exception e1 ) { IdeLog . logError ( SyncingPlugin . getDefault ( ) , Messages . SiteConnectionManager_ERR_FailedToLoadConnections , e1 ) ; } } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { } } } } } public void saveState ( IPath path ) { XMLMemento memento = XMLMemento . createWriteRoot ( ELEMENT_ROOT ) ; synchronized ( connections ) { for ( SiteConnection siteConnection : connections ) { IMemento child = memento . createChild ( ELEMENT_SITE ) ; child . putMemento ( storeConnection ( siteConnection ) ) ; } } FileWriter writer = null ; try { writer = new FileWriter ( path . toFile ( ) ) ; memento . save ( writer ) ; isChanged ( ) ; } catch ( IOException e ) { } finally { if ( writer != null ) { try { writer . close ( ) ; } catch ( IOException e ) { } } } } private IMemento storeConnection ( SiteConnection siteConnection ) { IMemento saveMemento = XMLMemento . createWriteRoot ( ELEMENT_ROOT ) . createChild ( ELEMENT_SITE ) ; siteConnection . saveState ( saveMemento ) ; return saveMemento ; } private SiteConnection restoreConnection ( IMemento memento ) throws CoreException { SiteConnection siteConnection = new SiteConnection ( ) ; siteConnection . loadState ( memento ) ; return siteConnection ; } public boolean isChanged ( ) { for ( SiteConnection siteConnection : connections ) { if ( siteConnection . isChanged ( ) ) { dirty = true ; } } try { return dirty ; } finally { dirty = false ; } } public void addSiteConnection ( ISiteConnection siteConnection ) { if ( ! ( siteConnection instanceof SiteConnection ) ) { throw new IllegalArgumentException ( ) ; } if ( ! connections . contains ( siteConnection ) ) { connections . add ( ( SiteConnection ) siteConnection ) ; dirty = true ; broadcastEvent ( new SiteConnectionEvent ( this , SiteConnectionEvent . POST_ADD , siteConnection ) ) ; } } public void removeSiteConnection ( ISiteConnection siteConnection ) { if ( connections . contains ( siteConnection ) ) { connections . remove ( siteConnection ) ; dirty = true ; broadcastEvent ( new SiteConnectionEvent ( this , SiteConnectionEvent . POST_DELETE , siteConnection ) ) ; } } public void siteConnectionChanged ( ISiteConnection siteConnection ) { if ( connections . contains ( siteConnection ) ) { dirty = true ; broadcastEvent ( new SiteConnectionEvent ( this , SiteConnectionEvent . POST_CHANGE , siteConnection ) ) ; } } public ISiteConnection cloneSiteConnection ( ISiteConnection siteConnection ) throws CoreException { if ( ! ( siteConnection instanceof SiteConnection ) ) { throw new IllegalArgumentException ( ) ; } if ( siteConnection == DefaultSiteConnection . getInstance ( ) ) { SiteConnection clone = new SiteConnection ( ) ; clone . setName ( siteConnection . getName ( ) ) ; clone . setSource ( siteConnection . getSource ( ) ) ; clone . setDestination ( siteConnection . getDestination ( ) ) ; return clone ; } return restoreConnection ( storeConnection ( ( SiteConnection ) siteConnection ) ) ; } public ISiteConnection createSiteConnection ( ) { return new SiteConnection ( ) ; } public ISiteConnection [ ] getSiteConnections ( ) { return connections . toArray ( new ISiteConnection [ connections . size ( ) ] ) ; } public void addListener ( ISiteConnectionListener listener ) { listeners . add ( listener ) ; } public void removeListener ( ISiteConnectionListener listener ) { listeners . add ( listener ) ; } private void broadcastEvent ( SiteConnectionEvent event ) { final Object [ ] list = listeners . getListeners ( ) ; for ( Object listener : list ) { ( ( ISiteConnectionListener ) listener ) . siteConnectionChanged ( event ) ; } } private void load15State ( File file ) throws IOException , CoreException { StringBuilder contents = new StringBuilder ( ) ; BufferedReader input = null ; try { input = new BufferedReader ( new FileReader ( file ) ) ; String line = null ; while ( ( line = input . readLine ( ) ) != null ) { contents . append ( line ) ; } } finally { if ( input != null ) { try { input . close ( ) ; } catch ( IOException e ) { } } } String s = contents . toString ( ) ; if ( s . indexOf ( IConnectionPoint15Constants . DELIMITER ) < 0 ) { s = StringUtils . replace ( s , "%%%%" , IConnectionPoint15Constants . DELIMITER ) ; s = StringUtils . replace ( s , "@@@@" , IConnectionPoint15Constants . OBJ_DELIMITER ) ; s = StringUtils . replace ( s , "~~~~" , IConnectionPoint15Constants . SECTION_DELIMITER ) ; s = StringUtils . replace ( s , "!!!!" , IConnectionPoint15Constants . TYPE_DELIMITER ) ; s = StringUtils . replace ( s , "}}}}" , IConnectionPoint15Constants . FILE_DELIMITER ) ; } String [ ] sections = s . split ( IConnectionPoint15Constants . SECTION_DELIMITER ) ; if ( sections . length > 0 ) { load15VirtualFileManagers ( sections [ 0 ] ) ; } if ( sections . length > 1 ) { load15VirtualFileManagerSyncItems ( sections [ 1 ] ) ; } } private void load15VirtualFileManagers ( String s ) throws CoreException { Map < String , List < String > > dataTypes = new HashMap < String , List < String > > ( ) ; String [ ] parts = s . split ( IConnectionPoint15Constants . OBJ_DELIMITER ) ; String [ ] itemParts ; for ( String item : parts ) { itemParts = item . split ( IConnectionPoint15Constants . TYPE_DELIMITER ) ; if ( itemParts . length == 2 ) { String type = itemParts [ 0 ] ; String data = itemParts [ 1 ] ; if ( "null" . equals ( type ) ) { continue ; } List < String > list = dataTypes . get ( type ) ; if ( list == null ) { list = new ArrayList < String > ( ) ; dataTypes . put ( type , list ) ; } list . add ( data ) ; } } Set < String > types = dataTypes . keySet ( ) ; IConnectionPointManager manager = CoreIOPlugin . getConnectionPointManager ( ) ; IConnectionPoint connectionPoint ; for ( String type : types ) { List < String > connectionDatas = dataTypes . get ( type ) ; for ( String connectionData : connectionDatas ) { connectionPoint = manager . restore15ConnectionPoint ( type , connectionData ) ; if ( connectionPoint != null ) { manager . addConnectionPoint ( connectionPoint ) ; } } } } private void load15VirtualFileManagerSyncItems ( String s ) { String [ ] parts = s . split ( IConnectionPoint15Constants . OBJ_DELIMITER ) ; String [ ] itemParts ; ISiteConnection connection ; for ( String item : parts ) { itemParts = item . split ( IConnectionPoint15Constants . TYPE_DELIMITER ) ; if ( itemParts . length == 2 ) { String type = itemParts [ 0 ] ; String data = itemParts [ 1 ] ; if ( "null" . equals ( type ) ) { continue ; } connection = restore15Connection ( data ) ; if ( connection != null && connection . getSource ( ) != null && connection . getDestination ( ) != null ) { addSiteConnection ( connection ) ; } } } } private ISiteConnection restore15Connection ( String data ) { String [ ] args = data . split ( IConnectionPoint15Constants . DELIMITER ) ; if ( args . length < 3 ) { return null ; } SiteConnection siteConnection = new SiteConnection ( ) ; siteConnection . setName ( args [ 0 ] ) ; String sourceId = args [ 1 ] ; String destinationId = args [ 2 ] ; IConnectionPoint [ ] connectionPoints = CoreIOPlugin . getConnectionPointManager ( ) . getConnectionPoints ( ) ; String id ; for ( IConnectionPoint connectionPoint : connectionPoints ) { id = connectionPoint . getId ( ) ; if ( id . equals ( sourceId ) ) { siteConnection . setSource ( connectionPoint ) ; } else if ( id . equals ( destinationId ) ) { siteConnection . setDestination ( connectionPoint ) ; } } return siteConnection ; } } 
=======
public abstract class LiteralArrayVector extends Vector implements KvmSerializable { public void register ( SoapSerializationEnvelope envelope , String namespace , String name ) { envelope . addMapping ( namespace , name , this . getClass ( ) ) ; registerElementClass ( envelope , namespace ) ; } private void registerElementClass ( SoapSerializationEnvelope envelope , String namespace ) { final Class elementClass = getElementClass ( ) ; try { if ( elementClass . newInstance ( ) instanceof KvmSerializable ) envelope . addMapping ( namespace , "" , elementClass ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public void getPropertyInfo ( int index , Hashtable properties , PropertyInfo info ) { info . name = getItemDescriptor ( ) ; info . type = getElementClass ( ) ; } public Object getProperty ( int index ) { return this ; } public int getPropertyCount ( ) { return 1 ; } public void setProperty ( int index , Object value ) { addElement ( value ) ; } abstract protected Class getElementClass ( ) ; protected String getItemDescriptor ( ) { return "item" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
