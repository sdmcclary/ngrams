<<<<<<< HEAD
public class UnifiedQuickOutlinePage extends ContentOutlinePage implements IUnifiedOutlinePage , IOpenListener { public interface ICloseListener { void doClose ( ) ; } private static final class OpenExternalAction extends Action { IResolvableItem item ; String editorId ; OpenExternalAction ( IResolvableItem item ) { IEditorDescriptor editorDescriptor ; try { editorDescriptor = IDE . getEditorDescriptor ( item . getEditorInput ( ) . getName ( ) ) ; editorId = editorDescriptor . getId ( ) ; this . setImageDescriptor ( editorDescriptor . getImageDescriptor ( ) ) ; } catch ( PartInitException e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , e . getMessage ( ) ) ; } this . item = item ; this . setToolTipText ( Messages . UnifiedOutlinePage_Open ) ; } public void run ( ) { IEditorInput input = item . getEditorInput ( ) ; IWorkbenchPage activePage = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; try { IEditorPart openEditor = IDE . openEditor ( activePage , input , editorId ) ; if ( openEditor instanceof ITextEditor ) { ITextEditor ed = ( ITextEditor ) openEditor ; if ( item instanceof IRange ) { int position = ( ( IRange ) item ) . getStartingOffset ( ) ; ed . selectAndReveal ( position , 0 ) ; return ; } if ( item instanceof OutlineItem ) { int position = ( ( OutlineItem ) item ) . getStartingOffset ( ) ; ed . selectAndReveal ( position , 0 ) ; return ; } } return ; } catch ( PartInitException e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , e . getMessage ( ) ) ; return ; } } } private static final int FILTER_REFRESH_DELAY = 200 ; private static final int REFRESH_DELAY = 500 ; private Composite _composite ; private SashForm _outlineSash ; private SashForm _outlineTabsSash ; private CTabFolder _outlineTabs ; private UnifiedEditor _editor ; private PatternFilter _filter ; private String _pattern ; private WorkbenchJob _filterRefreshJob ; private WorkbenchJob _delayedRefreshJob ; private Text _searchBox ; private TreeViewer _treeViewer ; private IDocumentListener _documentListener ; private IFileServiceChangeListener _serviceListener ; private IDocument _document ; private boolean _hide ; private ActionContributionItem _sortItem ; private ActionContributionItem _collapseItem ; private ActionContributionItem _expandItem ; private ActionContributionItem _hidePrivateItem ; private ActionContributionItem _splitItem ; private HidePrivateAction _hidePrivateAction ; private Map < String , ContributedOutline > _outlines ; private UnifiedOutlineProvider outlineProvider ; private BaseFilter [ ] _filters ; private ActionContributionItem openAction ; private List < ICloseListener > closeListeners = new ArrayList < ICloseListener > ( ) ; private ToolBarManager _toolbarManager ; public UnifiedQuickOutlinePage ( UnifiedEditor editor ) { this . _editor = editor ; editor . getViewer ( ) . getTextWidget ( ) . addFocusListener ( new FocusAdapter ( ) { public void focusGained ( FocusEvent e ) { if ( outlineProvider != null ) { outlineProvider . pageActivated ( UnifiedQuickOutlinePage . this ) ; } } } ) ; editor . getViewer ( ) . getTextWidget ( ) . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { if ( outlineProvider != null ) { outlineProvider . pageClosed ( UnifiedQuickOutlinePage . this ) ; } } } ) ; this . _outlines = new HashMap < String , ContributedOutline > ( ) ; } public void addOutline ( ContributedOutline outline , String name ) { this . _outlines . put ( name , outline ) ; } private Composite createComposite ( Composite parent ) { GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; Composite result = new Composite ( parent , SWT . NONE ) ; result . setLayout ( contentAreaLayout ) ; result . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; return result ; } private void createContributedOutlines ( CTabFolder outlineTabs , SashForm outlineSash ) { Iterator < String > iter = this . _outlines . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = iter . next ( ) ; ContributedOutline outline = this . _outlines . get ( key ) ; CTabItem tab = new CTabItem ( outlineTabs , SWT . NONE ) ; Composite previewComp = new Composite ( outlineSash , SWT . NONE ) ; GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = true ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; previewComp . setLayout ( contentAreaLayout ) ; previewComp . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label outlineLabel = new Label ( previewComp , SWT . NONE ) ; outlineLabel . setText ( key ) ; outlineLabel . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; tab . setText ( key ) ; SashForm preForm = new SashForm ( outlineTabs , SWT . NONE ) ; contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; preForm . setLayout ( contentAreaLayout ) ; preForm . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; outline . createControl ( preForm ) ; tab . setControl ( preForm ) ; } } public void createControl ( Composite parent ) { createControl ( parent , true ) ; } public void createControl ( Composite parent , boolean createSearchArea ) { this . _composite = createComposite ( parent ) ; if ( createSearchArea ) { this . createSearchArea ( this . _composite , false ) ; } this . _outlineSash = this . createSash ( this . _composite ) ; this . createSourceSash ( ) ; this . _outlineTabsSash = this . createOutlineTabs ( this . _composite ) ; this . _treeViewer = this . createTreeViewer ( this . _outlineTabsSash ) ; this . _treeViewer . addSelectionChangedListener ( this ) ; this . _treeViewer . addFilter ( new UnifiedViewerFilter ( this ) ) ; this . _filter = new PatternFilter ( ) { protected boolean isLeafMatch ( Viewer viewer , Object element ) { boolean result = true ; String label = null ; if ( element instanceof OutlineItem ) { label = ( ( OutlineItem ) element ) . getLabel ( ) ; } else if ( element instanceof IParseNode ) { label = UnifiedOutlineProvider . getInstance ( ) . getText ( element ) ; } if ( label != null ) { result = this . wordMatches ( label ) ; } return result ; } } ; this . _treeViewer . addFilter ( this . _filter ) ; for ( BaseFilter filter : this . _filters ) { this . _treeViewer . addFilter ( filter ) ; } this . _treeViewer . addOpenListener ( this ) ; this . _filterRefreshJob = this . createRefreshJob ( ) ; this . _filterRefreshJob . setSystem ( true ) ; this . _delayedRefreshJob = this . createDelayedRefreshJob ( ) ; this . _delayedRefreshJob . setSystem ( true ) ; this . createDocumentListener ( ) ; this . createServiceListener ( ) ; this . _document = this . _editor . getDocumentProvider ( ) . getDocument ( this . _editor . getEditorInput ( ) ) ; this . _document . addDocumentListener ( this . _documentListener ) ; this . _editor . addFileServiceChangeListener ( new IFileServiceChangeListener ( ) { public void fileServiceChanged ( IFileService newService ) { if ( _document != null ) { _document . removeDocumentListener ( _documentListener ) ; } _document = _editor . getDocumentProvider ( ) . getDocument ( _editor . getEditorInput ( ) ) ; if ( _document != null ) { _document . addDocumentListener ( _documentListener ) ; } } } ) ; this . updateProviders ( ) ; this . refresh ( ) ; } public void revealPosition ( int documentPos ) { IStructuredContentProvider provider = createProvider ( ) ; final Object [ ] originalElements = provider . getElements ( _treeViewer . getInput ( ) ) ; if ( originalElements == null || originalElements . length == 0 ) { return ; } List < Object > elements = new ArrayList < Object > ( ) ; final Map < Object , List < Object > > parents = new IdentityHashMap < Object , List < Object > > ( ) ; for ( Object el : originalElements ) { elements . add ( el ) ; } if ( provider instanceof ITreeContentProvider ) { ITreeContentProvider treeContentProvider = ( ITreeContentProvider ) provider ; for ( Object element : originalElements ) { expandElement ( element , treeContentProvider , elements , parents ) ; } } Object bestElement = null ; int bestElementStartingOffset = - 1 ; int bestElementEndingOffset = - 1 ; for ( Object element : elements ) { int start = - 1 ; int end = - 1 ; if ( element instanceof IParseNode ) { IParseNode node = ( IParseNode ) element ; start = node . getStartingOffset ( ) ; end = node . getEndingOffset ( ) ; } else if ( element instanceof OutlineItem ) { int refNodeStart = ( ( OutlineItem ) element ) . getReferenceNode ( ) . getStartingOffset ( ) ; int refNodeEnd = ( ( OutlineItem ) element ) . getReferenceNode ( ) . getEndingOffset ( ) ; int elementStart = ( ( OutlineItem ) element ) . getStartingOffset ( ) ; int elementEnd = ( ( OutlineItem ) element ) . getEndingOffset ( ) ; start = refNodeStart < elementStart ? refNodeStart : elementStart ; end = refNodeEnd > elementEnd ? refNodeEnd : elementEnd ; } if ( start != - 1 ) { if ( start <= documentPos && end >= documentPos ) { if ( bestElement == null || bestElementEndingOffset - bestElementStartingOffset > end - start ) { bestElement = element ; bestElementStartingOffset = start ; bestElementEndingOffset = end ; } } } } final Object toReveal = bestElement ; WorkbenchJob job = new WorkbenchJob ( "Initial reveal" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( _treeViewer . getControl ( ) . isDisposed ( ) ) { return Status . CANCEL_STATUS ; } try { _treeViewer . getControl ( ) . setRedraw ( false ) ; _treeViewer . refresh ( true ) ; List < Object > path = new ArrayList < Object > ( ) ; List < Object > p = parents . get ( toReveal ) ; if ( p != null ) { path . addAll ( p ) ; } path . add ( toReveal ) ; TreePath treePath = new TreePath ( path . toArray ( ) ) ; _treeViewer . setSelection ( new TreeSelection ( treePath ) , true ) ; } finally { _treeViewer . getControl ( ) . setRedraw ( true ) ; } return Status . OK_STATUS ; } } ; if ( bestElement != null ) { job . schedule ( FILTER_REFRESH_DELAY ) ; } } private UnifiedOutlineProvider createProvider ( ) { UnifiedOutlineProvider provider = new UnifiedOutlineProvider ( ) ; provider . loadExtensions ( ) ; provider . setOutlinePage ( this ) ; return provider ; } private WorkbenchJob createDelayedRefreshJob ( ) { return new WorkbenchJob ( "Refresh Content" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { try { if ( _treeViewer . getControl ( ) . isDisposed ( ) ) { return Status . CANCEL_STATUS ; } updateProviders ( ) ; _treeViewer . setSelection ( null ) ; _treeViewer . refresh ( ) ; } catch ( Exception e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , Messages . UnifiedOutlinePage_ErrorRefreshingOutline , e ) ; } catch ( Error e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , Messages . UnifiedOutlinePage_ErrorRefreshingOutline , e ) ; } return Status . OK_STATUS ; } } ; } private void createDocumentListener ( ) { this . _documentListener = new IDocumentListener ( ) { public void documentAboutToBeChanged ( DocumentEvent event ) { } public void documentChanged ( DocumentEvent event ) { if ( _delayedRefreshJob != null ) { _delayedRefreshJob . cancel ( ) ; _delayedRefreshJob . schedule ( REFRESH_DELAY ) ; } } } ; } private SashForm createOutlineTabs ( Composite parent ) { this . _outlineTabs = new CTabFolder ( parent , SWT . BOTTOM ) ; this . _outlineTabs . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; SashForm sourceForm = new SashForm ( this . _outlineTabs , SWT . NONE ) ; sourceForm . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; CTabItem sourceTab = new CTabItem ( this . _outlineTabs , SWT . NONE ) ; sourceTab . setText ( Messages . UnifiedOutlinePage_Source ) ; sourceTab . setControl ( sourceForm ) ; this . _outlineTabs . setSelection ( sourceTab ) ; this . createContributedOutlines ( this . _outlineTabs , this . _outlineSash ) ; return sourceForm ; } private WorkbenchJob createRefreshJob ( ) { return new WorkbenchJob ( "Refresh Filter" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( _treeViewer . getControl ( ) . isDisposed ( ) ) { return Status . CANCEL_STATUS ; } if ( _pattern == null ) { return Status . OK_STATUS ; } _filter . setPattern ( _pattern ) ; try { _treeViewer . getControl ( ) . setRedraw ( false ) ; _treeViewer . refresh ( true ) ; if ( _pattern . length ( ) > 0 ) { IStructuredContentProvider provider = ( IStructuredContentProvider ) _treeViewer . getContentProvider ( ) ; Object [ ] elements = provider . getElements ( _treeViewer . getInput ( ) ) ; for ( int i = 0 ; i < elements . length ; i ++ ) { if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } _treeViewer . expandToLevel ( elements [ i ] , AbstractTreeViewer . ALL_LEVELS ) ; } TreeItem [ ] items = _treeViewer . getTree ( ) . getItems ( ) ; if ( items . length > 0 ) { _treeViewer . getTree ( ) . showItem ( items [ 0 ] ) ; } } } finally { _treeViewer . getControl ( ) . setRedraw ( true ) ; } return Status . OK_STATUS ; } } ; } private SashForm createSash ( Composite parent ) { GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; GridData gridData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; gridData . exclude = true ; SashForm result = new SashForm ( parent , SWT . VERTICAL ) ; result . setLayoutData ( gridData ) ; result . setLayout ( contentAreaLayout ) ; result . setVisible ( false ) ; return result ; } public Composite createSearchArea ( Composite parent , boolean embedded ) { GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 3 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; Composite top = new Composite ( parent , SWT . NONE ) ; top . setLayout ( contentAreaLayout ) ; top . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 3 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; GridData data = new GridData ( ) ; data . horizontalAlignment = GridData . FILL ; data . horizontalSpan = 1 ; data . grabExcessHorizontalSpace = true ; data . grabExcessVerticalSpace = false ; Composite result = new Composite ( top , SWT . NONE ) ; result . setLayout ( contentAreaLayout ) ; result . setLayoutData ( data ) ; if ( ! embedded ) { Label searchLabel = new Label ( result , SWT . NONE ) ; searchLabel . setText ( Messages . UnifiedOutlinePage_Filter ) ; } int style = 0 ; if ( embedded ) { style = SWT . SINGLE | SWT . FOCUSED ; } else { style = SWT . SINGLE | SWT . BORDER ; } this . _searchBox = new Text ( result , style ) ; this . _searchBox . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; this . _searchBox . setEditable ( true ) ; this . _searchBox . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { textChanged ( ) ; } } ) ; this . _searchBox . addKeyListener ( new KeyListener ( ) { public void keyPressed ( KeyEvent e ) { if ( e . keyCode == SWT . ARROW_UP || e . keyCode == SWT . ARROW_DOWN ) { _treeViewer . getControl ( ) . setFocus ( ) ; } } public void keyReleased ( KeyEvent e ) { } } ) ; ToolBar filtersToolBar = new ToolBar ( result , SWT . HORIZONTAL ) ; filtersToolBar . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , false , true ) ) ; _toolbarManager = new ToolBarManager ( filtersToolBar ) ; final List < BaseFilter > filters = new ArrayList < BaseFilter > ( ) ; EditorFileContext fileContext = this . _editor . getFileContext ( ) ; String language = fileContext . getDefaultLanguage ( ) ; for ( FilterActionInfo filterInfo : UnifiedOutlineProvider . getInstance ( ) . getFilterActionInfos ( language ) ) { final FilterActionInfo info = filterInfo ; _toolbarManager . add ( new ContributionItemStub ( ) { public String getId ( ) { return info . getName ( ) ; } @ Override public void fill ( ToolBar parent , int index ) { final BaseFilter filter = info . getFilter ( ) ; ToolItem item = new ToolItem ( parent , SWT . CHECK ) ; filters . add ( index , filter ) ; item . setImage ( info . getImageDescriptor ( ) . createImage ( ) ) ; item . setToolTipText ( info . getToolTip ( ) ) ; item . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { ToolItem item = ( ToolItem ) e . widget ; filter . setActive ( item . getSelection ( ) ) ; _treeViewer . refresh ( true ) ; } } ) ; } } ) ; } _toolbarManager . update ( false ) ; _toolbarManager . getControl ( ) . update ( ) ; this . _filters = filters . toArray ( new BaseFilter [ filters . size ( ) ] ) ; return result ; } private void createServiceListener ( ) { this . _serviceListener = new IFileServiceChangeListener ( ) { public void fileServiceChanged ( IFileService newService ) { if ( _document != null ) { _document . removeDocumentListener ( _documentListener ) ; } _document = _editor . getDocumentProvider ( ) . getDocument ( _editor . getEditorInput ( ) ) ; if ( _document != null ) { _document . addDocumentListener ( _documentListener ) ; } } } ; } private void createSourceSash ( ) { Composite previewComp = new Composite ( this . _outlineSash , SWT . NONE ) ; GridLayout contentAreaLayout = new GridLayout ( ) ; contentAreaLayout . numColumns = 1 ; contentAreaLayout . makeColumnsEqualWidth = false ; contentAreaLayout . marginHeight = 0 ; contentAreaLayout . marginWidth = 0 ; contentAreaLayout . verticalSpacing = 0 ; contentAreaLayout . horizontalSpacing = 0 ; previewComp . setLayout ( contentAreaLayout ) ; previewComp . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Label outlineLabel = new Label ( previewComp , SWT . NONE ) ; outlineLabel . setText ( Messages . UnifiedOutlinePage_Source ) ; outlineLabel . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; } private TreeViewer createTreeViewer ( Composite parent ) { TreeViewer result = new TreeViewer ( new Tree ( parent , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL ) ) ; outlineProvider = createProvider ( ) ; result . setLabelProvider ( outlineProvider ) ; result . setContentProvider ( outlineProvider ) ; result . setInput ( this . _editor ) ; result . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { } } ) ; result . setComparer ( new IElementComparer ( ) { public boolean equals ( Object a , Object b ) { boolean result = false ; if ( a instanceof OutlineItem && b instanceof OutlineItem ) { OutlineItem item1 = ( OutlineItem ) a ; OutlineItem item2 = ( OutlineItem ) b ; result = item1 . equals ( item2 ) ; } else if ( a instanceof IParseNode && b instanceof IParseNode ) { if ( a == b ) { result = true ; } else { IParseNode node1 = ( IParseNode ) a ; IParseNode node2 = ( IParseNode ) b ; String path1 = node1 . getUniquePath ( ) ; String path2 = node2 . getUniquePath ( ) ; result = path1 . equals ( path2 ) ; } } else { result = ( a == b ) ; } return result ; } public int hashCode ( Object element ) { return 0 ; } } ) ; return result ; } public void dispose ( ) { super . dispose ( ) ; if ( this . _delayedRefreshJob != null && this . _editor != null ) { this . _editor . getDocumentProvider ( ) . getDocument ( this . _editor . getEditorInput ( ) ) . removeDocumentListener ( this . _documentListener ) ; this . _editor . removeFileServiceChangeListener ( _serviceListener ) ; } } public Map < String , ContributedOutline > getContributedOutlines ( ) { return this . _outlines ; } public Control getControl ( ) { return this . _composite ; } public SashForm getOutlineSash ( ) { return this . _outlineSash ; } public CTabFolder getOutlineTabs ( ) { return this . _outlineTabs ; } public TreeViewer getTreeViewer ( ) { return this . _treeViewer ; } public UnifiedEditor getUnifiedEditor ( ) { return this . _editor ; } public boolean hidePrivateMembers ( ) { return this . _hide ; } public void refresh ( ) { if ( ! _treeViewer . getControl ( ) . isDisposed ( ) ) { this . _treeViewer . refresh ( ) ; } } private void removeOpenActionIfNeeded ( ) { if ( this . openAction != null ) { _toolbarManager . remove ( openAction ) ; openAction = null ; _toolbarManager . update ( false ) ; } } public void open ( OpenEvent event ) { IStructuredSelection selection = ( IStructuredSelection ) event . getSelection ( ) ; if ( selection . size ( ) == 1 ) { Object element = selection . getFirstElement ( ) ; if ( element instanceof IResolvableItem ) { IResolvableItem item = ( IResolvableItem ) element ; if ( item . isResolvable ( ) ) { if ( item instanceof IParseNode ) { int position = ( ( IParseNode ) item ) . getStartingOffset ( ) ; this . _editor . selectAndReveal ( position , 0 ) ; return ; } } else { if ( item instanceof OutlineItem ) { OutlineItem outlineItem = ( OutlineItem ) selection . getFirstElement ( ) ; if ( _treeViewer != null && _treeViewer . getTree ( ) != null && ! _treeViewer . getTree ( ) . isDisposed ( ) && _treeViewer . getTree ( ) . isFocusControl ( ) ) { _editor . selectAndReveal ( outlineItem . getStartingOffset ( ) , 0 ) ; } } } } if ( element instanceof IRange ) { int position = ( ( IRange ) element ) . getStartingOffset ( ) ; this . _editor . selectAndReveal ( position , 0 ) ; } notifyCloseListeners ( ) ; } else { removeOpenActionIfNeeded ( ) ; this . _editor . getViewer ( ) . removeRangeIndication ( ) ; } } public void contributeToQuickOutlineMenu ( IMenuManager manager ) { if ( this . _outlines . size ( ) > 0 ) { SplitOutlinesAction splitAction = new SplitOutlinesAction ( this ) ; splitAction . setEnabled ( this . _composite . isReparentable ( ) ) ; this . _splitItem = new ActionContributionItem ( splitAction ) ; manager . add ( this . _splitItem ) ; } SortAction sortAction = new SortAction ( this ) ; IPreferenceStore store = UnifiedEditorsPlugin . getDefault ( ) . getPreferenceStore ( ) ; boolean sort = store . getBoolean ( IPreferenceConstants . SORT_OUTLINE_ALPHABETICALLY ) ; sortAction . setChecked ( sort ) ; if ( sort ) { getTreeViewer ( ) . setSorter ( SortAction . SORTER ) ; } this . _sortItem = new ActionContributionItem ( sortAction ) ; manager . add ( this . _sortItem ) ; this . _hidePrivateAction = new HidePrivateAction ( this ) ; this . _hidePrivateItem = new ActionContributionItem ( this . _hidePrivateAction ) ; manager . add ( this . _hidePrivateItem ) ; CollapseAction collapseAction = new CollapseAction ( this ) ; this . _collapseItem = new ActionContributionItem ( collapseAction ) ; manager . add ( this . _collapseItem ) ; Action expandAction = new Action ( Messages . UnifiedOutlinePage_ExpandAll ) { public void run ( ) { getTreeViewer ( ) . expandAll ( ) ; } } ; expandAction . setImageDescriptor ( UnifiedEditorsPlugin . getImageDescriptor ( "icons/expandall.gif" ) ) ; expandAction . setToolTipText ( Messages . UnifiedOutlinePage_CollapseAll ) ; this . _expandItem = new ActionContributionItem ( expandAction ) ; manager . add ( this . _expandItem ) ; } public void setFocus ( ) { this . _treeViewer . getControl ( ) . setFocus ( ) ; } public Control getSearchBox ( ) { return _searchBox ; } private void textChanged ( ) { this . _filterRefreshJob . cancel ( ) ; this . _filterRefreshJob . schedule ( FILTER_REFRESH_DELAY ) ; this . _pattern = this . _searchBox . getText ( ) ; this . _filter . setPattern ( this . _pattern ) ; Iterator < ContributedOutline > outlineIter = _outlines . values ( ) . iterator ( ) ; while ( outlineIter . hasNext ( ) ) { outlineIter . next ( ) . setFilterText ( this . _pattern ) ; } } public void togglePrivateMemberVisibility ( ) { this . _hide = ( this . _hide == false ) ; this . refresh ( ) ; } public void addCloseListener ( ICloseListener listener ) { closeListeners . add ( listener ) ; } public void selectionChanged ( SelectionChangedEvent event ) { IStructuredSelection selection = ( IStructuredSelection ) event . getSelection ( ) ; if ( openAction != null ) { _toolbarManager . remove ( openAction ) ; _toolbarManager . update ( true ) ; _toolbarManager . getControl ( ) . getParent ( ) . layout ( true , true ) ; } if ( selection . size ( ) == 1 ) { Object element = selection . getFirstElement ( ) ; if ( element instanceof IResolvableItem ) { IResolvableItem item = ( IResolvableItem ) element ; if ( item . isResolvable ( ) ) { openAction = new ActionContributionItem ( new OpenExternalAction ( item ) ) ; _toolbarManager . add ( openAction ) ; _toolbarManager . update ( true ) ; _toolbarManager . getControl ( ) . getParent ( ) . layout ( true , true ) ; while ( ! item . stillHighlight ( ) ) { item = item . getParentItem ( ) ; if ( item == null ) { return ; } } if ( item instanceof IParseNode ) { int position = ( ( IParseNode ) item ) . getStartingOffset ( ) ; this . _editor . selectAndReveal ( position , 0 ) ; return ; } } else { removeOpenActionIfNeeded ( ) ; } } removeOpenActionIfNeeded ( ) ; } else { removeOpenActionIfNeeded ( ) ; this . _editor . getViewer ( ) . removeRangeIndication ( ) ; } } private void notifyCloseListeners ( ) { for ( ICloseListener listener : closeListeners ) { listener . doClose ( ) ; } } private void updateProviders ( ) { EditorFileContext fileContext = _editor . getFileContext ( ) ; if ( fileContext != null ) { UnifiedOutlineProvider provider = UnifiedOutlineProvider . getInstance ( ) ; provider . setCurrentLanguage ( fileContext . getDefaultLanguage ( ) ) ; provider . fireBeforeRefreshEvent ( fileContext ) ; } } private void expandElement ( Object element , ITreeContentProvider treeContentProvider , List < Object > elements , Map < Object , List < Object > > parents ) { Object [ ] children = treeContentProvider . getChildren ( element ) ; List < Object > elementParentsList = parents . get ( element ) ; for ( Object child : children ) { elements . add ( child ) ; ArrayList < Object > parentsList = new ArrayList < Object > ( ) ; if ( elementParentsList != null ) { parentsList . addAll ( elementParentsList ) ; } parentsList . add ( element ) ; parents . put ( child , parentsList ) ; } for ( Object child : children ) { expandElement ( child , treeContentProvider , elements , parents ) ; } } } 
=======
public class HttpQuery { public interface KeyValueHandler { void handle ( String key , String value ) ; } public static void foreachKeyValue ( String queryStr , KeyValueHandler handler ) { if ( queryStr != null ) { for ( String item : queryStr . split ( "&" ) ) { String [ ] pieces = item . split ( "=" ) ; try { String key = URLDecoder . decode ( pieces [ 0 ] , "UTF-8" ) ; String value = pieces . length > 1 ? URLDecoder . decode ( pieces [ 1 ] , "UTF-8" ) : "" ; handler . handle ( key , value ) ; } catch ( UnsupportedEncodingException uee ) { throw new RuntimeException ( uee ) ; } } } } public static Map < String , String > parse ( String queryStr ) { final Map < String , String > result = new HashMap < String , String > ( ) ; foreachKeyValue ( queryStr , new KeyValueHandler ( ) { public void handle ( String key , String value ) { result . put ( key , value ) ; } } ) ; return result ; } public static Map < String , List < String > > parseMultiple ( String queryStr ) { final Map < String , List < String > > result = new HashMap < String , List < String > > ( ) ; foreachKeyValue ( queryStr , new KeyValueHandler ( ) { public void handle ( String key , String value ) { if ( ! result . containsKey ( key ) ) { result . put ( key , new ArrayList < String > ( ) ) ; } result . get ( key ) . add ( value ) ; } } ) ; return result ; } private static boolean appendEntry ( StringBuilder sb , boolean needAmpersand , String key , String value ) { try { if ( needAmpersand ) { sb . append ( '&' ) ; } sb . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; sb . append ( '=' ) ; sb . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; return true ; } catch ( UnsupportedEncodingException uee ) { throw new RuntimeException ( uee ) ; } } public static String unparse ( Map < String , String > parsedQuery ) { StringBuilder sb = new StringBuilder ( ) ; boolean needAmpersand = false ; for ( Map . Entry < String , String > e : parsedQuery . entrySet ( ) ) { needAmpersand = appendEntry ( sb , needAmpersand , e . getKey ( ) , e . getValue ( ) ) ; } return sb . toString ( ) ; } public static String unparseMultiple ( Map < String , List < String > > parsedQuery ) { StringBuilder sb = new StringBuilder ( ) ; boolean needAmpersand = false ; for ( Map . Entry < String , List < String > > e : parsedQuery . entrySet ( ) ) { for ( String value : e . getValue ( ) ) { needAmpersand = appendEntry ( sb , needAmpersand , e . getKey ( ) , value ) ; } } return sb . toString ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
