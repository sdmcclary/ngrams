public class FunctionBody extends AbstractDatatype { public static final FunctionBody THE_INSTANCE = new FunctionBody ( ) ; protected FunctionBody ( ) { super ( ) ; } public void checkValid ( CharSequence literal ) throws DatatypeException { try { Reader reader = new BufferedReader ( ( new StringReader ( "function(event){" + literal . toString ( ) + "}" ) ) ) ; reader . mark ( 1 ) ; try { Context context = ContextFactory . getGlobal ( ) . enterContext ( ) ; context . setOptimizationLevel ( 0 ) ; context . setLanguageVersion ( Context . VERSION_1_6 ) ; context . compileReader ( reader , null , - 1 , null ) ; } finally { Context . exit ( ) ; } } catch ( IOException e ) { throw newDatatypeException ( e . getMessage ( ) ) ; } catch ( RhinoException e ) { throw newDatatypeException ( e . getMessage ( ) ) ; } } @ Override public String getName ( ) { return "ECMAScript FunctionBody" ; } } 