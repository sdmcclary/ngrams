public class JSEnvironmentHandler extends JSAbstractHandler { private ScriptDocVM _vm ; private int _fileIndex = 0 ; public JSEnvironmentHandler ( ) { this . _vm = new ScriptDocVM ( ) ; } public ScriptDocVM getVM ( ) { return this . _vm ; } protected Object onAddArgument ( Object [ ] nodes ) { return null ; } protected Object onAddCaseClause ( Object [ ] nodes ) { return null ; } protected Object onAddElement ( Object [ ] nodes ) { return null ; } protected Object onAddElidedElement ( Object [ ] nodes ) { return null ; } protected Object onAddElision ( Object [ ] nodes ) { return null ; } protected Object onAddParameter ( Object [ ] nodes ) { return null ; } protected Object onAddProperty ( Object [ ] nodes ) { return null ; } protected Object onAddSourceElement ( Object [ ] nodes ) { return null ; } protected Object onAddStatement ( Object [ ] nodes ) { return null ; } protected Object onAddVarDeclaration ( Object [ ] nodes ) { return null ; } protected Object onArguments ( Object [ ] nodes ) { return null ; } protected Object onArrayLiteral ( Object [ ] nodes ) { Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 2 ] ; Range range = new Range ( lbracket . offset , rbracket . getEndingOffset ( ) ) ; this . _vm . addPushArray ( this . _fileIndex , range ) ; return null ; } protected Object onArrayLiteralTrailingComma ( Object [ ] nodes ) { Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 3 ] ; Range range = new Range ( lbracket . offset , rbracket . getEndingOffset ( ) ) ; this . _vm . addPushArray ( this . _fileIndex , range ) ; return null ; } protected Object onArrayLiteralTrailingElision ( Object [ ] nodes ) { Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 4 ] ; Range range = new Range ( lbracket . offset , rbracket . getEndingOffset ( ) ) ; this . _vm . addPushArray ( this . _fileIndex , range ) ; return null ; } @ SuppressWarnings ( "unchecked" ) protected Object onAssignmentExpression ( Object [ ] nodes ) { Lexeme operator = ( Lexeme ) nodes [ 1 ] ; switch ( operator . typeIndex ) { case JSTokenTypes . EQUAL : this . _vm . addPut ( this . _fileIndex ) ; break ; case JSTokenTypes . STAR_EQUAL : break ; case JSTokenTypes . FORWARD_SLASH_EQUAL : break ; case JSTokenTypes . PERCENT_EQUAL : break ; case JSTokenTypes . PLUS_EQUAL : break ; case JSTokenTypes . MINUS_EQUAL : break ; case JSTokenTypes . LESS_LESS_EQUAL : break ; case JSTokenTypes . GREATER_GREATER_EQUAL : break ; case JSTokenTypes . GREATER_GREATER_GREATER_EQUAL : break ; case JSTokenTypes . AMPERSAND_EQUAL : break ; case JSTokenTypes . CARET_EQUAL : break ; case JSTokenTypes . PIPE_EQUAL : break ; default : throw new IllegalArgumentException ( "Unknown operator: " + operator ) ; } return null ; } protected Object onBinaryExpression ( Object [ ] nodes ) { return null ; } protected Object onBlock ( Object [ ] nodes ) { return null ; } protected Object onBreak ( Object [ ] nodes ) { return null ; } protected Object onBreakLabel ( Object [ ] nodes ) { return null ; } protected Object onCallExpression ( Object [ ] nodes ) { return null ; } protected Object onCaseClause ( Object [ ] nodes ) { return null ; } protected Object onCasesAndDefaultBlock ( Object [ ] nodes ) { return null ; } protected Object onCasesBlock ( Object [ ] nodes ) { return null ; } protected Object onCasesDefaultCasesBlock ( Object [ ] nodes ) { return null ; } protected Object onCatch ( Object [ ] nodes ) { return null ; } protected Object onCommaExpression ( Object [ ] nodes ) { return null ; } protected Object onConditionalExpression ( Object [ ] nodes ) { return null ; } protected Object onContinue ( Object [ ] nodes ) { return null ; } protected Object onContinueLabel ( Object [ ] nodes ) { return null ; } protected Object onDefaultAndCasesBlock ( Object [ ] nodes ) { return null ; } protected Object onDefaultBlock ( Object [ ] nodes ) { return null ; } protected Object onDefaultClause ( Object [ ] nodes ) { return null ; } protected Object onDoStatement ( Object [ ] nodes ) { return null ; } protected Object onElidedArray ( Object [ ] nodes ) { Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 2 ] ; Range range = new Range ( lbracket . offset , rbracket . getEndingOffset ( ) ) ; this . _vm . addPushArray ( this . _fileIndex , range ) ; return null ; } protected Object onEmptyArguments ( Object [ ] nodes ) { return null ; } protected Object onEmptyArray ( Object [ ] nodes ) { Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 1 ] ; Range range = new Range ( lbracket . offset , rbracket . getEndingOffset ( ) ) ; this . _vm . addPushArray ( this . _fileIndex , range ) ; return null ; } protected Object onEmptyBlock ( Object [ ] nodes ) { return null ; } protected Object onEmptyCaseBlock ( Object [ ] nodes ) { return null ; } protected Object onEmptyCaseClause ( Object [ ] nodes ) { return null ; } protected Object onEmptyDefaultClause ( Object [ ] nodes ) { return null ; } protected Object onEmptyFunctionBody ( Object [ ] nodes ) { return null ; } protected Object onEmptyObject ( Object [ ] nodes ) { Lexeme lcurly = ( Lexeme ) nodes [ 0 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 1 ] ; Range range = new Range ( lcurly . offset , rcurly . getEndingOffset ( ) ) ; this . _vm . addPushObject ( this . _fileIndex , range ) ; return null ; } protected Object onEmptyParameterList ( Object [ ] nodes ) { return null ; } protected Object onEmptyStatement ( Object [ ] nodes ) { return null ; } protected Object onExpressionStatement ( Object [ ] nodes ) { return null ; } protected Object onFalse ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addPushBoolean ( this . _fileIndex , keyword ) ; return null ; } protected Object onFinally ( Object [ ] nodes ) { return null ; } protected Object onFirstArgument ( Object [ ] nodes ) { return null ; } protected Object onFirstCaseClause ( Object [ ] nodes ) { return null ; } protected Object onFirstElement ( Object [ ] nodes ) { return null ; } protected Object onFirstElidedElement ( Object [ ] nodes ) { return null ; } protected Object onFirstElision ( Object [ ] nodes ) { return null ; } protected Object onFirstParameter ( Object [ ] nodes ) { return null ; } protected Object onFirstProperty ( Object [ ] nodes ) { return null ; } protected Object onFirstSourceElement ( Object [ ] nodes ) { return null ; } protected Object onFirstStatement ( Object [ ] nodes ) { return null ; } protected Object onFirstVarDeclaration ( Object [ ] nodes ) { return null ; } protected Object onForAdvanceOnlyStatement ( Object [ ] nodes ) { return null ; } protected Object onForBodyOnlyStatement ( Object [ ] nodes ) { return null ; } protected Object onForConditionOnlyStatement ( Object [ ] nodes ) { return null ; } protected Object onForInStatement ( Object [ ] nodes ) { return null ; } protected Object onForInitializeOnlyStatement ( Object [ ] nodes ) { return null ; } protected Object onForNoAdvanceStatement ( Object [ ] nodes ) { return null ; } protected Object onForNoConditionStatement ( Object [ ] nodes ) { return null ; } protected Object onForNoInitializeStatement ( Object [ ] nodes ) { return null ; } protected Object onForStatement ( Object [ ] nodes ) { return null ; } protected Object onForVarInStatement ( Object [ ] nodes ) { return null ; } protected Object onForVarInitializeOnlyStatement ( Object [ ] nodes ) { return null ; } protected Object onForVarNoAdvanceStatement ( Object [ ] nodes ) { return null ; } protected Object onForVarNoConditionStatement ( Object [ ] nodes ) { return null ; } protected Object onForVarStatement ( Object [ ] nodes ) { return null ; } protected Object onFunctionBody ( Object [ ] nodes ) { return null ; } protected Object onFunctionDeclaration ( Object [ ] nodes ) { return null ; } protected Object onFunctionExpression ( Object [ ] nodes ) { return null ; } protected Object onGetElement ( Object [ ] nodes ) { return null ; } protected Object onGetProperty ( Object [ ] nodes ) { return null ; } protected Object onGroupExpression ( Object [ ] nodes ) { return null ; } protected Object onIdentifier ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addGetGlobal ( ) ; this . _vm . addPush ( keyword . getText ( ) ) ; return null ; } protected Object onIfElseStatement ( Object [ ] nodes ) { return null ; } protected Object onIfStatement ( Object [ ] nodes ) { return null ; } protected Object onLabelledStatement ( Object [ ] nodes ) { return null ; } protected Object onNewExpression ( Object [ ] nodes ) { return null ; } protected Object onNewExpressionWithoutArguments ( Object [ ] nodes ) { return null ; } protected Object onNull ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addPushNull ( this . _fileIndex , keyword ) ; return null ; } protected Object onNumber ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addPushNumber ( this . _fileIndex , keyword ) ; return null ; } protected Object onObjectLiteral ( Object [ ] nodes ) { return null ; } protected Object onParameterList ( Object [ ] nodes ) { return null ; } protected Object onPostfixExpression ( Object [ ] nodes ) { return null ; } protected Object onRegex ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addPushRegExp ( this . _fileIndex , keyword ) ; return null ; } protected Object onReturn ( Object [ ] nodes ) { return null ; } protected Object onReturnValue ( Object [ ] nodes ) { return null ; } protected Object onString ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addPushString ( this . _fileIndex , keyword ) ; return null ; } protected Object onSwitchStatement ( Object [ ] nodes ) { return null ; } protected Object onThis ( Object [ ] nodes ) { return null ; } protected Object onThrowStatement ( Object [ ] nodes ) { return null ; } protected Object onTrue ( Object [ ] nodes ) { Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; this . _vm . addPushBoolean ( this . _fileIndex , keyword ) ; return null ; } protected Object onTryCatchFinallyStatement ( Object [ ] nodes ) { return null ; } protected Object onTryCatchStatement ( Object [ ] nodes ) { return null ; } protected Object onTryFinallyStatement ( Object [ ] nodes ) { return null ; } protected Object onUnaryExpression ( Object [ ] nodes ) { return null ; } protected Object onVarDeclaration ( Object [ ] nodes ) { return null ; } protected Object onVarDeclarationAssignment ( Object [ ] nodes ) { return null ; } protected Object onVarStatement ( Object [ ] nodes ) { return null ; } protected Object onWhileStatement ( Object [ ] nodes ) { return null ; } protected Object onWithStatement ( Object [ ] nodes ) { return null ; } } 