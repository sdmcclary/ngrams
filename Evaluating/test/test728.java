public class PasteScriptFromClipboardAction implements IWorkbenchWindowActionDelegate , IObjectActionDelegate { private static final String ECLIPSE_MONKEY_PROJECT = Messages . PasteScriptFromClipboardAction_Monkey_project_name ; private static final String ECLIPSE_MONKEY_DIRECTORY = "scripts" ; public PasteScriptFromClipboardAction ( ) { } public void run ( IAction action ) { TextAndRTF text = getTextFromClipboard ( ) ; Collection scripts = extractScriptsFromText ( text ) ; for ( Iterator iter = scripts . iterator ( ) ; iter . hasNext ( ) ; ) { try { String scriptText = ( String ) iter . next ( ) ; scriptText = collapseEscapedNewlines ( scriptText ) ; IFolder destination = findDestinationFor ( scriptText ) ; IFile file = createScriptFile ( destination , scriptText ) ; highlightNewScriptInNavigator ( file ) ; } catch ( CoreException x ) { MessageDialog . openInformation ( shell , Messages . PasteScriptFromClipboardAction_INF_TTL_Unable_create_examples_project , Messages . PasteScriptFromClipboardAction_INF_MSG_Unable_create_examples_project + x ) ; } catch ( IOException x ) { MessageDialog . openInformation ( shell , Messages . PasteScriptFromClipboardAction_INF_TTL_Unable_create_examples_project , Messages . PasteScriptFromClipboardAction_INF_MSG_Unable_create_examples_project + x ) ; } } if ( scripts . isEmpty ( ) ) { MessageDialog . openInformation ( shell , Messages . PasteScriptFromClipboardAction_INF_TTL_Cant_find_script_on_clipboard , Messages . PasteScriptFromClipboardAction_INF_MSG_Cant_find_script_on_clipboard ) ; } } String collapseEscapedNewlines ( String input ) { Pattern pattern = Pattern . compile ( "\\\\(\n|(\r\n?))" ) ; Matcher match = pattern . matcher ( input ) ; String result = match . replaceAll ( "" ) ; return result ; } private void highlightNewScriptInNavigator ( IFile file ) throws PartInitException { if ( window != null ) { window . getActivePage ( ) . showView ( "org.eclipse.ui.views.ResourceNavigator" ) ; IViewReference [ ] refs = window . getActivePage ( ) . getViewReferences ( ) ; for ( int i = 0 ; i < refs . length ; i ++ ) { IViewReference reference = refs [ i ] ; if ( reference . getId ( ) . equals ( "org.eclipse.ui.views.ResourceNavigator" ) ) { ResourceNavigator nav = ( ResourceNavigator ) reference . getView ( true ) ; IStructuredSelection sel = new StructuredSelection ( file ) ; nav . selectReveal ( sel ) ; } } } } private IFolder findDestinationFor ( String script ) throws CoreException { if ( selection != null && selection . getFirstElement ( ) instanceof IFolder ) { IFolder element = ( IFolder ) selection . getFirstElement ( ) ; if ( ( element ) . getName ( ) . equals ( ECLIPSE_MONKEY_DIRECTORY ) ) { return element ; } } IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IProject [ ] projects = workspace . getRoot ( ) . getProjects ( ) ; IProject project = null ; for ( int i = 0 ; i < projects . length ; i ++ ) { IProject p = projects [ i ] ; if ( p . getName ( ) . equals ( ECLIPSE_MONKEY_PROJECT ) ) { project = p ; break ; } } if ( project == null ) { project = workspace . getRoot ( ) . getProject ( ECLIPSE_MONKEY_PROJECT ) ; project . create ( null ) ; project . open ( null ) ; } IFolder folder = project . getFolder ( ECLIPSE_MONKEY_DIRECTORY ) ; if ( ! folder . exists ( ) ) folder . create ( IResource . NONE , true , null ) ; return folder ; } private IFile createScriptFile ( IFolder destination , String script ) throws CoreException , IOException { IMonkeyLanguageFactory langFactory = ( IMonkeyLanguageFactory ) EclipseMonkeyPlugin . getDefault ( ) . getLanguageStore ( ) . get ( "js" ) ; ScriptMetadata metadata = langFactory . getScriptMetadata ( script ) ; String basename = metadata . getReasonableFilename ( ) ; int ix = basename . lastIndexOf ( "." ) ; if ( ix > 0 ) { basename = basename . substring ( 0 , ix ) ; } IResource [ ] members = destination . members ( 0 ) ; Pattern suffix = Pattern . compile ( basename + "(-(\\d+))?\\.js" ) ; int maxsuffix = - 1 ; for ( int i = 0 ; i < members . length ; i ++ ) { IResource resource = members [ i ] ; if ( resource instanceof IFile ) { IFile file = ( IFile ) resource ; String filename = file . getName ( ) ; Matcher match = suffix . matcher ( filename ) ; if ( match . matches ( ) ) { if ( match . group ( 2 ) == null ) { maxsuffix = Math . max ( maxsuffix , 0 ) ; } else { int n = Integer . parseInt ( match . group ( 2 ) ) ; maxsuffix = Math . max ( maxsuffix , n ) ; } } } } String filename = ( maxsuffix == - 1 ) ? filename = basename + ".js" : basename + "-" + ( maxsuffix + 1 ) + ".js" ; ByteArrayInputStream stream = new ByteArrayInputStream ( script . getBytes ( ) ) ; IFile file = destination . getFile ( filename ) ; file . create ( stream , false , null ) ; stream . close ( ) ; return file ; } private TextAndRTF getTextFromClipboard ( ) { TextAndRTF result = new TextAndRTF ( ) ; Clipboard clipboard = new Clipboard ( shell . getDisplay ( ) ) ; try { TextTransfer textTransfer = TextTransfer . getInstance ( ) ; RTFTransfer rtfTransfer = RTFTransfer . getInstance ( ) ; result . text = ( String ) clipboard . getContents ( textTransfer ) ; result . rtf = ( String ) clipboard . getContents ( rtfTransfer ) ; return result ; } finally { clipboard . dispose ( ) ; } } private Collection extractScriptsFromText ( TextAndRTF text ) { Collection result = new ArrayList ( ) ; Pattern pattern = Pattern . compile ( EclipseMonkeyPlugin . PUBLISH_BEFORE_MARKER + "\\s*(.*?)\\s*" + EclipseMonkeyPlugin . PUBLISH_AFTER_MARKER , Pattern . DOTALL ) ; Pattern crpattern = Pattern . compile ( "\r\n?" ) ; if ( text . text != null ) { Matcher matcher = pattern . matcher ( text . text ) ; while ( matcher . find ( ) ) { String string = matcher . group ( 1 ) ; Matcher crmatch = crpattern . matcher ( string ) ; string = crmatch . replaceAll ( "\n" ) ; if ( string . indexOf ( "\n" ) >= 0 ) { result . add ( string ) ; } } } if ( result . isEmpty ( ) && text . rtf != null ) { Matcher matcher = pattern . matcher ( text . rtf ) ; Pattern escapesPattern = Pattern . compile ( "\\\\(.)" ) ; while ( matcher . find ( ) ) { String string = matcher . group ( 1 ) ; string = string . replaceAll ( "\\\\line" , "\n" ) ; Matcher escapes = escapesPattern . matcher ( string ) ; string = escapes . replaceAll ( "$1" ) ; Matcher crmatch = crpattern . matcher ( string ) ; string = crmatch . replaceAll ( "\n" ) ; if ( string . indexOf ( "\n" ) >= 0 ) { result . add ( string ) ; } } } return result ; } private IStructuredSelection selection = null ; public void selectionChanged ( IAction action , ISelection selection ) { this . selection = ( IStructuredSelection ) selection ; } public void dispose ( ) { } public void init ( IWorkbenchWindow window ) { this . shell = window . getShell ( ) ; this . window = window ; } private Shell shell ; private IWorkbenchWindow window ; public void setActivePart ( IAction action , IWorkbenchPart targetPart ) { this . shell = targetPart . getSite ( ) . getShell ( ) ; this . window = null ; } class TextAndRTF { String text ; String rtf ; } } 