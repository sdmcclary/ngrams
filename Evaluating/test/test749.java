public class JForum extends JForumBaseServlet { private static boolean isDatabaseUp ; public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; super . startApplication ( ) ; isDatabaseUp = ForumStartup . startDatabase ( ) ; try { Connection conn = DBConnection . getImplementation ( ) . getConnection ( ) ; conn . setAutoCommit ( ! SystemGlobals . getBoolValue ( ConfigKeys . DATABASE_USE_TRANSACTIONS ) ) ; MySQLVersionWorkarounder dw = new MySQLVersionWorkarounder ( ) ; dw . handleWorkarounds ( conn ) ; JForumExecutionContext ex = JForumExecutionContext . get ( ) ; ex . setConnection ( conn ) ; JForumExecutionContext . set ( ex ) ; ForumStartup . startForumRepository ( ) ; RankingRepository . loadRanks ( ) ; SmiliesRepository . loadSmilies ( ) ; BanlistRepository . loadBanlist ( ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; throw new ForumStartupException ( "Error while starting jforum" , e ) ; } finally { JForumExecutionContext . finish ( ) ; } } public void service ( HttpServletRequest req , HttpServletResponse res ) throws IOException , ServletException { Writer out = null ; JForumContext forumContext = null ; RequestContext request = null ; ResponseContext response = null ; String encoding = SystemGlobals . getValue ( ConfigKeys . ENCODING ) ; try { JForumExecutionContext ex = JForumExecutionContext . get ( ) ; request = new WebRequestContext ( req ) ; response = new WebResponseContext ( res ) ; this . checkDatabaseStatus ( ) ; forumContext = new JForumContext ( request . getContextPath ( ) , SystemGlobals . getValue ( ConfigKeys . SERVLET_EXTENSION ) , request , response ) ; ex . setForumContext ( forumContext ) ; JForumExecutionContext . set ( ex ) ; SimpleHash context = JForumExecutionContext . getTemplateContext ( ) ; ControllerUtils utils = new ControllerUtils ( ) ; utils . refreshSession ( ) ; context . put ( "logged" , SessionFacade . isLogged ( ) ) ; SecurityRepository . load ( SessionFacade . getUserSession ( ) . getUserId ( ) ) ; utils . prepareTemplateContext ( context , forumContext ) ; String module = request . getModule ( ) ; String moduleClass = module != null ? ModulesRepository . getModuleClass ( module ) : null ; if ( moduleClass == null ) { response . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; } else { boolean shouldBan = this . shouldBan ( request . getRemoteAddr ( ) ) ; if ( ! shouldBan ) { context . put ( "moduleName" , module ) ; context . put ( "action" , request . getAction ( ) ) ; } else { moduleClass = ModulesRepository . getModuleClass ( "forums" ) ; context . put ( "moduleName" , "forums" ) ; ( ( WebRequestContext ) request ) . changeAction ( "banned" ) ; } if ( shouldBan && SystemGlobals . getBoolValue ( ConfigKeys . BANLIST_SEND_403FORBIDDEN ) ) { response . sendError ( HttpServletResponse . SC_FORBIDDEN ) ; } else { context . put ( "language" , I18n . getUserLanguage ( ) ) ; context . put ( "session" , SessionFacade . getUserSession ( ) ) ; context . put ( "request" , req ) ; context . put ( "response" , response ) ; out = this . processCommand ( out , request , response , encoding , context , moduleClass ) ; } } } catch ( Exception e ) { this . handleException ( out , response , encoding , e , request ) ; } finally { this . handleFinally ( out , forumContext , response ) ; } } private Writer processCommand ( Writer out , RequestContext request , ResponseContext response , String encoding , SimpleHash context , String moduleClass ) throws Exception { Command c = this . retrieveCommand ( moduleClass ) ; Template template = c . process ( request , response , context ) ; if ( JForumExecutionContext . getRedirectTo ( ) == null ) { String contentType = JForumExecutionContext . getContentType ( ) ; if ( contentType == null ) { contentType = "text/html; charset=" + encoding ; } response . setContentType ( contentType ) ; if ( ! JForumExecutionContext . isCustomContent ( ) ) { out = new BufferedWriter ( new OutputStreamWriter ( response . getOutputStream ( ) , encoding ) ) ; template . process ( JForumExecutionContext . getTemplateContext ( ) , out ) ; out . flush ( ) ; } } return out ; } private void checkDatabaseStatus ( ) { if ( ! isDatabaseUp ) { synchronized ( this ) { if ( ! isDatabaseUp ) { isDatabaseUp = ForumStartup . startDatabase ( ) ; } } } } private void handleFinally ( Writer out , JForumContext forumContext , ResponseContext response ) throws IOException { try { if ( out != null ) { out . close ( ) ; } } catch ( Exception e ) { } String redirectTo = JForumExecutionContext . getRedirectTo ( ) ; JForumExecutionContext . finish ( ) ; if ( redirectTo != null ) { if ( forumContext != null && forumContext . isEncodingDisabled ( ) ) { response . sendRedirect ( redirectTo ) ; } else { response . sendRedirect ( response . encodeRedirectURL ( redirectTo ) ) ; } } } private void handleException ( Writer out , ResponseContext response , String encoding , Exception e , RequestContext request ) throws IOException { JForumExecutionContext . enableRollback ( ) ; if ( e . toString ( ) . indexOf ( "ClientAbortException" ) == - 1 ) { response . setContentType ( "text/html; charset=" + encoding ) ; if ( out != null ) { new ExceptionWriter ( ) . handleExceptionData ( e , out , request ) ; } else { new ExceptionWriter ( ) . handleExceptionData ( e , new BufferedWriter ( new OutputStreamWriter ( response . getOutputStream ( ) ) ) , request ) ; } } } private boolean shouldBan ( String ip ) { Banlist b = new Banlist ( ) ; b . setUserId ( SessionFacade . getUserSession ( ) . getUserId ( ) ) ; b . setIp ( ip ) ; return BanlistRepository . shouldBan ( b ) ; } private Command retrieveCommand ( String moduleClass ) throws Exception { return ( Command ) Class . forName ( moduleClass ) . newInstance ( ) ; } public void destroy ( ) { super . destroy ( ) ; System . out . println ( "Destroying JForum..." ) ; try { DBConnection . getImplementation ( ) . realReleaseAllConnections ( ) ; ConfigLoader . stopCacheEngine ( ) ; } catch ( Exception e ) { } } } 