public class DownloadsProgressDialog extends AbstractDialog { private IStreamProgressListener progressListener ; private Location [ ] locations ; private int currentDownload ; private long currentRead ; private long currentTotal ; private long overallTotal ; private long overallRead ; private JProgressBar prOverall ; private JLabel lbCurrent ; private JProgressBar prCurrent ; private JButton btnCancel ; private JButton btnExit ; private JTextArea lbReport ; private JPanel pnlReport ; private JCheckBox chStartInstallation ; private boolean finished ; private boolean exitBlogBridge ; private Runnable actInstall ; private Runnable actCancel ; private Runnable actExit ; public DownloadsProgressDialog ( Frame frame , Location [ ] aLocations ) { super ( frame , Strings . message ( "updates.downloading.dialog.title" ) , false ) ; locations = aLocations ; currentDownload = - 1 ; progressListener = new ProgressListener ( ) ; finished = false ; exitBlogBridge = false ; overallRead = 0 ; overallTotal = 0 ; for ( int i = 0 ; i < aLocations . length ; i ++ ) overallTotal += aLocations [ i ] . getSize ( ) ; initComponents ( ) ; pack ( ) ; enableEvents ( AWTEvent . WINDOW_EVENT_MASK ) ; } public boolean isExitBlogBridge ( ) { return exitBlogBridge ; } protected void processWindowEvent ( WindowEvent e ) { super . processWindowEvent ( e ) ; if ( e . getID ( ) == WindowEvent . WINDOW_OPENED ) pack ( ) ; } public void open ( Runnable installAction , Runnable cancelAction , Runnable exitAction ) { actInstall = installAction ; actCancel = cancelAction ; actExit = exitAction ; super . open ( ) ; } protected JComponent buildContent ( ) { JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( createMainPanel ( ) , BorderLayout . CENTER ) ; panel . add ( createButtonBar ( ) , BorderLayout . SOUTH ) ; return panel ; } private Component createMainPanel ( ) { BBFormBuilder builder = new BBFormBuilder ( "max(p;200dlu)" ) ; builder . setDefaultDialogBorder ( ) ; String msg = Strings . message ( SystemUtils . IS_OS_MAC ? "updates.downloading.wording.mac" : "updates.downloading.wording" ) ; builder . appendRow ( "pref:grow" ) ; builder . append ( ComponentsFactory . createWrappedMultilineLabel ( msg ) , 1 ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( Strings . message ( "updates.downloading.overall.progress" ) , 1 ) ; builder . append ( prOverall ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( lbCurrent ) ; builder . append ( prCurrent ) ; builder . append ( pnlReport ) ; builder . append ( chStartInstallation ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; return builder . getPanel ( ) ; } private void initComponents ( ) { lbReport = ComponentsFactory . createWrappedMultilineLabel ( "" ) ; BBFormBuilder builder = new BBFormBuilder ( "0:grow" ) ; builder . appendRelatedComponentsGapRow ( 1 ) ; builder . append ( lbReport ) ; pnlReport = builder . getPanel ( ) ; pnlReport . setVisible ( false ) ; prOverall = new JProgressBar ( ) ; lbCurrent = new JLabel ( ) ; prCurrent = new JProgressBar ( ) ; prOverall . setMinimum ( 0 ) ; prOverall . setMaximum ( 100 ) ; prOverall . setValue ( 0 ) ; prCurrent . setMinimum ( 0 ) ; prCurrent . setMaximum ( 100 ) ; chStartInstallation = ComponentsFactory . createCheckBox ( Strings . message ( "updates.downloading.close.blogbridge.and.install.new.version" ) ) ; chStartInstallation . setVisible ( false ) ; nextDownload ( ) ; } private Component createButtonBar ( ) { btnExit = createOKButton ( false ) ; btnExit . setText ( Strings . message ( "updates.downloading.exit" ) ) ; btnExit . setVisible ( false ) ; btnCancel = createCancelButton ( ) ; ButtonBarBuilder builder = new ButtonBarBuilder ( ) ; builder . getPanel ( ) . setBorder ( Constants . DIALOG_BUTTON_BAR_BORDER ) ; builder . addGlue ( ) ; builder . addFixed ( btnExit ) ; builder . addRelatedGap ( ) ; builder . addFixed ( btnCancel ) ; return builder . getPanel ( ) ; } public IStreamProgressListener getProgressListener ( ) { return progressListener ; } public void nextDownload ( ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { currentDownload ++ ; if ( currentDownload < locations . length ) { resetCurrentProgress ( ) ; setCurrentLabel ( locations [ currentDownload ] . getDescription ( ) ) ; } else { prCurrent . setValue ( 100 ) ; btnCancel . setText ( Strings . message ( "updates.downloading.close" ) ) ; } } } ) ; } private void resetCurrentProgress ( ) { prCurrent . setValue ( 0 ) ; currentRead = 0 ; } private void setCurrentLabel ( String aDescription ) { lbCurrent . setText ( MessageFormat . format ( Strings . message ( "updates.downloading.status" ) , new Object [ ] { aDescription } ) ) ; } private void onDownloadStarted ( final long aLength ) { currentTotal = aLength ; } private void onDownloadFailed ( ) { onDownloadFinished ( ) ; } private void onDownloadFinished ( ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { prCurrent . setValue ( prCurrent . getMaximum ( ) ) ; } } ) ; } private void onRead ( final long aBytes ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { overallRead += aBytes ; currentRead += aBytes ; prCurrent . setValue ( ( int ) ( currentRead * 100 / currentTotal ) ) ; prOverall . setValue ( ( int ) ( overallRead * 100 / overallTotal ) ) ; } } ) ; } public void doAccept ( ) { super . doAccept ( ) ; actExit . run ( ) ; } public synchronized void doCancel ( ) { if ( finished ) { super . doAccept ( ) ; if ( shouldStartInstallation ( ) ) actInstall . run ( ) ; } else { super . doCancel ( ) ; actCancel . run ( ) ; } } public synchronized void allDone ( List aSuccessful , List aFailed ) { String msg ; int sucSize = aSuccessful . size ( ) ; int failSize = aFailed . size ( ) ; if ( sucSize > 0 ) { msg = MessageFormat . format ( Strings . message ( "updates.downloading.successfully.downloaded.0.to.your.desktop" ) , new Object [ ] { ( sucSize == 1 ) ? Strings . message ( "updates.downloading.package" ) : MessageFormat . format ( Strings . message ( "updates.downloading.0.packages" ) , new Object [ ] { new Integer ( sucSize ) } ) } ) ; } else msg = "" ; if ( failSize > 0 ) { msg += MessageFormat . format ( Strings . message ( "updates.downloading.failed.to.download.0.packages" ) , new Object [ ] { new Integer ( failSize ) } ) ; } lbReport . setText ( msg ) ; pnlReport . setVisible ( true ) ; Location mainPackage = Location . getMainPackage ( aSuccessful ) ; if ( SystemUtils . IS_OS_WINDOWS && mainPackage != null ) { chStartInstallation . setVisible ( true ) ; } else { btnExit . setVisible ( true ) ; } pack ( ) ; finished = true ; } public boolean shouldStartInstallation ( ) { return chStartInstallation . isSelected ( ) ; } private class ProgressListener implements IStreamProgressListener { public void connecting ( URLInputStream source ) { } public void connected ( URLInputStream source , long length ) { onDownloadStarted ( length ) ; } public void errored ( URLInputStream source , IOException ex ) { onDownloadFailed ( ) ; } public void finished ( URLInputStream source ) { onDownloadFinished ( ) ; } public void read ( URLInputStream source , long bytes ) { onRead ( bytes ) ; } } } 