public class UnreadButton extends JLabel { private static Font myFont = new Font ( "SansSerif" , Font . BOLD , 9 ) ; private String toolTipTemplateSingle ; private String toolTipTemplateMany ; private static final int MAX_DISPLAY_DIGITS = 3 ; private static final int BUTTON_STATE_UNSET = - 1 ; private static final int BUTTON_STATE_PLAIN = 0 ; private static final int BUTTON_STATE_RAISED = 1 ; private static final int BUTTON_STATE_PRESSED_ON = 2 ; private static final int BUTTON_STATE_PRESSED_OFF = 3 ; private static DrawSpecs drawSpecsPlain = new DrawSpecs ( "unreadPlain.icon" , Color . BLACK , null ) ; private static DrawSpecs drawSpecsRaised = new DrawSpecs ( "unreadRaised.icon" , Color . WHITE , new Color ( 253 , 101 , 102 ) ) ; private static DrawSpecs drawSpecsPressed = new DrawSpecs ( "unreadPressed.icon" , new Color ( 240 , 179 , 179 ) , new Color ( 219 , 72 , 72 ) ) ; private static final Dimension MY_SIZE = new Dimension ( drawSpecsPlain . getImageIcon ( ) . getIconWidth ( ) + 1 , drawSpecsPlain . getImageIcon ( ) . getIconHeight ( ) + 1 ) ; private static volatile boolean showMenuOnClick = true ; private int myButtonState = BUTTON_STATE_UNSET ; private int myUnreadCount ; private Object attachedToObject ; public UnreadButton ( ) { setFocusable ( false ) ; setHorizontalAlignment ( SwingConstants . RIGHT ) ; setVerticalAlignment ( SwingConstants . TOP ) ; initSize ( ) ; setIconTextGap ( 0 ) ; setIcon ( new ButtonIcon ( ) ) ; setOpaque ( false ) ; setHorizontalTextPosition ( SwingConstants . CENTER ) ; enableEvents ( AWTEvent . MOUSE_EVENT_MASK ) ; enableEvents ( AWTEvent . MOUSE_MOTION_EVENT_MASK ) ; setButtonState ( BUTTON_STATE_PLAIN ) ; } public static void setShowMenuOnClick ( boolean value ) { showMenuOnClick = value ; } protected void setButtonState ( int state ) { if ( state != myButtonState ) { myButtonState = state ; repaint ( ) ; } } protected int getButtonState ( ) { return myButtonState ; } public void init ( int unreadCount ) { update ( unreadCount ) ; setFont ( myFont ) ; setButtonState ( BUTTON_STATE_PLAIN ) ; } public void update ( int unreadCount ) { myUnreadCount = unreadCount ; repaint ( ) ; setEnabled ( myUnreadCount > 0 ) ; setVisible ( myUnreadCount > 0 ) ; initToolTip ( ) ; } public void initToolTipMessage ( String templateSingle , String templateMany ) { toolTipTemplateSingle = templateSingle ; toolTipTemplateMany = templateMany ; initToolTip ( ) ; } private void initToolTip ( ) { String tip = null ; if ( myUnreadCount > 0 && toolTipTemplateSingle != null ) { Integer [ ] args = { myUnreadCount } ; tip = MessageFormat . format ( ( myUnreadCount == 1 ) ? toolTipTemplateSingle : toolTipTemplateMany , args ) ; } setToolTipText ( tip ) ; } protected void initSize ( ) { setSize ( MY_SIZE ) ; setMinimumSize ( MY_SIZE ) ; setMaximumSize ( MY_SIZE ) ; setPreferredSize ( MY_SIZE ) ; } public void addActionListener ( ActionListener l ) { listenerList . add ( ActionListener . class , l ) ; } public void removeActionListener ( ActionListener l ) { listenerList . remove ( ActionListener . class , l ) ; } public ActionListener [ ] getActionListeners ( ) { return listenerList . getListeners ( ActionListener . class ) ; } protected void invokeAction ( Object source ) { ActionEvent action = new ActionEvent ( source , 0 , "markRead" ) ; ActionListener [ ] listeners = getActionListeners ( ) ; for ( ActionListener listener : listeners ) listener . actionPerformed ( action ) ; } public void setAttachedToObject ( Object object ) { attachedToObject = object ; } class ButtonIcon implements Icon { public int getIconHeight ( ) { return MY_SIZE . height ; } public int getIconWidth ( ) { return MY_SIZE . width ; } public void paintIcon ( Component c , Graphics g , int x , int y ) { DrawSpecs drawSpecs ; switch ( getButtonState ( ) ) { case BUTTON_STATE_PLAIN : drawSpecs = drawSpecsPlain ; break ; case BUTTON_STATE_RAISED : case BUTTON_STATE_PRESSED_OFF : drawSpecs = drawSpecsRaised ; break ; case BUTTON_STATE_PRESSED_ON : drawSpecs = drawSpecsPressed ; break ; default : return ; } ImageIcon imageIcon = drawSpecs . getImageIcon ( ) ; g . setColor ( Color . WHITE ) ; g . drawImage ( imageIcon . getImage ( ) , 0 , 0 , imageIcon . getIconWidth ( ) , imageIcon . getIconHeight ( ) , UnreadButton . this ) ; g . setFont ( myFont ) ; String text = Integer . toString ( myUnreadCount ) ; if ( text . length ( ) > MAX_DISPLAY_DIGITS ) text = "..." ; FontMetrics fm = g . getFontMetrics ( myFont ) ; Rectangle2D r = fm . getStringBounds ( text , g ) ; int base = fm . getAscent ( ) ; int dx = ( int ) Math . round ( ( MY_SIZE . width - 1 - r . getWidth ( ) ) / 2 ) ; int dy = ( int ) ( base + Math . round ( ( MY_SIZE . height - 1 - r . getHeight ( ) ) / 2 ) ) ; Color shadowColor = drawSpecs . getShadowColor ( ) ; Color textColor = drawSpecs . getTextColor ( ) ; if ( shadowColor != null ) { g . setColor ( shadowColor ) ; g . drawString ( text , dx + 1 , dy ) ; } g . setColor ( textColor ) ; g . drawString ( text , dx , dy ) ; } } protected void processMouseEvent ( MouseEvent e ) { super . processMouseEvent ( e ) ; switch ( e . getID ( ) ) { case MouseEvent . MOUSE_PRESSED : if ( isEnabled ( ) ) { setButtonState ( BUTTON_STATE_PRESSED_ON ) ; } else { UifUtilities . delegateEventToParent ( this , e ) ; } break ; case MouseEvent . MOUSE_RELEASED : if ( isEnabled ( ) ) { setButtonState ( BUTTON_STATE_PLAIN ) ; Rectangle r = getBounds ( ) ; r . setLocation ( 0 , 0 ) ; if ( r . contains ( e . getPoint ( ) ) ) { final Object source = attachedToObject ; if ( showMenuOnClick ) { JPopupMenu menu = new JPopupMenu ( ) ; JMenuItem item = new JMenuItem ( Strings . message ( "unreadbutton.mark.as.read" ) ) ; item . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { invokeAction ( source ) ; } } ) ; menu . add ( item ) ; menu . show ( this , e . getPoint ( ) . x , e . getPoint ( ) . y ) ; } else invokeAction ( source ) ; } } else { UifUtilities . delegateEventToParent ( this , e ) ; } break ; case MouseEvent . MOUSE_CLICKED : UifUtilities . delegateEventToParent ( this , e ) ; break ; case MouseEvent . MOUSE_ENTERED : if ( isEnabled ( ) ) { switch ( getButtonState ( ) ) { case BUTTON_STATE_PLAIN : setButtonState ( BUTTON_STATE_RAISED ) ; break ; case BUTTON_STATE_PRESSED_OFF : setButtonState ( BUTTON_STATE_PRESSED_ON ) ; break ; default : break ; } } break ; case MouseEvent . MOUSE_EXITED : if ( isEnabled ( ) ) { switch ( getButtonState ( ) ) { case BUTTON_STATE_RAISED : setButtonState ( BUTTON_STATE_PLAIN ) ; break ; case BUTTON_STATE_PRESSED_ON : setButtonState ( BUTTON_STATE_PRESSED_OFF ) ; break ; default : break ; } } break ; default : break ; } } protected void processMouseMotionEvent ( MouseEvent e ) { UifUtilities . delegateEventToParent ( this , e ) ; } static class DrawSpecs { private final ImageIcon imageIcon ; private final Color textColor ; private final Color shadowColor ; DrawSpecs ( String iconName , Color text , Color shadow ) { imageIcon = ResourceUtils . getIcon ( iconName ) ; textColor = text ; shadowColor = shadow ; } ImageIcon getImageIcon ( ) { return imageIcon ; } Color getTextColor ( ) { return textColor ; } Color getShadowColor ( ) { return shadowColor ; } } } 