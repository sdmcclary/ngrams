public final class ImportGuidesAction extends AbstractAction { private static final Logger LOG = Logger . getLogger ( ImportGuidesAction . class . getName ( ) ) ; private static final String HTTP_REQUEST_AUTHORIZATION = "Authorization" ; private static final String BLOGLINES_SERVICE_URL = "http://rpc.bloglines.com/listsubs" ; private static ImportGuidesAction instance ; private ImportGuidesAction ( ) { setEnabled ( false ) ; } public static synchronized ImportGuidesAction getInstance ( ) { if ( instance == null ) instance = new ImportGuidesAction ( ) ; return instance ; } public void actionPerformed ( ActionEvent event ) { if ( GlobalController . SINGLETON . checkForNewSubscription ( ) ) return ; final ImportGuidesDialog dialog = new ImportGuidesDialog ( GlobalController . SINGLETON . getMainFrame ( ) ) ; dialog . open ( ) ; if ( ! dialog . hasBeenCanceled ( ) ) { setEnabled ( false ) ; try { processImport ( dialog ) ; } catch ( Exception e1 ) { e1 . printStackTrace ( ) ; } finally { setEnabled ( true ) ; } } } private void processImport ( ImportGuidesDialog dialog ) { final Importer importer ; final String url ; boolean fromURL = dialog . isFromURL ( ) ; final boolean isSingle = dialog . isSingleMode ( ) ; final boolean isAppending = dialog . isAppendingMode ( ) ; if ( fromURL ) { url = dialog . getUrlString ( ) ; importer = new ImporterAdv ( ) ; } else { String email = dialog . getBloglinesEmail ( ) ; String password = dialog . getBloglinesPassword ( ) ; url = BLOGLINES_SERVICE_URL ; importer = createBloglinesImporter ( email , password ) ; } Thread thread = new Thread ( ) { public void run ( ) { doImport ( importer , url , isSingle , isAppending , GlobalModel . SINGLETON , true ) ; } } ; thread . start ( ) ; } public static void doImport ( Importer aImporter , String aUrl , final boolean aSingle , final boolean aAppending , final GlobalModel aModel , final boolean isConfirmationRequired ) { OPMLGuideSet guideSet = null ; URL baseUrl = null ; try { try { baseUrl = new URL ( aUrl ) ; } catch ( MalformedURLException e ) { throw ImporterException . malformedUrl ( e . getMessage ( ) ) ; } guideSet = aImporter . process ( baseUrl , aSingle ) ; } catch ( ImporterException e ) { processException ( e ) ; } if ( guideSet != null ) { final OPMLGuide [ ] aGuides = guideSet . getGuides ( ) ; final URL aBaseUrl = baseUrl ; SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { if ( aGuides . length > 0 ) { processImportedGuides ( aModel , aBaseUrl , aGuides , aSingle || aAppending , isConfirmationRequired ) ; } else { JOptionPane . showMessageDialog ( GlobalController . SINGLETON . getMainFrame ( ) , Strings . message ( "import.guides.nothing.to.import" ) ) ; } } } ) ; } } public static void importAndAppend ( GlobalModel model , String url ) { doImport ( new ImporterAdv ( ) , url , false , true , model , false ) ; } private static Importer createBloglinesImporter ( final String username , final String password ) { return new BloglinesImporter ( ) { public Reader createReaderForURL ( URL url ) throws IOException { HttpURLConnection con = ( HttpURLConnection ) url . openConnection ( ) ; if ( username != null && password != null ) { con . setRequestProperty ( HTTP_REQUEST_AUTHORIZATION , StringUtils . createBasicAuthToken ( username , password ) ) ; } return XmlReaderFactory . create ( con . getInputStream ( ) ) ; } } ; } private static void processImportedGuides ( GlobalModel model , URL baseURL , OPMLGuide [ ] guides , boolean isAppending , boolean isConfirmationRequired ) { int result = JOptionPane . YES_OPTION ; if ( isConfirmationRequired ) { int feedsCount = countFeeds ( guides ) ; String message ; if ( guides . length == 1 ) { message = MessageFormat . format ( Strings . message ( "import.guides.ready.to.import.0.feeds" ) , feedsCount ) ; } else { message = MessageFormat . format ( Strings . message ( "import.guides.ready.to.import.0.guides.with.1.feeds" ) , guides . length , feedsCount ) ; } message += Strings . message ( "import.guides.continue" ) ; result = JOptionPane . showConfirmDialog ( GlobalController . SINGLETON . getMainFrame ( ) , message , Strings . message ( "import.guides.dialog.title" ) , JOptionPane . YES_NO_OPTION ) ; } if ( result == JOptionPane . YES_OPTION ) { final GuidesSet cgs = model . getGuidesSet ( ) ; if ( isAppending ) { appendGuides ( baseURL , guides , cgs ) ; } else { replaceGuides ( baseURL , guides , cgs ) ; } } } static int countFeeds ( OPMLGuide [ ] guides ) { int count = 0 ; for ( int i = 0 ; i < guides . length ; i ++ ) { OPMLGuide guide = guides [ i ] ; count += guide . getFeeds ( ) . size ( ) ; OPMLReadingList [ ] lists = guide . getReadingLists ( ) ; for ( int j = 0 ; j < lists . length ; j ++ ) { OPMLReadingList list = lists [ j ] ; count += list . getFeeds ( ) . size ( ) ; } } return count ; } static void appendGuides ( URL baseURL , OPMLGuide [ ] guides , GuidesSet set ) { final Set < String > titles = set . getGuidesTitles ( ) ; for ( final OPMLGuide guide : guides ) { String title = getUniqueTitle ( guide . getTitle ( ) , titles ) ; appendGuide ( baseURL , guide , title , set ) ; titles . add ( title ) ; } } static int appendGuide ( URL baseURL , OPMLGuide opmlGuide , String uniqueTitle , GuidesSet guidesSet ) { IGuide guide = Helper . createGuide ( baseURL , opmlGuide , null ) ; guide . setTitle ( uniqueTitle ) ; String icon = guide . getIconKey ( ) ; if ( StringUtils . isEmpty ( icon ) ) { icon = getUnusedIcon ( guidesSet ) ; guide . setIconKey ( icon ) ; } replaceFeedsWithShares ( guidesSet , guide ) ; guidesSet . add ( guide ) ; GlobalController . SINGLETON . getPoller ( ) . update ( guide ) ; return guide . getFeedsCount ( ) ; } static void replaceFeedsWithShares ( GuidesSet set , IGuide guide ) { IFeed [ ] feeds = guide . getFeeds ( ) ; for ( IFeed feed : feeds ) { IFeed existing = set . findFeed ( feed ) ; if ( existing != null && existing != feed ) { GuidesSet . replaceFeed ( feed , existing ) ; } } } static String getUnusedIcon ( GuidesSet set ) { String icon = null ; int unusedIconIndex = GuideIcons . findUnusedIconName ( set . getGuidesIconKeys ( ) ) ; if ( unusedIconIndex != - 1 ) icon = GuideIcons . getIconsNames ( ) [ unusedIconIndex ] ; return icon ; } static String getUniqueTitle ( String title , Set titles ) { String uniqueTitle = title ; int i = 2 ; while ( titles . contains ( uniqueTitle ) ) { uniqueTitle = title + "_" + i ; i ++ ; } return uniqueTitle ; } public static void replaceGuides ( URL baseURL , OPMLGuide [ ] guides , GuidesSet set ) { set . clear ( ) ; appendGuides ( baseURL , guides , set ) ; } private static void processException ( ImporterException e ) { JOptionPane . showMessageDialog ( GlobalController . SINGLETON . getMainFrame ( ) , ImporterException . getStringType ( e ) , Strings . message ( "import.guides.dialog.title" ) , JOptionPane . ERROR_MESSAGE ) ; } } 