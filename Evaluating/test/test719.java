@ SuppressWarnings ( "restriction" ) public class FileInfoPropertyPage extends PropertyPage implements IWorkbenchPropertyPage { private static final int MAX_VALUE_WIDTH = 80 ; private PermissionsGroup fPermissionsGroup ; private IFileInfo fFileInfo ; @ Override protected Control createContents ( Composite parent ) { final IFileStore fileStore = Utils . getFileStore ( getElement ( ) ) ; if ( fileStore == null ) { Label label = new Label ( parent , SWT . NONE ) ; label . setText ( IDEWorkbenchMessages . ResourceInfoPage_noResource ) ; return label ; } try { if ( getElement ( ) . getAdapter ( File . class ) != null ) { fFileInfo = fileStore . fetchInfo ( EFS . NONE , new NullProgressMonitor ( ) ) ; } else { final IFileInfo [ ] result = new IFileInfo [ 1 ] ; ProgressMonitorDialog dlg = new ProgressMonitorDialog ( parent . getShell ( ) ) ; try { dlg . run ( true , true , new IRunnableWithProgress ( ) { public void run ( IProgressMonitor monitor ) throws InvocationTargetException , InterruptedException { try { result [ 0 ] = fileStore . fetchInfo ( IExtendedFileStore . DETAILED , monitor ) ; } catch ( CoreException e ) { throw new InvocationTargetException ( e ) ; } finally { monitor . done ( ) ; } } } ) ; } catch ( InvocationTargetException e ) { throw ( CoreException ) e . getTargetException ( ) ; } catch ( InterruptedException e ) { } fFileInfo = result [ 0 ] ; } } catch ( CoreException e ) { UIUtils . showErrorMessage ( "Fetch info error" , e ) ; } if ( fFileInfo == null ) { Label label = new Label ( parent , SWT . NONE ) ; label . setText ( IDEWorkbenchMessages . ResourceInfoPage_noResource ) ; return label ; } Composite composite = new Composite ( parent , SWT . NONE ) ; composite . setLayout ( GridLayoutFactory . swtDefaults ( ) . margins ( 0 , 0 ) . create ( ) ) ; composite . setLayoutData ( GridDataFactory . fillDefaults ( ) . grab ( true , false ) . create ( ) ) ; Composite basicInfo = createBasicInfoGroup ( composite , fileStore , fFileInfo ) ; basicInfo . setLayoutData ( GridDataFactory . fillDefaults ( ) . create ( ) ) ; Label separator = new Label ( composite , SWT . SEPARATOR | SWT . HORIZONTAL ) ; separator . setLayoutData ( GridDataFactory . fillDefaults ( ) . grab ( true , false ) . create ( ) ) ; Composite state = createStateGroup ( composite , fileStore , fFileInfo ) ; state . setLayoutData ( GridDataFactory . fillDefaults ( ) . create ( ) ) ; if ( fFileInfo instanceof IExtendedFileInfo ) { IExtendedFileInfo extendedInfo = ( IExtendedFileInfo ) fFileInfo ; Composite owner = createOwnerGroup ( composite , extendedInfo ) ; owner . setLayoutData ( GridDataFactory . fillDefaults ( ) . grab ( true , false ) . indent ( 0 , 10 ) . create ( ) ) ; Composite permissions = createPermissionsGroup ( composite , extendedInfo ) ; permissions . setLayoutData ( GridDataFactory . fillDefaults ( ) . grab ( true , false ) . indent ( 0 , 5 ) . create ( ) ) ; } Dialog . applyDialogFont ( composite ) ; return composite ; } public boolean performOk ( ) { if ( fFileInfo != null && ( fFileInfo instanceof IExtendedFileInfo ) ) { long permissions = fPermissionsGroup . getPermissions ( ) ; IExtendedFileInfo extendedInfo = ( IExtendedFileInfo ) fFileInfo ; if ( permissions != extendedInfo . getPermissions ( ) ) { extendedInfo . setPermissions ( permissions ) ; IFileStore fileStore = Utils . getFileStore ( getElement ( ) ) ; if ( fileStore != null ) { try { fileStore . putInfo ( fFileInfo , IExtendedFileInfo . SET_PERMISSIONS , new NullProgressMonitor ( ) ) ; } catch ( CoreException e ) { UIUtils . showErrorMessage ( "Error storing file info" , e ) ; } } } } return super . performOk ( ) ; } protected void performDefaults ( ) { if ( fPermissionsGroup != null ) { if ( fFileInfo . isDirectory ( ) ) { fPermissionsGroup . setPermissions ( PreferenceUtils . getDirectoryPermissions ( ) ) ; } else { fPermissionsGroup . setPermissions ( PreferenceUtils . getFilePermissions ( ) ) ; } } super . performDefaults ( ) ; } protected IPreferenceStore doGetPreferenceStore ( ) { return IOUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; } private Composite createBasicInfoGroup ( Composite parent , IFileStore fileStore , IFileInfo fileInfo ) { Composite container = new Composite ( parent , SWT . NULL ) ; container . setLayout ( GridLayoutFactory . swtDefaults ( ) . numColumns ( 2 ) . margins ( 0 , 0 ) . create ( ) ) ; Label label = new Label ( container , SWT . NONE ) ; label . setText ( IDEWorkbenchMessages . ResourceInfo_path ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . BEGINNING , SWT . TOP ) . create ( ) ) ; Text pathText = new Text ( container , SWT . WRAP | SWT . READ_ONLY ) ; pathText . setText ( fileStore . toURI ( ) . getPath ( ) ) ; pathText . setBackground ( pathText . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ; pathText . setLayoutData ( GridDataFactory . swtDefaults ( ) . grab ( true , false ) . align ( SWT . FILL , SWT . CENTER ) . hint ( convertWidthInCharsToPixels ( MAX_VALUE_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label = new Label ( container , SWT . LEFT ) ; label . setText ( IDEWorkbenchMessages . ResourceInfo_type ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . BEGINNING , SWT . TOP ) . create ( ) ) ; Text typeText = new Text ( container , SWT . LEFT | SWT . READ_ONLY ) ; typeText . setText ( fileInfo . isDirectory ( ) ? "Folder" : "File" ) ; typeText . setBackground ( typeText . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ; typeText . setLayoutData ( GridDataFactory . swtDefaults ( ) . create ( ) ) ; label = new Label ( container , SWT . LEFT ) ; label . setText ( IDEWorkbenchMessages . ResourceInfo_location ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . BEGINNING , SWT . TOP ) . create ( ) ) ; Text locationText = new Text ( container , SWT . WRAP | SWT . READ_ONLY ) ; locationText . setText ( fileStore . toString ( ) ) ; locationText . setBackground ( locationText . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ; locationText . setLayoutData ( GridDataFactory . swtDefaults ( ) . grab ( true , false ) . align ( SWT . FILL , SWT . CENTER ) . hint ( convertWidthInCharsToPixels ( MAX_VALUE_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; if ( ! fileInfo . isDirectory ( ) ) { label = new Label ( container , SWT . LEFT ) ; label . setText ( IDEWorkbenchMessages . ResourceInfo_size ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . create ( ) ) ; Text sizeText = new Text ( container , SWT . LEFT | SWT . READ_ONLY ) ; sizeText . setText ( Long . toString ( fileInfo . getLength ( ) ) + " bytes" ) ; sizeText . setBackground ( sizeText . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ; sizeText . setLayoutData ( GridDataFactory . swtDefaults ( ) . grab ( true , false ) . align ( SWT . FILL , SWT . CENTER ) . hint ( convertWidthInCharsToPixels ( MAX_VALUE_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; } return container ; } private Composite createStateGroup ( Composite parent , IFileStore fileStore , IFileInfo fileInfo ) { Composite container = new Composite ( parent , SWT . NULL ) ; container . setLayout ( GridLayoutFactory . swtDefaults ( ) . numColumns ( 2 ) . margins ( 0 , 0 ) . create ( ) ) ; Label timeStampLabel = new Label ( container , SWT . NONE ) ; timeStampLabel . setText ( IDEWorkbenchMessages . ResourceInfo_lastModified ) ; Text timeStampText = new Text ( container , SWT . READ_ONLY ) ; DateFormat format = DateFormat . getDateTimeInstance ( DateFormat . LONG , DateFormat . MEDIUM ) ; timeStampText . setText ( format . format ( new Date ( fileInfo . getLastModified ( ) ) ) ) ; timeStampText . setBackground ( timeStampText . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ; timeStampText . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . FILL , SWT . CENTER ) . grab ( true , false ) . create ( ) ) ; return container ; } private Composite createOwnerGroup ( Composite parent , IExtendedFileInfo fileInfo ) { Group container = new Group ( parent , SWT . NONE ) ; container . setText ( "Owner and Group" ) ; container . setLayout ( GridLayoutFactory . swtDefaults ( ) . numColumns ( 2 ) . margins ( 0 , 0 ) . create ( ) ) ; Label label = new Label ( container , SWT . NONE ) ; label . setText ( StringUtils . makeFormLabel ( "Owner" ) ) ; Text text = new Text ( container , SWT . READ_ONLY ) ; text . setText ( fileInfo . getOwner ( ) ) ; text . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . FILL , SWT . CENTER ) . grab ( true , false ) . create ( ) ) ; label = new Label ( container , SWT . NONE ) ; label . setText ( StringUtils . makeFormLabel ( "Group" ) ) ; text = new Text ( container , SWT . READ_ONLY ) ; text . setText ( fileInfo . getGroup ( ) ) ; text . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . FILL , SWT . CENTER ) . grab ( true , false ) . create ( ) ) ; return container ; } private Composite createPermissionsGroup ( Composite parent , IExtendedFileInfo fileInfo ) { fPermissionsGroup = new PermissionsGroup ( parent ) ; fPermissionsGroup . setText ( "Permissions" ) ; fPermissionsGroup . setPermissions ( fileInfo . getPermissions ( ) ) ; return ( Composite ) fPermissionsGroup . getControl ( ) ; } } 