public class DoubleValue extends NumberValue implements Serializable { private static final long serialVersionUID = 1L ; public static final DoubleValue ZERO = new DoubleValue ( 0 ) ; private final double _value ; public DoubleValue ( double value ) { _value = value ; } public static DoubleValue create ( double value ) { return new DoubleValue ( value ) ; } public static Value create ( Number value ) { if ( value == null ) { return NullValue . NULL ; } else return new DoubleValue ( value . doubleValue ( ) ) ; } public String getType ( ) { return "double" ; } @ Override public ValueType getValueType ( ) { return ValueType . DOUBLE ; } public boolean isDoubleConvertible ( ) { return true ; } public boolean isLongConvertible ( ) { return _value == ( double ) ( ( long ) _value ) ; } @ Override public boolean isLong ( ) { return false ; } @ Override public boolean isDouble ( ) { return true ; } @ Override public boolean isNumeric ( ) { return true ; } public boolean isScalar ( ) { return true ; } public boolean toBoolean ( ) { return _value != 0 ; } public long toLong ( ) { if ( ( _value > ( double ) Long . MAX_VALUE ) || ( _value < ( double ) Long . MIN_VALUE ) ) { return 0 ; } else { return ( long ) _value ; } } public double toDouble ( ) { return _value ; } public DoubleValue toDoubleValue ( ) { return this ; } @ Override public StringValue toStringBuilder ( Env env ) { return env . createUnicodeBuilder ( ) . append ( toString ( ) ) ; } public Value toKey ( ) { return LongValue . create ( ( long ) _value ) ; } public Object toJavaObject ( ) { return new Double ( _value ) ; } public Value neg ( ) { return new DoubleValue ( - _value ) ; } public Value pos ( ) { return this ; } public Value add ( Value rValue ) { return new DoubleValue ( _value + rValue . toDouble ( ) ) ; } public Value add ( long lValue ) { return new DoubleValue ( lValue + _value ) ; } public Value increment ( int incr ) { return new DoubleValue ( _value + incr ) ; } public Value mul ( Value rValue ) { return new DoubleValue ( _value * rValue . toDouble ( ) ) ; } public Value mul ( long lValue ) { return new DoubleValue ( lValue * _value ) ; } public Value abs ( ) { if ( _value >= 0 ) return this ; else return DoubleValue . create ( - _value ) ; } public boolean eql ( Value rValue ) { rValue = rValue . toValue ( ) ; if ( ! ( rValue instanceof DoubleValue ) ) return false ; double rDouble = ( ( DoubleValue ) rValue ) . _value ; return _value == rDouble ; } public String toString ( ) { long longValue = ( long ) _value ; double abs = _value < 0 ? - _value : _value ; int exp = ( int ) Math . log10 ( abs ) ; if ( longValue == _value && exp < 18 ) return String . valueOf ( longValue ) ; if ( - 5 < exp && exp < 18 ) { int digits = 13 - exp ; if ( digits > 13 ) digits = 13 ; else if ( digits < 0 ) digits = 0 ; String v = String . format ( "%." + digits + "f" , _value ) ; int len = v . length ( ) ; int nonzero = - 1 ; boolean dot = false ; for ( len -- ; len >= 0 ; len -- ) { int ch = v . charAt ( len ) ; if ( ch == '.' ) dot = true ; if ( ch != '0' && nonzero < 0 ) { if ( ch == '.' ) nonzero = len - 1 ; else nonzero = len ; } } if ( dot && nonzero >= 0 ) return v . substring ( 0 , nonzero + 1 ) ; else return v ; } else return String . format ( "%.13E" , _value ) ; } public Object toObject ( ) { return toString ( ) ; } public void print ( Env env ) { env . print ( toString ( ) ) ; } public void serialize ( Env env , StringBuilder sb ) { sb . append ( "d:" ) ; sb . append ( _value ) ; sb . append ( ";" ) ; } public void varExport ( StringBuilder sb ) { sb . append ( toString ( ) ) ; } public void generate ( PrintWriter out ) throws IOException { if ( _value == 0 ) out . print ( "DoubleValue.ZERO" ) ; else out . print ( "new DoubleValue(" + _value + ")" ) ; } public int hashCode ( ) { return ( int ) ( 37 + 65521 * _value ) ; } public boolean equals ( Object o ) { if ( this == o ) return true ; else if ( ! ( o instanceof DoubleValue ) ) return false ; DoubleValue value = ( DoubleValue ) o ; return _value == value . _value ; } public void varDumpImpl ( Env env , WriteStream out , int depth , IdentityHashMap < Value , String > valueSet ) throws IOException { out . print ( "float(" + toString ( ) + ")" ) ; } private Object readResolve ( ) { if ( _value == 0 ) return ZERO ; else return this ; } } 