<<<<<<< HEAD
public class PortalProxyServlet extends HttpServlet { private static final long serialVersionUID = 1L ; public static final int TIMEOUT = 30000 ; public static final String URL = "url" ; public static final String CLEAR_CACHE = "clearCache" ; private static final String NO_CACHE = "noCache" ; public PortalProxyServlet ( ) { initCache ( ) ; } class RemoteContents { long lastModifiedDate = 0 ; byte [ ] data = null ; } protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { String address = request . getParameter ( URL ) ; String clearCache = request . getParameter ( CLEAR_CACHE ) ; String noCache = request . getParameter ( NO_CACHE ) ; if ( clearCache != null && clearCache . equals ( "true" ) ) { clearCache ( ) ; } if ( address != null ) { if ( OnlineDetectionService . getInstance ( ) . getStatus ( ) == StatusMode . OFFLINE ) { serveFromCache ( response , address ) ; return ; } RemoteContents remoteContents = null ; try { long lastModifiedDate = - 1 ; remoteContents = getRemoteContents ( lastModifiedDate , address ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; remoteContents = null ; } if ( remoteContents == null ) { serveFromCache ( response , address ) ; return ; } response . setStatus ( HttpURLConnection . HTTP_OK ) ; response . setContentLength ( remoteContents . data . length ) ; FileUtils . pipe ( new ByteArrayInputStream ( remoteContents . data ) , response . getOutputStream ( ) , true ) ; if ( "true" . equals ( noCache ) == false ) { saveToCache ( address , remoteContents ) ; } } } private RemoteContents getRemoteContents ( long lastModifiedDate , String address ) throws MalformedURLException , IOException , ProtocolException { URL url = new URL ( address ) ; URLConnection connection = url . openConnection ( ) ; if ( connection instanceof HttpURLConnection ) { connection . setReadTimeout ( TIMEOUT ) ; connection . setDoInput ( true ) ; long remoteLastModified = 0 ; ( ( HttpURLConnection ) connection ) . setRequestMethod ( "GET" ) ; ( ( HttpURLConnection ) connection ) . connect ( ) ; ByteArrayOutputStream fileContents = new ByteArrayOutputStream ( ) ; FileUtils . pipe ( connection . getInputStream ( ) , fileContents , true ) ; RemoteContents contents = new RemoteContents ( ) ; contents . data = fileContents . toByteArray ( ) ; contents . lastModifiedDate = remoteLastModified ; return contents ; } return null ; } private void serveFromCache ( HttpServletResponse response , String address ) throws IOException { RemoteContents contents = getFromCache ( address ) ; if ( contents != null && contents . data != null ) { FileUtils . pipe ( new ByteArrayInputStream ( contents . data ) , response . getOutputStream ( ) , true ) ; response . setStatus ( HttpURLConnection . HTTP_OK ) ; } else { response . setStatus ( HttpURLConnection . HTTP_UNAVAILABLE ) ; } } private RemoteContents getFromCache ( String address ) { AptanaDB db = AptanaDB . getInstance ( ) ; Connection conn = db . getConnection ( ) ; if ( conn != null ) { Statement s ; try { String addr = java . net . URLEncoder . encode ( address , "UTF-8" ) ; s = conn . createStatement ( ) ; ResultSet rs = s . executeQuery ( "SELECT * FROM PROXY_CACHE WHERE address='" + addr + "'" ) ; boolean result = rs . next ( ) ; if ( result == true ) { RemoteContents contents = new RemoteContents ( ) ; contents . data = rs . getBytes ( "data" ) ; contents . lastModifiedDate = rs . getLong ( "lastmodified" ) ; return contents ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } finally { try { conn . close ( ) ; } catch ( SQLException e ) { } } } return null ; } private void initCache ( ) { try { if ( checkTable ( ) == false ) { dropTable ( ) ; AptanaDB . getInstance ( ) . execute ( "CREATE TABLE PROXY_CACHE (lastmodified BIGINT, address varchar(1024) PRIMARY KEY, data BLOB(50000))" ) ; } } catch ( SQLException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , Messages . ImageUtils_ErrorInitializingDbConnection , e ) ; if ( e . getNextException ( ) != null ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , Messages . ImageUtils_ErrorInitializingDbConnection , e . getNextException ( ) ) ; } } } private static boolean checkTable ( ) throws SQLException { Connection conn = null ; Statement s = null ; boolean result = true ; try { conn = AptanaDB . getInstance ( ) . getConnection ( ) ; if ( conn == null ) { SQLException sqle = new SQLException ( "Connection to AptanaDB is null." ) ; IdeLog . logError ( JettyPlugin . getDefault ( ) , sqle . getMessage ( ) ) ; throw sqle ; } else { s = conn . createStatement ( ) ; s . execute ( "select address FROM PROXY_CACHE where lastmodified = 0" ) ; } } catch ( SQLException sqle ) { String theError = ( sqle ) . getSQLState ( ) ; if ( theError != null && theError . equals ( "42X05" ) ) { result = false ; } else if ( theError != null && theError . equals ( "42X04" ) ) { result = false ; } else if ( theError != null && ( theError . equals ( "42X14" ) || theError . equals ( "42821" ) ) ) { IdeLog . logError ( JettyPlugin . getDefault ( ) , "IncorrectTableDefinition: " + sqle . getMessage ( ) ) ; throw sqle ; } else { IdeLog . logError ( JettyPlugin . getDefault ( ) , "SQLException: " + sqle . getMessage ( ) ) ; throw sqle ; } } finally { if ( s != null ) { s . close ( ) ; } if ( conn != null ) { conn . close ( ) ; } } return result ; } private void clearCache ( ) { AptanaDB . getInstance ( ) . execute ( "TRUNCATE PROXY_CACHE" ) ; } private void dropTable ( ) { try { AptanaDB . getInstance ( ) . execute ( "DROP TABLE PROXY_CACHE" ) ; } catch ( Exception e ) { } } private void saveToCache ( String address , RemoteContents contents ) { Connection conn = null ; PreparedStatement prepStmt = null ; String sql = "insert into PROXY_CACHE (lastmodified, address, data) values (?,?,?)" ; try { conn = AptanaDB . getInstance ( ) . getConnection ( ) ; if ( conn != null ) { prepStmt = conn . prepareStatement ( sql ) ; prepStmt . setLong ( 1 , contents . lastModifiedDate ) ; prepStmt . setString ( 2 , URLEncoder . encode ( address , "UTF-8" ) ) ; prepStmt . setBytes ( 3 , contents . data ) ; prepStmt . executeUpdate ( ) ; } } catch ( Exception e ) { try { sql = "update PROXY_CACHE set lastmodified = ?, data = ? where address = ?" ; conn = AptanaDB . getInstance ( ) . getConnection ( ) ; if ( conn != null ) { prepStmt = conn . prepareStatement ( sql ) ; prepStmt . setLong ( 1 , contents . lastModifiedDate ) ; prepStmt . setBytes ( 2 , contents . data ) ; prepStmt . setString ( 3 , URLEncoder . encode ( address , "UTF-8" ) ) ; prepStmt . executeUpdate ( ) ; } } catch ( Exception e2 ) { } } finally { try { if ( prepStmt != null ) { prepStmt . close ( ) ; } if ( conn != null ) { conn . close ( ) ; } } catch ( Exception e3 ) { } } } } 
=======
public abstract class BaseObject implements KvmSerializable { protected static final String NAMESPACE = "http://webservices.amazon.com/AWSECommerceService/2006-05-17" ; public BaseObject ( ) { super ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
