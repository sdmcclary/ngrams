<<<<<<< HEAD
public class WalrusReplyQueue { private static Logger LOG = Logger . getLogger ( WalrusReplyQueue . class ) ; private static ReplyCoordinator replies = new ReplyCoordinator ( 3600000 ) ; private static int SC_DECRYPTION_FAILED = 566 ; public void handle ( EucalyptusMessage msg ) { replies . putMessage ( msg ) ; } public void handle ( ExceptionMessage muleMsg ) { try { Object requestMsg = muleMsg . getPayload ( ) ; String requestString = requestMsg . toString ( ) ; EucalyptusMessage msg = ( EucalyptusMessage ) BindingManager . getBinding ( "msgs_eucalyptus_ucsb_edu" ) . fromOM ( requestString ) ; Throwable ex = muleMsg . getException ( ) . getCause ( ) ; EucalyptusMessage errMsg ; String ipAddr = "127.0.0.1" ; List < NetworkInterface > ifaces = null ; try { ifaces = Collections . list ( NetworkInterface . getNetworkInterfaces ( ) ) ; } catch ( SocketException e1 ) { } for ( NetworkInterface iface : ifaces ) { try { if ( ! iface . isLoopback ( ) && ! iface . isVirtual ( ) && iface . isUp ( ) ) { for ( InetAddress iaddr : Collections . list ( iface . getInetAddresses ( ) ) ) { if ( ! iaddr . isSiteLocalAddress ( ) && ! ( iaddr instanceof Inet6Address ) ) { ipAddr = iaddr . getHostAddress ( ) ; break ; } } } } catch ( SocketException e1 ) { } } if ( ex instanceof NoSuchBucketException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( NoSuchBucketException ) ex ) . getBucketName ( ) , "NoSuchBucket" , "The specified bucket was not found" , HttpStatus . SC_NOT_FOUND , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof AccessDeniedException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( AccessDeniedException ) ex ) . getBucketName ( ) , "AccessDenied" , "No U" , HttpStatus . SC_FORBIDDEN , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof NotAuthorizedException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( NotAuthorizedException ) ex ) . getValue ( ) , "Unauthorized" , "No U" , HttpStatus . SC_UNAUTHORIZED , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof BucketAlreadyOwnedByYouException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( BucketAlreadyOwnedByYouException ) ex ) . getBucketName ( ) , "BucketAlreadyOwnedByYou" , "Your previous request to create the named bucket succeeded and you already own it." , HttpStatus . SC_CONFLICT , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof BucketAlreadyExistsException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( BucketAlreadyExistsException ) ex ) . getBucketName ( ) , "BucketAlreadyExists" , "The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again." , HttpStatus . SC_CONFLICT , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof BucketNotEmptyException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( BucketNotEmptyException ) ex ) . getBucketName ( ) , "BucketNotEmpty" , "The bucket you tried to delete is not empty." , HttpStatus . SC_CONFLICT , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof PreconditionFailedException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( PreconditionFailedException ) ex ) . getPrecondition ( ) , "PreconditionFailed" , "At least one of the pre-conditions you specified did not hold." , HttpStatus . SC_PRECONDITION_FAILED , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof NotModifiedException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( NotModifiedException ) ex ) . getPrecondition ( ) , "NotModified" , "Object Not Modified" , HttpStatus . SC_NOT_MODIFIED , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof TooManyBucketsException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( TooManyBucketsException ) ex ) . getBucketName ( ) , "TooManyBuckets" , "You have attempted to create more buckets than allowed." , HttpStatus . SC_BAD_REQUEST , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof EntityTooLargeException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( EntityTooLargeException ) ex ) . getEntityName ( ) , "EntityTooLarge" , "Your proposed upload exceeds the maximum allowed object size." , HttpStatus . SC_BAD_REQUEST , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof NoSuchEntityException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( NoSuchEntityException ) ex ) . getBucketName ( ) , "NoSuchEntity" , "The specified entity was not found" , HttpStatus . SC_NOT_FOUND , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof DecryptionFailedException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( DecryptionFailedException ) ex ) . getValue ( ) , "Decryption Failed" , "Fail" , SC_DECRYPTION_FAILED , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof ImageAlreadyExistsException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( ImageAlreadyExistsException ) ex ) . getValue ( ) , "Image Already Exists" , "Fail" , HttpStatus . SC_CONFLICT , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else if ( ex instanceof NotImplementedException ) { errMsg = new WalrusBucketErrorMessageType ( ( ( NotImplementedException ) ex ) . getValue ( ) , "Not Implemented" , "NA" , HttpStatus . SC_NOT_IMPLEMENTED , msg . getCorrelationId ( ) , ipAddr ) ; errMsg . setCorrelationId ( msg . getCorrelationId ( ) ) ; } else { errMsg = new EucalyptusErrorMessageType ( muleMsg . getComponentName ( ) , msg , ex . getMessage ( ) ) ; } replies . putMessage ( errMsg ) ; } catch ( Exception e ) { LOG . error ( e , e ) ; } } public static EucalyptusMessage getReply ( String msgId ) { EucalyptusMessage msg = null ; msg = replies . getMessage ( msgId ) ; LOG . info ( "walrus got reply to: " + msgId ) ; return msg ; } } 
=======
public class SvgPathData extends AbstractDatatype { protected SvgPathData ( ) { super ( ) ; } private static StringReader reader ; private static StringBuilder context ; private static final int MAX_CONTEXT_LENGTH = 20 ; private void appendToContext ( int i ) { if ( i != - 1 ) { if ( context . length ( ) == MAX_CONTEXT_LENGTH ) { context . deleteCharAt ( 0 ) ; } context . append ( ( char ) i ) ; } } private int current ; @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { reader = new StringReader ( literal . toString ( ) ) ; context = new StringBuilder ( MAX_CONTEXT_LENGTH ) ; try { current = reader . read ( ) ; appendToContext ( current ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } loop : for ( ; ; ) { try { switch ( current ) { case 0xD : case 0xA : case 0x20 : case 0x9 : current = reader . read ( ) ; appendToContext ( current ) ; break ; case 'z' : case 'Z' : current = reader . read ( ) ; appendToContext ( current ) ; break ; case 'm' : checkm ( ) ; break ; case 'M' : checkM ( ) ; break ; case 'l' : checkl ( ) ; break ; case 'L' : checkL ( ) ; break ; case 'h' : checkh ( ) ; break ; case 'H' : checkH ( ) ; break ; case 'v' : checkv ( ) ; break ; case 'V' : checkV ( ) ; break ; case 'c' : checkc ( ) ; break ; case 'C' : checkC ( ) ; break ; case 'q' : checkq ( ) ; break ; case 'Q' : checkQ ( ) ; break ; case 's' : checks ( ) ; break ; case 'S' : checkS ( ) ; break ; case 't' : checkt ( ) ; break ; case 'T' : checkT ( ) ; break ; case 'a' : checka ( ) ; break ; case 'A' : checkA ( ) ; break ; case - 1 : break loop ; default : throw newDatatypeException ( "Expected command but " + "found “" + ( char ) current + "” (context: “" + context . toString ( ) + "”)." ) ; } } catch ( IOException e ) { try { skipSubPath ( ) ; } catch ( IOException ioe ) { throw new RuntimeException ( ioe ) ; } throw new RuntimeException ( e ) ; } } try { skipSpaces ( ) ; if ( current != - 1 ) { throw newDatatypeException ( "Found unexpected character " + "“" + ( char ) current + "”." ) ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } private void checkm ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; checkArg ( 'm' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'm' , "y coordinate" ) ; boolean expectNumber = skipCommaSpaces2 ( ) ; _checkl ( 'm' , expectNumber ) ; } private void checkM ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; checkArg ( 'M' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'M' , "y coordinate" ) ; boolean expectNumber = skipCommaSpaces2 ( ) ; _checkL ( 'M' , expectNumber ) ; } private void checkl ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; _checkl ( 'l' , true ) ; } private void _checkl ( char command , boolean expectNumber ) throws IOException , DatatypeException { for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) { reportUnexpected ( "coordinate pair for " + "“" + command + "” command" , current ) ; skipSubPath ( ) ; } return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( command , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( command , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkL ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; _checkL ( 'L' , true ) ; } private void _checkL ( char command , boolean expectNumber ) throws IOException , DatatypeException { for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) { reportUnexpected ( "coordinate pair for " + "“" + command + "” command" , current ) ; skipSubPath ( ) ; } return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( command , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( command , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkh ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'h' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'h' , "x coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkH ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'H' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'H' , "x coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkv ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'v' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'v' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkV ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'V' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'V' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkc ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'c' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'c' , "x1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'c' , "y1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'c' , "x2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'c' , "y2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'c' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'c' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkC ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'C' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'C' , "x1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'C' , "y1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'C' , "x2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'C' , "y2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'C' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'C' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkq ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'q' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'q' , "x1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'q' , "y1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'q' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'q' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkQ ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'Q' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'Q' , "x1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'Q' , "y1 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'Q' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'Q' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checks ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 's' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 's' , "x2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 's' , "y2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 's' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 's' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkS ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'S' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'S' , "x2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'S' , "y2 coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'S' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'S' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkt ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 't' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 't' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 't' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkT ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'T' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'T' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'T' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checka ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'a' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'a' , "rx radius" ) ; skipCommaSpaces ( ) ; checkArg ( 'a' , "ry radius" ) ; skipCommaSpaces ( ) ; checkArg ( 'a' , "x-axis-rotation" ) ; skipCommaSpaces ( ) ; switch ( current ) { default : reportUnexpected ( "“0” or “1” " + "for large-arc-flag for “a” command" , current ) ; skipSubPath ( ) ; return ; case '0' : case '1' : break ; } current = reader . read ( ) ; appendToContext ( current ) ; skipCommaSpaces ( ) ; switch ( current ) { default : reportUnexpected ( "“0” or “1” " + "for sweep-flag for “a” command" , current ) ; skipSubPath ( ) ; return ; case '0' : case '1' : break ; } current = reader . read ( ) ; appendToContext ( current ) ; skipCommaSpaces ( ) ; checkArg ( 'a' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'a' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkA ( ) throws DatatypeException , IOException { if ( context . length ( ) == 0 ) { appendToContext ( current ) ; } current = reader . read ( ) ; appendToContext ( current ) ; skipSpaces ( ) ; boolean expectNumber = true ; for ( ; ; ) { switch ( current ) { default : if ( expectNumber ) reportNonNumber ( 'A' , current ) ; return ; case '+' : case '-' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break ; } checkArg ( 'A' , "rx radius" ) ; skipCommaSpaces ( ) ; checkArg ( 'A' , "ry radius" ) ; skipCommaSpaces ( ) ; checkArg ( 'A' , "x-axis-rotation" ) ; skipCommaSpaces ( ) ; switch ( current ) { default : reportUnexpected ( "“0” or “1” " + "for large-arc-flag for “A” command" , current ) ; skipSubPath ( ) ; return ; case '0' : case '1' : break ; } current = reader . read ( ) ; appendToContext ( current ) ; skipCommaSpaces ( ) ; switch ( current ) { default : reportUnexpected ( "“0” or “1” " + "for sweep-flag for “A” command" , current ) ; skipSubPath ( ) ; return ; case '0' : case '1' : break ; } current = reader . read ( ) ; appendToContext ( current ) ; skipCommaSpaces ( ) ; checkArg ( 'A' , "x coordinate" ) ; skipCommaSpaces ( ) ; checkArg ( 'A' , "y coordinate" ) ; expectNumber = skipCommaSpaces2 ( ) ; } } private void checkArg ( char command , String arg ) throws DatatypeException , IOException { int mant = 0 ; int mantDig = 0 ; boolean mantPos = true ; boolean mantRead = false ; int exp = 0 ; int expDig = 0 ; int expAdj = 0 ; boolean expPos = true ; switch ( current ) { case '-' : mantPos = false ; case '+' : current = reader . read ( ) ; appendToContext ( current ) ; } m1 : switch ( current ) { default : reportUnexpected ( arg + " for “" + command + "” command" , current ) ; skipSubPath ( ) ; return ; case '.' : break ; case '0' : mantRead = true ; l : for ( ; ; ) { current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break l ; case '.' : case 'e' : case 'E' : break m1 ; default : return ; case '0' : } } case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : mantRead = true ; l : for ( ; ; ) { if ( mantDig < 9 ) { mantDig ++ ; mant = mant * 10 + ( current - '0' ) ; } else { expAdj ++ ; } current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { default : break l ; case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : } } } if ( current == '.' ) { current = reader . read ( ) ; appendToContext ( current ) ; m2 : switch ( current ) { default : case 'e' : case 'E' : if ( ! mantRead ) { reportNonNumber ( command , current ) ; return ; } break ; case '0' : if ( mantDig == 0 ) { l : for ( ; ; ) { current = reader . read ( ) ; appendToContext ( current ) ; expAdj -- ; switch ( current ) { case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break l ; default : if ( ! mantRead ) { return ; } break m2 ; case '0' : } } } case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : l : for ( ; ; ) { if ( mantDig < 9 ) { mantDig ++ ; mant = mant * 10 + ( current - '0' ) ; expAdj -- ; } current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { default : break l ; case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : } } } } switch ( current ) { case 'e' : case 'E' : current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { default : reportNonNumber ( command , current ) ; return ; case '-' : expPos = false ; case '+' : current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { default : reportNonNumber ( command , current ) ; return ; case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : } case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : } en : switch ( current ) { case '0' : l : for ( ; ; ) { current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : break l ; default : break en ; case '0' : } } case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : l : for ( ; ; ) { if ( expDig < 3 ) { expDig ++ ; exp = exp * 10 + ( current - '0' ) ; } current = reader . read ( ) ; appendToContext ( current ) ; switch ( current ) { default : break l ; case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : } } } default : } if ( ! expPos ) { exp = - exp ; } exp += expAdj ; if ( ! mantPos ) { mant = - mant ; } return ; } private void skipSubPath ( ) throws IOException { for ( ; ; ) { switch ( current ) { case - 1 : case 'm' : case 'M' : return ; default : break ; } current = reader . read ( ) ; appendToContext ( current ) ; } } private void skipSpaces ( ) throws IOException { for ( ; ; ) { switch ( current ) { default : return ; case 0x20 : case 0x09 : case 0x0D : case 0x0A : } current = reader . read ( ) ; appendToContext ( current ) ; } } private void skipCommaSpaces ( ) throws IOException { wsp1 : for ( ; ; ) { switch ( current ) { default : break wsp1 ; case 0x20 : case 0x9 : case 0xD : case 0xA : } current = reader . read ( ) ; appendToContext ( current ) ; } if ( current == ',' ) { wsp2 : for ( ; ; ) { switch ( current = reader . read ( ) ) { default : appendToContext ( current ) ; break wsp2 ; case 0x20 : case 0x9 : case 0xA : case 0xD : appendToContext ( current ) ; } } } } private boolean skipCommaSpaces2 ( ) throws IOException { wsp1 : for ( ; ; ) { switch ( current ) { default : break wsp1 ; case 0x20 : case 0x9 : case 0xD : case 0xA : break ; } current = reader . read ( ) ; appendToContext ( current ) ; } if ( current != ',' ) return false ; wsp2 : for ( ; ; ) { switch ( current = reader . read ( ) ) { default : appendToContext ( current ) ; break wsp2 ; case 0x20 : case 0x9 : case 0xD : case 0xA : appendToContext ( current ) ; break ; } } return true ; } private void reportUnexpected ( String expected , int ch ) throws DatatypeException , IOException { if ( ch != - 1 ) { throw newDatatypeException ( "Expected " + expected + " but found “" + ( char ) ch + "” instead " + "(context: “" + context . toString ( ) + "”)." ) ; } else { throw newDatatypeException ( "Expected " + expected + " but value ended " + "(context: “" + context . toString ( ) + "”)." ) ; } } private void reportNonNumber ( char command , int ch ) throws DatatypeException , IOException { if ( ch != - 1 ) { throw newDatatypeException ( "Expected number for “" + command + "” command but found " + "“" + ( char ) ch + "” instead " + "(context: “" + context . toString ( ) + "”)." ) ; } else { throw newDatatypeException ( "Expected number for “" + command + "” command but value ended " + "(context: “" + context . toString ( ) + "”)." ) ; } } @ Override public String getName ( ) { return "SVG path data" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
