<<<<<<< HEAD
public class SwtJavaBuilderConfig extends BuilderConfig { private static final Logger LOGGER = LoggerFactory . getLogger ( SwtJavaBuilderConfig . class ) ; public SwtJavaBuilderConfig ( ) { super ( SWTBackgroundProcessingHandler . getInstance ( ) , DefaultValidationMessageHandler . getInstance ( ) , new ConfirmCommand ( ) ) ; forType ( BuilderBindings . class ) . typeHandler ( JFaceDatabindingHandler . getInstance ( ) ) ; addType ( Button . class , Browser . class , Canvas . class , CBanner . class , CCombo . class , CLabel . class , Combo . class , Composite . class , CoolBar . class , CoolItem . class , CTabFolder . class , CTabItem . class , DateTime . class , Dialog . class , ExpandBar . class , Group . class , Label . class , Link . class , List . class , Menu . class , MenuItem . class , ProgressBar . class , ProgressIndicator . class , Sash . class , SashForm . class , Scale . class , ScrollBar . class , ScrolledComposite . class , Shell . class , Slider . class , Spinner . class , StyledText . class , TabFolder . class , TabItem . class , Table . class , TableColumn . class , TableItem . class , TableCursor . class , Text . class , ToolBar . class , ToolItem . class , Tracker . class , Tray . class , TrayItem . class , Tree . class , TreeItem . class , ViewForm . class ) ; addType ( MigLayout . class , FillLayout . class , FormLayout . class , GridLayout . class , RowLayout . class , StackLayout . class ) ; forType ( Browser . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( Button . class ) . propertyHandler ( ButtonSelectionListenerHandler . getInstance ( ) ) ; forType ( Canvas . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( CCombo . class ) . defaultResize ( DefaultResize . X_AXIS ) ; forType ( Composite . class ) . delay ( Layout . class ) . defaultResize ( DefaultResize . BOTH ) . children ( Widget . class , 0 , Integer . MAX_VALUE ) . children ( Layout . class , 0 , 1 ) ; forType ( Combo . class ) . defaultResize ( DefaultResize . X_AXIS ) ; forType ( CTabFolder . class ) . finishProcessor ( new CTabFolderFinishProcessor ( ) ) ; forType ( CTabItem . class ) . typeAsMethod ( Control . class , "setControl" ) . childrenOverride ( true ) . children ( Control . class , 0 , 1 ) ; forType ( Dialog . class ) . typeHandler ( DialogHandler . getInstance ( ) ) ; forType ( ExpandBar . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( FillLayout . class ) . typeHandler ( FillLayoutHandler . getInstance ( ) ) ; forType ( Font . class ) . valueHandler ( new FontAsValueHandler ( ) ) ; forType ( Group . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( Image . class ) . valueHandler ( ImageAsValueHandler . getInstance ( ) ) ; forType ( List . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( Menu . class ) . children ( MenuItem . class , 0 , Integer . MAX_VALUE ) ; forType ( MenuItem . class ) . typeHandler ( MenuItemTypeHandler . getInstance ( ) ) . propertyHandler ( MenuItemSelectionListenerHandler . getInstance ( ) ) . children ( MenuItem . class , 0 , Integer . MAX_VALUE ) ; forType ( MigLayout . class ) . typeHandler ( MigSWTLayoutHandler . getInstance ( ) ) ; forType ( ProgressBar . class ) . defaultResize ( DefaultResize . X_AXIS ) ; forType ( Sash . class ) . propertyHandler ( SashBoundsHandler . getInstance ( ) ) ; forType ( Scale . class ) . defaultResize ( DefaultResize . X_AXIS ) ; forType ( ScrolledComposite . class ) . defaultResize ( DefaultResize . BOTH ) . finishProcessor ( new ScrolledCompositeFinishProcessor ( ) ) ; forType ( Slider . class ) . defaultResize ( DefaultResize . X_AXIS ) ; forType ( Shell . class ) . typeHandler ( ShellHandler . getInstance ( ) ) ; forType ( StackLayout . class ) . typeHandler ( StackLayoutHandler . getInstance ( ) ) ; forType ( Spinner . class ) . defaultResize ( DefaultResize . X_AXIS ) ; forType ( StyledText . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( Table . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( TabItem . class ) . typeAsMethod ( Control . class , "setControl" ) . localize ( "text" , "toolTipText" ) . children ( Composite . class , 0 , Integer . MAX_VALUE ) ; forType ( Text . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( Tree . class ) . defaultResize ( DefaultResize . BOTH ) ; forType ( Widget . class ) . ignore ( SwtJavaBuilder . STYLE ) . typeHandler ( WidgetTypeHandler . getInstance ( ) ) ; Method method ; try { method = Shell . class . getMethod ( "setMenuBar" , Menu . class ) ; forType ( Shell . class ) . typeAsMethod ( Menu . class , method ) ; } catch ( Exception e ) { LOGGER . error ( e . getMessage ( ) , e ) ; } } @ Override public PropertyChangeSupport createPropertyChangeSupport ( Object source ) { return new org . javabuilders . swt . worker . SWTPropertyChangeSupport ( source , Display . getDefault ( ) ) ; } private static class ConfirmCommand implements ICustomCommand < Boolean > { public Boolean process ( BuildResult result , Object source ) { return MessageDialog . openConfirm ( Display . getCurrent ( ) . getActiveShell ( ) , Builder . getResourceBundle ( ) . getString ( "title.confirmation" ) , Builder . getResourceBundle ( ) . getString ( "question.areYouSure" ) ) ; } } } 
=======
class ChoiceNameClass implements NameClass { private final NameClass nameClass1 ; private final NameClass nameClass2 ; ChoiceNameClass ( NameClass nameClass1 , NameClass nameClass2 ) { this . nameClass1 = nameClass1 ; this . nameClass2 = nameClass2 ; } public boolean contains ( Name name ) { return ( nameClass1 . contains ( name ) || nameClass2 . contains ( name ) ) ; } public int containsSpecificity ( Name name ) { return Math . max ( nameClass1 . containsSpecificity ( name ) , nameClass2 . containsSpecificity ( name ) ) ; } public int hashCode ( ) { return nameClass1 . hashCode ( ) ^ nameClass2 . hashCode ( ) ; } public boolean equals ( Object obj ) { if ( obj == null || ! ( obj instanceof ChoiceNameClass ) ) return false ; ChoiceNameClass other = ( ChoiceNameClass ) obj ; return ( nameClass1 . equals ( other . nameClass1 ) && nameClass2 . equals ( other . nameClass2 ) ) ; } public void accept ( NameClassVisitor visitor ) { visitor . visitChoice ( nameClass1 , nameClass2 ) ; } public boolean isOpen ( ) { return nameClass1 . isOpen ( ) || nameClass2 . isOpen ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
