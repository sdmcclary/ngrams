<<<<<<< HEAD
public class ControlConstraint { private static final Pattern pattern = Pattern . compile ( "^([\\<\\|\\>\\^\\-/]*)?(\".*\")?(\\$?[a-zA-Z0-9_]+)?(\\+\\*)?(\\+[0-9]+)?(\\+\\*)?(\\+[0-9]+)?(=[0-9])?(x*y*)?([\\<\\|\\>\\^\\-/]*)?$" ) ; public static final char HALIGN_RIGHT = '>' ; public static final char HALIGN_CENTER = '|' ; public static final char HALIGN_LEFT = '<' ; public static final char VALIGN_MIDDLE = '-' ; public static final char VALIGN_BOTTOM = '/' ; public static final char VALIGN_TOP = '^' ; public final static char SIZE_GROUP_INDICATOR = '=' ; public final static String SIZE_GROUP_X_INDICATOR = "x" ; public final static String SIZE_GROUP_Y_INDICATOR = "y" ; public static final char WIDTH_MAX = '>' ; public static final char WIDTH_PREF = '|' ; public static final char WIDTH_MIN = '<' ; public final static char QUOTE = '"' ; private final static List < String > postIdentifiers = new ArrayList < String > ( ) ; static { postIdentifiers . add ( String . valueOf ( SIZE_GROUP_INDICATOR ) ) ; postIdentifiers . add ( String . valueOf ( LayoutCell . SPAN_INDICATOR ) ) ; } private String controlName = "" ; @ SuppressWarnings ( "unused" ) private String constraintText = "" ; private int hSpan = 1 ; private int vSpan = 1 ; private HAlign hAlign = HAlign . DEFAULT ; private VAlign vAlign = VAlign . DEFAULT ; private Integer sizeGroup = null ; private boolean sizeGroupX = false ; private boolean sizeGroupY = false ; private boolean isMaxHSpan = false ; private boolean isMaxVSpan = false ; private Size hSize = Size . DEFAULT ; private Size vSize = Size . DEFAULT ; public ControlConstraint ( String constraintText ) throws LayoutException { this . constraintText = constraintText ; Matcher m = pattern . matcher ( constraintText ) ; if ( m . find ( ) ) { if ( m . group ( 1 ) != null ) { char [ ] chars = m . group ( 1 ) . toCharArray ( ) ; for ( char c : chars ) { switch ( c ) { case HALIGN_LEFT : hAlign = HAlign . LEFT ; break ; case HALIGN_CENTER : hAlign = HAlign . CENTER ; break ; case HALIGN_RIGHT : hAlign = HAlign . RIGHT ; break ; case VALIGN_TOP : vAlign = VAlign . TOP ; break ; case VALIGN_MIDDLE : vAlign = VAlign . MIDDLE ; break ; case VALIGN_BOTTOM : vAlign = VAlign . BOTTOM ; break ; } } } if ( m . group ( 2 ) != null ) { this . controlName = m . group ( 2 ) ; } if ( m . group ( 3 ) != null ) { this . controlName = m . group ( 3 ) ; } if ( m . group ( 4 ) != null ) { this . setMaxHSpan ( true ) ; } if ( m . group ( 5 ) != null ) { this . setHSpan ( Integer . parseInt ( m . group ( 5 ) . substring ( 1 ) ) ) ; } if ( m . group ( 6 ) != null ) { this . setMaxVSpan ( true ) ; } if ( m . group ( 7 ) != null ) { this . setVSpan ( Integer . parseInt ( m . group ( 7 ) . substring ( 1 ) ) ) ; } if ( m . group ( 8 ) != null ) { this . setSizeGroup ( Integer . parseInt ( m . group ( 8 ) . substring ( 1 ) ) ) ; } if ( SIZE_GROUP_X_INDICATOR . equals ( m . group ( 9 ) ) ) { sizeGroupX = true ; } else if ( SIZE_GROUP_Y_INDICATOR . equals ( m . group ( 9 ) ) ) { sizeGroupY = true ; } if ( m . group ( 10 ) != null ) { char [ ] chars = m . group ( 10 ) . toCharArray ( ) ; for ( char c : chars ) { switch ( c ) { case HALIGN_LEFT : hSize = Size . MIN ; break ; case HALIGN_CENTER : hSize = Size . PREF ; break ; case HALIGN_RIGHT : hSize = Size . MAX ; break ; case VALIGN_TOP : vSize = Size . MIN ; break ; case VALIGN_MIDDLE : vSize = Size . PREF ; break ; case VALIGN_BOTTOM : vSize = Size . MAX ; break ; } } } } else { throw new LayoutException ( "Unable to parse {0} control constraint" , constraintText ) ; } } public String getControlName ( ) { return controlName ; } public void setControlName ( String controlName ) { this . controlName = controlName ; } public int getHSpan ( ) { return hSpan ; } public void setHSpan ( int spanHorizontal ) { this . hSpan = spanHorizontal ; } public int getVSpan ( ) { return vSpan ; } public void setVSpan ( int spanVertical ) { this . vSpan = spanVertical ; } public HAlign getHAlign ( ) { return hAlign ; } public void setHAlign ( HAlign align ) { hAlign = align ; } public VAlign getVAlign ( ) { return vAlign ; } public void setVAlign ( VAlign align ) { vAlign = align ; } @ Override public String toString ( ) { return String . format ( "Name: %s, hAlign: %s, vAlign: %s, hSpan: %s, vSpan: %s" , controlName , hAlign , vAlign , hSpan , vSpan ) ; } @ Override public int hashCode ( ) { return controlName . hashCode ( ) ; } public Integer getSizeGroup ( ) { return sizeGroup ; } public void setSizeGroup ( Integer sizeGroup ) { this . sizeGroup = sizeGroup ; } public boolean isMaxHSpan ( ) { return isMaxHSpan ; } public void setMaxHSpan ( boolean isMaxHSpan ) { this . isMaxHSpan = isMaxHSpan ; } public boolean isMaxVSpan ( ) { return isMaxVSpan ; } public void setMaxVSpan ( boolean isMaxVSpan ) { this . isMaxVSpan = isMaxVSpan ; } public boolean isSizeGroupX ( ) { return sizeGroupX ; } public boolean isSizeGroupY ( ) { return sizeGroupY ; } public Size getHSize ( ) { return hSize ; } public void setHSize ( Size hSize ) { this . hSize = hSize ; } public Size getVSize ( ) { return vSize ; } public void setVSize ( Size vSize ) { this . vSize = vSize ; } } 
=======
class BuiltinDatatypeBuilder implements DatatypeBuilder { private final Datatype dt ; BuiltinDatatypeBuilder ( Datatype dt ) { this . dt = dt ; } public void addParameter ( String name , String value , ValidationContext context ) throws DatatypeException { throw new DatatypeException ( SchemaBuilderImpl . localizer . message ( "builtin_param" ) ) ; } public Datatype createDatatype ( ) { return dt ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
