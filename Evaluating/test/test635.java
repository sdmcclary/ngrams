public class EditorFileContext implements IFileService { private IFileService _fileService ; public EditorFileContext ( ) { this . _fileService = null ; } public EditorFileContext ( IFileService fileContext ) { this . _fileService = fileContext ; } public IFileService getFileContext ( ) { return this . _fileService ; } public void setFileContext ( IFileService fileContext ) { this . _fileService = fileContext ; } public void activateForEditing ( ) { if ( this . _fileService != null ) { this . _fileService . activateForEditing ( ) ; } } public void addDelayedFileListener ( IFileContextListener fileListener ) { if ( this . _fileService != null ) { this . _fileService . addDelayedFileListener ( fileListener ) ; } } public void addErrorListener ( IFileErrorListener listener ) { if ( this . _fileService != null ) { this . _fileService . addErrorListener ( listener ) ; } } public void addFileListener ( IFileContextListener fileListener ) { if ( this . _fileService != null ) { this . _fileService . addFileListener ( fileListener ) ; } } public void connectSourceProvider ( IFileSourceProvider sourceProvider ) { if ( this . _fileService != null ) { this . _fileService . connectSourceProvider ( sourceProvider ) ; } } public void deactivateForEditing ( ) { if ( this . _fileService != null ) { this . _fileService . deactivateForEditing ( ) ; } } public void disconnectSourceProvider ( IFileSourceProvider sourceProvider ) { if ( this . _fileService != null ) { this . _fileService . disconnectSourceProvider ( sourceProvider ) ; } } public IFileError [ ] getFileErrors ( ) { IFileError [ ] result = null ; if ( this . _fileService != null ) { result = this . _fileService . getFileErrors ( ) ; } return result ; } public IFileLanguageService getLanguageService ( String mimeType ) { IFileLanguageService result = null ; if ( this . _fileService != null ) { result = this . _fileService . getLanguageService ( mimeType ) ; } return result ; } public LexemeList getLexemeList ( ) { LexemeList result = null ; if ( this . _fileService != null ) { result = this . _fileService . getLexemeList ( ) ; } return result ; } public IParseState getParseState ( ) { IParseState result = null ; if ( this . _fileService != null ) { result = this . _fileService . getParseState ( ) ; } return result ; } public ITypedRegion [ ] getPartitions ( ) { ITypedRegion [ ] result = null ; if ( this . _fileService != null ) { result = this . _fileService . getPartitions ( ) ; } return result ; } public ITypedRegion getPartitionAtOffset ( int offset ) { ITypedRegion result = null ; if ( this . _fileService != null ) { result = this . _fileService . getPartitionAtOffset ( offset ) ; } return result ; } public String getSource ( ) { String result = null ; if ( this . _fileService != null ) { result = this . _fileService . getSource ( ) ; } return result ; } public boolean isConnected ( ) { boolean result = false ; if ( this . _fileService != null ) { result = this . _fileService . isConnected ( ) ; } return result ; } public void removeDelayedFileListener ( IFileContextListener fileListener ) { if ( this . _fileService != null ) { this . _fileService . removeDelayedFileListener ( fileListener ) ; } } public void removeErrorListener ( IFileErrorListener listener ) { if ( this . _fileService != null ) { this . _fileService . removeErrorListener ( listener ) ; } } public void removeFileListener ( IFileContextListener fileListener ) { if ( this . _fileService != null ) { this . _fileService . removeFileListener ( fileListener ) ; } } public void setFileErrors ( IFileError [ ] markers ) { if ( this . _fileService != null ) { this . _fileService . setFileErrors ( markers ) ; } } public void updateContent ( String insertedSource , int offset , int removeLength ) { if ( this . _fileService != null ) { this . _fileService . updateContent ( insertedSource , offset , removeLength ) ; } } public String getDefaultLanguage ( ) { String result = null ; if ( this . _fileService != null ) { result = this . _fileService . getDefaultLanguage ( ) ; } return result ; } public void fireContentChangedEvent ( String insertedSource , int offset , int removeLength ) { if ( this . _fileService != null ) { this . _fileService . fireContentChangedEvent ( insertedSource , offset , removeLength ) ; } } public void forceContentChangedEvent ( ) { if ( this . _fileService != null ) { this . _fileService . forceContentChangedEvent ( ) ; } } public void addLongDelayedFileListener ( IFileContextListener fileListener ) { if ( this . _fileService != null ) { this . _fileService . addLongDelayedFileListener ( fileListener ) ; } } public void removeLongDelayedFileListener ( IFileContextListener fileListener ) { if ( this . _fileService != null ) { this . _fileService . removeLongDelayedFileListener ( fileListener ) ; } } public IFileContextListener [ ] getFileListeners ( ) { IFileContextListener [ ] result = null ; if ( this . _fileService != null ) { result = this . _fileService . getFileListeners ( ) ; } return result ; } public IFileContextListener [ ] getDelayedFileListeners ( ) { IFileContextListener [ ] result = null ; if ( this . _fileService != null ) { result = this . _fileService . getDelayedFileListeners ( ) ; } return result ; } public IFileContextListener [ ] getLongDelayedFileListeners ( ) { IFileContextListener [ ] result = null ; if ( this . _fileService != null ) { result = this . _fileService . getLongDelayedFileListeners ( ) ; } return result ; } public boolean hasFileListenerAdded ( IFileContextListener listener ) { boolean result = false ; if ( this . _fileService != null ) { result = this . _fileService . hasFileListenerAdded ( listener ) ; } return result ; } public boolean hasDelayedFileListenerAdded ( IFileContextListener listener ) { boolean result = false ; if ( this . _fileService != null ) { result = this . _fileService . hasDelayedFileListenerAdded ( listener ) ; } return result ; } public boolean hasLongDelayedFileListenerAdded ( IFileContextListener listener ) { boolean result = false ; if ( this . _fileService != null ) { result = this . _fileService . hasLongDelayedFileListenerAdded ( listener ) ; } return result ; } public IFileSourceProvider getSourceProvider ( ) { IFileSourceProvider result = null ; if ( this . _fileService != null ) { result = this . _fileService . getSourceProvider ( ) ; } return result ; } } 