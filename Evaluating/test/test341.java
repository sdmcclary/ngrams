<<<<<<< HEAD
public class CurlResource { private String _requestMethod = "GET" ; private int _responseCode ; private String _URL ; private int _port = - 1 ; private String _username ; private String _password ; private boolean _isProxying = false ; private String _proxyUsername ; private String _proxyPassword ; private String _proxyURL ; private String _proxyType = "HTTP" ; private int _proxyPort = - 1 ; private boolean _isFollowingRedirects = true ; private boolean _isReturningBody = true ; private boolean _isReturningData = false ; private boolean _isReturningHeader = false ; private boolean _isVerifySSLPeer = true ; private boolean _isVerifySSLCommonName = true ; private boolean _isVerifySSLHostname = true ; private boolean _ifModifiedSince = true ; private String _modifiedTime ; private int _errorCode = CurlModule . CURLE_OK ; private String _error = "" ; private boolean _failOnError = false ; private boolean _isVerbose = false ; private int _readTimeout = - 1 ; private int _connectTimeout = - 1 ; private HashMap < String , String > _requestProperties = new HashMap < String , String > ( ) ; private StringValue _header ; private StringValue _body ; private Value _postBody ; private String _contentType ; private int _contentLength ; private String _cookie ; private String _cookieFilename ; private BinaryOutput _outputFile ; private BinaryOutput _outputHeaderFile ; private BinaryInput _uploadFile ; private int _uploadFileSize ; private Callback _headerCallback ; private Callback _passwordCallback ; private Callback _readCallback ; private Callback _writeCallback ; public CurlResource ( ) { } public Value getBody ( ) { return _body ; } public void setBody ( StringValue body ) { _body = body ; } public int getConnectTimeout ( ) { return _connectTimeout ; } public void setConnectTimeout ( int timeout ) { _connectTimeout = timeout ; } public int getContentLength ( ) { return _contentLength ; } public void setContentLength ( int length ) { _contentLength = length ; } public String getContentType ( ) { return _contentType ; } public void setContentType ( String type ) { _contentType = type ; } public void setCookie ( String cookie ) { _cookie = cookie ; } public void setCookieFilename ( String filename ) { _cookieFilename = filename ; } public String getError ( ) { return _error ; } public void setError ( String error ) { _error = error ; } public int getErrorCode ( ) { return _errorCode ; } public void setErrorCode ( int code ) { _errorCode = code ; } public void setFailOnError ( boolean failOnError ) { _failOnError = failOnError ; } public Value getHeader ( ) { return _header ; } public void setHeader ( StringValue header ) { _header = header ; } public Callback getHeaderCallback ( ) { return _headerCallback ; } public void setHeaderCallback ( Callback callback ) { _headerCallback = callback ; } public void setIfModifiedSince ( boolean option ) { _ifModifiedSince = option ; } public boolean getIsFollowingRedirects ( ) { return _isFollowingRedirects ; } public void setIsFollowingRedirects ( boolean followRedirects ) { _isFollowingRedirects = followRedirects ; } public boolean getIsProxying ( ) { return _isProxying ; } public void setIsProxying ( boolean proxy ) { _isProxying = proxy ; } public void setIsReturningBody ( boolean returnBody ) { _isReturningBody = returnBody ; } public void setIsReturningData ( boolean returnData ) { _isReturningData = returnData ; } public void setIsReturningHeader ( boolean returnHeader ) { _isReturningHeader = returnHeader ; } public boolean getIsVerbose ( ) { return _isVerbose ; } public void setIsVerbose ( boolean verbose ) { _isVerbose = verbose ; } public boolean getIsVerifySSLPeer ( ) { return _isVerifySSLPeer ; } public void setIsVerifySSLPeer ( boolean isVerify ) { _isVerifySSLPeer = isVerify ; } public boolean getIsVerifySSLCommonName ( ) { return _isVerifySSLCommonName ; } public void setIsVerifySSLCommonName ( boolean isVerify ) { _isVerifySSLCommonName = isVerify ; } public boolean getIsVerifySSLHostname ( ) { return _isVerifySSLHostname ; } public void setIsVerifySSLHostname ( boolean isVerify ) { _isVerifySSLHostname = isVerify ; } public void setModifiedTime ( String time ) { _modifiedTime = time ; } public void setOutputFile ( BinaryOutput file ) { _outputFile = file ; } public void setOutputHeaderFile ( BinaryOutput file ) { _outputHeaderFile = file ; } public String getPassword ( ) { return _password ; } public void setPassword ( String pwd ) { _password = pwd ; } public void setPasswordCallback ( Callback callback ) { _passwordCallback = callback ; } public int getPort ( ) { return _port ; } public void setPort ( int port ) { _port = port ; } public Value getPostBody ( ) { return _postBody ; } public void setPostBody ( Value body ) { _postBody = body ; } public String getProxyPassword ( ) { return _proxyPassword ; } public void setProxyPassword ( String pass ) { _proxyPassword = pass ; } public int getProxyPort ( ) { return _proxyPort ; } public void setProxyPort ( int port ) { _proxyPort = port ; } public String getProxyType ( ) { return _proxyType ; } public void setProxyType ( String type ) { _proxyType = type ; } public String getProxyURL ( ) { return _proxyURL ; } public void setProxyURL ( String proxy ) { _proxyURL = proxy ; } public String getProxyUsername ( ) { return _proxyUsername ; } public void setProxyUsername ( String user ) { _proxyUsername = user ; } public Callback getReadCallback ( ) { return _readCallback ; } public void setReadCallback ( Callback callback ) { _readCallback = callback ; } public int getReadTimeout ( ) { return _readTimeout ; } public void setReadTimeout ( int timeout ) { _readTimeout = timeout ; } public String getRequestMethod ( ) { return _requestMethod ; } public void setRequestMethod ( String method ) { _requestMethod = method ; } public HashMap < String , String > getRequestPropertiesMap ( ) { return _requestProperties ; } public Value getRequestProperties ( Env env ) { StringValue bb = env . createBinaryBuilder ( ) ; for ( Map . Entry < String , String > entry : _requestProperties . entrySet ( ) ) { bb . append ( entry . getKey ( ) ) ; bb . append ( ": " ) ; bb . append ( entry . getValue ( ) ) ; bb . append ( "\r\n" ) ; } bb . append ( "\r\n" ) ; return bb ; } public void setRequestProperty ( String key , String value ) { _requestProperties . put ( key , value ) ; } public int getResponseCode ( ) { return _responseCode ; } public void setResponseCode ( int code ) { _responseCode = code ; } public BinaryInput getUploadFile ( ) { return _uploadFile ; } public void setUploadFile ( BinaryInput file ) { _uploadFile = file ; } public int getUploadFileSize ( ) { return _uploadFileSize ; } public void setUploadFileSize ( int size ) { _uploadFileSize = size ; } public String getURL ( ) { return _URL ; } public void setURL ( String url ) { _URL = url ; } public String getUsername ( ) { return _username ; } public void setUsername ( String user ) { _username = user ; } public void setWriteCallback ( Callback callback ) { _writeCallback = callback ; } public void removeRequestProperty ( String key ) { _requestProperties . remove ( key ) ; } private void init ( ) { _error = null ; _errorCode = CurlModule . CURLE_OK ; if ( _modifiedTime != null ) { if ( _ifModifiedSince ) { removeRequestProperty ( "If-Unmodified-Since" ) ; setRequestProperty ( "If-Modified-Since" , _modifiedTime ) ; } else { removeRequestProperty ( "If-Modified-Since" ) ; setRequestProperty ( "If-Unmodified-Since" , _modifiedTime ) ; } } if ( _cookie != null ) setRequestProperty ( "Cookie" , _cookie ) ; else removeRequestProperty ( "Cookie" ) ; } public Value execute ( Env env ) { init ( ) ; HttpRequest httpRequest = HttpRequest . getRequest ( this ) ; env . addCleanup ( httpRequest ) ; if ( ! httpRequest . execute ( env ) ) return BooleanValue . FALSE ; if ( _cookie != null && _cookieFilename != null ) saveCookie ( env ) ; return getReturnValue ( env ) ; } private Value getReturnValue ( Env env ) { StringValue data ; if ( _responseCode == HttpURLConnection . HTTP_NOT_MODIFIED || _responseCode == HttpURLConnection . HTTP_PRECON_FAILED || ( _failOnError && _responseCode >= 400 ) ) { if ( _isReturningHeader ) data = _header ; else return BooleanValue . TRUE ; } else { StringValue bb = env . createBinaryBuilder ( ) ; if ( _isReturningHeader ) bb . append ( _header ) ; if ( _isReturningBody ) bb . append ( _body ) ; data = bb ; } if ( _isReturningData ) return data ; if ( _outputHeaderFile != null ) { FileModule . fwrite ( env , _outputHeaderFile , _header . toInputStream ( ) , Integer . MAX_VALUE ) ; } if ( _outputFile != null ) { FileModule . fwrite ( env , _outputFile , data . toInputStream ( ) , Integer . MAX_VALUE ) ; } else { env . print ( data ) ; } return BooleanValue . TRUE ; } private void saveCookie ( Env env ) { WriteStream out = null ; try { Path path = env . getPwd ( ) . lookup ( _cookieFilename ) ; out = path . openWrite ( ) ; int len = _cookie . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { out . write ( ( byte ) _cookie . charAt ( i ) ) ; } } catch ( IOException e ) { throw new QuercusModuleException ( e ) ; } finally { try { if ( out != null ) out . close ( ) ; } catch ( IOException e ) { } } } public void close ( ) { } protected boolean hasError ( ) { return _errorCode != CurlModule . CURLE_OK ; } public CurlResource clone ( ) { CurlResource curl = new CurlResource ( ) ; curl . setBody ( _body ) ; curl . setConnectTimeout ( _connectTimeout ) ; curl . setContentLength ( _contentLength ) ; curl . setContentType ( _contentType ) ; curl . setCookie ( _cookie ) ; curl . setCookieFilename ( _cookieFilename ) ; curl . setError ( _error ) ; curl . setErrorCode ( _errorCode ) ; curl . setFailOnError ( _failOnError ) ; curl . setHeaderCallback ( _headerCallback ) ; curl . setHeader ( _header ) ; curl . setIsFollowingRedirects ( _isFollowingRedirects ) ; curl . setIfModifiedSince ( _ifModifiedSince ) ; curl . setIsProxying ( _isProxying ) ; curl . setIsReturningBody ( _isReturningBody ) ; curl . setIsReturningData ( _isReturningData ) ; curl . setIsReturningHeader ( _isReturningHeader ) ; curl . setIsVerbose ( _isVerbose ) ; curl . setModifiedTime ( _modifiedTime ) ; curl . setOutputFile ( _outputFile ) ; curl . setOutputHeaderFile ( _outputHeaderFile ) ; curl . setPassword ( _password ) ; curl . setPasswordCallback ( _passwordCallback ) ; curl . setPort ( _port ) ; curl . setPostBody ( _postBody ) ; curl . setProxyPassword ( _proxyPassword ) ; curl . setProxyPort ( _proxyPort ) ; curl . setProxyType ( _proxyType ) ; curl . setProxyURL ( _proxyURL ) ; curl . setProxyUsername ( _proxyUsername ) ; curl . setReadCallback ( _readCallback ) ; curl . setReadTimeout ( _readTimeout ) ; curl . setRequestMethod ( _requestMethod ) ; for ( Map . Entry < String , String > entry : _requestProperties . entrySet ( ) ) { curl . setRequestProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; } curl . setResponseCode ( _responseCode ) ; curl . setUploadFile ( _uploadFile ) ; curl . setUploadFileSize ( _uploadFileSize ) ; curl . setURL ( _URL ) ; curl . setUsername ( _username ) ; curl . setWriteCallback ( _writeCallback ) ; return curl ; } public String toString ( ) { return "CurlResource[" + _requestMethod + "]" ; } } 
=======
class ValidatorImpl extends DefaultHandler implements Validator , Path , PatternManager , ErrorContext { private final Constraint constraint ; private final Stack openElements = new Stack ( ) ; private final Stack valueHandlers = new Stack ( ) ; private final Stack activePatterns = new Stack ( ) ; private final AttributePath attributePath = new AttributePath ( ) ; private Locator locator ; private final ErrorHandler eh ; private final Localizer localizer = new Localizer ( ValidatorImpl . class ) ; private static class WrappedSAXException extends RuntimeException { final SAXException exception ; WrappedSAXException ( SAXException exception ) { this . exception = exception ; } } static class ActivePattern { final int rootDepth ; final Pattern pattern ; final SelectionHandler handler ; ActivePattern ( int rootDepth , Pattern pattern , SelectionHandler handler ) { this . rootDepth = rootDepth ; this . pattern = pattern ; this . handler = handler ; } } static class OpenElement { final String namespaceUri ; final String localName ; int nActivePatterns ; int nValueHandlers ; OpenElement ( String namespaceUri , String localName ) { this . namespaceUri = namespaceUri ; this . localName = localName ; } } class AttributePath implements Path { private Attributes atts ; private int attIndex ; void set ( Attributes atts , int attIndex ) { this . atts = atts ; this . attIndex = attIndex ; } public boolean isAttribute ( ) { return true ; } public int length ( ) { return ValidatorImpl . this . length ( ) + 1 ; } public String getLocalName ( int i ) { if ( i == openElements . size ( ) ) return atts . getLocalName ( attIndex ) ; return ValidatorImpl . this . getLocalName ( i ) ; } public String getNamespaceUri ( int i ) { if ( i == openElements . size ( ) ) return atts . getURI ( attIndex ) ; return ValidatorImpl . this . getNamespaceUri ( i ) ; } } ValidatorImpl ( Constraint constraint , PropertyMap properties ) { this . constraint = constraint ; this . eh = properties . get ( ValidateProperty . ERROR_HANDLER ) ; } public ContentHandler getContentHandler ( ) { return this ; } public DTDHandler getDTDHandler ( ) { return null ; } public void reset ( ) { openElements . setSize ( 0 ) ; valueHandlers . setSize ( 0 ) ; activePatterns . setSize ( 0 ) ; locator = null ; } public int length ( ) { return openElements . size ( ) ; } public String getLocalName ( int i ) { return ( ( OpenElement ) openElements . elementAt ( i ) ) . localName ; } public String getNamespaceUri ( int i ) { return ( ( OpenElement ) openElements . elementAt ( i ) ) . namespaceUri ; } public boolean isAttribute ( ) { return false ; } public void registerPattern ( Pattern pattern , SelectionHandler handler ) { activePatterns . push ( new ActivePattern ( openElements . size ( ) , pattern , handler ) ) ; ( ( OpenElement ) openElements . peek ( ) ) . nActivePatterns += 1 ; } public void registerValueHandler ( ValueHandler handler ) { valueHandlers . push ( handler ) ; ( ( OpenElement ) openElements . peek ( ) ) . nValueHandlers += 1 ; } public void setDocumentLocator ( Locator locator ) { this . locator = locator ; } public void startDocument ( ) throws SAXException { if ( locator == null ) { LocatorImpl tem = new LocatorImpl ( ) ; tem . setLineNumber ( - 1 ) ; tem . setColumnNumber ( - 1 ) ; locator = tem ; } openElements . push ( new OpenElement ( "" , "#root" ) ) ; try { constraint . activate ( this ) ; } catch ( WrappedSAXException e ) { throw e . exception ; } } public void endDocument ( ) throws SAXException { try { popOpenElement ( ) ; } catch ( WrappedSAXException e ) { throw e . exception ; } } public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws SAXException { try { openElements . push ( new OpenElement ( uri , localName ) ) ; for ( int i = 0 , len = valueHandlers . size ( ) ; i < len ; i ++ ) ( ( ValueHandler ) valueHandlers . elementAt ( i ) ) . tag ( this ) ; for ( int i = 0 , len = activePatterns . size ( ) ; i < len ; i ++ ) { ActivePattern ap = ( ActivePattern ) activePatterns . elementAt ( i ) ; if ( ap . pattern . matches ( this , ap . rootDepth ) ) ap . handler . selectElement ( this , this , this ) ; } int nActivePatterns = activePatterns . size ( ) ; for ( int i = 0 , len = attributes . getLength ( ) ; i < len ; i ++ ) { attributePath . set ( attributes , i ) ; for ( int j = 0 ; j < nActivePatterns ; j ++ ) { ActivePattern ap = ( ActivePattern ) activePatterns . elementAt ( j ) ; if ( ap . pattern . matches ( attributePath , ap . rootDepth ) ) ap . handler . selectAttribute ( this , attributePath , attributes . getValue ( i ) ) ; } } } catch ( WrappedSAXException e ) { throw e . exception ; } } public void endElement ( String uri , String localName , String qName ) throws SAXException { try { popOpenElement ( ) ; } catch ( WrappedSAXException e ) { throw e . exception ; } } public void characters ( char ch [ ] , int start , int length ) throws SAXException { try { for ( int i = 0 , len = valueHandlers . size ( ) ; i < len ; i ++ ) ( ( ValueHandler ) valueHandlers . elementAt ( i ) ) . characters ( this , ch , start , length ) ; } catch ( WrappedSAXException e ) { throw e . exception ; } } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { characters ( ch , start , length ) ; } private void popOpenElement ( ) { OpenElement top = ( OpenElement ) openElements . pop ( ) ; for ( int i = 0 ; i < top . nValueHandlers ; i ++ ) { ValueHandler h = ( ValueHandler ) valueHandlers . pop ( ) ; h . valueComplete ( this ) ; } for ( int i = 0 ; i < top . nActivePatterns ; i ++ ) { ActivePattern ap = ( ActivePattern ) activePatterns . pop ( ) ; ap . handler . selectComplete ( this ) ; } } public void error ( Locator locator , String key ) { if ( locator == null ) locator = this . locator ; try { eh . error ( new SAXParseException ( localizer . message ( key ) , locator ) ) ; } catch ( SAXException e ) { throw new WrappedSAXException ( e ) ; } } public void error ( Locator locator , String key , String arg ) { if ( locator == null ) locator = this . locator ; try { eh . error ( new SAXParseException ( localizer . message ( key , arg ) , locator ) ) ; } catch ( SAXException e ) { throw new WrappedSAXException ( e ) ; } } public Locator saveLocator ( ) { return new LocatorImpl ( locator ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
