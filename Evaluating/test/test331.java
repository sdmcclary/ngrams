public class CtypeModule extends AbstractQuercusModule { public String [ ] getLoadedExtensions ( ) { return new String [ ] { "ctype" } ; } public static boolean ctype_alnum ( Value value ) { if ( value instanceof LongValue ) return isalnum ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isalnum ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_alpha ( Value value ) { if ( value instanceof LongValue ) return isalpha ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isalpha ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_cntrl ( Value value ) { if ( value instanceof LongValue ) return iscntrl ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! iscntrl ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_digit ( Value value ) { if ( value instanceof LongValue ) return isdigit ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isdigit ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_graph ( Value value ) { if ( value instanceof LongValue ) return isgraph ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isgraph ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_lower ( Value value ) { if ( value instanceof LongValue ) return islower ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! islower ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_print ( Value value ) { if ( value instanceof LongValue ) return isprint ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isprint ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_punct ( Value value ) { if ( value instanceof LongValue ) return ispunct ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! ispunct ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_space ( Value value ) { if ( value instanceof LongValue ) return isspace ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isspace ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_upper ( Value value ) { if ( value instanceof LongValue ) return isupper ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isupper ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean ctype_xdigit ( Value value ) { if ( value instanceof LongValue ) return isxdigit ( value . toInt ( ) ) ; else if ( value instanceof StringValue ) { String string = value . toString ( ) ; if ( string . length ( ) == 0 ) return false ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! isxdigit ( string . charAt ( i ) ) ) return false ; } return true ; } else return false ; } public static boolean isalnum ( int ch ) { return ( 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '0' <= ch && ch <= '9' ) ; } public static boolean isalpha ( int ch ) { return ( 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' ) ; } public static boolean iscntrl ( int ch ) { return ( 0 <= ch && ch <= 31 || ch == 127 ) ; } public static boolean isdigit ( int ch ) { return ( '0' <= ch && ch <= '9' ) ; } public static boolean isgraph ( int ch ) { return ( '!' <= ch && ch <= '~' ) ; } public static boolean islower ( int ch ) { return ( 'a' <= ch && ch <= 'z' ) ; } public static boolean isprint ( int ch ) { return ( ' ' <= ch && ch <= '~' ) ; } public static boolean ispunct ( int ch ) { return isprint ( ch ) && ! isspace ( ch ) && ! isalnum ( ch ) ; } public static boolean isspace ( int ch ) { return ch == ' ' || 9 <= ch && ch <= 13 ; } public static boolean isupper ( int ch ) { return ( 'A' <= ch && ch <= 'Z' ) ; } public static boolean isxdigit ( int ch ) { return ( ( ch >= '0' && ch <= '9' ) || ( ch >= 'a' && ch <= 'f' ) || ( ch >= 'A' && ch <= 'F' ) ) ; } } 