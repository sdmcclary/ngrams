abstract class AbstractReport extends JPanel implements IReport { public static final String ACTION_POST_TO_BLOG = "post to blog" ; public static final String ACTION_MARK_AS_READ = "mark as read" ; public static final String ACTION_MARK_AS_UNREAD = "mark as unread" ; public static final String ACTION_DELETE = "delete" ; public static final String ACTION_BROWSE = "browse" ; private volatile boolean initialized ; private volatile boolean laidOut ; protected IClickCallback clickCallback ; public void setClickCallback ( IClickCallback callback ) { clickCallback = callback ; } public final synchronized void initializeData ( IReportDataProvider provider ) { if ( initialized ) return ; doInitializeData ( provider ) ; initialized = true ; } public boolean isDataInitialized ( ) { return initialized ; } protected abstract void doInitializeData ( IReportDataProvider provider ) ; public final synchronized void layoutView ( ) { if ( ! initialized ) throw new IllegalStateException ( "Not initialized by initializeData()" ) ; if ( laidOut ) return ; doLayoutView ( ) ; laidOut = true ; } protected abstract void doLayoutView ( ) ; public synchronized void reset ( ) { initialized = false ; laidOut = false ; } @ Override public String toString ( ) { return getReportName ( ) ; } public JComponent getReportPage ( ) { return this ; } protected Map < String , Action > getGuideActionsMap ( IGuide guide ) { Map < String , Action > actions = new Hashtable < String , Action > ( ) ; actions . put ( ACTION_MARK_AS_READ , MarkAsRead . createForGuide ( guide , true ) ) ; actions . put ( ACTION_MARK_AS_UNREAD , MarkAsRead . createForGuide ( guide , false ) ) ; actions . put ( ACTION_DELETE , new DeleteGuide ( guide ) ) ; return actions ; } protected Map < String , Action > getFeedActionsMap ( IFeed feed ) { Map < String , Action > actions = new Hashtable < String , Action > ( ) ; actions . put ( ACTION_MARK_AS_READ , MarkAsRead . createForFeed ( feed , true ) ) ; actions . put ( ACTION_MARK_AS_UNREAD , MarkAsRead . createForFeed ( feed , false ) ) ; actions . put ( ACTION_DELETE , new DeleteFeed ( feed , null ) ) ; if ( feed instanceof DirectFeed ) { actions . put ( ACTION_BROWSE , new BrowseFeed ( feed ) ) ; } return actions ; } protected IGuide getGuideById ( long id ) { if ( id < 0 ) return null ; GuidesSet set = GlobalModel . SINGLETON . getGuidesSet ( ) ; return set . findGuideByID ( id ) ; } protected IFeed getFeedById ( long id ) { if ( id < 0 ) return null ; GuidesSet set = GlobalModel . SINGLETON . getGuidesSet ( ) ; return set . findFeedByID ( id ) ; } protected JLabel createGuideLabel ( IGuide guide ) { LinkLabel label = LinkLabel . create ( guide . getTitle ( ) , new GuideClickAction ( guide , guide . getID ( ) ) ) ; label . addMouseListener ( new GuidePopupAdapter ( guide , - 1 ) ) ; return label ; } protected JLabel createGuideLabel ( long id , String title ) { LinkLabel label = LinkLabel . create ( title , new GuideClickAction ( null , id ) ) ; label . addMouseListener ( new GuidePopupAdapter ( null , id ) ) ; return label ; } protected JLabel createFeedLabel ( IFeed feed ) { LinkLabel label = LinkLabel . create ( feed . getTitle ( ) , new FeedClickAction ( feed , feed . getID ( ) ) ) ; label . addMouseListener ( new FeedPopupAdapter ( feed , - 1 ) ) ; return label ; } protected JLabel createFeedLabel ( long id , String title ) { LinkLabel label = LinkLabel . create ( title , new FeedClickAction ( null , id ) ) ; label . addMouseListener ( new FeedPopupAdapter ( null , id ) ) ; return label ; } private class FeedClickAction extends AbstractAction { private final long id ; private final IFeed feed ; private FeedClickAction ( IFeed feed , long id ) { this . feed = feed ; this . id = id ; } public void actionPerformed ( ActionEvent e ) { if ( feed != null ) { clickCallback . feedClicked ( feed ) ; } else if ( id != - 1 ) { clickCallback . feedClicked ( id ) ; } } } protected class GuideClickAction extends AbstractAction { private final long id ; private final IGuide guide ; protected GuideClickAction ( IGuide guide , long id ) { this . guide = guide ; this . id = id ; } public void actionPerformed ( ActionEvent e ) { if ( guide != null ) { clickCallback . guideClicked ( guide ) ; } else if ( id != - 1 ) { clickCallback . guideClicked ( id ) ; } } } protected class GuidePopupAdapter extends PopupAdapter { private IGuide guide ; private long id ; public GuidePopupAdapter ( IGuide guide , long id ) { this . guide = guide ; this . id = id ; } protected JPopupMenu buildPopupMenu ( MouseEvent event ) { JPopupMenu menu = new JPopupMenu ( ) ; if ( guide == null ) guide = getGuideById ( id ) ; if ( guide == null || guide . getID ( ) == - 1 ) { menu . add ( "Guide is gone" ) ; } else { Map < String , Action > actions = getActions ( ) ; for ( Action action : actions . values ( ) ) menu . add ( action ) ; } return menu ; } protected Map < String , Action > getActions ( ) { return getGuideActionsMap ( guide ) ; } } protected class FeedPopupAdapter extends PopupAdapter { private IFeed feed ; private long id ; public FeedPopupAdapter ( IFeed feed , long id ) { this . feed = feed ; this . id = id ; } protected JPopupMenu buildPopupMenu ( MouseEvent event ) { JPopupMenu menu = new JPopupMenu ( ) ; if ( feed == null ) feed = getFeedById ( id ) ; if ( feed == null || feed . getID ( ) == - 1 ) { menu . add ( "Feed is gone" ) ; } else { Map < String , Action > actions = getFeedActionsMap ( feed ) ; for ( Action action : actions . values ( ) ) menu . add ( action ) ; } return menu ; } } } 