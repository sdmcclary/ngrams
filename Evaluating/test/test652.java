<<<<<<< HEAD
public class TextFieldEditor extends FieldEditor { public static final int VALIDATE_ON_KEY_STROKE = 0 ; public static final int VALIDATE_ON_FOCUS_LOST = 1 ; public static int UNLIMITED = - 1 ; private boolean isValid ; private String oldValue ; Text textField ; private int widthInChars = UNLIMITED ; private int textLimit = UNLIMITED ; private String errorMessage ; private boolean emptyStringAllowed = true ; private int validateStrategy = VALIDATE_ON_KEY_STROKE ; private int style ; protected TextFieldEditor ( ) { } public TextFieldEditor ( String name , String labelText , int width , int strategy , Composite parent , int swtStyle ) { init ( name , labelText ) ; widthInChars = width ; setValidateStrategy ( strategy ) ; isValid = false ; errorMessage = JFaceResources . getString ( "StringFieldEditor.errorMessage" ) ; style = swtStyle ; createControl ( parent ) ; } public TextFieldEditor ( String name , String labelText , int width , Composite parent ) { this ( name , labelText , width , VALIDATE_ON_KEY_STROKE , parent , SWT . SINGLE | SWT . BORDER ) ; } public TextFieldEditor ( String name , String labelText , Composite parent ) { this ( name , labelText , UNLIMITED , parent ) ; } protected void adjustForNumColumns ( int numColumns ) { } protected boolean checkState ( ) { boolean result = false ; if ( emptyStringAllowed ) { result = true ; } if ( textField == null ) { result = false ; } String txt = textField . getText ( ) ; result = ( txt . trim ( ) . length ( ) > 0 ) || emptyStringAllowed ; result = result && doCheckState ( ) ; if ( result ) { clearErrorMessage ( ) ; } else { showErrorMessage ( errorMessage ) ; } return result ; } protected boolean doCheckState ( ) { return true ; } protected void doFillIntoGrid ( Composite parent , int numColumns ) { Label l = getLabelControl ( parent ) ; GridData gdLabel = new GridData ( ) ; gdLabel . verticalAlignment = SWT . BEGINNING ; gdLabel . horizontalSpan = numColumns ; gdLabel . grabExcessHorizontalSpace = true ; l . setLayoutData ( gdLabel ) ; textField = getTextControl ( parent ) ; GridData gd = new GridData ( ) ; gd . horizontalSpan = numColumns ; if ( widthInChars != UNLIMITED ) { GC gc = new GC ( textField ) ; try { Point extent = gc . textExtent ( "X" ) ; gd . widthHint = widthInChars * extent . x ; } finally { gc . dispose ( ) ; } } else { gd . horizontalAlignment = GridData . FILL ; gd . grabExcessHorizontalSpace = true ; } gd . heightHint = 100 ; gd . verticalAlignment = GridData . FILL ; textField . setLayoutData ( gd ) ; } protected void doLoad ( ) { if ( textField != null ) { String value = getPreferenceStore ( ) . getString ( getPreferenceName ( ) ) ; textField . setText ( value ) ; oldValue = value ; } } protected void doLoadDefault ( ) { if ( textField != null ) { String value = getPreferenceStore ( ) . getDefaultString ( getPreferenceName ( ) ) ; textField . setText ( value ) ; } valueChanged ( ) ; } protected void doStore ( ) { getPreferenceStore ( ) . setValue ( getPreferenceName ( ) , textField . getText ( ) ) ; } public String getErrorMessage ( ) { return errorMessage ; } public int getNumberOfControls ( ) { return 2 ; } public String getStringValue ( ) { if ( textField != null ) { return textField . getText ( ) ; } else { return getPreferenceStore ( ) . getString ( getPreferenceName ( ) ) ; } } public Text getTextControl ( ) { return textField ; } public Text getTextControl ( Composite parent ) { if ( textField == null ) { textField = new Text ( parent , style ) ; textField . setFont ( parent . getFont ( ) ) ; switch ( validateStrategy ) { case VALIDATE_ON_KEY_STROKE : textField . addKeyListener ( new KeyAdapter ( ) { public void keyReleased ( KeyEvent e ) { valueChanged ( ) ; } } ) ; break ; case VALIDATE_ON_FOCUS_LOST : textField . addKeyListener ( new KeyAdapter ( ) { public void keyPressed ( KeyEvent e ) { clearErrorMessage ( ) ; } } ) ; textField . addFocusListener ( new FocusAdapter ( ) { public void focusGained ( FocusEvent e ) { refreshValidState ( ) ; } public void focusLost ( FocusEvent e ) { valueChanged ( ) ; clearErrorMessage ( ) ; } } ) ; break ; default : Assert . isTrue ( false , "Unknown validate strategy" ) ; } textField . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent event ) { textField = null ; } } ) ; if ( textLimit > 0 ) { textField . setTextLimit ( textLimit ) ; } } else { checkParent ( textField , parent ) ; } return textField ; } public boolean isEmptyStringAllowed ( ) { return emptyStringAllowed ; } public boolean isValid ( ) { return isValid ; } protected void refreshValidState ( ) { isValid = checkState ( ) ; } public void setEmptyStringAllowed ( boolean b ) { emptyStringAllowed = b ; } public void setErrorMessage ( String message ) { errorMessage = message ; } public void setFocus ( ) { if ( textField != null ) { textField . setFocus ( ) ; } } public void setStringValue ( String value ) { if ( textField != null ) { if ( value == null ) { value = "" ; } oldValue = textField . getText ( ) ; if ( ! oldValue . equals ( value ) ) { textField . setText ( value ) ; valueChanged ( ) ; } } } public void setTextLimit ( int limit ) { textLimit = limit ; if ( textField != null ) { textField . setTextLimit ( limit ) ; } } public void setValidateStrategy ( int value ) { Assert . isTrue ( value == VALIDATE_ON_FOCUS_LOST || value == VALIDATE_ON_KEY_STROKE ) ; validateStrategy = value ; } public void showErrorMessage ( ) { showErrorMessage ( errorMessage ) ; } protected void valueChanged ( ) { setPresentsDefaultValue ( false ) ; boolean oldState = isValid ; refreshValidState ( ) ; if ( isValid != oldState ) { fireStateChanged ( IS_VALID , oldState , isValid ) ; } String newValue = textField . getText ( ) ; if ( ! newValue . equals ( oldValue ) ) { fireValueChanged ( VALUE , oldValue , newValue ) ; oldValue = newValue ; } } public void setEnabled ( boolean enabled , Composite parent ) { super . setEnabled ( enabled , parent ) ; getTextControl ( parent ) . setEnabled ( enabled ) ; } } 
=======
public class HttpResponse extends HttpMessage { private int statusCode ; private String statusText ; public HttpResponse ( ) { } public HttpResponse ( String httpVersion , int statusCode , String statusText , Map < String , String > headers , byte [ ] body ) { this . httpVersion = httpVersion ; this . statusCode = statusCode ; this . statusText = statusText ; this . headers = headers ; this . body = body ; } public int getStatusCode ( ) { return statusCode ; } public void setStatusCode ( int statusCode ) { this . statusCode = statusCode ; } public String getStatusText ( ) { return statusText ; } public void setStatusText ( String statusText ) { this . statusText = statusText ; } @ Override public String firstLine ( ) { return "HTTP/" + httpVersion + " " + statusCode + " " + statusText + "\r\n" ; } protected void readFirstLine ( PushbackInputStream r ) throws IOException { httpVersion = checkHttpVersion ( readUpTo ( r , ' ' ) ) ; statusCode = Integer . parseInt ( readUpTo ( r , ' ' ) ) ; statusText = readUpToEol ( r ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
