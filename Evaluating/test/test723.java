<<<<<<< HEAD
public class PluginsContentHandler implements ContentHandler { private static final String YEAR = "year" ; private static final String DAY = "day" ; private static final String MONTH = "month" ; private static final String URL = "url" ; private static final String NAME = "name" ; private static final String ID = "id" ; private static final String DESCRIPTION = "description" ; private static final String VERSION = "version" ; private static final String PLUGIN = "plugin" ; private static final String MORE = "more" ; private static final String CATEGORY = "category" ; private static final String SORTWEIGHT = "sortweight" ; private static final String ICON = "icon" ; private static final String REQUIRES = "requires" ; private static final String PARENT = "parent" ; private static final String COLLAPSE = "collapse" ; private static final String INSTALLER = "installer" ; private static final String INSTALLER_ID = "installer_id" ; private StringBuilder data ; private Map < String , InstallerCategory > installerCategories ; private List < Plugin > plugins ; private URL url ; private String version ; private String name ; private String description ; private String id ; private String category ; private int sortweight ; private int year ; private int month ; private int day ; private String more ; private String icon ; private String requires ; private String installerID ; private String parentID ; private boolean collapse ; public PluginsContentHandler ( ) { plugins = new ArrayList < Plugin > ( ) ; installerCategories = new HashMap < String , InstallerCategory > ( ) ; sortweight = Plugin . UNKNOWN_WEIGHT ; } public List < Plugin > getPlugins ( ) { return plugins ; } public void characters ( char [ ] ch , int start , int length ) throws SAXException { for ( int i = start ; i < start + length ; i ++ ) { data . append ( ch [ i ] ) ; } } public void endDocument ( ) throws SAXException { } public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( qName . equals ( URL ) ) { try { URL proj = new URL ( data . toString ( ) . trim ( ) ) ; url = proj ; } catch ( MalformedURLException e ) { Activator . log ( IStatus . ERROR , e . getMessage ( ) , null ) ; } } else if ( qName . equals ( NAME ) ) { name = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( ID ) ) { id = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( DESCRIPTION ) ) { description = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( CATEGORY ) ) { category = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( SORTWEIGHT ) ) { sortweight = Integer . parseInt ( data . toString ( ) . trim ( ) ) ; } else if ( qName . equals ( VERSION ) ) { version = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( YEAR ) ) { year = Integer . parseInt ( data . toString ( ) . trim ( ) ) ; } else if ( qName . equals ( MONTH ) ) { month = Integer . parseInt ( data . toString ( ) . trim ( ) ) ; } else if ( qName . equals ( DAY ) ) { day = Integer . parseInt ( data . toString ( ) . trim ( ) ) ; } else if ( qName . equals ( MORE ) ) { more = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( ICON ) ) { icon = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( REQUIRES ) ) { requires = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( INSTALLER_ID ) ) { installerID = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( PARENT ) ) { parentID = data . toString ( ) . trim ( ) ; } else if ( qName . equals ( COLLAPSE ) ) { collapse = Boolean . parseBoolean ( data . toString ( ) . trim ( ) ) ; } else if ( qName . equals ( INSTALLER ) ) { InstallerCategory parent = null ; if ( parentID != null ) { parent = installerCategories . get ( parentID ) ; } InstallerCategory installerCategory = new InstallerCategory ( id , category , sortweight , parent , collapse ) ; installerCategories . put ( id , installerCategory ) ; } else if ( qName . equals ( PLUGIN ) ) { Calendar cal = Calendar . getInstance ( ) ; cal . set ( Calendar . YEAR , year ) ; cal . set ( Calendar . MONTH , month - 1 ) ; cal . set ( Calendar . DAY_OF_MONTH , day ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; plugins . add ( new Plugin ( id , name , version , cal , description , url , more , category , sortweight , icon , requires , installerCategories . get ( installerID ) ) ) ; } } public void endPrefixMapping ( String prefix ) throws SAXException { } public void ignorableWhitespace ( char [ ] ch , int start , int length ) throws SAXException { } public void processingInstruction ( String target , String data ) throws SAXException { } public void setDocumentLocator ( Locator locator ) { } public void skippedEntity ( String name ) throws SAXException { } public void startDocument ( ) throws SAXException { } public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { data = new StringBuilder ( ) ; if ( qName . equals ( INSTALLER ) ) { clearInstallerData ( ) ; } else if ( qName . equals ( PLUGIN ) ) { clearPluginData ( ) ; } } public void startPrefixMapping ( String prefix , String uri ) throws SAXException { } private void clearInstallerData ( ) { id = null ; category = null ; sortweight = InstallerCategory . UNKNOWN_WEIGHT ; parentID = null ; collapse = false ; } private void clearPluginData ( ) { url = null ; version = null ; name = null ; description = null ; id = null ; category = null ; sortweight = Plugin . UNKNOWN_WEIGHT ; year = 2010 ; month = 1 ; day = 1 ; more = null ; icon = null ; requires = null ; installerID = null ; } } 
=======
public class BarrageList extends ListActivity { private static final String TAG = "BarrageList" ; private static final int MENU_COMPOSE_NEW_BARRAGE = 0 ; private static final int MENU_PAUSE_ALL = 1 ; private static final int MENU_DELETE_ALL = 2 ; private static final int MENU_PREFERENCES = 3 ; private static final int MENU_ABOUT = 4 ; private static final int MENU_EDIT = 0 ; private static final int MENU_PAUSE = 1 ; private static final int MENU_DELETE = 2 ; private Cursor mCursor ; @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . barrage_list ) ; ListView listView = getListView ( ) ; LayoutInflater inflater = LayoutInflater . from ( this ) ; BarrageHeaderView headerView = ( BarrageHeaderView ) inflater . inflate ( R . layout . barrage_header_view , listView , false ) ; headerView . bind ( getString ( R . string . menu_new_barrage ) , getString ( R . string . create_new_barrage ) ) ; listView . addHeaderView ( headerView , null , true ) ; setListAdapter ( new BarrageListAdapter ( this , null , true ) ) ; if ( savedInstanceState != null ) { } } @ Override protected void onListItemClick ( ListView l , View v , int position , long id ) { if ( position == 0 ) { composeNewBarrage ( ) ; } else if ( v instanceof BarrageHeaderView ) { BarrageHeaderView bhv = ( BarrageHeaderView ) v ; BarrageHeader bh = bhv . getHeader ( ) ; editBarrage ( bh . getID ( ) ) ; } } private void editBarrage ( int ID ) { Intent edit = new Intent ( this , Compose . class ) ; edit . putExtra ( "id" , ID ) ; startActivity ( edit ) ; } private void composeNewBarrage ( ) { Intent composeBarrage = new Intent ( this , Compose . class ) ; startActivity ( composeBarrage ) ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { menu . clear ( ) ; menu . add ( 0 , MENU_COMPOSE_NEW_BARRAGE , 0 , R . string . menu_new_barrage ) . setIcon ( R . drawable . compose ) ; if ( ( mCursor != null ) && ( mCursor . getCount ( ) > 0 ) ) { menu . add ( 0 , MENU_PAUSE_ALL , 0 , R . string . menu_pause_all ) ; menu . add ( 0 , MENU_DELETE_ALL , 0 , R . string . menu_delete_all ) . setIcon ( R . drawable . delete ) ; } menu . add ( 0 , MENU_PREFERENCES , 0 , R . string . menu_preferences ) . setIcon ( R . drawable . preferences ) ; menu . add ( 0 , MENU_ABOUT , 0 , R . string . menu_about ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_COMPOSE_NEW_BARRAGE : composeNewBarrage ( ) ; break ; case MENU_PAUSE_ALL : doPauseAll ( ) ; break ; case MENU_DELETE_ALL : confirmDeleteDialog ( new DeleteThreadListener ( - 1 ) , true ) ; break ; case MENU_PREFERENCES : Intent preferences = new Intent ( this , Preferences . class ) ; startActivityIfNeeded ( preferences , - 1 ) ; break ; case MENU_ABOUT : Intent about = new Intent ( this , About . class ) ; startActivityIfNeeded ( about , - 1 ) ; break ; default : return true ; } return false ; } private void doPauseAll ( ) { return ; } private void confirmDeleteDialog ( OnClickListener listener , boolean deleteAll ) { new AlertDialog . Builder ( this ) . setTitle ( R . string . confirm_delete_title ) . setCancelable ( true ) . setPositiveButton ( R . string . yes , listener ) . setNegativeButton ( R . string . no , null ) . setMessage ( deleteAll ? R . string . confirm_delete_all : R . string . confirm_delete ) . show ( ) ; } @ Override public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { menu . clear ( ) ; menu . add ( 0 , MENU_EDIT , 0 , R . string . menu_edit ) ; menu . add ( 0 , MENU_PAUSE , 0 , R . string . menu_pause ) ; menu . add ( 0 , MENU_DELETE , 0 , R . string . menu_delete ) ; } @ Override public boolean onContextItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_EDIT : break ; case MENU_PAUSE : break ; case MENU_DELETE : break ; default : return true ; } return false ; } @ Override protected void onStart ( ) { super . onStart ( ) ; } private class DeleteThreadListener implements OnClickListener { private long mID ; public DeleteThreadListener ( long ID ) { mID = ID ; if ( ID != - 1 ) { } else { } } public void onClick ( DialogInterface dialog , int whichButton ) { } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
