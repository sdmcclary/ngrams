public class QuercusServlet extends HttpServlet { private static final long serialVersionUID = 1L ; private static final L10N L = new L10N ( QuercusServlet . class ) ; private static final Logger log = Logger . getLogger ( QuercusServlet . class . getName ( ) ) ; private Quercus _quercus ; private QuercusServletImpl _impl ; private boolean _isCompileSet ; public QuercusServlet ( ) { checkJavaVersion ( ) ; _impl = new QuercusServletImpl ( ) ; } private static void checkJavaVersion ( ) { String version = System . getProperty ( "java.version" ) ; if ( version . startsWith ( "1.3." ) || version . startsWith ( "1.4." ) ) throw new QuercusRuntimeException ( L . l ( "Quercus requires JDK 1.5 or newer." ) ) ; } public void setCompile ( String isCompile ) throws ConfigException { _isCompileSet = true ; Quercus quercus = getQuercus ( ) ; if ( "true" . equals ( isCompile ) || "" . equals ( isCompile ) ) { quercus . setCompile ( true ) ; quercus . setLazyCompile ( false ) ; } else if ( "false" . equals ( isCompile ) ) { quercus . setCompile ( false ) ; quercus . setLazyCompile ( false ) ; } else if ( "lazy" . equals ( isCompile ) ) { quercus . setLazyCompile ( true ) ; } else throw new ConfigException ( L . l ( "'{0}' is an unknown compile value.  Values are 'true', 'false', or 'lazy'." , isCompile ) ) ; } public void setCompileFailover ( String isCompileFailover ) throws ConfigException { Quercus quercus = getQuercus ( ) ; if ( "true" . equals ( isCompileFailover ) || "" . equals ( isCompileFailover ) ) { quercus . setCompileFailover ( true ) ; } else if ( "false" . equals ( isCompileFailover ) ) { quercus . setCompileFailover ( false ) ; } else throw new ConfigException ( L . l ( "'{0}' is an unknown compile-failover value.  Values are 'true', 'false', or 'lazy'." , isCompileFailover ) ) ; } public void setProfileProbability ( double probability ) throws ConfigException { _impl . setProfileProbability ( probability ) ; } public void setRequireSource ( boolean isRequireSource ) { getQuercus ( ) . setRequireSource ( isRequireSource ) ; } public void setDatabase ( DataSource database ) throws ConfigException { if ( database == null ) throw new ConfigException ( L . l ( "invalid database" ) ) ; getQuercus ( ) . setDatabase ( database ) ; } public void setStrict ( boolean isStrict ) { getQuercus ( ) . setStrict ( isStrict ) ; } public void setPageCacheEntries ( int entries ) { getQuercus ( ) . setPageCacheSize ( entries ) ; } public void setPageCacheSize ( int size ) { getQuercus ( ) . setPageCacheSize ( size ) ; } public void setRegexpCacheSize ( int size ) { getQuercus ( ) . setRegexpCacheSize ( size ) ; } public void setConnectionPool ( boolean isEnable ) { getQuercus ( ) . setConnectionPool ( isEnable ) ; } public void addModule ( QuercusModule module ) throws ConfigException { getQuercus ( ) . addModule ( module ) ; } public void addClass ( PhpClassConfig classConfig ) throws ConfigException { getQuercus ( ) . addJavaClass ( classConfig . getName ( ) , classConfig . getType ( ) ) ; } public void addImplClass ( PhpClassConfig classConfig ) throws ConfigException { getQuercus ( ) . addImplClass ( classConfig . getName ( ) , classConfig . getType ( ) ) ; } public PhpIni createPhpIni ( ) throws ConfigException { return new PhpIni ( getQuercus ( ) ) ; } public ServerEnv createServerEnv ( ) throws ConfigException { return new ServerEnv ( getQuercus ( ) ) ; } public void setIniFile ( Path path ) { getQuercus ( ) . setIniFile ( path ) ; } public void setScriptEncoding ( String encoding ) throws ConfigException { getQuercus ( ) . setScriptEncoding ( encoding ) ; } public void setMysqlVersion ( String version ) { getQuercus ( ) . setMysqlVersion ( version ) ; } public void setPhpVersion ( String version ) { getQuercus ( ) . setPhpVersion ( version ) ; } public void init ( ServletConfig config ) throws ServletException { _impl . setServletConfig ( config ) ; super . init ( config ) ; Enumeration paramNames = config . getInitParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = String . valueOf ( paramNames . nextElement ( ) ) ; String paramValue = config . getInitParameter ( paramName ) ; setInitParam ( paramName , paramValue ) ; } initImpl ( ) ; } protected void setInitParam ( String paramName , String paramValue ) throws ServletException { if ( "compile" . equals ( paramName ) ) { setCompile ( paramValue ) ; } else if ( "database" . equals ( paramName ) ) { try { Context ic = new InitialContext ( ) ; DataSource ds ; if ( ! paramValue . startsWith ( "java:comp" ) ) { try { ds = ( DataSource ) ic . lookup ( "java:comp/env/" + paramValue ) ; } catch ( Exception e ) { ds = ( DataSource ) ic . lookup ( paramValue ) ; } } else { ds = ( DataSource ) ic . lookup ( paramValue ) ; } if ( ds == null ) throw new ServletException ( L . l ( "database '{0}' is not valid" , paramValue ) ) ; getQuercus ( ) . setDatabase ( ds ) ; } catch ( Exception e ) { throw new ServletException ( e ) ; } } else if ( "ini-file" . equals ( paramName ) ) { Quercus quercus = getQuercus ( ) ; String realPath = getServletContext ( ) . getRealPath ( paramValue ) ; Path path = quercus . getPwd ( ) . lookup ( realPath ) ; setIniFile ( path ) ; } else if ( "mysql-version" . equals ( paramName ) ) { setMysqlVersion ( paramValue ) ; } else if ( "php-version" . equals ( paramName ) ) { setPhpVersion ( paramValue ) ; } else if ( "script-encoding" . equals ( paramName ) ) { setScriptEncoding ( paramValue ) ; } else if ( "strict" . equals ( paramName ) ) { setStrict ( "true" . equals ( paramValue ) ) ; } else if ( "page-cache-entries" . equals ( paramName ) || "page-cache-size" . equals ( paramName ) ) { setPageCacheSize ( Integer . parseInt ( paramValue ) ) ; } else if ( "regexp-cache-size" . equals ( paramName ) ) { setRegexpCacheSize ( Integer . parseInt ( paramValue ) ) ; } else if ( "connection-pool" . equals ( paramName ) ) { setConnectionPool ( "true" . equals ( paramValue ) ) ; } else throw new ServletException ( L . l ( "'{0}' is not a recognized init-param" , paramName ) ) ; } private void initImpl ( ) throws ServletException { getQuercus ( ) ; if ( ! _isCompileSet ) { getQuercus ( ) . setLazyCompile ( true ) ; } _impl . init ( ) ; } public void service ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { _impl . service ( request , response ) ; } private Quercus getQuercus ( ) { if ( _quercus == null ) _quercus = _impl . getQuercus ( ) ; return _quercus ; } public void destroy ( ) { _quercus . close ( ) ; _impl . destroy ( ) ; } public static class PhpIni { private Quercus _quercus ; PhpIni ( Quercus quercus ) { _quercus = quercus ; } public void setProperty ( String key , String value ) { _quercus . setIni ( key , value ) ; } } public static class ServerEnv { private Quercus _quercus ; ServerEnv ( Quercus quercus ) { _quercus = quercus ; } public void setProperty ( String key , String value ) { _quercus . setServerEnv ( key , value ) ; } } } 