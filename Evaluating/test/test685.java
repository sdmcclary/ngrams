public class Editor extends EventTarget { private static final long serialVersionUID = 2489151579665730844L ; private IEditorPart _editor ; private DocumentRewriteSession _key ; public String getClassName ( ) { return "Editor" ; } private IDocument getDocument ( ) { IUnifiedEditor uniEditor = this . getUnifiedEditor ( ) ; IDocument result = null ; if ( uniEditor != null ) { ISourceViewer viewer = uniEditor . getViewer ( ) ; if ( viewer != null ) { result = viewer . getDocument ( ) ; } } return result ; } private FileService getFileService ( ) { IUnifiedEditor uniEditor = this . getUnifiedEditor ( ) ; FileService result = null ; if ( uniEditor != null ) { IFileService service = uniEditor . getFileContext ( ) ; if ( service instanceof EditorFileContext ) { service = ( ( EditorFileContext ) service ) . getFileContext ( ) ; } if ( service instanceof FileService ) { result = ( FileService ) service ; } } return result ; } private IFileSourceProvider getSourceProvider ( ) { FileService fileService = this . getFileService ( ) ; IFileSourceProvider result = null ; if ( fileService != null ) { result = fileService . getSourceProvider ( ) ; } return result ; } private StyledText getStyledText ( ) { IUnifiedEditor uniEditor = this . getUnifiedEditor ( ) ; StyledText result = null ; if ( uniEditor != null ) { ISourceViewer viewer = uniEditor . getViewer ( ) ; if ( viewer != null ) { result = viewer . getTextWidget ( ) ; } } return result ; } private IUnifiedEditor getUnifiedEditor ( ) { IEditorPart part = this . _editor ; IUnifiedEditor result = null ; if ( part instanceof ITextEditor ) { ITextEditor editor = ( ITextEditor ) part ; if ( editor instanceof IUnifiedEditor ) { result = ( IUnifiedEditor ) editor ; } } return result ; } public Editor ( Scriptable scope , IEditorPart editor ) { this . setParentScope ( scope ) ; this . _editor = editor ; String [ ] functions = new String [ ] { "applyEdit" , "beginCompoundChange" , "close" , "endCompoundChange" , "getLineAtOffset" , "getOffsetAtLine" , "save" , "selectAndReveal" , "showSelection" , "toString" } ; this . defineFunctionProperties ( functions , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "file" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "id" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "language" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "lexemes" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "lineDelimiter" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "parseResults" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "source" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "sourceLength" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "selectionRange" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "tabWidth" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "title" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "topIndex" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "uri" , Editor . class , READONLY | PERMANENT ) ; this . defineProperty ( "currentOffset" , Editor . class , PERMANENT ) ; this . defineProperty ( "wordWrap" , Editor . class , PERMANENT ) ; } public void save ( ) { if ( this . _editor != null ) { this . _editor . doSave ( null ) ; } } public void selectAndReveal ( final int offset , final int length ) { final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; Display display = workbench . getDisplay ( ) ; display . asyncExec ( new Runnable ( ) { public void run ( ) { IUnifiedEditor uniEditor = getUnifiedEditor ( ) ; uniEditor . selectAndReveal ( offset , length ) ; } } ) ; } public int getCurrentOffset ( ) { class ResultRef { public int result = - 1 ; } final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; Display display = workbench . getDisplay ( ) ; final ResultRef result = new ResultRef ( ) ; display . syncExec ( new Runnable ( ) { public void run ( ) { StyledText textWidget = getStyledText ( ) ; if ( textWidget != null ) { result . result = textWidget . getCaretOffset ( ) ; } } } ) ; return result . result ; } public void setCurrentOffset ( int offset ) { StyledText textWidget = this . getStyledText ( ) ; if ( textWidget != null ) { textWidget . setCaretOffset ( offset ) ; } } public Object getFile ( ) { IFileSourceProvider sourceProvider = this . getSourceProvider ( ) ; Object result ; if ( sourceProvider != null ) { String sourcePath = sourceProvider . getSourceURI ( ) ; Context cx = Context . getCurrentContext ( ) ; result = cx . newObject ( this . getParentScope ( ) , "File" , new Object [ ] { CoreUIUtils . getPathFromURI ( sourcePath ) } ) ; } else { result = Context . getUndefinedValue ( ) ; } return result ; } public String getUri ( ) { IFileSourceProvider sourceProvider = this . getSourceProvider ( ) ; if ( sourceProvider != null ) { String uri = sourceProvider . getSourceURI ( ) ; return uri ; } return null ; } public Object getLanguage ( ) { FileService fileService = this . getFileService ( ) ; Object result ; if ( fileService != null ) { result = fileService . getDefaultLanguage ( ) ; } else { result = Context . getUndefinedValue ( ) ; } return result ; } public Scriptable getLexemes ( ) { IFileService service = this . getFileService ( ) ; Context cx = Context . getCurrentContext ( ) ; Scriptable result ; if ( service != null ) { result = new LexemeList ( this . getParentScope ( ) , service . getLexemeList ( ) ) ; } else { result = cx . newArray ( this . getParentScope ( ) , 0 ) ; } return result ; } public Scriptable getParseResults ( ) { IFileService service = this . getFileService ( ) ; Context cx = Context . getCurrentContext ( ) ; Scriptable result ; if ( service != null ) { result = new ParseResults ( this . getParentScope ( ) , service . getParseState ( ) ) ; } else { result = cx . newArray ( this . getParentScope ( ) , 0 ) ; } return result ; } public String getLineDelimiter ( ) { IDocument document = this . getDocument ( ) ; String result = "\n" ; if ( document != null ) { String [ ] delims = document . getLegalLineDelimiters ( ) ; if ( delims . length > 0 ) { result = delims [ 0 ] ; } } return result ; } public String getId ( ) { String result = StringUtils . EMPTY ; if ( this . _editor != null ) { result = this . _editor . getSite ( ) . getId ( ) ; } return result ; } public Scriptable getSelectionRange ( ) { StyledText textWidget = this . getStyledText ( ) ; Context cx = Context . getCurrentContext ( ) ; Scriptable result = null ; if ( textWidget != null ) { Point p = textWidget . getSelection ( ) ; result = cx . newObject ( this . getParentScope ( ) , "Object" , new Object [ 0 ] ) ; result . put ( "startingOffset" , result , new Integer ( p . x ) ) ; result . put ( "endingOffset" , result , new Integer ( p . y ) ) ; } return result ; } public String getSource ( ) { IFileSourceProvider sourceProvider = this . getSourceProvider ( ) ; String result = StringUtils . EMPTY ; if ( sourceProvider != null ) { try { result = sourceProvider . getSource ( ) ; } catch ( IOException e ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . Editor_Error , e ) ; } } return result ; } public int getSourceLength ( ) { IFileSourceProvider sourceProvider = this . getSourceProvider ( ) ; int result = 0 ; if ( sourceProvider != null ) { result = sourceProvider . getSourceLength ( ) ; } return result ; } public int getTabWidth ( ) { IUnifiedEditor uniEditor = this . getUnifiedEditor ( ) ; int result = 4 ; if ( uniEditor != null ) { ISourceViewer viewer = uniEditor . getViewer ( ) ; result = uniEditor . getConfiguration ( ) . getTabWidth ( viewer ) ; } return result ; } public String getTitle ( ) { IUnifiedEditor uniEditor = this . getUnifiedEditor ( ) ; if ( uniEditor != null ) { return ( ( IEditorPart ) uniEditor ) . getTitle ( ) ; } return null ; } public int getTopIndex ( ) { StyledText textWidget = this . getStyledText ( ) ; int result = - 1 ; if ( textWidget != null ) { result = textWidget . getTopIndex ( ) ; } return result ; } public boolean getWordWrap ( ) { StyledText textWidget = this . getStyledText ( ) ; boolean result = false ; if ( textWidget != null ) { result = textWidget . getWordWrap ( ) ; } return result ; } public void setWordWrap ( boolean wrap ) { StyledText textWidget = this . getStyledText ( ) ; if ( textWidget != null ) { textWidget . setWordWrap ( wrap ) ; } } public void applyEdit ( int offset , int deleteLength , String insertText ) { IEditorPart part = this . _editor ; if ( part instanceof AbstractTextEditor ) { ITextEditor editor = ( ITextEditor ) part ; IDocumentProvider dp = editor . getDocumentProvider ( ) ; IDocument doc = dp . getDocument ( editor . getEditorInput ( ) ) ; try { doc . replace ( offset , deleteLength , insertText ) ; } catch ( BadLocationException e ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . Editor_Error , e ) ; } } } public void beginCompoundChange ( ) { if ( this . _key == null ) { IDocument document = this . getDocument ( ) ; if ( document != null ) { IDocumentExtension4 docExt = ( IDocumentExtension4 ) document ; this . _key = docExt . startRewriteSession ( DocumentRewriteSessionType . SEQUENTIAL ) ; } } else { throw new IllegalStateException ( Messages . Editor_Unclosed_Compound_Change ) ; } } public void close ( boolean save ) { IUnifiedEditor uniEditor = this . getUnifiedEditor ( ) ; if ( uniEditor != null ) { uniEditor . close ( save ) ; } } public void endCompoundChange ( ) { if ( this . _key != null ) { IDocument document = this . getDocument ( ) ; if ( document != null ) { IDocumentExtension4 docExt = ( IDocumentExtension4 ) document ; docExt . stopRewriteSession ( this . _key ) ; } this . _key = null ; } } public int getLineAtOffset ( int offset ) { StyledText textWidget = this . getStyledText ( ) ; int result = - 1 ; if ( textWidget != null ) { result = textWidget . getLineAtOffset ( offset ) ; } return result ; } public int getOffsetAtLine ( final int line ) { class Result { public int result ; } final Result r = new Result ( ) ; r . result = - 1 ; final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; Display display = workbench . getDisplay ( ) ; display . syncExec ( new Runnable ( ) { public void run ( ) { StyledText textWidget = getStyledText ( ) ; if ( textWidget != null ) { r . result = textWidget . getOffsetAtLine ( line ) ; } } } ) ; return r . result ; } public void showSelection ( ) { StyledText textWidget = this . getStyledText ( ) ; if ( textWidget != null ) { textWidget . showSelection ( ) ; } } public String toString ( ) { return "[object Editor]" ; } } 