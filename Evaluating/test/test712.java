public class SyncFolder implements ISyncResource { public static final int MIXED = - 2 ; private Set < ISyncResource > children ; private SyncFolder parent ; private VirtualFileSyncPair pair ; private IPath path ; private boolean skipped = false ; private int syncState = - 1 ; private int transferState = - 1 ; private long transferredBytes ; public SyncFolder ( IPath path , SyncFolder parent , VirtualFileSyncPair pair ) { children = new TreeSet < ISyncResource > ( new Comparator < ISyncResource > ( ) { public int compare ( ISyncResource o1 , ISyncResource o2 ) { return o1 . getPath ( ) . lastSegment ( ) . compareTo ( o2 . getPath ( ) . lastSegment ( ) ) ; } } ) ; this . parent = parent ; this . path = path ; this . pair = pair ; } public ISyncResource find ( VirtualFileSyncPair pair ) { if ( this . pair == pair ) { return this ; } for ( ISyncResource resource : children ) { if ( resource instanceof SyncFolder ) { ISyncResource pairResource = ( ( SyncFolder ) resource ) . find ( pair ) ; if ( pairResource != null ) { return pairResource ; } } else if ( resource instanceof SyncFile ) { if ( pair == ( ( SyncFile ) resource ) . getPair ( ) ) { return resource ; } } } return null ; } public int updateCount ( ) { int number = 0 ; for ( ISyncResource resource : getNonEmptyMembers ( ) ) { if ( resource instanceof SyncFile ) { number ++ ; } else if ( resource instanceof SyncFolder ) { number += ( ( SyncFolder ) resource ) . updateCount ( ) ; } } return number ; } public List < VirtualFileSyncPair > getPairs ( ) { List < VirtualFileSyncPair > pairs = new ArrayList < VirtualFileSyncPair > ( ) ; ISyncResource [ ] members = members ( ) ; for ( ISyncResource member : members ) { if ( ! member . isSkipped ( ) ) { if ( member instanceof SyncFile ) { pairs . add ( ( ( SyncFile ) member ) . getPair ( ) ) ; } else if ( member instanceof SyncFolder ) { SyncFolder folder = ( SyncFolder ) member ; if ( folder . getPair ( ) != null ) { pairs . add ( folder . getPair ( ) ) ; } pairs . addAll ( folder . getPairs ( ) ) ; } } } return pairs ; } public String getName ( ) { return path . lastSegment ( ) ; } public void addMember ( ISyncResource child ) { children . add ( child ) ; if ( child instanceof SyncFile ) { int newState = ( ( SyncFile ) child ) . getPair ( ) . getSyncState ( ) ; if ( syncState == - 1 || syncState == newState ) { syncState = newState ; } else { syncState = MIXED ; } } } public List < ISyncResource > getCompressedMembers ( ) { List < ISyncResource > compressed = new ArrayList < ISyncResource > ( ) ; ISyncResource [ ] members = members ( ) ; for ( ISyncResource member : members ) { if ( member instanceof SyncFolder ) { SyncFolder folder = ( SyncFolder ) member ; if ( folder . containsFiles ( ) ) { compressed . add ( folder ) ; } else { compressed . addAll ( folder . getCompressedMembers ( ) ) ; } } else { compressed . add ( member ) ; } } return compressed ; } public void removeMember ( ISyncResource child ) { children . remove ( child ) ; } public void clearMembers ( ) { children . clear ( ) ; } public boolean containsFiles ( ) { for ( ISyncResource resource : children ) { if ( resource instanceof SyncFile ) { return true ; } } return false ; } public ISyncResource getMember ( String name ) { for ( ISyncResource resource : children ) { if ( name . equals ( resource . getName ( ) ) ) { return resource ; } } return null ; } public boolean isEmpty ( ) { return children . isEmpty ( ) ; } public List < ISyncResource > getAllFiles ( ) { List < ISyncResource > files = new ArrayList < ISyncResource > ( ) ; for ( ISyncResource resource : children ) { if ( resource instanceof SyncFile ) { files . add ( resource ) ; } else if ( resource instanceof SyncFolder ) { if ( ! ( ( SyncFolder ) resource ) . isEmpty ( ) ) { if ( resource . getPair ( ) != null && resource . getSyncState ( ) == SyncState . ClientItemOnly || resource . getSyncState ( ) == SyncState . ServerItemOnly ) { files . add ( resource ) ; } files . addAll ( ( ( SyncFolder ) resource ) . getAllFiles ( ) ) ; } else { files . add ( resource ) ; } } } return files ; } public Collection < ISyncResource > getAllChildren ( ) { Set < ISyncResource > members = new HashSet < ISyncResource > ( ) ; for ( ISyncResource resource : children ) { members . add ( resource ) ; if ( resource instanceof SyncFolder ) { members . addAll ( ( ( SyncFolder ) resource ) . getAllChildren ( ) ) ; } } return members ; } public ISyncResource [ ] getNonEmptyMembers ( ) { Set < ISyncResource > members = new HashSet < ISyncResource > ( ) ; for ( ISyncResource resource : children ) { if ( resource instanceof SyncFile ) { members . add ( resource ) ; } else if ( resource instanceof SyncFolder ) { if ( ! ( ( SyncFolder ) resource ) . isEmpty ( ) ) { members . add ( resource ) ; } } } return members . toArray ( new ISyncResource [ members . size ( ) ] ) ; } public ISyncResource [ ] members ( ) { return children . toArray ( new ISyncResource [ children . size ( ) ] ) ; } public SyncFolder getParent ( ) { return parent ; } public IPath getPath ( ) { return path ; } public boolean isSkipped ( ) { return skipped ; } public void setSkipped ( boolean skipped ) { this . skipped = skipped ; for ( ISyncResource resource : members ( ) ) { resource . setSkipped ( this . skipped ) ; } } public void setSkipped ( boolean skipped , boolean propogate ) { this . skipped = skipped ; if ( propogate ) { setSkipped ( this . skipped ) ; } } public int getSyncState ( ) { if ( this . pair != null && syncState == - 1 ) { return this . pair . getSyncState ( ) ; } return syncState ; } public void setSyncState ( int state ) { this . syncState = state ; } public VirtualFileSyncPair getPair ( ) { return pair ; } public int getTransferState ( ) { return transferState ; } public void setTransferState ( int state ) { this . transferState = state ; } public long getTransferredBytes ( ) { return transferredBytes ; } public void setTransferredBytes ( long bytes ) { this . transferredBytes = bytes ; } } 