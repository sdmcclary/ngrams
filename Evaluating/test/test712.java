public class RecipientList { private final ArrayList < Recipient > mRecipients = new ArrayList < Recipient > ( ) ; private final ArrayList < Recipient > mInvalidRecipients = new ArrayList < Recipient > ( ) ; public RecipientList ( ) { } public int size ( ) { return mRecipients . size ( ) ; } public int countInvalidRecipients ( ) { return mInvalidRecipients . size ( ) ; } public void add ( Recipient r ) { if ( ( null != r ) && Recipient . isValid ( r . number ) ) { mRecipients . add ( r . filter ( ) ) ; } else { mInvalidRecipients . add ( r ) ; } } public Iterator < Recipient > iterator ( ) { return mRecipients . iterator ( ) ; } public static class Recipient { public long person_id = - 1 ; public String name ; public CharSequence label ; public String number ; public String nameAndNumber ; public boolean bcc ; @ Override public String toString ( ) { return "{ name=" + name + " number= " + number + " nameAndNumber=" + nameAndNumber + " person_id=" + person_id + " label=" + label + " bcc=" + bcc + " }" ; } private static final String PHONE_NUMBER_SEPARATORS = " ()-./" ; public static boolean isValid ( String recipient ) { return isPhoneNumber ( recipient ) || Mms . isEmailAddress ( recipient ) ; } public static boolean isPhoneNumber ( String recipient ) { int len = recipient . length ( ) ; int digits = 0 ; for ( int i = 0 ; i < len ; i ++ ) { char c = recipient . charAt ( i ) ; if ( Character . isDigit ( c ) ) { digits ++ ; continue ; } if ( PHONE_NUMBER_SEPARATORS . indexOf ( c ) >= 0 ) { continue ; } if ( c == '+' && i == 0 ) { continue ; } return false ; } if ( digits == 0 ) { return false ; } else { return true ; } } public Recipient filter ( ) { Recipient result = new Recipient ( ) ; result . person_id = person_id ; result . name = name ; result . label = label ; result . number = Mms . isEmailAddress ( number ) ? number : filterPhoneNumber ( number ) ; result . bcc = bcc ; result . nameAndNumber = nameAndNumber ; return result ; } public static String filterPhoneNumber ( String phoneNumber ) { if ( phoneNumber == null ) { return null ; } int length = phoneNumber . length ( ) ; StringBuilder builder = new StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { char character = phoneNumber . charAt ( i ) ; if ( PHONE_NUMBER_SEPARATORS . indexOf ( character ) == - 1 ) { builder . append ( character ) ; } } return builder . toString ( ) ; } public CharSequence toToken ( ) { SpannableString s = new SpannableString ( this . nameAndNumber ) ; int len = s . length ( ) ; if ( len == 0 ) { return s ; } if ( person_id != - 1 ) { s . setSpan ( new Annotation ( "person_id" , String . valueOf ( person_id ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } if ( name != null ) { s . setSpan ( new Annotation ( "name" , name ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } if ( label != null ) { s . setSpan ( new Annotation ( "label" , label . toString ( ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } if ( number != null ) { s . setSpan ( new Annotation ( "number" , number ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } s . setSpan ( new Annotation ( "bcc" , String . valueOf ( bcc ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; return s ; } public static String buildNameAndNumber ( String name , String number ) { if ( ! TextUtils . isEmpty ( name ) && ! name . equals ( number ) ) { return name + " <" + PhoneNumberUtils . formatNumber ( number ) + ">" ; } else { return PhoneNumberUtils . formatNumber ( number ) ; } } } public String [ ] getToNumbers ( ) { ArrayList < String > numbers = new ArrayList < String > ( ) ; int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Recipient recipient = mRecipients . get ( i ) ; if ( ! recipient . bcc && ! TextUtils . isEmpty ( recipient . number ) ) { numbers . add ( recipient . number ) ; } } return numbers . toArray ( new String [ numbers . size ( ) ] ) ; } public boolean containsBcc ( ) { int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( mRecipients . get ( i ) . bcc ) { return true ; } } return false ; } public boolean containsEmail ( ) { int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( Mms . isEmailAddress ( mRecipients . get ( i ) . number ) ) { return true ; } } return false ; } public String [ ] getBccNumbers ( ) { ArrayList < String > numbers = new ArrayList < String > ( ) ; int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Recipient recipient = mRecipients . get ( i ) ; if ( recipient . bcc && ! TextUtils . isEmpty ( recipient . number ) ) { numbers . add ( recipient . number ) ; } } return numbers . toArray ( new String [ numbers . size ( ) ] ) ; } public String [ ] getNumbers ( ) { int count = mRecipients . size ( ) ; ArrayList < String > numbers = new ArrayList < String > ( count ) ; for ( int i = 0 ; i < count ; i ++ ) { numbers . add ( ( mRecipients . get ( i ) ) . number ) ; } return numbers . toArray ( new String [ numbers . size ( ) ] ) ; } public boolean hasInvalidRecipient ( ) { return ! mInvalidRecipients . isEmpty ( ) ; } public boolean hasValidRecipient ( ) { return ! mRecipients . isEmpty ( ) ; } public String getInvalidRecipientString ( ) { StringBuilder sb = new StringBuilder ( ) ; int count = mInvalidRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( i != 0 ) { sb . append ( "," ) ; } Recipient recipient = mInvalidRecipients . get ( i ) ; if ( recipient . bcc ) { sb . append ( "%bcc%" ) ; } sb . append ( recipient . number ) ; } return sb . toString ( ) ; } } 