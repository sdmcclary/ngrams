<<<<<<< HEAD
public class SyncFolder implements ISyncResource { public static final int MIXED = - 2 ; private Set < ISyncResource > children ; private SyncFolder parent ; private VirtualFileSyncPair pair ; private IPath path ; private boolean skipped = false ; private int syncState = - 1 ; private int transferState = - 1 ; private long transferredBytes ; public SyncFolder ( IPath path , SyncFolder parent , VirtualFileSyncPair pair ) { children = new TreeSet < ISyncResource > ( new Comparator < ISyncResource > ( ) { public int compare ( ISyncResource o1 , ISyncResource o2 ) { return o1 . getPath ( ) . lastSegment ( ) . compareTo ( o2 . getPath ( ) . lastSegment ( ) ) ; } } ) ; this . parent = parent ; this . path = path ; this . pair = pair ; } public ISyncResource find ( VirtualFileSyncPair pair ) { if ( this . pair == pair ) { return this ; } for ( ISyncResource resource : children ) { if ( resource instanceof SyncFolder ) { ISyncResource pairResource = ( ( SyncFolder ) resource ) . find ( pair ) ; if ( pairResource != null ) { return pairResource ; } } else if ( resource instanceof SyncFile ) { if ( pair == ( ( SyncFile ) resource ) . getPair ( ) ) { return resource ; } } } return null ; } public int updateCount ( ) { int number = 0 ; for ( ISyncResource resource : getNonEmptyMembers ( ) ) { if ( resource instanceof SyncFile ) { number ++ ; } else if ( resource instanceof SyncFolder ) { number += ( ( SyncFolder ) resource ) . updateCount ( ) ; } } return number ; } public List < VirtualFileSyncPair > getPairs ( ) { List < VirtualFileSyncPair > pairs = new ArrayList < VirtualFileSyncPair > ( ) ; ISyncResource [ ] members = members ( ) ; for ( ISyncResource member : members ) { if ( ! member . isSkipped ( ) ) { if ( member instanceof SyncFile ) { pairs . add ( ( ( SyncFile ) member ) . getPair ( ) ) ; } else if ( member instanceof SyncFolder ) { SyncFolder folder = ( SyncFolder ) member ; if ( folder . getPair ( ) != null ) { pairs . add ( folder . getPair ( ) ) ; } pairs . addAll ( folder . getPairs ( ) ) ; } } } return pairs ; } public String getName ( ) { return path . lastSegment ( ) ; } public void addMember ( ISyncResource child ) { children . add ( child ) ; if ( child instanceof SyncFile ) { int newState = ( ( SyncFile ) child ) . getPair ( ) . getSyncState ( ) ; if ( syncState == - 1 || syncState == newState ) { syncState = newState ; } else { syncState = MIXED ; } } } public List < ISyncResource > getCompressedMembers ( ) { List < ISyncResource > compressed = new ArrayList < ISyncResource > ( ) ; ISyncResource [ ] members = members ( ) ; for ( ISyncResource member : members ) { if ( member instanceof SyncFolder ) { SyncFolder folder = ( SyncFolder ) member ; if ( folder . containsFiles ( ) ) { compressed . add ( folder ) ; } else { compressed . addAll ( folder . getCompressedMembers ( ) ) ; } } else { compressed . add ( member ) ; } } return compressed ; } public void removeMember ( ISyncResource child ) { children . remove ( child ) ; } public void clearMembers ( ) { children . clear ( ) ; } public boolean containsFiles ( ) { for ( ISyncResource resource : children ) { if ( resource instanceof SyncFile ) { return true ; } } return false ; } public ISyncResource getMember ( String name ) { for ( ISyncResource resource : children ) { if ( name . equals ( resource . getName ( ) ) ) { return resource ; } } return null ; } public boolean isEmpty ( ) { return children . isEmpty ( ) ; } public List < ISyncResource > getAllFiles ( ) { List < ISyncResource > files = new ArrayList < ISyncResource > ( ) ; for ( ISyncResource resource : children ) { if ( resource instanceof SyncFile ) { files . add ( resource ) ; } else if ( resource instanceof SyncFolder ) { if ( ! ( ( SyncFolder ) resource ) . isEmpty ( ) ) { if ( resource . getPair ( ) != null && resource . getSyncState ( ) == SyncState . ClientItemOnly || resource . getSyncState ( ) == SyncState . ServerItemOnly ) { files . add ( resource ) ; } files . addAll ( ( ( SyncFolder ) resource ) . getAllFiles ( ) ) ; } else { files . add ( resource ) ; } } } return files ; } public Collection < ISyncResource > getAllChildren ( ) { Set < ISyncResource > members = new HashSet < ISyncResource > ( ) ; for ( ISyncResource resource : children ) { members . add ( resource ) ; if ( resource instanceof SyncFolder ) { members . addAll ( ( ( SyncFolder ) resource ) . getAllChildren ( ) ) ; } } return members ; } public ISyncResource [ ] getNonEmptyMembers ( ) { Set < ISyncResource > members = new HashSet < ISyncResource > ( ) ; for ( ISyncResource resource : children ) { if ( resource instanceof SyncFile ) { members . add ( resource ) ; } else if ( resource instanceof SyncFolder ) { if ( ! ( ( SyncFolder ) resource ) . isEmpty ( ) ) { members . add ( resource ) ; } } } return members . toArray ( new ISyncResource [ members . size ( ) ] ) ; } public ISyncResource [ ] members ( ) { return children . toArray ( new ISyncResource [ children . size ( ) ] ) ; } public SyncFolder getParent ( ) { return parent ; } public IPath getPath ( ) { return path ; } public boolean isSkipped ( ) { return skipped ; } public void setSkipped ( boolean skipped ) { this . skipped = skipped ; for ( ISyncResource resource : members ( ) ) { resource . setSkipped ( this . skipped ) ; } } public void setSkipped ( boolean skipped , boolean propogate ) { this . skipped = skipped ; if ( propogate ) { setSkipped ( this . skipped ) ; } } public int getSyncState ( ) { if ( this . pair != null && syncState == - 1 ) { return this . pair . getSyncState ( ) ; } return syncState ; } public void setSyncState ( int state ) { this . syncState = state ; } public VirtualFileSyncPair getPair ( ) { return pair ; } public int getTransferState ( ) { return transferState ; } public void setTransferState ( int state ) { this . transferState = state ; } public long getTransferredBytes ( ) { return transferredBytes ; } public void setTransferredBytes ( long bytes ) { this . transferredBytes = bytes ; } } 
=======
public class RecipientList { private final ArrayList < Recipient > mRecipients = new ArrayList < Recipient > ( ) ; private final ArrayList < Recipient > mInvalidRecipients = new ArrayList < Recipient > ( ) ; public RecipientList ( ) { } public int size ( ) { return mRecipients . size ( ) ; } public int countInvalidRecipients ( ) { return mInvalidRecipients . size ( ) ; } public void add ( Recipient r ) { if ( ( null != r ) && Recipient . isValid ( r . number ) ) { mRecipients . add ( r . filter ( ) ) ; } else { mInvalidRecipients . add ( r ) ; } } public Iterator < Recipient > iterator ( ) { return mRecipients . iterator ( ) ; } public static class Recipient { public long person_id = - 1 ; public String name ; public CharSequence label ; public String number ; public String nameAndNumber ; public boolean bcc ; @ Override public String toString ( ) { return "{ name=" + name + " number= " + number + " nameAndNumber=" + nameAndNumber + " person_id=" + person_id + " label=" + label + " bcc=" + bcc + " }" ; } private static final String PHONE_NUMBER_SEPARATORS = " ()-./" ; public static boolean isValid ( String recipient ) { return isPhoneNumber ( recipient ) || Mms . isEmailAddress ( recipient ) ; } public static boolean isPhoneNumber ( String recipient ) { int len = recipient . length ( ) ; int digits = 0 ; for ( int i = 0 ; i < len ; i ++ ) { char c = recipient . charAt ( i ) ; if ( Character . isDigit ( c ) ) { digits ++ ; continue ; } if ( PHONE_NUMBER_SEPARATORS . indexOf ( c ) >= 0 ) { continue ; } if ( c == '+' && i == 0 ) { continue ; } return false ; } if ( digits == 0 ) { return false ; } else { return true ; } } public Recipient filter ( ) { Recipient result = new Recipient ( ) ; result . person_id = person_id ; result . name = name ; result . label = label ; result . number = Mms . isEmailAddress ( number ) ? number : filterPhoneNumber ( number ) ; result . bcc = bcc ; result . nameAndNumber = nameAndNumber ; return result ; } public static String filterPhoneNumber ( String phoneNumber ) { if ( phoneNumber == null ) { return null ; } int length = phoneNumber . length ( ) ; StringBuilder builder = new StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { char character = phoneNumber . charAt ( i ) ; if ( PHONE_NUMBER_SEPARATORS . indexOf ( character ) == - 1 ) { builder . append ( character ) ; } } return builder . toString ( ) ; } public CharSequence toToken ( ) { SpannableString s = new SpannableString ( this . nameAndNumber ) ; int len = s . length ( ) ; if ( len == 0 ) { return s ; } if ( person_id != - 1 ) { s . setSpan ( new Annotation ( "person_id" , String . valueOf ( person_id ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } if ( name != null ) { s . setSpan ( new Annotation ( "name" , name ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } if ( label != null ) { s . setSpan ( new Annotation ( "label" , label . toString ( ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } if ( number != null ) { s . setSpan ( new Annotation ( "number" , number ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; } s . setSpan ( new Annotation ( "bcc" , String . valueOf ( bcc ) ) , 0 , len , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ) ; return s ; } public static String buildNameAndNumber ( String name , String number ) { if ( ! TextUtils . isEmpty ( name ) && ! name . equals ( number ) ) { return name + " <" + PhoneNumberUtils . formatNumber ( number ) + ">" ; } else { return PhoneNumberUtils . formatNumber ( number ) ; } } } public String [ ] getToNumbers ( ) { ArrayList < String > numbers = new ArrayList < String > ( ) ; int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Recipient recipient = mRecipients . get ( i ) ; if ( ! recipient . bcc && ! TextUtils . isEmpty ( recipient . number ) ) { numbers . add ( recipient . number ) ; } } return numbers . toArray ( new String [ numbers . size ( ) ] ) ; } public boolean containsBcc ( ) { int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( mRecipients . get ( i ) . bcc ) { return true ; } } return false ; } public boolean containsEmail ( ) { int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( Mms . isEmailAddress ( mRecipients . get ( i ) . number ) ) { return true ; } } return false ; } public String [ ] getBccNumbers ( ) { ArrayList < String > numbers = new ArrayList < String > ( ) ; int count = mRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Recipient recipient = mRecipients . get ( i ) ; if ( recipient . bcc && ! TextUtils . isEmpty ( recipient . number ) ) { numbers . add ( recipient . number ) ; } } return numbers . toArray ( new String [ numbers . size ( ) ] ) ; } public String [ ] getNumbers ( ) { int count = mRecipients . size ( ) ; ArrayList < String > numbers = new ArrayList < String > ( count ) ; for ( int i = 0 ; i < count ; i ++ ) { numbers . add ( ( mRecipients . get ( i ) ) . number ) ; } return numbers . toArray ( new String [ numbers . size ( ) ] ) ; } public boolean hasInvalidRecipient ( ) { return ! mInvalidRecipients . isEmpty ( ) ; } public boolean hasValidRecipient ( ) { return ! mRecipients . isEmpty ( ) ; } public String getInvalidRecipientString ( ) { StringBuilder sb = new StringBuilder ( ) ; int count = mInvalidRecipients . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( i != 0 ) { sb . append ( "," ) ; } Recipient recipient = mInvalidRecipients . get ( i ) ; if ( recipient . bcc ) { sb . append ( "%bcc%" ) ; } sb . append ( recipient . number ) ; } return sb . toString ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
