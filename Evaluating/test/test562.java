public class JSLaunchConfigurationDelegate extends LaunchConfigurationDelegate { protected static final int DEFAULT_PORT = 8999 ; protected static final IStatus launchBrowserPromptStatus = new Status ( IStatus . INFO , JSDebugPlugin . ID , 302 , StringUtils . EMPTY , null ) ; public void launch ( ILaunchConfiguration configuration , String mode , ILaunch launch , IProgressMonitor monitor ) throws CoreException { IStatusHandler prompter = DebugPlugin . getDefault ( ) . getStatusHandler ( promptStatus ) ; if ( "debug" . equals ( mode ) ) { IDebugTarget [ ] targets = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getDebugTargets ( ) ; IDebugTarget activeSession = null ; for ( int i = 0 ; i < targets . length ; i ++ ) { if ( targets [ i ] . getModelIdentifier ( ) . equals ( IDebugConstants . ID_DEBUG_MODEL ) ) { if ( ! targets [ i ] . isTerminated ( ) ) { activeSession = targets [ i ] ; break ; } } } if ( activeSession != null ) { Object result = prompter . handleStatus ( launchBrowserPromptStatus , null ) ; if ( ( result instanceof Boolean ) && ( ( ( Boolean ) result ) . booleanValue ( ) ) ) { activeSession . terminate ( ) ; } else { String errorMessage = Messages . JSLaunchConfigurationDelegate_MultipleJavaScriptDebugNotSupported + Messages . JSLaunchConfigurationDelegate_PleaseTerminateActiveSession ; throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , Status . ERROR , errorMessage , null ) ) ; } } } String browserExecutable = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_BROWSER_EXECUTABLE , ( String ) null ) ; if ( browserExecutable == null || ! new File ( browserExecutable ) . exists ( ) ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , StringUtils . format ( Messages . JSLaunchConfigurationDelegate_WebBrowserDoesNotExist , browserExecutable ) , null ) ) ; } JSLaunchConfigurationHelper . initializeLaunchAttributes ( configuration , launch ) ; boolean debugCompatible = BrowserUtil . isBrowserDebugCompatible ( browserExecutable ) ; boolean debugAvailable = false ; boolean debug = "debug" . equals ( mode ) ; boolean advancedRun = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_ADVANCED_RUN_ENABLED , false ) ; if ( debugCompatible && ( "debug" . equals ( mode ) || advancedRun ) ) { monitor . subTask ( Messages . JSLaunchConfigurationDelegate_CheckingBrowserForDebugger ) ; debugAvailable = BrowserUtil . isBrowserDebugAvailable ( browserExecutable ) ; if ( ! debugAvailable ) { if ( ! BrowserUtil . installDebugExtension ( browserExecutable , prompter , monitor ) ) { monitor . setCanceled ( true ) ; return ; } debugAvailable = BrowserUtil . isBrowserDebugAvailable ( browserExecutable ) ; } if ( debug && ! debugAvailable ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_DebuggerExtensionNotInstalled , null ) ) ; } } int serverType = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_TYPE , ILaunchConfigurationConstants . DEFAULT_SERVER_TYPE ) ; int startActionType = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_START_ACTION_TYPE , ILaunchConfigurationConstants . DEFAULT_START_ACTION_TYPE ) ; boolean appendProjectName = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_APPEND_PROJECT_NAME , false ) ; LocalResourceMapper resourceMapper = null ; HttpServerProcess httpServer = null ; boolean launchHttpServer = false ; boolean launchServerDebugger = false ; URL baseURL = null ; try { if ( serverType == ILaunchConfigurationConstants . SERVER_INTERNAL ) { if ( startActionType != ILaunchConfigurationConstants . START_ACTION_START_URL ) { launchHttpServer = true ; } } else if ( serverType == ILaunchConfigurationConstants . SERVER_EXTERNAL || serverType == ILaunchConfigurationConstants . SERVER_MANAGED ) { String externalBaseUrl ; if ( serverType == ILaunchConfigurationConstants . SERVER_EXTERNAL ) { externalBaseUrl = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_EXTERNAL_BASE_URL , StringUtils . EMPTY ) . trim ( ) ; } else { String serverId = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_SERVER_ID , ( String ) null ) ; String host = null ; IServer server = ServerCore . getServerManager ( ) . findServer ( serverId ) ; if ( server != null ) { host = server . getHost ( ) ; if ( host == null ) { host = "localhost" ; } for ( IServer associatedServer : server . getAssociatedServers ( ) ) { if ( "Jaxer Server" . equals ( associatedServer . getDescription ( ) ) ) { launchServerDebugger = true ; } } } if ( host == null ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_Host_Not_Specified , null ) ) ; } externalBaseUrl = StringUtils . format ( "http://{0}/" , host ) ; } if ( externalBaseUrl . length ( ) == 0 ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_Empty_URL , null ) ) ; } if ( externalBaseUrl . charAt ( externalBaseUrl . length ( ) - 1 ) != '/' ) { externalBaseUrl = externalBaseUrl + '/' ; } baseURL = new URL ( externalBaseUrl ) ; resourceMapper = new LocalResourceMapper ( ) ; resourceMapper . addMapping ( baseURL , ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getLocation ( ) . toFile ( ) ) ; } else { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_No_Server_Type , null ) ) ; } } catch ( MalformedURLException e ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_MalformedServerURL , e ) ) ; } try { URL launchURL = null ; try { if ( startActionType == ILaunchConfigurationConstants . START_ACTION_START_URL ) { if ( resourceMapper != null ) { JSLaunchConfigurationHelper . setResourceMapping ( configuration , baseURL , resourceMapper , httpServer ) ; } launchURL = new URL ( configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_START_PAGE_URL , StringUtils . EMPTY ) ) ; } else { IResource resource = null ; if ( startActionType == ILaunchConfigurationConstants . START_ACTION_CURRENT_PAGE ) { resource = getCurrentEditorResource ( ) ; } else if ( startActionType == ILaunchConfigurationConstants . START_ACTION_SPECIFIC_PAGE ) { String resourcePath = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_START_PAGE_PATH , ( String ) null ) ; if ( resourcePath != null && resourcePath . length ( ) > 0 ) { resource = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( new Path ( resourcePath ) ) ; } } if ( resource != null ) { if ( baseURL == null && launchHttpServer ) { monitor . subTask ( Messages . JSLaunchConfigurationDelegate_LaunchingHTTPServer ) ; IHttpServerProviderAdapter httpServerProvider = ( IHttpServerProviderAdapter ) getContributedAdapter ( IHttpServerProviderAdapter . class ) ; IServer server = null ; if ( httpServerProvider != null ) { server = httpServerProvider . getServer ( resource ) ; if ( server != null ) { for ( IServer associatedServer : server . getAssociatedServers ( ) ) { if ( "Jaxer Server" . equals ( associatedServer . getDescription ( ) ) ) { launchServerDebugger = true ; } } IPath documentRoot = server . getDocumentRoot ( ) ; if ( documentRoot != null && documentRoot . equals ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getLocation ( ) ) ) { appendProjectName = true ; } } } File root = resource . getProject ( ) . getLocation ( ) . toFile ( ) ; if ( server != null ) { baseURL = new URL ( StringUtils . format ( "http://{0}/" , server . getHost ( ) ) ) ; } else { httpServer = new HttpServerProcess ( launch ) ; httpServer . setServerRoot ( root ) ; baseURL = httpServer . getBaseURL ( ) ; } if ( appendProjectName ) { IProject project = resource . getProject ( ) ; baseURL = new URL ( baseURL , project . getName ( ) + '/' ) ; } resourceMapper = new LocalResourceMapper ( ) ; resourceMapper . addMapping ( baseURL , root ) ; JSLaunchConfigurationHelper . setResourceMapping ( configuration , baseURL , resourceMapper , httpServer ) ; launchURL = resourceMapper . resolveLocalURI ( resource . getLocationURI ( ) ) . toURL ( ) ; } else if ( baseURL != null ) { IProject project = resource . getProject ( ) ; if ( appendProjectName ) { baseURL = new URL ( baseURL , project . getName ( ) + '/' ) ; } resourceMapper . addMapping ( baseURL , project . getLocation ( ) . toFile ( ) ) ; JSLaunchConfigurationHelper . setResourceMapping ( configuration , baseURL , resourceMapper , httpServer ) ; launchURL = resourceMapper . resolveLocalURI ( resource . getLocationURI ( ) ) . toURL ( ) ; } else { launchURL = resource . getLocation ( ) . toFile ( ) . toURI ( ) . toURL ( ) ; } } else if ( startActionType == ILaunchConfigurationConstants . START_ACTION_CURRENT_PAGE ) { IPath path = getCurrentEditorPath ( ) ; if ( path != null ) { if ( debug && InternetExplorer . isBrowserExecutable ( browserExecutable ) ) { String errorMessage = Messages . JSLaunchConfigurationDelegate_Only_Project_Debugging_Supported ; throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , Status . ERROR , errorMessage , null ) ) ; } launchURL = path . toFile ( ) . toURI ( ) . toURL ( ) ; } else { launchURL = getCurrentEditorURL ( ) ; if ( launchURL == null ) { monitor . setCanceled ( true ) ; return ; } } } } if ( launchURL == null ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_LaunchURLNotDefined , null ) ) ; } if ( launchURL . toExternalForm ( ) . endsWith ( ".js" ) && InternetExplorer . isBrowserExecutable ( browserExecutable ) ) { String errorMessage = Messages . JSLaunchConfigurationDelegate_Cannot_Debug_JS_File ; throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , Status . ERROR , errorMessage , null ) ) ; } String httpGetQuery = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_HTTP_GET_QUERY , StringUtils . EMPTY ) ; if ( httpGetQuery != null && httpGetQuery . length ( ) > 0 && launchURL . getQuery ( ) == null && launchURL . getRef ( ) == null ) { if ( httpGetQuery . charAt ( 0 ) != '?' ) { httpGetQuery = '?' + httpGetQuery ; } launchURL = new URL ( launchURL , launchURL . getFile ( ) + httpGetQuery ) ; } launchURL = new URL ( launchURL , URLEncoder . encode ( launchURL . getPath ( ) , launchURL . getQuery ( ) , launchURL . getRef ( ) ) ) ; } catch ( MalformedURLException e ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_MalformedLaunchURL , e ) ) ; } monitor . subTask ( Messages . JSLaunchConfigurationDelegate_LaunchingBrowser ) ; Process process = null ; ArrayList < String > browserArgs = new ArrayList < String > ( ) ; String browserCmdLine = configuration . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_BROWSER_COMMAND_LINE , StringUtils . EMPTY ) ; if ( browserCmdLine != null && browserCmdLine . length ( ) > 0 ) { String [ ] args = browserCmdLine . split ( StringUtils . SPACE ) ; for ( int i = 0 ; i < args . length ; ++ i ) { if ( args [ i ] . trim ( ) . length ( ) > 0 ) { browserArgs . add ( args [ i ] . trim ( ) ) ; } } } ArrayList < String > args = new ArrayList < String > ( ) ; if ( debugAvailable ) { int port = SocketUtil . findFreePort ( ) ; if ( "true" . equals ( Platform . getDebugOption ( "com.aptana.ide.debug.core/debugger_debug" ) ) ) { port = 2525 ; } if ( port == - 1 ) { port = DEFAULT_PORT ; } ServerSocket listenSocket = null ; try { listenSocket = new ServerSocket ( port ) ; if ( ! "true" . equals ( Platform . getDebugOption ( "com.aptana.ide.debug.core/debugger_debug" ) ) ) { listenSocket . setSoTimeout ( DebugConnection . SOCKET_TIMEOUT ) ; } } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_SocketConnectionError , e ) ) ; } String debuggerLaunchUrl = BrowserUtil . DEBUGGER_LAUNCH_URL + Integer . toString ( port ) ; if ( ( launchServerDebugger || "true" . equals ( Platform . getDebugOption ( "com.aptana.ide.debug.core/external_server_is_jaxer" ) ) ) && "true" . equals ( Platform . getDebugOption ( "com.aptana.ide.debug.core/jaxer_debugger" ) ) ) { debuggerLaunchUrl = launchURL . toExternalForm ( ) ; if ( launchURL . getQuery ( ) == null ) { debuggerLaunchUrl += '?' ; } debuggerLaunchUrl += "__JAXER_DEBUGGER=" + Integer . toString ( port ) ; } try { if ( Platform . OS_MACOSX . equals ( Platform . getOS ( ) ) ) { args . add ( "/usr/bin/open" ) ; if ( System . getProperty ( "os.version" , StringUtils . EMPTY ) . startsWith ( "10.3." ) ) { args . add ( "-a" ) ; args . add ( browserExecutable ) ; } else { args . add ( "-b" ) ; args . add ( BrowserUtil . getMacOSXApplicationIdentifier ( browserExecutable ) ) ; } args . add ( debuggerLaunchUrl ) ; } else if ( InternetExplorer . isBrowserExecutable ( browserExecutable ) ) { args . add ( browserExecutable ) ; args . add ( debuggerLaunchUrl ) ; } else { args . add ( browserExecutable ) ; args . add ( debuggerLaunchUrl ) ; } if ( "true" . equals ( Platform . getDebugOption ( "com.aptana.ide.debug.core/debugger_debug" ) ) ) { args = null ; } if ( args != null ) { args . addAll ( browserArgs ) ; process = Runtime . getRuntime ( ) . exec ( ( String [ ] ) args . toArray ( new String [ args . size ( ) ] ) ) ; } } catch ( IOException e ) { if ( listenSocket != null ) { try { listenSocket . close ( ) ; } catch ( IOException ignore ) { } listenSocket = null ; } throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_LaunchProcessError , e ) ) ; } Socket socket = null ; try { monitor . subTask ( StringUtils . format ( Messages . JSLaunchConfigurationDelegate_OpeningSocketOnPort , port ) ) ; socket = listenSocket . accept ( ) ; } catch ( IOException e ) { BrowserUtil . resetBrowserCache ( browserExecutable ) ; if ( debug ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_SocketConnectionError , e ) ) ; } } finally { if ( listenSocket != null ) { try { listenSocket . close ( ) ; } catch ( IOException ignore ) { } } } if ( socket != null ) { monitor . subTask ( Messages . JSLaunchConfigurationDelegate_InitializingDebugger ) ; JSDebugTarget debugTarget = null ; try { JSDebugProcess debugProcess = new JSDebugProcess ( launch , browserExecutable , null ) ; DebugConnection controller = DebugConnection . createConnection ( socket ) ; debugTarget = new JSDebugTarget ( launch , debugProcess , httpServer , resourceMapper , controller , debug ) ; monitor . subTask ( StringUtils . format ( Messages . JSLaunchConfigurationDelegate_OpeningPage , launchURL ) ) ; debugTarget . openURL ( launchURL ) ; } catch ( CoreException e ) { JSDebugPlugin . log ( e ) ; if ( debugTarget != null ) { debugTarget . terminate ( ) ; } else { try { socket . close ( ) ; } catch ( IOException ignore ) { } } throw e ; } } else { DebugPlugin . newProcess ( launch , process , browserExecutable ) ; } } else if ( "run" . equals ( mode ) ) { try { String launchPage = launchURL . toExternalForm ( ) ; if ( Platform . OS_MACOSX . equals ( Platform . getOS ( ) ) ) { args . add ( "/usr/bin/open" ) ; if ( System . getProperty ( "os.version" , StringUtils . EMPTY ) . startsWith ( "10.3." ) ) { args . add ( "-a" ) ; args . add ( browserExecutable ) ; } else { args . add ( "-b" ) ; args . add ( BrowserUtil . getMacOSXApplicationIdentifier ( browserExecutable ) ) ; } args . add ( launchPage ) ; } else { args . add ( browserExecutable ) ; if ( debugCompatible && Firefox . isBrowserExecutable ( browserExecutable ) ) { if ( advancedRun ) { args . add ( Firefox . NEW_WINDOW ) ; browserArgs . remove ( Firefox . NEW_WINDOW ) ; browserArgs . remove ( Firefox . NEW_TAB ) ; } else { if ( browserArgs . contains ( Firefox . NEW_WINDOW ) ) { args . add ( Firefox . NEW_WINDOW ) ; } else { args . add ( Firefox . NEW_TAB ) ; } browserArgs . remove ( Firefox . NEW_WINDOW ) ; browserArgs . remove ( Firefox . NEW_TAB ) ; } } args . add ( launchPage ) ; } args . addAll ( browserArgs ) ; process = Runtime . getRuntime ( ) . exec ( ( String [ ] ) args . toArray ( new String [ args . size ( ) ] ) ) ; } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , Messages . JSLaunchConfigurationDelegate_LaunchProcessError , e ) ) ; } DebugPlugin . newProcess ( launch , process , browserExecutable ) ; } else { throw new CoreException ( new Status ( IStatus . ERROR , JSDebugPlugin . ID , IStatus . OK , StringUtils . format ( Messages . JSLaunchConfigurationDelegate_ConfiguredBrowserDoesNotSupportDebugging , browserExecutable ) , null ) ) ; } } catch ( CoreException e ) { if ( httpServer != null ) { launch . removeProcess ( httpServer ) ; try { httpServer . terminate ( ) ; } catch ( DebugException e1 ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e1 ) ; } } throw e ; } } protected IResource getCurrentEditorResource ( ) throws MalformedURLException { IActiveResourcePathGetterAdapter adapter = ( IActiveResourcePathGetterAdapter ) getContributedAdapter ( IActiveResourcePathGetterAdapter . class ) ; if ( adapter != null ) { return adapter . getActiveResource ( ) ; } return null ; } protected IPath getCurrentEditorPath ( ) throws MalformedURLException { IActiveResourcePathGetterAdapter adapter = ( IActiveResourcePathGetterAdapter ) getContributedAdapter ( IActiveResourcePathGetterAdapter . class ) ; if ( adapter != null ) { return adapter . getActiveResourcePath ( ) ; } return null ; } protected URL getCurrentEditorURL ( ) throws MalformedURLException { IActiveResourcePathGetterAdapter adapter = ( IActiveResourcePathGetterAdapter ) getContributedAdapter ( IActiveResourcePathGetterAdapter . class ) ; if ( adapter != null ) { return adapter . getActiveResourceURL ( ) ; } return null ; } protected Object getContributedAdapter ( Class clazz ) { Object adapter = null ; IAdapterManager manager = Platform . getAdapterManager ( ) ; if ( manager . hasAdapter ( this , clazz . getName ( ) ) ) { adapter = manager . getAdapter ( this , clazz . getName ( ) ) ; if ( adapter == null ) { adapter = manager . loadAdapter ( this , clazz . getName ( ) ) ; } } return adapter ; } } 