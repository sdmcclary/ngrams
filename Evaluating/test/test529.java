class Socks5Message extends ProxyMessage { public int addrType ; byte [ ] data ; private static final Logger log = Logger . getLogger ( Socks5Message . class . getName ( ) ) ; public Socks5Message ( int cmd ) { super ( cmd , null , 0 ) ; data = new byte [ 3 ] ; data [ 0 ] = SOCKS_VERSION ; data [ 1 ] = ( byte ) cmd ; data [ 2 ] = 0 ; } public Socks5Message ( int cmd , InetAddress ip , int port ) { super ( cmd , ip , port ) ; if ( ip == null ) { this . host = "0.0.0.0" ; } else { this . host = ip . getHostName ( ) ; } this . version = SOCKS_VERSION ; byte [ ] addr ; if ( ip == null ) { addr = new byte [ 4 ] ; addr [ 0 ] = addr [ 1 ] = addr [ 2 ] = addr [ 3 ] = 0 ; } else { addr = ip . getAddress ( ) ; } if ( addr . length == 4 ) { addrType = SOCKS_ATYP_IPV4 ; } else { addrType = SOCKS_ATYP_IPV6 ; } data = new byte [ 6 + addr . length ] ; data [ 0 ] = ( byte ) SOCKS_VERSION ; data [ 1 ] = ( byte ) command ; data [ 2 ] = ( byte ) 0 ; data [ 3 ] = ( byte ) addrType ; System . arraycopy ( addr , 0 , data , 4 , addr . length ) ; data [ data . length - 2 ] = ( byte ) ( port > > 8 ) ; data [ data . length - 1 ] = ( byte ) ( port ) ; } public Socks5Message ( int cmd , String hostName , int port ) { super ( cmd , null , port ) ; this . host = hostName ; this . version = SOCKS_VERSION ; log . fine ( "Doing ATYP_DOMAINNAME" ) ; addrType = SOCKS_ATYP_DOMAINNAME ; final byte [ ] addr = hostName . getBytes ( ) ; data = new byte [ 7 + addr . length ] ; data [ 0 ] = ( byte ) SOCKS_VERSION ; data [ 1 ] = ( byte ) command ; data [ 2 ] = ( byte ) 0 ; data [ 3 ] = ( byte ) SOCKS_ATYP_DOMAINNAME ; data [ 4 ] = ( byte ) addr . length ; System . arraycopy ( addr , 0 , data , 5 , addr . length ) ; data [ data . length - 2 ] = ( byte ) ( port > > 8 ) ; data [ data . length - 1 ] = ( byte ) ( port ) ; } public Socks5Message ( InputStream in ) throws SocksException , IOException { this ( in , true ) ; } public Socks5Message ( InputStream in , boolean clientMode ) throws SocksException , IOException { read ( in , clientMode ) ; } public void read ( InputStream in ) throws SocksException , IOException { read ( in , true ) ; } public void read ( InputStream in , boolean clientMode ) throws SocksException , IOException { data = null ; ip = null ; final DataInputStream di = new DataInputStream ( in ) ; version = di . readUnsignedByte ( ) ; command = di . readUnsignedByte ( ) ; if ( clientMode && ( command != 0 ) ) { throw new SocksException ( command ) ; } di . readUnsignedByte ( ) ; addrType = di . readUnsignedByte ( ) ; byte [ ] addr ; switch ( addrType ) { case SOCKS_ATYP_IPV4 : addr = new byte [ 4 ] ; di . readFully ( addr ) ; host = bytes2IPV4 ( addr , 0 ) ; break ; case SOCKS_ATYP_IPV6 : addr = new byte [ SOCKS_IPV6_LENGTH ] ; di . readFully ( addr ) ; host = bytes2IPV6 ( addr , 0 ) ; break ; case SOCKS_ATYP_DOMAINNAME : log . fine ( "Reading ATYP_DOMAINNAME" ) ; addr = new byte [ di . readUnsignedByte ( ) ] ; di . readFully ( addr ) ; host = new String ( addr ) ; break ; default : throw ( new SocksException ( SocksProxyBase . SOCKS_JUST_ERROR ) ) ; } port = di . readUnsignedShort ( ) ; if ( ( addrType != SOCKS_ATYP_DOMAINNAME ) && doResolveIP ) { try { ip = InetAddress . getByName ( host ) ; } catch ( final UnknownHostException uh_ex ) { } } } public void write ( OutputStream out ) throws IOException { if ( data == null ) { Socks5Message msg ; if ( addrType == SOCKS_ATYP_DOMAINNAME ) { msg = new Socks5Message ( command , host , port ) ; } else { if ( ip == null ) { try { ip = InetAddress . getByName ( host ) ; } catch ( final UnknownHostException uh_ex ) { throw new SocksException ( SocksProxyBase . SOCKS_JUST_ERROR ) ; } } msg = new Socks5Message ( command , ip , port ) ; } data = msg . data ; } out . write ( data ) ; } public InetAddress getInetAddress ( ) throws UnknownHostException { if ( ip != null ) { return ip ; } return ( ip = InetAddress . getByName ( host ) ) ; } public String toString ( ) { return String . format ( "Socks5Message:\nVN   %d\nCMD  %d\nATYP %d\nADDR %s\nPORT %d\n" , version , command , addrType , host , port ) ; } static public boolean resolveIP ( ) { return doResolveIP ; } static public boolean resolveIP ( boolean doResolve ) { final boolean old = doResolveIP ; doResolveIP = doResolve ; return old ; } public static final int SOCKS_VERSION = 5 ; public static final int SOCKS_ATYP_IPV4 = 0x1 ; public static final int SOCKS_ATYP_DOMAINNAME = 0x3 ; public static final int SOCKS_ATYP_IPV6 = 0x4 ; public static final int SOCKS_IPV6_LENGTH = 16 ; static boolean doResolveIP = true ; } 