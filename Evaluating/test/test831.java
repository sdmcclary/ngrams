public class ExtensionSupport { public static final String QUICK_JUNIT_DEFAULT = "QuickJUnitDefault" ; public static ILaunchShortcut createJUnitLaunchShortcut ( ) throws CoreException { return new QuickJUnitLaunchShortcut ( ) ; } public static ILaunchConfigurationWorkingCopy createLaunchConfigurationWorkingCopy ( ) throws CoreException { return createWorkingCopy ( "org.eclipse.jdt.junit.launchconfig" ) ; } public static ILaunchConfiguration getLaunchConfiguration ( ) throws CoreException { return getWorkingCopy ( "org.eclipse.jdt.junit.launchconfig" ) ; } public static IWorkbenchWizard createNewClassCreationWizard ( ) throws CoreException { return createWizard ( "org.eclipse.jdt.ui.wizards.NewClassCreationWizard" ) ; } public static IWorkbenchWizard createNewTestCaseCreationWizard ( ) throws CoreException { return createWizard ( "org.eclipse.jdt.junit.wizards.NewTestCaseCreationWizard" ) ; } protected static ILaunchShortcut createLaunchShortcut ( final String namespace ) throws CoreException { final IExtensionRegistry reg = Platform . getExtensionRegistry ( ) ; final IExtensionPoint point = reg . getExtensionPoint ( "org.eclipse.debug.ui.launchShortcuts" ) ; final IExtension [ ] extensions = point . getExtensions ( ) ; for ( int i = 0 ; i < extensions . length ; ++ i ) { if ( namespace . equals ( extensions [ i ] . getNamespaceIdentifier ( ) ) ) { final IConfigurationElement [ ] elements = extensions [ i ] . getConfigurationElements ( ) ; ILaunchShortcut shortcut = ( ILaunchShortcut ) elements [ 0 ] . createExecutableExtension ( "class" ) ; if ( shortcut != null ) { return shortcut ; } } } throw new RuntimeException ( "LaunchShortcut not found. namespace:" + namespace ) ; } private static ILaunchConfigurationWorkingCopy createWorkingCopy ( final String namespace ) throws CoreException { ILaunchConfigurationWorkingCopy launchConfiguration = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationType ( namespace ) . newInstance ( null , QUICK_JUNIT_DEFAULT ) ; if ( launchConfiguration == null ) { throw new RuntimeException ( "LaunchConfigurationTypes not found. namespace:" + namespace ) ; } return launchConfiguration ; } private static ILaunchConfiguration getWorkingCopy ( String namespace ) throws CoreException { ILaunchConfigurationType type = createWorkingCopy ( namespace ) . getType ( ) ; ILaunchConfiguration [ ] configurations = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurations ( type ) ; ILaunchConfiguration launchConfiguration = null ; for ( int i = 0 ; i < configurations . length ; i ++ ) { ILaunchConfiguration candidate = configurations [ i ] ; if ( candidate . getName ( ) . equals ( QUICK_JUNIT_DEFAULT ) ) { launchConfiguration = candidate ; } } return launchConfiguration ; } protected static IWorkbenchWizard createWizard ( final String id ) throws CoreException { final IWorkbench wb = PlatformUI . getWorkbench ( ) ; final IWizardRegistry reg = wb . getNewWizardRegistry ( ) ; final IWizardDescriptor desc = reg . findWizard ( id ) ; IWorkbenchWizard wizard = desc . createWizard ( ) ; if ( wizard != null ) { return wizard ; } throw new RuntimeException ( "Wizard not found. id:" + id ) ; } } 