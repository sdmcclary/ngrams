public class JSTokenTypes { protected JSTokenTypes ( ) { } public static final int ERROR = 0 ; public static final int WHITESPACE = 1 ; public static final int COMMENT = 2 ; public static final int CDO = 3 ; public static final int CDC = 4 ; public static final int LINE_TERMINATOR = 5 ; public static final int START_MULTILINE_COMMENT = 6 ; public static final int START_DOCUMENTATION = 7 ; public static final int IDENTIFIER = 8 ; public static final int BREAK = 9 ; public static final int CASE = 10 ; public static final int CATCH = 11 ; public static final int CONTINUE = 12 ; public static final int DEFAULT = 13 ; public static final int DELETE = 14 ; public static final int DO = 15 ; public static final int ELSE = 16 ; public static final int IF = 17 ; public static final int IN = 18 ; public static final int INSTANCEOF = 19 ; public static final int FINALLY = 20 ; public static final int FOR = 21 ; public static final int FUNCTION = 22 ; public static final int NEW = 23 ; public static final int RETURN = 24 ; public static final int SWITCH = 25 ; public static final int THIS = 26 ; public static final int THROW = 27 ; public static final int TRY = 28 ; public static final int TYPEOF = 29 ; public static final int VAR = 30 ; public static final int VOID = 31 ; public static final int WHILE = 32 ; public static final int WITH = 33 ; public static final int LCURLY = 34 ; public static final int DOT = 35 ; public static final int GREATER_EQUAL = 36 ; public static final int PLUS = 37 ; public static final int LESS_LESS = 38 ; public static final int EXCLAMATION = 39 ; public static final int EQUAL = 40 ; public static final int GREATER_GREATER_EQUAL = 41 ; public static final int RCURLY = 42 ; public static final int SEMICOLON = 43 ; public static final int EQUAL_EQUAL = 44 ; public static final int MINUS = 45 ; public static final int GREATER_GREATER = 46 ; public static final int TILDE = 47 ; public static final int PLUS_EQUAL = 48 ; public static final int GREATER_GREATER_GREATER_EQUAL = 49 ; public static final int LPAREN = 50 ; public static final int COMMA = 51 ; public static final int EXCLAMATION_EQUAL = 52 ; public static final int STAR = 53 ; public static final int GREATER_GREATER_GREATER = 54 ; public static final int AMPERSAND_AMPERSAND = 55 ; public static final int MINUS_EQUAL = 56 ; public static final int AMPERSAND_EQUAL = 57 ; public static final int RPAREN = 58 ; public static final int LESS = 59 ; public static final int EQUAL_EQUAL_EQUAL = 60 ; public static final int PERCENT = 61 ; public static final int AMPERSAND = 62 ; public static final int PIPE_PIPE = 63 ; public static final int STAR_EQUAL = 64 ; public static final int PIPE_EQUAL = 65 ; public static final int LBRACKET = 66 ; public static final int GREATER = 67 ; public static final int EXCLAMATION_EQUAL_EQUAL = 68 ; public static final int PLUS_PLUS = 69 ; public static final int PIPE = 70 ; public static final int QUESTION = 71 ; public static final int PERCENT_EQUAL = 72 ; public static final int CARET_EQUAL = 73 ; public static final int RBRACKET = 74 ; public static final int LESS_EQUAL = 75 ; public static final int MINUS_MINUS = 76 ; public static final int CARET = 77 ; public static final int COLON = 78 ; public static final int LESS_LESS_EQUAL = 79 ; public static final int FORWARD_SLASH = 80 ; public static final int FORWARD_SLASH_EQUAL = 81 ; public static final int PI_OPEN = 82 ; public static final int PI_TEXT = 83 ; public static final int PI_CLOSE = 92 ; public static final int NULL = 84 ; public static final int TRUE = 85 ; public static final int FALSE = 86 ; public static final int NUMBER = 87 ; public static final int STRING = 88 ; public static final int REGEX = 89 ; public static final int MULTILINE_COMMENT = 90 ; public static final int DOCUMENTATION = 91 ; public static final int MAX_VALUE = 92 ; public static String [ ] getNames ( ) { String [ ] result = new String [ MAX_VALUE + 1 ] ; for ( int i = 0 ; i <= MAX_VALUE ; i ++ ) { result [ i ] = getName ( i ) ; } return result ; } public static String getName ( int type ) { switch ( type ) { case ERROR : return "ERROR" ; case WHITESPACE : return "WHITESPACE" ; case COMMENT : return "COMMENT" ; case CDO : return "CDO" ; case CDC : return "CDC" ; case LINE_TERMINATOR : return "LINE_TERMINATOR" ; case START_MULTILINE_COMMENT : return "START_MULTILINE_COMMENT" ; case START_DOCUMENTATION : return "START_DOCUMENTATION" ; case IDENTIFIER : return "IDENTIFIER" ; case BREAK : return "BREAK" ; case CASE : return "CASE" ; case CATCH : return "CATCH" ; case CONTINUE : return "CONTINUE" ; case DEFAULT : return "DEFAULT" ; case DELETE : return "DELETE" ; case DO : return "DO" ; case ELSE : return "ELSE" ; case IF : return "IF" ; case IN : return "IN" ; case INSTANCEOF : return "INSTANCEOF" ; case FINALLY : return "FINALLY" ; case FOR : return "FOR" ; case FUNCTION : return "FUNCTION" ; case NEW : return "NEW" ; case RETURN : return "RETURN" ; case SWITCH : return "SWITCH" ; case THIS : return "THIS" ; case THROW : return "THROW" ; case TRY : return "TRY" ; case TYPEOF : return "TYPEOF" ; case VAR : return "VAR" ; case VOID : return "VOID" ; case WHILE : return "WHILE" ; case WITH : return "WITH" ; case LCURLY : return "LCURLY" ; case DOT : return "DOT" ; case GREATER_EQUAL : return "GREATER_EQUAL" ; case PLUS : return "PLUS" ; case LESS_LESS : return "LESS_LESS" ; case EXCLAMATION : return "EXCLAMATION" ; case EQUAL : return "EQUAL" ; case GREATER_GREATER_EQUAL : return "GREATER_GREATER_EQUAL" ; case RCURLY : return "RCURLY" ; case SEMICOLON : return "SEMICOLON" ; case EQUAL_EQUAL : return "EQUAL_EQUAL" ; case MINUS : return "MINUS" ; case GREATER_GREATER : return "GREATER_GREATER" ; case TILDE : return "TILDE" ; case PLUS_EQUAL : return "PLUS_EQUAL" ; case GREATER_GREATER_GREATER_EQUAL : return "GREATER_GREATER_GREATER_EQUAL" ; case LPAREN : return "LPAREN" ; case COMMA : return "COMMA" ; case EXCLAMATION_EQUAL : return "EXCLAMATION_EQUAL" ; case STAR : return "STAR" ; case GREATER_GREATER_GREATER : return "GREATER_GREATER_GREATER" ; case AMPERSAND_AMPERSAND : return "AMPERSAND_AMPERSAND" ; case MINUS_EQUAL : return "MINUS_EQUAL" ; case AMPERSAND_EQUAL : return "AMPERSAND_EQUAL" ; case RPAREN : return "RPAREN" ; case LESS : return "LESS" ; case EQUAL_EQUAL_EQUAL : return "EQUAL_EQUAL_EQUAL" ; case PERCENT : return "PERCENT" ; case AMPERSAND : return "AMPERSAND" ; case PIPE_PIPE : return "PIPE_PIPE" ; case STAR_EQUAL : return "STAR_EQUAL" ; case PIPE_EQUAL : return "PIPE_EQUAL" ; case LBRACKET : return "LBRACKET" ; case GREATER : return "GREATER" ; case EXCLAMATION_EQUAL_EQUAL : return "EXCLAMATION_EQUAL_EQUAL" ; case PLUS_PLUS : return "PLUS_PLUS" ; case PIPE : return "PIPE" ; case QUESTION : return "QUESTION" ; case PERCENT_EQUAL : return "PERCENT_EQUAL" ; case CARET_EQUAL : return "CARET_EQUAL" ; case RBRACKET : return "RBRACKET" ; case LESS_EQUAL : return "LESS_EQUAL" ; case MINUS_MINUS : return "MINUS_MINUS" ; case CARET : return "CARET" ; case COLON : return "COLON" ; case LESS_LESS_EQUAL : return "LESS_LESS_EQUAL" ; case FORWARD_SLASH : return "FORWARD_SLASH" ; case FORWARD_SLASH_EQUAL : return "FORWARD_SLASH_EQUAL" ; case PI_OPEN : return "PI_OPEN" ; case PI_CLOSE : return "PI_CLOSE" ; case PI_TEXT : return "PI_TEXT" ; case NULL : return "NULL" ; case TRUE : return "TRUE" ; case FALSE : return "FALSE" ; case NUMBER : return "NUMBER" ; case STRING : return "STRING" ; case REGEX : return "REGEX" ; case MULTILINE_COMMENT : return "MULTILINE_COMMENT" ; case DOCUMENTATION : return "DOCUMENTATION" ; default : return "<unknown>" ; } } public static int getIntValue ( String name ) { Class < ? > c = JSTokenTypes . class ; int result = - 1 ; try { Field f = c . getField ( name ) ; result = f . getInt ( c ) ; } catch ( SecurityException e ) { } catch ( NoSuchFieldException e ) { } catch ( IllegalArgumentException e ) { } catch ( IllegalAccessException e ) { } return result ; } } 