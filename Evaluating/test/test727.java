<<<<<<< HEAD
public class ScriptMetadata { private IPath path ; private String menuName ; private String toolbarName ; private String image ; private String onLoadFunction = null ; private String scopeName ; private String comment ; private String source ; private List < DOMDescriptor > doms = new ArrayList < DOMDescriptor > ( ) ; private List < Subscription > subscriptions = new ArrayList < Subscription > ( ) ; private String accelerator ; public void setMenuName ( String string ) { this . menuName = string ; } public void setToolbarName ( String string ) { this . toolbarName = string ; } public String getToolbarName ( ) { return this . toolbarName ; } public void setImage ( String string ) { this . image = string ; } public String getImage ( ) { return this . image ; } public void setOnLoadFunction ( String string ) { this . onLoadFunction = string ; } public void setPath ( IPath path ) { this . path = path ; } public IPath getPath ( ) { return path ; } public String getMenuName ( ) { return menuName ; } public String getOnLoadFunction ( ) { return this . onLoadFunction ; } public String getScopeName ( ) { return scopeName ; } public void setScopeName ( String s ) { scopeName = s ; } public List < DOMDescriptor > getDOMs ( ) { return doms ; } public String getReasonableFilename ( ) { if ( path != null ) return path . toFile ( ) . getName ( ) ; if ( menuName != null && ! menuName . equals ( "" ) ) { String result = menuName ; result = result . replaceAll ( " " , "_" ) ; Pattern illegalChars = Pattern . compile ( "[^\\p{Alnum}_-]" ) ; Matcher match = illegalChars . matcher ( result ) ; result = match . replaceAll ( "" ) ; if ( ! result . equals ( "" ) ) return result + ".js" ; } return "script.js" ; } public boolean containsDOM_by_plugin ( String plugin_id ) { for ( Iterator < DOMDescriptor > iter = doms . iterator ( ) ; iter . hasNext ( ) ; ) { DOMDescriptor element = iter . next ( ) ; if ( element . plugin_name . equals ( plugin_id ) ) return true ; } return false ; } public boolean ensure_doms_are_loaded ( IWorkbenchWindow window ) { String missing_plugin_names = "" ; URLtoPluginMap missing_urls = new URLtoPluginMap ( ) ; for ( Iterator < DOMDescriptor > iter = doms . iterator ( ) ; iter . hasNext ( ) ; ) { DOMDescriptor element = iter . next ( ) ; Bundle b = Platform . getBundle ( element . plugin_name ) ; if ( b == null ) { missing_plugin_names += "     " + element . plugin_name + "\n" ; missing_urls . add ( element ) ; } else if ( b . getState ( ) == Bundle . UNINSTALLED ) { missing_plugin_names += "     " + element . plugin_name + "\n" ; } } if ( missing_plugin_names . length ( ) > 0 ) { missing_plugin_names = missing_plugin_names . substring ( 0 , missing_plugin_names . length ( ) - 1 ) ; String choice = notifyMissingDOMs ( missing_plugin_names ) ; if ( choice . equals ( Messages . ScriptMetadata_LBL_Edit_script ) ) { openEditor ( ) ; } else if ( choice . equals ( Messages . ScriptMetadata_LBL_Cancel_script ) ) { return false ; } else { launchUpdateInstaller ( missing_urls ) ; } return false ; } return true ; } class URLtoPluginMap { Map < String , Set < String > > map = new HashMap < String , Set < String > > ( ) ; Iterator < String > iterator ( ) { return map . keySet ( ) . iterator ( ) ; } String getPluginNames ( String url ) { Set < String > ids = map . get ( url ) ; String idstr = "" ; for ( Iterator < String > iterator = ids . iterator ( ) ; iterator . hasNext ( ) ; ) { String id = iterator . next ( ) ; idstr += id + ", " ; } idstr = idstr . substring ( 0 , idstr . length ( ) - 2 ) ; return idstr ; } void add ( DOMDescriptor domdesc ) { Set < String > ids = map . get ( domdesc . url ) ; if ( ids == null ) ids = new HashSet < String > ( ) ; ids . add ( domdesc . plugin_name ) ; map . put ( domdesc . url , ids ) ; } } private void openEditor ( ) { try { IWorkbenchPage page = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; IEditorDescriptor desc = PlatformUI . getWorkbench ( ) . getEditorRegistry ( ) . getDefaultEditor ( path . toFile ( ) . getName ( ) ) ; if ( desc == null ) { desc = PlatformUI . getWorkbench ( ) . getEditorRegistry ( ) . getDefaultEditor ( "foo.txt" ) ; } page . openEditor ( UIUtils . createJavaFileEditorInput ( path . toFile ( ) ) , desc . getId ( ) ) ; } catch ( PartInitException x ) { MessageDialog . openError ( null , Messages . ScriptMetadata_ERR_TTL_Unable_open_editor , MessageFormat . format ( Messages . ScriptMetadata_ERR_MSG_Unable_open_editor , path . toFile ( ) . getName ( ) , x . toString ( ) ) ) ; } } private void launchUpdateInstaller ( URLtoPluginMap missing_urls ) { UpdateSearchScope scope = new UpdateSearchScope ( ) ; String [ ] skips = { } ; for ( Iterator < String > iter = missing_urls . iterator ( ) ; iter . hasNext ( ) ; ) { String url = iter . next ( ) ; try { String idstr = missing_urls . getPluginNames ( url ) ; boolean isPlural = idstr . indexOf ( "," ) >= 0 ; String title = MessageFormat . format ( Messages . ScriptMetadata_TTL_Update_site_singular , idstr ) ; if ( isPlural ) { title = MessageFormat . format ( Messages . ScriptMetadata_TTL_Update_site_plural , idstr ) ; } scope . addSearchSite ( title , new URL ( url ) , skips ) ; } catch ( MalformedURLException x ) { } } UpdateSearchRequest request = new UpdateSearchRequest ( UpdateSearchRequest . createDefaultSiteSearchCategory ( ) , scope ) ; UpdateJob job = new UpdateJob ( Messages . ScriptMetadata_TTL_Update_job , request ) ; Shell shell = Workbench . getInstance ( ) . getWorkbenchWindows ( ) [ 0 ] . getShell ( ) ; UpdateManagerUI . openInstaller ( shell , job ) ; } private String notifyMissingDOMs ( String missing_plugin_names ) { boolean isPlural = missing_plugin_names . indexOf ( "\n" ) >= 0 ; String installChoice = Messages . ScriptMetadata_LBL_Install_plugin ; String title = Messages . ScriptMetadata_LBL_Missing_DOM ; String msg = MessageFormat . format ( Messages . ScriptMetadata_MSG_script_0_requires_DOM_1 , this . path . toFile ( ) . getName ( ) , missing_plugin_names ) ; if ( isPlural ) { installChoice = Messages . ScriptMetadata_LBL_Install_plugins ; title = Messages . ScriptMetadata_LBL_Missing_DOMs ; msg = MessageFormat . format ( Messages . ScriptMetadata_MSG_script_0_requires_DOMs_1 , this . path . toFile ( ) . getName ( ) , missing_plugin_names ) ; } String [ ] choices = new String [ ] { Messages . ScriptMetadata_LBL_Cancel_script , Messages . ScriptMetadata_LBL_Edit_script , installChoice } ; MessageDialog dialog = new MessageDialog ( null , title , null , msg , MessageDialog . WARNING , choices , 2 ) ; int result = dialog . open ( ) ; String choice = choices [ result ] ; return choice ; } public void setKey ( String key ) { this . accelerator = key ; } public String getAccelerator ( ) { return accelerator ; } public boolean hasAccelerator ( ) { return accelerator != null ; } public List < Subscription > getSubscriptions ( ) { return subscriptions ; } public void subscribe ( ) { for ( int i = 0 ; i < subscriptions . size ( ) ; i ++ ) { Subscription subscription = ( Subscription ) subscriptions . get ( i ) ; subscription . subscribe ( path ) ; } } public void unsubscribe ( ) { for ( int i = 0 ; i < subscriptions . size ( ) ; i ++ ) { Subscription subscription = ( Subscription ) subscriptions . get ( i ) ; subscription . unsubscribe ( ) ; } } public String getComment ( ) { return comment ; } public void setComment ( String comment ) { this . comment = comment ; } public String getSource ( ) { return source ; } public void setSource ( String source ) { this . source = source ; } } 
=======
public class ViewBarrage extends Activity { } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
