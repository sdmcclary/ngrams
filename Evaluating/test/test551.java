public class PlatformValidatorPatcher { private static final String PREF_BACKUP = "prefBackup" ; public static void start ( ) { final IOperationValidator validator = OperationsManager . getValidator ( ) ; OperationsManager . setValidator ( new OperationValidator ( ) { public IStatus validateCurrentState ( ) { return validator . validateCurrentState ( ) ; } public IStatus validatePendingChanges ( IInstallFeatureOperation [ ] jobs ) { IStatus validatePendingChanges = validator . validatePendingChanges ( jobs ) ; if ( validatePendingChanges == null || validatePendingChanges . getCode ( ) != IStatus . ERROR ) { Exception e = new Exception ( ) ; StackTraceElement [ ] stackTrace = e . getStackTrace ( ) ; boolean isFromUI = false ; for ( int a = 0 ; a < stackTrace . length ; a ++ ) { String className = stackTrace [ a ] . getClassName ( ) ; if ( className . equals ( "org.eclipse.update.internal.ui.wizards.ReviewPage" ) ) { isFromUI = true ; break ; } } if ( ! isFromUI ) { exportPreferences ( ) ; } } return validatePendingChanges ; } public IStatus validatePendingConfig ( IFeature feature ) { return validator . validatePendingConfig ( feature ) ; } public IStatus validatePendingInstall ( IFeature oldFeature , IFeature newFeature ) { return validator . validatePendingInstall ( oldFeature , newFeature ) ; } public IStatus validatePendingReplaceVersion ( IFeature feature , IFeature anotherFeature ) { return validator . validatePendingReplaceVersion ( feature , anotherFeature ) ; } public IStatus validatePendingRevert ( IInstallConfiguration config ) { return validator . validatePendingRevert ( config ) ; } public IStatus validatePendingUnconfig ( IFeature feature ) { return validator . validatePendingUnconfig ( feature ) ; } public IStatus validatePlatformConfigValid ( ) { return validator . validatePlatformConfigValid ( ) ; } } ) ; } private static void exportPreferences ( ) { IPreferenceStore preferenceStore = CoreUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; if ( preferenceStore . getBoolean ( IPreferenceConstants . PREF_AUTO_BACKUP_ENABLED ) ) { String string = preferenceStore . getString ( IPreferenceConstants . PREF_AUTO_BACKUP_PATH ) ; File folder = new File ( string ) ; folder . mkdirs ( ) ; doExport ( folder ) ; } } private static void doExport ( File folder ) { long currentTimeMillis = System . currentTimeMillis ( ) ; Date dt = new Date ( currentTimeMillis ) ; DateFormat dateInstance = DateFormat . getDateInstance ( DateFormat . SHORT ) ; String fDate = dateInstance . format ( dt ) ; fDate = StringUtils . replace ( fDate , "/" , "_" ) ; fDate = StringUtils . replace ( fDate , "\\" , "_" ) ; String fName = FileUtils . ensureValidFilename ( PREF_BACKUP + fDate + ".epr" ) ; File fl = new File ( folder , fName ) ; int a = 1 ; while ( fl . exists ( ) ) { fName = FileUtils . ensureValidFilename ( PREF_BACKUP + fDate + "v" + a + ".epr" ) ; a ++ ; fl = new File ( folder , fName ) ; } exportPreferences ( fl ) ; IPreferenceStore preferenceStore = CoreUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; preferenceStore . putValue ( IPreferenceConstants . PREF_AUTO_BACKUP_LASTNAME , fl . getAbsolutePath ( ) ) ; } public static boolean exportPreferences ( File file ) { IPreferencesService service = Platform . getPreferencesService ( ) ; try { FileOutputStream transfers = new FileOutputStream ( file ) ; String [ ] fos = new String [ 0 ] ; service . exportPreferences ( service . getRootNode ( ) , transfers , fos ) ; transfers . flush ( ) ; transfers . close ( ) ; return true ; } catch ( final IOException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , Messages . getString ( "PlatformValidatorPatcher.ERR_ErrorExportingPreferences" ) , e ) ; UIJob job = new UIJob ( "Export Preferences" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { MessageDialog . openError ( getDisplay ( ) . getActiveShell ( ) , new String ( ) , e . getLocalizedMessage ( ) ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; return false ; } catch ( final CoreException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , Messages . getString ( "PlatformValidatorPatcher.ERR_ErrorExportingPreferences" ) , e ) ; UIJob job = new UIJob ( "Export Preferences" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { MessageDialog . openError ( getDisplay ( ) . getActiveShell ( ) , new String ( ) , e . getLocalizedMessage ( ) ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; return false ; } } public static boolean importPreferences ( File file ) { IPreferencesService service = Platform . getPreferencesService ( ) ; try { IStatus importPreferences = service . importPreferences ( new FileInputStream ( file ) ) ; return importPreferences . getCode ( ) == IStatus . OK ; } catch ( final CoreException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , Messages . getString ( "PlatformValidatorPatcher.ERR_ErrorImportingPreferences" ) , e ) ; UIJob job = new UIJob ( "Import Preferences" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { MessageDialog . openError ( getDisplay ( ) . getActiveShell ( ) , new String ( ) , e . getLocalizedMessage ( ) ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; return false ; } catch ( final FileNotFoundException e ) { IdeLog . logError ( CoreUIPlugin . getDefault ( ) , Messages . getString ( "PlatformValidatorPatcher.ERR_ErrorImportingPreferences" ) , e ) ; UIJob job = new UIJob ( "Import Preferences" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { MessageDialog . openError ( getDisplay ( ) . getActiveShell ( ) , new String ( ) , e . getLocalizedMessage ( ) ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; return false ; } } } 