<<<<<<< HEAD
public class ElementTreeSelectionDialog extends SelectionStatusDialog { protected TreeViewer fViewer ; protected ILabelProvider fLabelProvider ; protected ITreeContentProvider fContentProvider ; private ISelectionStatusValidator fValidator = null ; private ViewerComparator fComparator ; private boolean fAllowMultiple = true ; private boolean fDoubleClickSelects = true ; private String fEmptyListMessage = WorkbenchMessages . ElementTreeSelectionDialog_nothing_available ; private IStatus fCurrStatus = new Status ( IStatus . OK , PlatformUI . PLUGIN_ID , IStatus . OK , "" , null ) ; private List fFilters ; private Object fInput ; protected boolean fIsEmpty ; private int fWidth = 50 ; private int fHeight = 12 ; public ElementTreeSelectionDialog ( Shell parent , ILabelProvider labelProvider , ITreeContentProvider contentProvider ) { super ( parent ) ; fLabelProvider = labelProvider ; fContentProvider = contentProvider ; setResult ( new ArrayList ( 0 ) ) ; setStatusLineAboveButtons ( true ) ; } public void setInitialSelection ( Object selection ) { setInitialSelections ( new Object [ ] { selection } ) ; } public void setEmptyListMessage ( String message ) { fEmptyListMessage = message ; } public void setAllowMultiple ( boolean allowMultiple ) { fAllowMultiple = allowMultiple ; } public void setDoubleClickSelects ( boolean doubleClickSelects ) { fDoubleClickSelects = doubleClickSelects ; } public void setSorter ( ViewerSorter sorter ) { fComparator = sorter ; } public void setComparator ( ViewerComparator comparator ) { fComparator = comparator ; } public void addFilter ( ViewerFilter filter ) { if ( fFilters == null ) { fFilters = new ArrayList ( 4 ) ; } fFilters . add ( filter ) ; } public void setValidator ( ISelectionStatusValidator validator ) { fValidator = validator ; } public void setInput ( Object input ) { fInput = input ; } public void setSize ( int width , int height ) { fWidth = width ; fHeight = height ; } protected void updateOKStatus ( ) { if ( ! fIsEmpty ) { if ( fValidator != null ) { fCurrStatus = fValidator . validate ( getResult ( ) ) ; updateStatus ( fCurrStatus ) ; } else { fCurrStatus = new Status ( IStatus . OK , PlatformUI . PLUGIN_ID , IStatus . OK , "" , null ) ; } } else { fCurrStatus = new Status ( IStatus . ERROR , PlatformUI . PLUGIN_ID , IStatus . ERROR , fEmptyListMessage , null ) ; } updateStatus ( fCurrStatus ) ; } public int open ( ) { fIsEmpty = evaluateIfTreeEmpty ( fInput ) ; super . open ( ) ; return getReturnCode ( ) ; } private void access$superCreate ( ) { super . create ( ) ; } protected void cancelPressed ( ) { setResult ( null ) ; super . cancelPressed ( ) ; } protected void computeResult ( ) { setResult ( ( ( IStructuredSelection ) fViewer . getSelection ( ) ) . toList ( ) ) ; } public void create ( ) { BusyIndicator . showWhile ( null , new Runnable ( ) { public void run ( ) { access$superCreate ( ) ; fViewer . setSelection ( new StructuredSelection ( getInitialElementSelections ( ) ) , true ) ; updateOKStatus ( ) ; } } ) ; } protected Control createDialogArea ( Composite parent ) { Composite composite = ( Composite ) super . createDialogArea ( parent ) ; Label messageLabel = createMessageArea ( composite ) ; TreeViewer treeViewer = createTreeViewer ( composite ) ; GridData data = new GridData ( GridData . FILL_BOTH ) ; data . widthHint = convertWidthInCharsToPixels ( fWidth ) ; data . heightHint = convertHeightInCharsToPixels ( fHeight ) ; Tree treeWidget = treeViewer . getTree ( ) ; treeWidget . setLayoutData ( data ) ; treeWidget . setFont ( parent . getFont ( ) ) ; if ( fIsEmpty ) { messageLabel . setEnabled ( false ) ; treeWidget . setEnabled ( false ) ; } return composite ; } protected TreeViewer createTreeViewer ( Composite parent ) { int style = SWT . BORDER | ( fAllowMultiple ? SWT . MULTI : SWT . SINGLE ) ; fViewer = doCreateTreeViewer ( parent , style ) ; fViewer . setContentProvider ( fContentProvider ) ; fViewer . setLabelProvider ( fLabelProvider ) ; fViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { access$setResult ( ( ( IStructuredSelection ) event . getSelection ( ) ) . toList ( ) ) ; updateOKStatus ( ) ; } } ) ; fViewer . setComparator ( fComparator ) ; if ( fFilters != null ) { for ( int i = 0 ; i != fFilters . size ( ) ; i ++ ) { fViewer . addFilter ( ( ViewerFilter ) fFilters . get ( i ) ) ; } } if ( fDoubleClickSelects ) { Tree tree = fViewer . getTree ( ) ; tree . addSelectionListener ( new SelectionAdapter ( ) { public void widgetDefaultSelected ( SelectionEvent e ) { updateOKStatus ( ) ; if ( fCurrStatus . isOK ( ) ) { access$superButtonPressed ( IDialogConstants . OK_ID ) ; } } } ) ; } fViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { public void doubleClick ( DoubleClickEvent event ) { updateOKStatus ( ) ; if ( ! ( fDoubleClickSelects && fCurrStatus . isOK ( ) ) ) { ISelection selection = event . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { Object item = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( fViewer . getExpandedState ( item ) ) { fViewer . collapseToLevel ( item , 1 ) ; } else { fViewer . expandToLevel ( item , 1 ) ; } } } } } ) ; fViewer . setInput ( fInput ) ; return fViewer ; } protected TreeViewer doCreateTreeViewer ( Composite parent , int style ) { return new TreeViewer ( new Tree ( parent , style ) ) ; } protected TreeViewer getTreeViewer ( ) { return fViewer ; } protected boolean evaluateIfTreeEmpty ( Object input ) { Object [ ] elements = fContentProvider . getElements ( input ) ; if ( elements . length > 0 ) { if ( fFilters != null ) { for ( int i = 0 ; i < fFilters . size ( ) ; i ++ ) { ViewerFilter curr = ( ViewerFilter ) fFilters . get ( i ) ; elements = curr . filter ( fViewer , input , elements ) ; } } } return elements . length == 0 ; } protected void access$superButtonPressed ( int id ) { super . buttonPressed ( id ) ; } protected void access$setResult ( List result ) { super . setResult ( result ) ; } protected void handleShellCloseEvent ( ) { super . handleShellCloseEvent ( ) ; if ( getReturnCode ( ) == CANCEL ) { setResult ( null ) ; } } } 
=======
public class HttpRequest extends HttpMessage { private String method ; private String rawPath ; private String clientHost ; private int clientPort ; private HttpResponse response ; public HttpRequest ( ) { } public HttpRequest ( String clientHost , int clientPort , String method , String rawPath , String httpVersion , Map < String , String > headers , byte [ ] body ) { this . clientHost = clientHost ; this . clientPort = clientPort ; this . method = method ; this . rawPath = rawPath ; this . httpVersion = httpVersion ; this . headers = headers ; this . body = body ; this . response = null ; } public HttpResponse getResponse ( ) { return response ; } public void setResponse ( HttpResponse response ) { this . response = response ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public String getRawPath ( ) { return rawPath ; } public void setRawPath ( String rawPath ) { this . rawPath = rawPath ; } public String getClientHost ( ) { return clientHost ; } public int getClientPort ( ) { return clientPort ; } public void setClientHost ( String clientHost ) { this . clientHost = clientHost ; } public void setClientPort ( int clientPort ) { this . clientPort = clientPort ; } @ Override protected void readFirstLine ( PushbackInputStream r ) throws IOException { method = readUpTo ( r , ' ' ) ; rawPath = readUpTo ( r , ' ' ) ; httpVersion = checkHttpVersion ( readUpToEol ( r ) ) ; } public void setResponse ( int statusCode , String statusText ) { setResponse ( new HttpResponse ( httpVersion , statusCode , statusText , null , null ) ) ; } public String firstLine ( ) { return method + " " + rawPath + " HTTP/" + httpVersion + "\r\n" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
