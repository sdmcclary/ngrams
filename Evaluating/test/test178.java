public class Utils { private Utils ( ) { } public static boolean equals ( Object o1 , Object o2 ) { if ( o1 == null ) { return o2 == null ; } else { return o1 . equals ( o2 ) ; } } public static String toString ( Object obj ) { return ( obj == null ? null : obj . toString ( ) ) ; } public static String toString ( Atom [ ] atoms ) { String s = "" ; if ( atoms != null ) { for ( int i = 0 ; i < atoms . length ; i ++ ) { if ( i > 0 ) { s += " " ; } s += atoms [ i ] . toString ( ) ; } } return s ; } public static Atom [ ] toAtoms ( Collection < ? extends Atomizer > objs ) { Atom [ ] atoms = new Atom [ objs . size ( ) ] ; int i = 0 ; for ( Atomizer obj : objs ) { atoms [ i ] = obj . toAtom ( ) ; i ++ ; } return atoms ; } public static boolean isNumber ( Atom atom ) { return atom . isInt ( ) || atom . isFloat ( ) ; } public static String detokenize ( Atom [ ] args ) { return detokenize ( null , args ) ; } public static String detokenize ( String msg , Atom [ ] args ) { StringBuilder input = new StringBuilder ( ) ; if ( msg != null ) { input . append ( detokenize ( msg ) ) . append ( " " ) ; } for ( int i = 0 ; i < args . length ; i ++ ) { if ( i > 0 ) { input . append ( " " ) ; } input . append ( detokenize ( args [ i ] ) ) ; } return input . toString ( ) ; } public static String detokenize ( Atom atom ) { if ( atom == null ) { return "" ; } return detokenize ( atom . toString ( ) ) ; } public static String detokenize ( String str ) { if ( str . contains ( " " ) ) { return '"' + str + '"' ; } else { return str ; } } public static File getFile ( String path ) { return getFile ( path , null ) ; } public static File getFile ( String path , MaxPatcher patcher ) { return getFile ( path , patcher , false ) ; } public static File getFile ( String path , MaxPatcher patcher , boolean suppressError ) { if ( path == null || path . length ( ) == 0 ) { path = MaxSystem . openDialog ( ) ; if ( path == null ) { return null ; } } File file ; String location = MaxSystem . maxPathToNativePath ( path ) ; if ( location != null ) { file = new File ( location ) ; if ( file != null && file . isFile ( ) ) { return file ; } } if ( patcher != null ) { File patcherFolder = new File ( patcher . getPath ( ) ) ; file = new File ( patcherFolder , path ) ; if ( file != null && file . isFile ( ) ) { return file ; } } location = MaxSystem . locateFile ( path ) ; if ( location != null ) { file = new File ( location ) ; if ( file != null && file . isFile ( ) ) { return file ; } } if ( ! suppressError ) { System . err . println ( "File not found: " + path ) ; } return null ; } public static String getFileAsString ( String path ) { return getFileAsString ( getFile ( path ) ) ; } public static String getFileAsString ( File file ) { if ( file == null || ! file . exists ( ) ) { return null ; } try { return getReaderAsString ( new FileReader ( file ) ) ; } catch ( IOException e ) { System . err . println ( e . getMessage ( ) ) ; return null ; } } public static String getInputStreamAsString ( InputStream in ) { return getReaderAsString ( new InputStreamReader ( in ) ) ; } public static String getReaderAsString ( Reader r ) { StringBuilder text = new StringBuilder ( 5000 ) ; BufferedReader reader = null ; try { reader = new BufferedReader ( r ) ; char [ ] buf = new char [ 1024 ] ; int charsRead = 0 ; while ( ( charsRead = reader . read ( buf ) ) != - 1 ) { text . append ( buf , 0 , charsRead ) ; } return text . toString ( ) ; } catch ( IOException e ) { System . err . println ( e . getMessage ( ) ) ; return null ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { System . err . println ( e . getMessage ( ) ) ; } } } } public static String getStackTrace ( Throwable t ) { Writer stw = new StringWriter ( ) ; t . printStackTrace ( new PrintWriter ( stw ) ) ; return stw . toString ( ) ; } public static boolean isPatcherSaved ( MaxPatcher patcher ) { if ( patcher != null ) { String filePath = patcher . getFilePath ( ) ; if ( filePath != null ) { filePath = filePath . toLowerCase ( ) ; if ( filePath . endsWith ( ".maxpat" ) || filePath . endsWith ( ".maxhelp" ) || filePath . endsWith ( ".json" ) || filePath . endsWith ( ".amxd" ) ) { return true ; } } } return false ; } } 