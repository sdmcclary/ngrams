<<<<<<< HEAD
public class ApacheServer extends AbstractExternalServer { private String startApache ; private String stopApache ; private String restartApache ; private String etcHosts ; private String hostName ; public void installConfig ( IAbstractConfiguration configuration ) { setEtcHosts ( configuration . getStringAttribute ( ApacheServerTypeDelegate . ETCHOSTS ) ) ; setDocumentRoot ( configuration . getStringAttribute ( IServer . KEY_DOCUMENT_ROOT ) ) ; setRestartApache ( configuration . getStringAttribute ( ApacheServerTypeDelegate . RESTARTAPACHE ) ) ; setStartApache ( configuration . getStringAttribute ( ApacheServerTypeDelegate . STARTAPACHE ) ) ; setStopApache ( configuration . getStringAttribute ( ApacheServerTypeDelegate . STOPAPACHE ) ) ; this . hostName = configuration . getStringAttribute ( ApacheServerTypeDelegate . HOSTNAME ) ; super . installConfig ( configuration ) ; } public void storeConfiguration ( IAbstractConfiguration config ) { super . storeConfiguration ( config ) ; config . setStringAttribute ( ApacheServerTypeDelegate . ETCHOSTS , getEtcHosts ( ) ) ; config . setStringAttribute ( IServer . KEY_DOCUMENT_ROOT , getDocumentRootStr ( ) ) ; config . setStringAttribute ( ApacheServerTypeDelegate . RESTARTAPACHE , getRestartApache ( ) ) ; config . setStringAttribute ( ApacheServerTypeDelegate . STARTAPACHE , getStartApache ( ) ) ; config . setStringAttribute ( ApacheServerTypeDelegate . STOPAPACHE , getStopApache ( ) ) ; config . setStringAttribute ( ApacheServerTypeDelegate . HOSTNAME , hostName ) ; } public ApacheServer ( IServerType type , IAbstractConfiguration configuration ) { super ( type , configuration ) ; if ( startApache == null || startApache . length ( ) == 0 ) { startApache = "-k start" ; } if ( stopApache == null || stopApache . length ( ) == 0 ) { stopApache = "-k stop" ; } if ( restartApache == null || restartApache . length ( ) == 0 ) { restartApache = "-k restart" ; } } public String getConfigurationDescription ( ) { return getPath ( ) + " " + getEtcHosts ( ) ; } protected IStatus restart ( String mode , IProgressMonitor monitor ) { setServerState ( IServer . STATE_STOPPED ) ; serverChanged ( ) ; try { Thread . sleep ( 200 ) ; } catch ( InterruptedException e ) { } setServerState ( IServer . STATE_STARTING ) ; try { Thread . sleep ( 200 ) ; } catch ( InterruptedException e ) { } serverChanged ( ) ; try { Thread . sleep ( 200 ) ; } catch ( InterruptedException e ) { } IStatus doLaunch = doLaunch ( getRestartApache ( ) ) ; if ( doLaunch . isOK ( ) ) { setServerState ( IServer . STATE_STARTED ) ; setMode ( "run" ) ; } else { setServerState ( IServer . STATE_STARTING ) ; } try { Thread . sleep ( 200 ) ; } catch ( InterruptedException e ) { } serverChanged ( ) ; return doLaunch ; } protected IStatus start ( String mode , IProgressMonitor monitor ) { String arg = getStartApache ( ) ; IStatus doLaunch = doLaunch ( arg ) ; if ( doLaunch . isOK ( ) ) { setServerState ( IServer . STATE_STARTED ) ; setMode ( "run" ) ; } return doLaunch ; } @ Override protected IPath getDefaultLogPath ( ) { return new Path ( new File ( this . getPath ( ) ) . getParentFile ( ) . getParent ( ) + "/logs/error.log" ) ; } private IStatus doLaunch ( String arg ) { try { String [ ] split = arg . split ( " " ) ; ArrayList < String > bf = new ArrayList < String > ( ) ; for ( int a = 0 ; a < split . length ; a ++ ) { String sm = split [ a ] . trim ( ) ; if ( ! "" . equals ( sm ) ) { bf . add ( sm ) ; } } String [ ] args = new String [ bf . size ( ) ] ; bf . toArray ( args ) ; IProcess exec = LaunchUtils . exec ( getPath ( ) , args , null ) ; if ( exec != null ) { registerProcess ( exec ) ; return Status . OK_STATUS ; } return new Status ( IStatus . ERROR , ServerUIPlugin . ID , IStatus . ERROR , StringUtils . format ( "could not create process {0}" , getPath ( ) ) , null ) ; } catch ( CoreException e ) { return new Status ( IStatus . ERROR , ServerUIPlugin . ID , IStatus . ERROR , e . getMessage ( ) , e ) ; } } protected IStatus stop ( boolean force , IProgressMonitor monitor ) { IStatus doLaunch = doLaunch ( getStopApache ( ) ) ; if ( doLaunch . isOK ( ) ) { setMode ( null ) ; setServerState ( IServer . STATE_STOPPED ) ; } return doLaunch ; } public String getStartApache ( ) { return startApache ; } public void setStartApache ( String startApache ) { this . startApache = startApache ; } public String getStopApache ( ) { return stopApache ; } public void setStopApache ( String stopApache ) { this . stopApache = stopApache ; } public String getRestartApache ( ) { return restartApache ; } public void setRestartApache ( String restartApache ) { this . restartApache = restartApache ; } public String getEtcHosts ( ) { return etcHosts ; } public void setEtcHosts ( String etcHosts ) { this . etcHosts = etcHosts ; } public String getHost ( ) { return this . hostName ; } static String getApacheHost ( Properties properties2 , int port ) { String host = properties2 . getProperty ( "listen" ) ; if ( port != 0 ) { host = Integer . toString ( port ) ; } if ( host != null ) { int indexOf = host . indexOf ( ':' ) ; if ( indexOf == - 1 ) { return StringUtils . format ( "127.0.0.1:{0}" , host ) ; } } return host ; } protected Properties loadProperties ( ) { File apachePath = new File ( this . getPath ( ) ) . getParentFile ( ) . getParentFile ( ) ; Properties readServerProperties = readServerProperties ( apachePath ) ; return readServerProperties ; } public static Properties readServerProperties ( File apachePath ) { Properties properties2 = new Properties ( ) ; File configurationFolder = new File ( apachePath , "conf" ) ; File configFile = new File ( configurationFolder , "httpd.conf" ) ; try { FileReader rrs = new FileReader ( configFile ) ; BufferedReader bs = new BufferedReader ( rrs ) ; while ( true ) { String readLine = bs . readLine ( ) ; if ( readLine == null ) { break ; } readLine = readLine . trim ( ) ; if ( readLine . startsWith ( "#" ) ) { continue ; } for ( int a = 0 ; a < readLine . length ( ) ; a ++ ) { char c = readLine . charAt ( a ) ; if ( Character . isWhitespace ( c ) ) { String key = readLine . substring ( 0 , a ) . toLowerCase ( ) ; String value = readLine . substring ( a ) . trim ( ) ; properties2 . put ( key , value ) ; } } } } catch ( FileNotFoundException e ) { IdeLog . logError ( ServerUIPlugin . getDefault ( ) , "Configuration file not found" , e ) ; } catch ( IOException e ) { IdeLog . logError ( ServerUIPlugin . getDefault ( ) , "IO Error while reading server properties" , e ) ; } return properties2 ; } public boolean isWebServer ( ) { return true ; } public String getHostname ( ) { return this . hostName ; } public IStatus canPause ( ) { if ( this . getServerState ( ) != IPausableServer . STATE_STARTED ) { return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , 0 , Messages . ApacheServer_ONLY_RUNNING_MAY_BE_PAUSED , null ) ; } if ( this . getServerState ( ) == IPausableServer . STATE_PAUSED ) { return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , 0 , Messages . ApacheServer_ALREADY_PAUSED , null ) ; } return Status . OK_STATUS ; } public IStatus canResume ( ) { if ( this . getServerState ( ) != IPausableServer . STATE_PAUSED ) { return new Status ( IStatus . ERROR , ServerCore . PLUGIN_ID , 0 , Messages . ApacheServer_ONLY_PAUSED_MAY_BE_RESUMED , null ) ; } return Status . OK_STATUS ; } public void pause ( IOperationListener listener , IProgressMonitor monitor ) { stop ( true , monitor ) ; setServerState ( IPausableServer . STATE_PAUSED ) ; serverChanged ( ) ; } public void resume ( IOperationListener listener , IProgressMonitor monitor ) { setServerState ( IPausableServer . STATE_STOPPED ) ; start ( "run" , monitor ) ; serverChanged ( ) ; } public int getPort ( ) { return 0 ; } } 
=======
public class BookItems extends LiteralArrayVector { private String request ; protected String getItemDescriptor ( ) { return "Item" ; } public Object getProperty ( int index ) { throw new RuntimeException ( "BookItems.getProperty is not implemented yet" ) ; } public int getPropertyCount ( ) { return 4 ; } public void getPropertyInfo ( int index , Hashtable properties , PropertyInfo info ) { info . type = new SoapObject ( BaseObject . NAMESPACE , "" ) . getClass ( ) ; switch ( index ) { case 0 : info . name = "Request" ; break ; case 1 : info . name = "TotalResults" ; break ; case 2 : info . name = "TotalPages" ; break ; case 3 : super . getPropertyInfo ( index , properties , info ) ; default : break ; } } public void setProperty ( int index , Object value ) { switch ( index ) { case 0 : request = value . toString ( ) ; break ; case 3 : super . setProperty ( index , value ) ; default : break ; } } protected Class getElementClass ( ) { return new Book ( ) . getClass ( ) ; } public void register ( SoapSerializationEnvelope envelope ) { super . register ( envelope , BaseObject . NAMESPACE , "Items" ) ; } public synchronized String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "Request: " ) ; buffer . append ( request ) ; buffer . append ( "\n" ) ; for ( int i = 0 ; i < size ( ) ; i ++ ) { buffer . append ( "\n=== BOOK ===\n" ) ; buffer . append ( elementAt ( i ) . toString ( ) ) ; } return buffer . toString ( ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
