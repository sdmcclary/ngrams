public final class Firefox { public static final String NAME = "Firefox" ; public static final String NEW_WINDOW = "-new-window" ; public static final String NEW_TAB = "-new-tab" ; private static final String [ ] WIN32_PROFILES_LOCATIONS = { "%APPDATA%\\Mozilla\\Firefox\\" } ; private static final String [ ] LINUX_PROFILES_LOCATIONS = { "~/.mozilla/firefox/" } ; private static final String [ ] MACOSX_PROFILES_LOCATIONS = { "~/Library/Application Support/Firefox/" , "~/Library/Mozilla/Firefox/" } ; private static final Map < String , String [ ] > LOCATIONS = new HashMap < String , String [ ] > ( ) ; static { LOCATIONS . put ( Platform . OS_WIN32 , WIN32_PROFILES_LOCATIONS ) ; LOCATIONS . put ( Platform . OS_LINUX , LINUX_PROFILES_LOCATIONS ) ; LOCATIONS . put ( Platform . OS_MACOSX , MACOSX_PROFILES_LOCATIONS ) ; } private Firefox ( ) { } public static boolean isBrowserExecutable ( String browserExecutable ) { String name = new File ( browserExecutable ) . getName ( ) ; if ( name . toLowerCase ( ) . indexOf ( "firefox" ) != - 1 ) { return true ; } return false ; } public static File findDefaultProfileLocation ( ) { String [ ] locations = ( String [ ] ) LOCATIONS . get ( Platform . getOS ( ) ) ; if ( locations != null ) { for ( int i = 0 ; i < locations . length ; ++ i ) { String location = PlatformUtils . expandEnvironmentStrings ( locations [ i ] ) ; File dir = new File ( location ) ; if ( ! dir . isDirectory ( ) || ! dir . exists ( ) ) { continue ; } IdeLog . logInfo ( JSDebugPlugin . getDefault ( ) , StringUtils . format ( "Check location {0} for default profile" , location ) ) ; File [ ] profiles = readProfiles ( dir ) ; if ( profiles . length == 0 ) { File dirProfiles = new File ( dir , "Profiles" ) ; if ( ! dirProfiles . exists ( ) || ! dirProfiles . isDirectory ( ) ) { dirProfiles = dir ; } profiles = dirProfiles . listFiles ( new FilenameFilter ( ) { public boolean accept ( File dir , String name ) { return name . endsWith ( ".default" ) ; } } ) ; } StringBuffer sb = new StringBuffer ( ) ; for ( int j = 0 ; j < profiles . length ; ++ j ) { if ( j != 0 ) { sb . append ( ',' ) ; } sb . append ( profiles [ j ] . toString ( ) ) ; } IdeLog . logInfo ( JSDebugPlugin . getDefault ( ) , StringUtils . format ( "Profiles found: {0}" , sb . toString ( ) ) ) ; for ( int j = 0 ; j < profiles . length ; ++ j ) { File profile = profiles [ j ] ; if ( profile . exists ( ) && profile . isDirectory ( ) ) { IdeLog . logInfo ( JSDebugPlugin . getDefault ( ) , StringUtils . format ( "Default profile was found at {0}" , profile . toString ( ) ) ) ; return profile ; } } } } return null ; } public static boolean installLinkedExtension ( URL extensionURL , String extensionID , File dir ) { File file = new File ( dir , extensionID ) ; if ( file . exists ( ) && file . isDirectory ( ) ) { return true ; } IPath base = JSDebugPlugin . getDefault ( ) . getStateLocation ( ) . addTrailingSeparator ( ) ; boolean result = installExtension ( extensionURL , extensionID , base . toFile ( ) ) ; if ( result ) { String linkedPath = base . append ( extensionID ) . toOSString ( ) ; FileOutputStream out = null ; try { out = new FileOutputStream ( file ) ; out . write ( linkedPath . getBytes ( ) ) ; } catch ( IOException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } finally { if ( out != null ) { try { out . close ( ) ; } catch ( IOException e ) { } } } } return result ; } public static boolean installExtension ( URL extensionURL , String extensionID , File dir ) { dir = new File ( dir , extensionID ) ; if ( dir . exists ( ) ) { return true ; } if ( ! dir . mkdirs ( ) ) { return false ; } File file = null ; InputStream in = null ; FileOutputStream out = null ; try { file = File . createTempFile ( "ffe" , ".zip" ) ; in = extensionURL . openStream ( ) ; out = new FileOutputStream ( file ) ; byte [ ] buffer = new byte [ 0x1000 ] ; int n ; while ( ( n = in . read ( buffer ) ) > 0 ) { out . write ( buffer , 0 , n ) ; } } catch ( IOException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; if ( file != null ) { file . delete ( ) ; } return false ; } finally { if ( in != null ) { try { in . close ( ) ; } catch ( IOException e ) { } } if ( out != null ) { try { out . close ( ) ; } catch ( IOException e ) { } } } try { extract ( new ZipFile ( file ) , dir ) ; } catch ( IOException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; return false ; } finally { file . delete ( ) ; } return true ; } public static String getExtensionVersion ( String extensionID , File profileDir ) { File dir = new File ( new File ( profileDir , "extensions" ) , extensionID ) ; if ( dir . exists ( ) ) { File installRdf = new File ( dir , "install.rdf" ) ; if ( installRdf . exists ( ) ) { try { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder parser = factory . newDocumentBuilder ( ) ; Document document = parser . parse ( new FileInputStream ( installRdf ) ) ; Node node = document . getDocumentElement ( ) . getFirstChild ( ) ; while ( node != null ) { if ( "description" . equals ( node . getNodeName ( ) . toLowerCase ( ) ) || "rdf:description" . equals ( node . getNodeName ( ) . toLowerCase ( ) ) ) { NamedNodeMap attrs = node . getAttributes ( ) ; Node about = attrs . getNamedItem ( "about" ) ; if ( about == null ) { about = attrs . getNamedItem ( "RDF:about" ) ; } if ( about != null ) { if ( "urn:mozilla:install-manifest" . equals ( about . getNodeValue ( ) ) ) { break ; } } } node = node . getNextSibling ( ) ; } if ( node != null ) { NamedNodeMap attrs = node . getAttributes ( ) ; Node version = attrs . getNamedItem ( "em:version" ) ; if ( version != null ) { return version . getNodeValue ( ) ; } node = node . getFirstChild ( ) ; } while ( node != null ) { if ( "em:version" . equals ( node . getNodeName ( ) . toLowerCase ( ) ) ) { break ; } node = node . getNextSibling ( ) ; } if ( node != null ) { return node . getTextContent ( ) ; } } catch ( Exception e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } } } return null ; } private static void extract ( ZipFile zip , File path ) throws IOException { for ( Enumeration e = zip . entries ( ) ; e . hasMoreElements ( ) ; ) { ZipEntry entry = ( ZipEntry ) e . nextElement ( ) ; String name = entry . getName ( ) ; File file = new File ( path , name ) ; if ( entry . isDirectory ( ) && ! file . exists ( ) ) { file . mkdirs ( ) ; } } byte [ ] buffer = new byte [ 0x1000 ] ; int n ; for ( Enumeration e = zip . entries ( ) ; e . hasMoreElements ( ) ; ) { ZipEntry entry = ( ZipEntry ) e . nextElement ( ) ; String name = entry . getName ( ) ; File file = new File ( path , name ) ; if ( ! entry . isDirectory ( ) && ! file . exists ( ) ) { if ( ! file . createNewFile ( ) ) { continue ; } OutputStream out = new FileOutputStream ( file ) ; InputStream in = zip . getInputStream ( entry ) ; while ( ( n = in . read ( buffer ) ) > 0 ) { out . write ( buffer , 0 , n ) ; } in . close ( ) ; out . close ( ) ; } } } private static File [ ] readProfiles ( File dir ) { List < File > list = new ArrayList < File > ( ) ; File profilesIni = new File ( dir , "profiles.ini" ) ; if ( profilesIni . exists ( ) ) { LineNumberReader r = null ; try { r = new LineNumberReader ( new FileReader ( profilesIni ) ) ; String line ; Map < String , Map < String , String > > sections = new HashMap < String , Map < String , String > > ( ) ; Map < String , String > last = null ; Pattern sectionPattern = Pattern . compile ( "^\\x5B(.*)\\x5D$" ) ; Pattern valuePattern = Pattern . compile ( "^(.[^=]*)=(.*)$" ) ; while ( ( line = r . readLine ( ) ) != null ) { Matcher matcher = sectionPattern . matcher ( line ) ; if ( matcher . find ( ) ) { last = new HashMap < String , String > ( ) ; sections . put ( matcher . group ( 1 ) , last ) ; continue ; } else if ( last == null ) { continue ; } matcher = valuePattern . matcher ( line ) ; if ( matcher . find ( ) ) { last . put ( matcher . group ( 1 ) , matcher . group ( 2 ) ) ; } } for ( Iterator i = sections . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { String section = ( String ) i . next ( ) ; if ( section . startsWith ( "Profile" ) ) { Map properties = ( Map ) sections . get ( section ) ; String path = ( String ) properties . get ( "Path" ) ; String isRelative = ( String ) properties . get ( "IsRelative" ) ; File profile ; if ( isRelative != null && "1" . equals ( isRelative ) ) { profile = new File ( dir , path ) ; } else { profile = new File ( path ) ; } boolean def = properties . containsKey ( "Default" ) ; if ( def ) { list . add ( 0 , profile ) ; } else { list . add ( profile ) ; } } } } catch ( IOException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . format ( "Reading '{0}' fails" , profilesIni . getAbsolutePath ( ) ) , e ) ; } finally { if ( r != null ) { try { r . close ( ) ; } catch ( IOException ignore ) { } } } } return ( File [ ] ) list . toArray ( new File [ list . size ( ) ] ) ; } } 