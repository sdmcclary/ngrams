public class JSDebugModelPresentation extends LabelProvider implements IDebugModelPresentation { private boolean showTypes = false ; public void setAttribute ( String attribute , Object value ) { if ( IDebugModelPresentation . DISPLAY_VARIABLE_TYPE_NAMES . equals ( attribute ) ) { showTypes = ( ( Boolean ) value ) . booleanValue ( ) ; } } public String getText ( Object element ) { try { if ( element instanceof IStackFrame ) { return getStackFrameText ( ( IStackFrame ) element ) ; } else if ( element instanceof IThread ) { return getThreadText ( ( IThread ) element ) ; } else if ( element instanceof IBreakpoint ) { return getBreakpointText ( ( IBreakpoint ) element ) ; } else if ( element instanceof IJSScriptElement ) { return getScriptElementText ( ( IJSScriptElement ) element ) ; } else if ( element instanceof ISourceLink ) { return ( ( ISourceLink ) element ) . getLocation ( ) ; } else if ( element instanceof IMarker ) { IBreakpoint breakpoint = getBreakpoint ( ( IMarker ) element ) ; if ( breakpoint != null ) { return getBreakpointText ( breakpoint ) ; } } } catch ( CoreException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } return null ; } public Image getImage ( Object element ) { try { if ( element instanceof IVariable ) { return getVariableImage ( ( IVariable ) element ) ; } else if ( element instanceof IBreakpoint ) { return getBreakpointImage ( ( IBreakpoint ) element ) ; } else if ( element instanceof IJSScriptElement ) { return getScriptElementImage ( ( IJSScriptElement ) element ) ; } else if ( element instanceof IMarker ) { IBreakpoint breakpoint = getBreakpoint ( ( IMarker ) element ) ; if ( breakpoint != null ) { return getBreakpointImage ( breakpoint ) ; } } else if ( element instanceof JSInspectExpression ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_INSPECT ) ; } } catch ( CoreException e ) { IdeLog . logError ( JSDebugPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } return super . getImage ( element ) ; } private String getStackFrameText ( IStackFrame frame ) throws DebugException { String fileName ; if ( frame instanceof IJSStackFrame ) { fileName = ( ( IJSStackFrame ) frame ) . getSourceFileName ( ) ; IFile file = PathUtils . findWorkspaceFile ( fileName ) ; if ( file != null ) { fileName = file . getFullPath ( ) . lastSegment ( ) ; } } else { fileName = Messages . JSDebugModelPresentation_line ; } int line = frame . getLineNumber ( ) ; return StringUtils . format ( "{0} [{1}:{2}]" , new String [ ] { frame . getName ( ) , fileName , line >= 0 ? Integer . toString ( line ) : Messages . JSDebugModelPresentation_notavailable } ) ; } private String getThreadText ( IThread thread ) throws CoreException { String stateString = null ; if ( thread . isTerminated ( ) ) { stateString = Messages . JSDebugModelPresentation_Terminated ; } else if ( thread . isSuspended ( ) ) { stateString = Messages . JSDebugModelPresentation_Suspended ; IBreakpoint [ ] breakpoints = thread . getBreakpoints ( ) ; if ( breakpoints . length > 0 ) { IBreakpoint breakpoint = breakpoints [ 0 ] ; String fileName ; String lineNumber ; if ( breakpoint instanceof IJSImplicitBreakpoint ) { IJSImplicitBreakpoint implicitBreakpoint = ( IJSImplicitBreakpoint ) breakpoint ; fileName = implicitBreakpoint . getFileName ( ) ; IFile file = PathUtils . findWorkspaceFile ( fileName ) ; if ( file != null ) { fileName = file . getFullPath ( ) . toString ( ) ; } try { lineNumber = Integer . toString ( implicitBreakpoint . getLineNumber ( ) ) ; } catch ( CoreException impossible ) { lineNumber = "-1" ; } String format = Messages . JSDebugModelPresentation_lineIn_0_1_2 ; if ( implicitBreakpoint . isDebuggerKeyword ( ) ) { format = Messages . JSDebugModelPresentation_keywordAtLine_0_1_2 ; } else if ( implicitBreakpoint . isFirstLine ( ) ) { format = Messages . JSDebugModelPresentation_atStartLine_0_1_2 ; } else if ( implicitBreakpoint . isException ( ) ) { format = Messages . JSDebugModelPresentation_exceptionAtLine_0_1_2 ; } else if ( implicitBreakpoint . isWatchpoint ( ) ) { format = Messages . JSDebugModelPresentation_watchpointAtLine_0_1_2 ; } stateString = StringUtils . format ( format , new String [ ] { stateString , lineNumber , fileName } ) ; } else { IMarker marker = breakpoint . getMarker ( ) ; if ( marker instanceof IUniformResourceMarker ) { fileName = PathUtils . getPath ( ( ( IUniformResourceMarker ) marker ) . getUniformResource ( ) ) ; } else if ( marker . getResource ( ) instanceof IWorkspaceRoot ) { URI uri = URI . create ( ( String ) marker . getAttribute ( IDebugConstants . BREAKPOINT_LOCATION ) ) ; if ( "file" . equals ( uri . getScheme ( ) ) ) { fileName = PathUtils . getPath ( uri ) ; IFile file = PathUtils . findWorkspaceFile ( fileName ) ; if ( file != null ) { fileName = file . getFullPath ( ) . toString ( ) ; } } else { fileName = uri . toString ( ) ; } } else { fileName = marker . getResource ( ) . getFullPath ( ) . toString ( ) ; } lineNumber = Integer . toString ( marker . getAttribute ( IMarker . LINE_NUMBER , - 1 ) ) ; if ( breakpoint instanceof IJSLineBreakpoint && ( ( IJSLineBreakpoint ) breakpoint ) . isRunToLine ( ) ) { stateString = StringUtils . format ( Messages . JSDebugModelPresentation_runToLine_0_1_2 , new String [ ] { stateString , lineNumber , fileName } ) ; } else { stateString = StringUtils . format ( Messages . JSDebugModelPresentation_breakpointAtLine_0_1_2 , new String [ ] { stateString , lineNumber , fileName } ) ; } } } } else if ( thread . isStepping ( ) ) { stateString = Messages . JSDebugModelPresentation_Stepping ; } else { stateString = Messages . JSDebugModelPresentation_Running ; } if ( stateString != null ) { return StringUtils . format ( "{0} ({1})" , new String [ ] { thread . getName ( ) , stateString } ) ; } return thread . getName ( ) ; } private String getBreakpointText ( IBreakpoint breakpoint ) throws CoreException { if ( breakpoint instanceof IJSExceptionBreakpoint ) { return getExceptionBreakpointText ( ( IJSExceptionBreakpoint ) breakpoint ) ; } if ( breakpoint instanceof IJSWatchpoint ) { return getWatchpointText ( ( IJSWatchpoint ) breakpoint ) ; } StringBuffer label = new StringBuffer ( ) ; IMarker marker = breakpoint . getMarker ( ) ; if ( marker instanceof IUniformResourceMarker ) { label . append ( PathUtils . getPath ( ( ( IUniformResourceMarker ) marker ) . getUniformResource ( ) ) ) ; } else { IResource resource = marker . getResource ( ) ; if ( resource != null ) { label . append ( resource . getFullPath ( ) . toString ( ) ) ; } } if ( breakpoint instanceof ILineBreakpoint ) { try { int lineNumber = ( ( ILineBreakpoint ) breakpoint ) . getLineNumber ( ) ; label . append ( StringUtils . format ( " [{0}: {1}]" , new String [ ] { Messages . JSDebugModelPresentation_line , Integer . toString ( lineNumber ) } ) ) ; } catch ( CoreException e ) { } } return label . toString ( ) ; } private Image getBreakpointImage ( IBreakpoint breakpoint ) throws CoreException { if ( breakpoint instanceof IJSExceptionBreakpoint ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_JSEXCEPTION ) ; } else if ( breakpoint instanceof IJSWatchpoint ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_JSWATCHPOINT ) ; } else { int flags = computeBreakpointAdornmentFlags ( breakpoint ) ; JSDebugImageDescriptor descriptor = null ; if ( breakpoint . isEnabled ( ) ) { descriptor = new JSDebugImageDescriptor ( DebugUITools . getImageDescriptor ( org . eclipse . debug . ui . IDebugUIConstants . IMG_OBJS_BREAKPOINT ) , flags ) ; } else { descriptor = new JSDebugImageDescriptor ( DebugUITools . getImageDescriptor ( org . eclipse . debug . ui . IDebugUIConstants . IMG_OBJS_BREAKPOINT_DISABLED ) , flags ) ; } return DebugUIImages . getImageDescriptorRegistry ( ) . get ( descriptor ) ; } } private int computeBreakpointAdornmentFlags ( IBreakpoint breakpoint ) { int flags = 0 ; try { if ( breakpoint . isEnabled ( ) ) { flags |= JSDebugImageDescriptor . ENABLED ; } if ( breakpoint instanceof IJSLineBreakpoint ) { if ( ( ( IJSLineBreakpoint ) breakpoint ) . isConditionEnabled ( ) || ( ( IJSLineBreakpoint ) breakpoint ) . getHitCount ( ) > 0 ) { flags |= JSDebugImageDescriptor . CONDITIONAL ; } } } catch ( CoreException e ) { IdeLog . logError ( DebugUiPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } return flags ; } private String getExceptionBreakpointText ( IJSExceptionBreakpoint breakpoint ) throws CoreException { return StringUtils . format ( Messages . JSDebugModelPresentation_Exception , new String [ ] { breakpoint . getExceptionTypeName ( ) } ) ; } private String getWatchpointText ( IJSWatchpoint watchpoint ) throws CoreException { return StringUtils . format ( "{0}" , new String [ ] { watchpoint . getVariableName ( ) } ) ; } private String getScriptElementText ( IJSScriptElement scriptElement ) throws CoreException { if ( scriptElement . getParent ( ) == null ) { return scriptElement . getName ( ) ; } return StringUtils . format ( "{0}()" , new String [ ] { scriptElement . getName ( ) } ) ; } private Image getScriptElementImage ( IJSScriptElement scriptElement ) { if ( scriptElement . getParent ( ) == null ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_TOP_SCRIPT_ELEMENT ) ; } return DebugUIImages . get ( DebugUIImages . IMG_OBJS_SCRIPT_ELEMENT ) ; } public void computeDetail ( IValue value , IValueDetailListener listener ) { IDebugTarget target = value . getDebugTarget ( ) ; if ( target . isSuspended ( ) && target instanceof IJSDebugTarget ) { Job job = new DetailsJob ( value , listener ) ; job . schedule ( ) ; return ; } String details = StringUtils . EMPTY ; try { details = value . getValueString ( ) ; } catch ( DebugException e ) { IdeLog . logError ( DebugUiPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } listener . detailComputed ( value , details ) ; } public IEditorInput getEditorInput ( Object element ) { return SourceDisplayUtil . getEditorInput ( element ) ; } public String getEditorId ( IEditorInput input , Object element ) { return SourceDisplayUtil . getEditorId ( input , element ) ; } public String getVariableText ( IVariable variable ) { String varLabel = Messages . JSDebugModelPresentation_UnknownName ; try { varLabel = variable . getName ( ) ; } catch ( DebugException e ) { } String typeName = Messages . JSDebugModelPresentation_UnknownType ; try { typeName = variable . getReferenceTypeName ( ) ; } catch ( DebugException e ) { } IValue value = null ; try { value = variable . getValue ( ) ; } catch ( DebugException e ) { } String valueString = Messages . JSDebugModelPresentation_UnknownValue ; if ( value != null ) { try { valueString = getValueText ( value ) ; } catch ( DebugException e ) { } } StringBuffer sb = new StringBuffer ( ) ; if ( showTypes ) { sb . append ( typeName ) . append ( ' ' ) ; } sb . append ( varLabel ) ; if ( valueString . length ( ) != 0 ) { sb . append ( "= " ) ; sb . append ( valueString ) ; } return sb . toString ( ) ; } protected String getValueText ( IValue value ) throws DebugException { String valueString = value . getValueString ( ) ; return valueString ; } protected Image getVariableImage ( IVariable variable ) throws DebugException { if ( variable instanceof IJSVariable ) { IJSVariable jsVar = ( IJSVariable ) variable ; if ( jsVar . isException ( ) ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_EXCEPTION_VARIABLE ) ; } if ( jsVar . isLocal ( ) ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_LOCAL_VARIABLE ) ; } if ( jsVar . isTopLevel ( ) ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_VARIABLE ) ; } if ( jsVar . isConst ( ) ) { return DebugUIImages . get ( DebugUIImages . IMG_OBJS_CONSTANT_FIELD ) ; } return DebugUIImages . get ( DebugUIImages . IMG_OBJS_FIELD ) ; } return null ; } private IBreakpoint getBreakpoint ( IMarker marker ) { return DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoint ( marker ) ; } private final class DetailsJob extends Job { private IValue value ; private IValueDetailListener listener ; public DetailsJob ( IValue value , IValueDetailListener listener ) { super ( Messages . JSDebugModelPresentation_DetailsComputing ) ; setSystem ( true ) ; this . value = value ; this . listener = listener ; } protected IStatus run ( IProgressMonitor monitor ) { IJSDebugTarget target = ( IJSDebugTarget ) value . getDebugTarget ( ) ; String details = StringUtils . EMPTY ; try { details = target . computeValueDetails ( value ) ; } catch ( DebugException e ) { IdeLog . logError ( DebugUiPlugin . getDefault ( ) , StringUtils . EMPTY , e ) ; } listener . detailComputed ( value , details ) ; return Status . OK_STATUS ; } } } 