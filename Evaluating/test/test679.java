public class PropertyInfo { public static final Class OBJECT_CLASS = new Object ( ) . getClass ( ) ; public static final Class STRING_CLASS = "" . getClass ( ) ; public static final Class INTEGER_CLASS = new Integer ( 0 ) . getClass ( ) ; public static final Class LONG_CLASS = new Long ( 0 ) . getClass ( ) ; public static final Class BOOLEAN_CLASS = new Boolean ( true ) . getClass ( ) ; public static final Class VECTOR_CLASS = new java . util . Vector ( ) . getClass ( ) ; public static final PropertyInfo OBJECT_TYPE = new PropertyInfo ( ) ; public static final int TRANSIENT = 1 ; public static final int MULTI_REF = 2 ; public static final int REF_ONLY = 4 ; public String name ; public String namespace ; public int flags ; protected Object value ; public Object type = OBJECT_CLASS ; public boolean multiRef ; public PropertyInfo elementType ; public PropertyInfo ( ) { } public void clear ( ) { type = OBJECT_CLASS ; flags = 0 ; name = null ; namespace = null ; } public PropertyInfo getElementType ( ) { return elementType ; } public void setElementType ( PropertyInfo elementType ) { this . elementType = elementType ; } public int getFlags ( ) { return flags ; } public void setFlags ( int flags ) { this . flags = flags ; } public boolean isMultiRef ( ) { return multiRef ; } public void setMultiRef ( boolean multiRef ) { this . multiRef = multiRef ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public String getNamespace ( ) { return namespace ; } public void setNamespace ( String namespace ) { this . namespace = namespace ; } public Object getType ( ) { return type ; } public void setType ( Object type ) { this . type = type ; } public Object getValue ( ) { return value ; } public void setValue ( Object value ) { this . value = value ; } public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( name ) ; sb . append ( " : " ) ; if ( value != null ) { sb . append ( value ) ; } else { sb . append ( "(not set)" ) ; } return sb . toString ( ) ; } } 