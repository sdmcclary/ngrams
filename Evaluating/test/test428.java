final class Cell implements Locator { private static final int MAX_COLSPAN = 1000 ; private static final int MAX_ROWSPAN = 8190 ; private int left ; private int bottom ; private int right ; private final String [ ] headers ; private final boolean header ; private final int columnNumber ; private final int lineNumber ; private final String publicId ; private final String systemId ; private final ErrorHandler errorHandler ; Cell ( int colspan , int rowspan , String [ ] headers , boolean header , Locator locator , ErrorHandler errorHandler ) throws SAXException { super ( ) ; this . errorHandler = errorHandler ; if ( locator == null ) { this . columnNumber = - 1 ; this . lineNumber = - 1 ; this . publicId = null ; this . systemId = null ; } else { this . columnNumber = locator . getColumnNumber ( ) ; this . lineNumber = locator . getLineNumber ( ) ; this . publicId = locator . getPublicId ( ) ; this . systemId = locator . getSystemId ( ) ; } if ( rowspan > MAX_ROWSPAN ) { warn ( "A rowspan attribute has the value " + rowspan + ", which exceeds the magic Gecko limit of " + MAX_ROWSPAN + "." ) ; } if ( colspan > MAX_COLSPAN ) { warn ( "A colspan attribute has the value " + colspan + ", which exceeds the magic browser limit of " + MAX_COLSPAN + "." ) ; } if ( rowspan == Integer . MAX_VALUE ) { throw new SAXException ( "Implementation limit reached. Table row counter overflowed." ) ; } this . left = 0 ; this . right = colspan ; this . bottom = ( rowspan == 0 ? Integer . MAX_VALUE : rowspan ) ; this . headers = headers ; this . header = header ; } public String [ ] getHeadings ( ) { return headers ; } public boolean isHeader ( ) { return header ; } public void warn ( String message ) throws SAXException { if ( errorHandler != null ) { errorHandler . warning ( new SAXParseException ( message , publicId , systemId , lineNumber , columnNumber ) ) ; } } public void err ( String message ) throws SAXException { if ( errorHandler != null ) { errorHandler . error ( new SAXParseException ( message , publicId , systemId , lineNumber , columnNumber ) ) ; } } public void errOnHorizontalOverlap ( Cell laterCell ) throws SAXException { if ( ! ( ( laterCell . right <= left ) || ( right <= laterCell . left ) ) ) { this . err ( "Table cell is overlapped by later table cell." ) ; laterCell . err ( "Table cell overlaps an earlier table cell." ) ; } } public void setPosition ( int top , int left ) throws SAXException { this . left = left ; this . right += left ; if ( this . right < 1 ) { throw new SAXException ( "Implementation limit reached. Table column counter overflowed." ) ; } if ( this . bottom != Integer . MAX_VALUE ) { this . bottom += top ; if ( this . bottom < 1 ) { throw new SAXException ( "Implementation limit reached. Table row counter overflowed." ) ; } } } public boolean shouldBeCulled ( int row ) { return row >= bottom ; } public int freeSlot ( int potentialSlot ) { if ( potentialSlot < left || potentialSlot >= right ) { return potentialSlot ; } else { return right ; } } public int getBottom ( ) { return bottom ; } int getLeft ( ) { return left ; } int getRight ( ) { return right ; } public void errIfNotRowspanZero ( String rowGroupType ) throws SAXException { if ( this . bottom != Integer . MAX_VALUE ) { err ( "Table cell spans past the end of its " + ( rowGroupType == null ? "implicit row group" : "row group established by a “" + rowGroupType + "” element" ) + "; clipped to the end of the row group." ) ; } } public int getColumnNumber ( ) { return columnNumber ; } public int getLineNumber ( ) { return lineNumber ; } public String getPublicId ( ) { return publicId ; } public String getSystemId ( ) { return systemId ; } public String elementName ( ) { return header ? "th" : "td" ; } } 