<<<<<<< HEAD
public class AddContactActivity extends Activity { private static final String [ ] CONTACT_LIST_PROJECTION = { Imps . ContactList . _ID , Imps . ContactList . NAME , } ; private static final int CONTACT_LIST_NAME_COLUMN = 1 ; private MultiAutoCompleteTextView mAddressList ; private Spinner mListSpinner ; Button mInviteButton ; ImApp mApp ; SimpleAlertHandler mHandler ; private long mProviderId ; private long mAccountId ; private String mDefaultDomain ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mApp = ImApp . getApplication ( this ) ; mHandler = new SimpleAlertHandler ( this ) ; resolveIntent ( getIntent ( ) ) ; setContentView ( R . layout . add_contact_activity ) ; BrandingResources brandingRes = mApp . getBrandingResource ( mProviderId ) ; setTitle ( brandingRes . getString ( BrandingResourceIDs . STRING_ADD_CONTACT_TITLE ) ) ; TextView label = ( TextView ) findViewById ( R . id . input_contact_label ) ; label . setText ( brandingRes . getString ( BrandingResourceIDs . STRING_LABEL_INPUT_CONTACT ) ) ; mAddressList = ( MultiAutoCompleteTextView ) findViewById ( R . id . email ) ; mAddressList . setAdapter ( new EmailAddressAdapter ( this ) ) ; mAddressList . setTokenizer ( new Rfc822Tokenizer ( ) ) ; mAddressList . addTextChangedListener ( mTextWatcher ) ; mListSpinner = ( Spinner ) findViewById ( R . id . choose_list ) ; Cursor c = queryContactLists ( ) ; int initSelection = searchInitListPos ( c , getIntent ( ) . getStringExtra ( ImServiceConstants . EXTRA_INTENT_LIST_NAME ) ) ; SimpleCursorAdapter adapter = new SimpleCursorAdapter ( this , android . R . layout . simple_spinner_item , c , new String [ ] { Imps . ContactList . NAME } , new int [ ] { android . R . id . text1 } ) ; adapter . setDropDownViewResource ( android . R . layout . simple_spinner_dropdown_item ) ; mListSpinner . setAdapter ( adapter ) ; mListSpinner . setSelection ( initSelection ) ; mInviteButton = ( Button ) findViewById ( R . id . invite ) ; mInviteButton . setText ( brandingRes . getString ( BrandingResourceIDs . STRING_BUTTON_ADD_CONTACT ) ) ; mInviteButton . setOnClickListener ( mButtonHandler ) ; mInviteButton . setEnabled ( false ) ; } private Cursor queryContactLists ( ) { Uri uri = Imps . ContactList . CONTENT_URI ; uri = ContentUris . withAppendedId ( uri , mProviderId ) ; uri = ContentUris . withAppendedId ( uri , mAccountId ) ; Cursor c = managedQuery ( uri , CONTACT_LIST_PROJECTION , null , null ) ; return c ; } private int searchInitListPos ( Cursor c , String listName ) { if ( TextUtils . isEmpty ( listName ) ) { return 0 ; } c . moveToPosition ( - 1 ) ; while ( c . moveToNext ( ) ) { if ( listName . equals ( c . getString ( CONTACT_LIST_NAME_COLUMN ) ) ) { return c . getPosition ( ) ; } } return 0 ; } private void resolveIntent ( Intent intent ) { mProviderId = intent . getLongExtra ( ImServiceConstants . EXTRA_INTENT_PROVIDER_ID , - 1 ) ; mAccountId = intent . getLongExtra ( ImServiceConstants . EXTRA_INTENT_ACCOUNT_ID , - 1 ) ; mDefaultDomain = Imps . ProviderSettings . getStringValue ( getContentResolver ( ) , mProviderId , ImpsConfigNames . DEFAULT_DOMAIN ) ; } void inviteBuddies ( ) { Rfc822Token [ ] recipients = Rfc822Tokenizer . tokenize ( mAddressList . getText ( ) ) ; try { IImConnection conn = mApp . getConnection ( mProviderId ) ; IContactList list = getContactList ( conn ) ; if ( list == null ) { Log . e ( ImApp . LOG_TAG , "<AddContactActivity> can't find given contact list:" + getSelectedListName ( ) ) ; finish ( ) ; } else { boolean fail = false ; for ( Rfc822Token recipient : recipients ) { String username = recipient . getAddress ( ) ; if ( mDefaultDomain != null && username . indexOf ( '@' ) == - 1 ) { username = username + "@" + mDefaultDomain ; } if ( Log . isLoggable ( ImApp . LOG_TAG , Log . DEBUG ) ) { log ( "addContact:" + username ) ; } int res = list . addContact ( username ) ; if ( res != ImErrorInfo . NO_ERROR ) { fail = true ; mHandler . showAlert ( R . string . error , ErrorResUtils . getErrorRes ( getResources ( ) , res , username ) ) ; } } if ( ! fail ) { finish ( ) ; } } } catch ( RemoteException ex ) { Log . e ( ImApp . LOG_TAG , "<AddContactActivity> inviteBuddies: caught " + ex ) ; } } private IContactList getContactList ( IImConnection conn ) { if ( conn == null ) { return null ; } try { IContactListManager contactListMgr = conn . getContactListManager ( ) ; String listName = getSelectedListName ( ) ; if ( ! TextUtils . isEmpty ( listName ) ) { return contactListMgr . getContactList ( listName ) ; } else { List < IBinder > lists = contactListMgr . getContactLists ( ) ; for ( IBinder binder : lists ) { IContactList list = IContactList . Stub . asInterface ( binder ) ; if ( list . isDefault ( ) ) { return list ; } } if ( ! lists . isEmpty ( ) ) { return IContactList . Stub . asInterface ( lists . get ( 0 ) ) ; } return null ; } } catch ( RemoteException e ) { return null ; } } private String getSelectedListName ( ) { Cursor c = ( Cursor ) mListSpinner . getSelectedItem ( ) ; return ( c == null ) ? null : c . getString ( CONTACT_LIST_NAME_COLUMN ) ; } private View . OnClickListener mButtonHandler = new View . OnClickListener ( ) { public void onClick ( View v ) { mApp . callWhenServiceConnected ( mHandler , new Runnable ( ) { public void run ( ) { inviteBuddies ( ) ; } } ) ; } } ; private TextWatcher mTextWatcher = new TextWatcher ( ) { public void afterTextChanged ( Editable s ) { mInviteButton . setEnabled ( s . length ( ) != 0 ) ; } public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { } public void onTextChanged ( CharSequence s , int start , int before , int count ) { } } ; private static void log ( String msg ) { Log . d ( ImApp . LOG_TAG , "<AddContactActivity> " + msg ) ; } static class EmailAddressAdapter extends ResourceCursorAdapter { public static final int DATA_INDEX = 1 ; private static final String SORT_ORDER = "people.name, contact_methods.data" ; private ContentResolver mContentResolver ; private static final String [ ] PROJECTION = { ContactMethods . _ID , ContactMethods . DATA } ; public EmailAddressAdapter ( Context context ) { super ( context , android . R . layout . simple_dropdown_item_1line , null ) ; mContentResolver = context . getContentResolver ( ) ; } @ Override public final String convertToString ( Cursor cursor ) { return cursor . getString ( DATA_INDEX ) ; } @ Override public final void bindView ( View view , Context context , Cursor cursor ) { ( ( TextView ) view ) . setText ( cursor . getString ( DATA_INDEX ) ) ; } @ Override public Cursor runQueryOnBackgroundThread ( CharSequence constraint ) { String where = null ; if ( constraint != null ) { String filter = DatabaseUtils . sqlEscapeString ( constraint . toString ( ) + '%' ) ; StringBuilder s = new StringBuilder ( ) ; s . append ( "(people.name LIKE " ) ; s . append ( filter ) ; s . append ( ") OR (contact_methods.data LIKE " ) ; s . append ( filter ) ; s . append ( ")" ) ; where = s . toString ( ) ; } return mContentResolver . query ( CONTENT_EMAIL_URI , PROJECTION , where , null , SORT_ORDER ) ; } } } 
=======
public class JingTask extends Task { private File schemaFile ; private File src ; private final List filesets = new ArrayList ( ) ; private PropertyMapBuilder properties = new PropertyMapBuilder ( ) ; private boolean failOnError = true ; private SchemaReader schemaReader = null ; private class LogErrorHandler extends ErrorHandlerImpl { int logLevel = Project . MSG_ERR ; public void warning ( SAXParseException e ) throws SAXParseException { logLevel = Project . MSG_WARN ; super . warning ( e ) ; } public void error ( SAXParseException e ) { logLevel = Project . MSG_ERR ; super . error ( e ) ; } public void printException ( Throwable e ) { logLevel = Project . MSG_ERR ; super . printException ( e ) ; } public void print ( String message ) { log ( message , logLevel ) ; } } public JingTask ( ) { RngProperty . CHECK_ID_IDREF . add ( properties ) ; } public void execute ( ) throws BuildException { if ( schemaFile == null ) throw new BuildException ( "There must be an rngFile or schemaFile attribute" , getLocation ( ) ) ; if ( src == null && filesets . size ( ) == 0 ) throw new BuildException ( "There must be a file attribute or a fileset child element" , getLocation ( ) ) ; ErrorHandlerImpl eh = new LogErrorHandler ( ) ; boolean hadError = false ; try { ValidationDriver driver = new ValidationDriver ( properties . toPropertyMap ( ) , schemaReader ) ; if ( ! driver . loadSchema ( ValidationDriver . fileInputSource ( schemaFile ) ) ) hadError = true ; else { if ( src != null ) { if ( ! driver . validate ( ValidationDriver . fileInputSource ( src ) ) ) hadError = true ; } for ( int i = 0 ; i < filesets . size ( ) ; i ++ ) { FileSet fs = ( FileSet ) filesets . get ( i ) ; DirectoryScanner ds = fs . getDirectoryScanner ( getProject ( ) ) ; File dir = fs . getDir ( getProject ( ) ) ; String [ ] srcs = ds . getIncludedFiles ( ) ; for ( int j = 0 ; j < srcs . length ; j ++ ) { if ( ! driver . validate ( ValidationDriver . fileInputSource ( new File ( dir , srcs [ j ] ) ) ) ) hadError = true ; } } } } catch ( SAXException e ) { hadError = true ; eh . printException ( e ) ; } catch ( IOException e ) { hadError = true ; eh . printException ( e ) ; } if ( hadError && failOnError ) throw new BuildException ( "Validation failed, messages should have been provided." , getLocation ( ) ) ; } public void setRngfile ( String rngFilename ) { schemaFile = getProject ( ) . resolveFile ( rngFilename ) ; } public void setSchemafile ( String schemaFilename ) { schemaFile = getProject ( ) . resolveFile ( schemaFilename ) ; } public void setFile ( File file ) { this . src = file ; } public void setCheckid ( boolean checkid ) { properties . put ( RngProperty . CHECK_ID_IDREF , checkid ? Flag . PRESENT : null ) ; } public void setCompactsyntax ( boolean compactsyntax ) { schemaReader = compactsyntax ? CompactSchemaReader . getInstance ( ) : null ; } public void setFeasible ( boolean feasible ) { properties . put ( RngProperty . FEASIBLE , feasible ? Flag . PRESENT : null ) ; } public void setPhase ( String phase ) { properties . put ( SchematronProperty . PHASE , phase ) ; } public void setFailonerror ( boolean failOnError ) { this . failOnError = failOnError ; } public void addFileset ( FileSet set ) { filesets . add ( set ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
