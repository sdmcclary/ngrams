<<<<<<< HEAD
public abstract class ParallelLongArrayWithMapping < U > extends AbstractParallelAnyArray . LPap { ParallelLongArrayWithMapping ( ForkJoinPool ex , int origin , int fence , long [ ] array ) { super ( ex , origin , fence , array ) ; } public void apply ( Procedure < ? super U > procedure ) { ex . invoke ( new PAS . FJOApply ( this , origin , fence , null , procedure ) ) ; } public U reduce ( Reducer < U > reducer , U base ) { PAS . FJOReduce f = new PAS . FJOReduce ( this , origin , fence , null , reducer , base ) ; ex . invoke ( f ) ; return ( U ) ( f . result ) ; } public U any ( ) { int i = anyIndex ( ) ; return ( i < 0 ) ? null : ( U ) oget ( i ) ; } public U min ( Comparator < ? super U > comparator ) { return reduce ( CommonOps . < U > minReducer ( comparator ) , null ) ; } public U min ( ) { return reduce ( ( Reducer < U > ) ( CommonOps . castedMinReducer ( ) ) , null ) ; } public U max ( Comparator < ? super U > comparator ) { return reduce ( CommonOps . < U > maxReducer ( comparator ) , null ) ; } public U max ( ) { return reduce ( ( Reducer < U > ) ( CommonOps . castedMaxReducer ( ) ) , null ) ; } public ParallelArray . SummaryStatistics < U > summary ( Comparator < ? super U > comparator ) { PAS . FJOStats f = new PAS . FJOStats ( this , origin , fence , null , comparator ) ; ex . invoke ( f ) ; return ( ParallelArray . SummaryStatistics < U > ) f ; } public ParallelArray . SummaryStatistics < U > summary ( ) { return summary ( ( Comparator < ? super U > ) ( CommonOps . castedComparator ( ) ) ) ; } public ParallelArray < U > all ( ) { return new ParallelArray < U > ( ex , ( U [ ] ) allObjects ( null ) ) ; } public ParallelArray < U > all ( Class < ? super U > elementType ) { return new ParallelArray < U > ( ex , ( U [ ] ) allObjects ( elementType ) ) ; } public abstract < V > ParallelLongArrayWithMapping < V > withMapping ( Op < ? super U , ? extends V > op ) ; public abstract ParallelLongArrayWithLongMapping withMapping ( ObjectToLong < ? super U > op ) ; public abstract ParallelLongArrayWithDoubleMapping withMapping ( ObjectToDouble < ? super U > op ) ; public < V , W , X > ParallelLongArrayWithMapping < W > withMapping ( BinaryOp < ? super U , ? super V , ? extends W > combiner , ParallelArrayWithMapping < X , V > other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V > ParallelLongArrayWithMapping < V > withMapping ( ObjectAndDoubleToObject < ? super U , ? extends V > combiner , ParallelDoubleArrayWithDoubleMapping other ) { return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V > ParallelLongArrayWithMapping < V > withMapping ( ObjectAndLongToObject < ? super U , ? extends V > combiner , ParallelLongArrayWithLongMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V , W > ParallelLongArrayWithDoubleMapping withMapping ( ObjectAndObjectToDouble < ? super U , ? super V > combiner , ParallelArrayWithMapping < W , V > other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelLongArrayWithDoubleMapping withMapping ( ObjectAndDoubleToDouble < ? super U > combiner , ParallelDoubleArrayWithDoubleMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelLongArrayWithDoubleMapping withMapping ( ObjectAndLongToDouble < ? super U > combiner , ParallelLongArrayWithLongMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public < V , W > ParallelLongArrayWithLongMapping withMapping ( ObjectAndObjectToLong < ? super U , ? super V > combiner , ParallelArrayWithMapping < W , V > other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelLongArrayWithLongMapping withMapping ( ObjectAndDoubleToLong < ? super U > combiner , ParallelDoubleArrayWithDoubleMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public ParallelLongArrayWithLongMapping withMapping ( ObjectAndLongToLong < ? super U > combiner , ParallelLongArrayWithLongMapping other ) { if ( other . hasFilter ( ) ) throw new IllegalArgumentException ( ) ; return withIndexedMapping ( AbstractParallelAnyArray . indexedMapper ( combiner , other , origin ) ) ; } public abstract < V > ParallelLongArrayWithMapping < V > withIndexedMapping ( IntAndObjectToObject < ? super U , ? extends V > mapper ) ; public abstract ParallelLongArrayWithDoubleMapping withIndexedMapping ( IntAndObjectToDouble < ? super U > mapper ) ; public abstract ParallelLongArrayWithLongMapping withIndexedMapping ( IntAndObjectToLong < ? super U > mapper ) ; public Iterable < U > sequentially ( ) { return new Sequentially < U > ( ) ; } } 
=======
public class ARel extends AbstractRel { private static final String [ ] REGISTERED_TOKENS = { "#voverlay" , "acquaintance" , "alternate" , "appendix" , "author" , "bookmark" , "category" , "chapter" , "child" , "co-resident" , "co-worker" , "colleague" , "contact" , "contents" , "copyright" , "crush" , "date" , "disclosure" , "discussion" , "external" , "friend" , "glossary" , "help" , "home" , "http://docs.oasis-open.org/ns/cmis/link/200908/acl" , "index" , "issues" , "kin" , "license" , "me" , "met" , "muse" , "neighbor" , "next" , "nofollow" , "noreferrer" , "parent" , "prefetch" , "prev" , "previous" , "profile" , "publisher" , "search" , "section" , "sibling" , "sidebar" , "spouse" , "start" , "subsection" , "sweetheart" , "syndication" , "tag" , "toc" , "transformation" , "widget" } ; public static final ARel THE_INSTANCE = new ARel ( ) ; private ARel ( ) { super ( ) ; } @ Override protected boolean isRegistered ( String token ) { return Arrays . binarySearch ( REGISTERED_TOKENS , token ) >= 0 ; } @ Override public String getName ( ) { return "link type valid for <a> and <area>" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
