<<<<<<< HEAD
public class UrlRewriterCallback extends CallbackFunction { private static final long serialVersionUID = 1L ; private StringBuilder _rewriterQuery = new StringBuilder ( ) ; private ArrayList < String [ ] > _rewriterVars = new ArrayList < String [ ] > ( ) ; public UrlRewriterCallback ( Env env ) { super ( env , "URL-Rewriter" ) ; try { Method rewriterMethod = UrlRewriterCallback . class . getMethod ( "_internal_url_rewriter" , Env . class , Value . class ) ; setFunction ( new JavaMethod ( env . getModuleContext ( ) , rewriterMethod ) ) ; } catch ( NoSuchMethodException e ) { } catch ( SecurityException e ) { } } public static UrlRewriterCallback getInstance ( Env env ) { OutputBuffer ob = env . getOutputBuffer ( ) ; for ( ; ob != null ; ob = ob . getNext ( ) ) { Callback callback = ob . getCallback ( ) ; if ( callback instanceof UrlRewriterCallback ) return ( UrlRewriterCallback ) callback ; } return null ; } public void addRewriterVar ( String var , String value ) { if ( _rewriterQuery . length ( ) > 0 ) _rewriterQuery . append ( "&" ) ; String encodedVar = URLUtil . encodeURL ( var . replaceAll ( " " , "+" ) ) ; String encodedValue = URLUtil . encodeURL ( value . replaceAll ( " " , "+" ) ) ; _rewriterQuery . append ( encodedVar + "=" + encodedValue ) ; _rewriterVars . add ( new String [ ] { encodedVar , encodedValue } ) ; } public void resetRewriterVars ( ) { _rewriterQuery = new StringBuilder ( ) ; _rewriterVars . clear ( ) ; } public static Value _internal_url_rewriter ( Env env , Value buffer ) { Value result ; UrlRewriterCallback rewriter = getInstance ( env ) ; if ( rewriter == null ) result = buffer ; else { Parser parser = rewriter . new Parser ( buffer . toString ( ) , env ) ; result = parser . parse ( ) ; if ( result . isNull ( ) ) result = buffer ; } return result ; } private class Parser { private Env _env ; private boolean _includeSessionInfo = false ; private String _sessionName = null ; private String _sessionId = null ; private int _index ; private String _value ; private boolean _quoted ; private String _input ; private StringValue _output ; public Parser ( String input , Env env ) { _input = input ; _env = env ; _index = 0 ; _output = env . createUnicodeBuilder ( ) ; } public Value parse ( ) { if ( _env . getSession ( ) != null && _env . getJavaSession ( ) != null && _env . getIni ( "session.use_trans_sid" ) . toBoolean ( ) ) { _includeSessionInfo = true ; _sessionName = _env . getIni ( "session.name" ) . toString ( ) ; _sessionId = _env . getSession ( ) . getId ( ) ; _env . getQuercus ( ) . getCookieName ( ) ; _env . getJavaSession ( ) . getId ( ) ; } if ( _includeSessionInfo == false && _rewriterVars . isEmpty ( ) ) return NullValue . NULL ; String [ ] tagPairs = _env . getIni ( "url_rewriter.tags" ) . toString ( ) . split ( "," ) ; HashMap < String , String > tags = new HashMap < String , String > ( ) ; for ( String tagPair : tagPairs ) { String [ ] tagAttribute = tagPair . split ( "=" ) ; switch ( tagAttribute . length ) { case 1 : tags . put ( tagAttribute [ 0 ] , null ) ; break ; case 2 : tags . put ( tagAttribute [ 0 ] , tagAttribute [ 1 ] ) ; break ; default : break ; } } for ( String tag = getNextTag ( ) ; tag != null ; tag = getNextTag ( ) ) { if ( tags . containsKey ( tag ) ) { String attribute = tags . get ( tag ) ; if ( attribute == null ) { consumeToEndOfTag ( ) ; if ( _includeSessionInfo ) { String phpSessionInputTag = "<input type=\"hidden\" name=\"" + _sessionName + "\"" + " value=\"" + _sessionId + "\" />" ; _output . append ( phpSessionInputTag ) ; } for ( String [ ] entry : _rewriterVars ) { String inputTag = "<input type=\"hidden\" name=\"" + entry [ 0 ] + "\"" + " value=\"" + entry [ 1 ] + "\" />" ; _output . append ( inputTag ) ; } } else { int valueEnd = 0 ; for ( valueEnd = getNextAttribute ( attribute ) ; valueEnd == 0 ; valueEnd = getNextAttribute ( attribute ) ) { } if ( valueEnd > 0 ) { _output . append ( rewriteUrl ( _value ) ) ; if ( _quoted ) consumeOneCharacter ( ) ; } } } } return _output ; } private String getNextTag ( ) { int tagStart = _input . indexOf ( '<' , _index ) ; if ( tagStart < 0 ) { _output . append ( _input . substring ( _index ) ) ; return null ; } _output . append ( _input . substring ( _index , tagStart + 1 ) ) ; _index = tagStart + 1 ; consumeNonWhiteSpace ( ) ; return _input . substring ( tagStart + 1 , _index ) ; } private int getNextAttribute ( String attribute ) { consumeWhiteSpace ( ) ; int attributeStart = _index ; while ( _index < _input . length ( ) && isValidAttributeCharacter ( _input . charAt ( _index ) ) ) consumeOneCharacter ( ) ; if ( _index == attributeStart ) return - 1 ; String foundAttribute = _input . substring ( attributeStart , _index ) ; consumeWhiteSpace ( ) ; if ( _input . length ( ) <= _index || _input . charAt ( _index ) != '=' ) return - 1 ; consumeOneCharacter ( ) ; consumeWhiteSpace ( ) ; char quote = ' ' ; if ( _input . charAt ( _index ) == '"' || _input . charAt ( _index ) == '\'' ) { _quoted = true ; quote = _input . charAt ( _index ) ; consumeOneCharacter ( ) ; } int valueEnd = _index ; if ( _quoted ) { valueEnd = _input . indexOf ( quote , _index ) ; int tagEnd = _input . indexOf ( '>' , _index ) ; if ( valueEnd < 0 ) { if ( tagEnd > 0 ) valueEnd = tagEnd ; else valueEnd = _input . length ( ) ; } } else { for ( valueEnd = _index ; valueEnd < _input . length ( ) && _input . charAt ( valueEnd ) != '/' && _input . charAt ( valueEnd ) != '>' && _input . charAt ( valueEnd ) != ' ' ; valueEnd ++ ) { } } if ( foundAttribute . equals ( attribute ) ) { _value = _input . substring ( _index , valueEnd ) ; _index = valueEnd ; return 1 ; } else { if ( _quoted ) valueEnd += 1 ; _output . append ( _input . substring ( _index , valueEnd ) ) ; _index = valueEnd ; return 0 ; } } private void consumeOneCharacter ( ) { if ( _index < _input . length ( ) ) { _output . append ( _input . charAt ( _index ) ) ; _index += 1 ; } } private void consumeWhiteSpace ( ) { while ( _index < _input . length ( ) && Character . isWhitespace ( _input . charAt ( _index ) ) ) consumeOneCharacter ( ) ; } private void consumeNonWhiteSpace ( ) { while ( _index < _input . length ( ) && ! Character . isWhitespace ( _input . charAt ( _index ) ) ) consumeOneCharacter ( ) ; } private void consumeToEndOfTag ( ) { while ( _input . charAt ( _index ) != '>' ) consumeOneCharacter ( ) ; consumeOneCharacter ( ) ; } private boolean isValidAttributeCharacter ( char ch ) { return Character . isLetterOrDigit ( ch ) || ( ch == '-' ) || ( ch == '.' ) || ( ch == '_' ) || ( ch == ':' ) ; } private String rewriteUrl ( String urlString ) { URI uri ; try { uri = new URI ( urlString ) ; } catch ( URISyntaxException e ) { return urlString ; } if ( ( uri . getScheme ( ) != null ) || ( uri . getAuthority ( ) != null ) ) { return urlString ; } StringBuilder query = new StringBuilder ( ) ; if ( uri . getQuery ( ) != null ) { query . append ( "?" ) ; query . append ( uri . getQuery ( ) ) ; query . append ( "&" ) ; } else query . append ( "?" ) ; if ( _includeSessionInfo ) { query . append ( _sessionName ) ; query . append ( "=" ) ; query . append ( _sessionId ) ; } if ( _rewriterQuery . length ( ) != 0 ) { if ( _includeSessionInfo ) query . append ( "&" ) ; query . append ( _rewriterQuery ) ; } StringBuilder newUri = new StringBuilder ( ) ; if ( uri . getPath ( ) != null ) newUri . append ( uri . getPath ( ) ) ; newUri . append ( query ) ; if ( uri . getFragment ( ) != null ) { newUri . append ( "#" ) ; newUri . append ( uri . getFragment ( ) ) ; } return newUri . toString ( ) ; } } } 
=======
abstract class SelectedValueHandler { abstract void select ( ErrorContext ec , Locator locator , Object value , String representation ) ; void selectComplete ( ErrorContext ec ) { } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
