<<<<<<< HEAD
public class ActionsView extends View implements IActionsViewEventListener { private static final long serialVersionUID = - 4383236968215071564L ; public ActionsView ( Scriptable scope , IWorkbenchPart view ) { super ( scope , view ) ; this . defineProperty ( "actions" , ActionsView . class , READONLY | PERMANENT ) ; this . defineProperty ( "actionSets" , ActionsView . class , READONLY | PERMANENT ) ; String [ ] names = new String [ ] { "addAction" , "createActionSet" , "editAction" , "expandActionSet" , "expandAll" , "getActionSet" , "refresh" , "removeActionSet" , "selectAndReveal" } ; this . defineFunctionProperties ( names , ActionsView . class , READONLY | PERMANENT ) ; } public Action addAction ( String name , String filepath ) { return this . getActionsManager ( ) . addAction ( name , filepath ) ; } public IAction [ ] getActions ( ) { return this . getActionsManager ( ) . getAll ( ) ; } private ActionsManager getActionsManager ( ) { return UnifiedEditorsPlugin . getDefault ( ) . getActionsManager ( ) ; } public void expandAll ( ) { IWorkbenchPart part = this . getView ( ) ; if ( part != null ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) part ; actionsView . expandAll ( ) ; } } public void refresh ( ) { IWorkbenchPart part = this . getView ( ) ; if ( part != null ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) part ; actionsView . refresh ( ) ; } } public void editAction ( String path ) { IWorkbenchPart part = this . getView ( ) ; if ( part != null ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) part ; actionsView . editAction ( path ) ; } } public void selectAndReveal ( String path ) { IWorkbenchPart part = this . getView ( ) ; if ( part != null ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) part ; actionsView . selectAndReveal ( path ) ; } } public void setView ( IWorkbenchPart view ) { if ( this . getView ( ) != null ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) this . getView ( ) ; actionsView . removeActionsViewEventListener ( this ) ; } super . setView ( view ) ; if ( view != null && view instanceof com . aptana . ide . editors . views . actions . ActionsView ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) view ; actionsView . addActionsViewEventListener ( this ) ; } } public void expandActionSet ( String name ) { IWorkbenchPart part = this . getView ( ) ; if ( part != null ) { com . aptana . ide . editors . views . actions . ActionsView actionsView = ( com . aptana . ide . editors . views . actions . ActionsView ) part ; actionsView . expandActionSet ( name ) ; } } public ActionSet createActionSet ( String name ) { return this . getActionsManager ( ) . createActionSet ( name ) ; } public void removeActionSet ( String name ) { this . getActionsManager ( ) . removeActionSet ( name ) ; } public ActionSet getActionSet ( String name ) { return this . getActionsManager ( ) . getActionSet ( name ) ; } public ActionSet [ ] getActionSets ( ) { return this . getActionsManager ( ) . getActionSets ( ) ; } public void onActionsViewEvent ( com . aptana . ide . editors . views . actions . ActionsViewEvent e ) { Event event = null ; int eventType = e . getEventType ( ) ; switch ( eventType ) { case ActionsViewEventTypes . RELOAD : Global global = ScriptingEngine . getInstance ( ) . getGlobal ( ) ; IAction [ ] actionsToReload = e . getActions ( ) ; for ( int i = 0 ; i < actionsToReload . length ; i ++ ) { IAction action = actionsToReload [ i ] ; String filename = action . getScriptPath ( ) ; String key = global . getXrefId ( filename ) ; ScriptInfo info = global . getScriptInfo ( key ) ; Scriptable scope = info . getScope ( ) ; Object onreload = scope . get ( "onreload" , scope ) ; if ( onreload instanceof Function ) { Function reloadFunction = ( Function ) onreload ; Context cx = Context . enter ( ) ; try { reloadFunction . call ( cx , scope , scope , new Object [ ] { action . getPath ( ) } ) ; } catch ( Exception e1 ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . ActionsView_Error , e1 ) ; } Context . exit ( ) ; } else { global . reloadLibrary ( filename ) ; } } break ; case ActionsViewEventTypes . ADD : case ActionsViewEventTypes . DROP : event = new ActionsAddEvent ( this . getView ( ) , eventType , e . getPaths ( ) ) ; break ; case ActionsViewEventTypes . ADD_CURRENT_FILE : Context . enter ( ) ; IEditorPart part = ScriptingEngine . getActiveEditor ( ) ; Editor editor = new Editor ( ScriptingEngine . getInstance ( ) . getGlobal ( ) , part ) ; event = new ActionsAddEvent ( this . getView ( ) , eventType , ( File ) editor . getFile ( ) ) ; Context . exit ( ) ; break ; case ActionsViewEventTypes . CREATE_ACTION_SET : event = new ActionsCreateSetEvent ( this . getView ( ) , eventType , e . getName ( ) ) ; break ; case ActionsViewEventTypes . DELETE : event = new ActionsDeleteEvent ( this . getView ( ) , eventType , e . getActions ( ) ) ; break ; case ActionsViewEventTypes . DELETE_ACTION_SET : event = new ActionsDeleteSetEvent ( this . getView ( ) , eventType , e . getName ( ) ) ; break ; case ActionsViewEventTypes . EXECUTE : IAction action = e . getActions ( ) [ 0 ] ; if ( action instanceof ActionSet ) { ActionSet actionSet = ( ActionSet ) action ; if ( actionSet . isExecutable ( ) ) { IAction [ ] actions = actionSet . getActions ( ) ; Arrays . sort ( actions , new Comparator ( ) { public int compare ( Object o1 , Object o2 ) { IAction action1 = ( IAction ) o1 ; IAction action2 = ( IAction ) o2 ; return action1 . getName ( ) . compareTo ( action2 . getName ( ) ) ; } } ) ; for ( int i = 0 ; i < actions . length ; i ++ ) { Event subEvent = new ActionsExecuteEvent ( this . getView ( ) , eventType , new IAction [ ] { actions [ i ] } ) ; this . fireEventListeners ( subEvent ) ; } } } else { event = new ActionsExecuteEvent ( this . getView ( ) , eventType , e . getActions ( ) ) ; } break ; default : throw new IllegalArgumentException ( Messages . ActionsView_Unrecognized_Event_Type + eventType ) ; } if ( event != null ) { this . fireEventListeners ( event ) ; } } } 
=======
public class MarshalFloat implements Marshal { public Object readInstance ( XmlPullParser parser , String namespace , String name , PropertyInfo propertyInfo ) throws IOException , XmlPullParserException { String stringValue = parser . nextText ( ) ; Object result ; if ( name . equals ( "float" ) ) { result = new Float ( stringValue ) ; } else if ( name . equals ( "double" ) ) { result = new Double ( stringValue ) ; } else if ( name . equals ( "decimal" ) ) { result = new java . math . BigDecimal ( stringValue ) ; } else { throw new RuntimeException ( "float, double, or decimal expected" ) ; } return result ; } public void writeInstance ( XmlSerializer writer , Object instance ) throws IOException { writer . text ( instance . toString ( ) ) ; } public void register ( SoapSerializationEnvelope cm ) { cm . addMapping ( cm . xsd , "float" , Float . class , this ) ; cm . addMapping ( cm . xsd , "double" , Double . class , this ) ; cm . addMapping ( cm . xsd , "decimal" , java . math . BigDecimal . class , this ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
