public class SplitPageHTMLEditor extends EditorPart implements IHTMLEditorPart { private HTMLSourceEditor editor ; private HTMLEditor wrapper ; private boolean isHorizontal ; private SplitEditorSite site ; private IEditorInput _editorInput ; private IPropertyListener _propertyListener ; private boolean isDisposing = false ; private SashForm sash ; private SashForm browserSash ; private String browserWeightPreference ; private String editorToBrowserWeightPreference ; private IElementStateListener elementListener = new IElementStateListener ( ) { public void elementMoved ( Object originalElement , Object movedElement ) { } public void elementDirtyStateChanged ( Object element , boolean isDirty ) { } public void elementDeleted ( Object element ) { if ( element . equals ( getEditorInput ( ) ) ) { IWorkbenchPartSite site = SplitPageHTMLEditor . this . getSite ( ) ; if ( site == null ) { return ; } IWorkbenchWindow window = site . getWorkbenchWindow ( ) ; if ( window == null ) { return ; } IWorkbenchPage page = window . getActivePage ( ) ; if ( page == null ) { return ; } page . closeEditor ( SplitPageHTMLEditor . this , true ) ; } } public void elementContentReplaced ( Object element ) { } public void elementContentAboutToBeReplaced ( Object element ) { } } ; private IPropertyListener propertyListener = new IPropertyListener ( ) { public void propertyChanged ( Object source , int propId ) { if ( propId == IEditorPart . PROP_INPUT && source instanceof HTMLSourceEditor ) { IEditorInput newInput = ( ( HTMLSourceEditor ) source ) . getEditorInput ( ) ; if ( newInput != null ) { setInput ( newInput ) ; setPartName ( newInput . getName ( ) ) ; setTitleToolTip ( newInput . getToolTipText ( ) ) ; } } } } ; private List < ContributedBrowser > browsers ; public SplitPageHTMLEditor ( HTMLEditor wrapper , boolean isHorizontal , HTMLSourceEditor editor ) { super ( ) ; if ( wrapper == null ) { throw new IllegalArgumentException ( Messages . SplitPageHTMLEditor_WrapperCannotBeNull ) ; } if ( editor == null ) { throw new IllegalArgumentException ( Messages . SplitPageHTMLEditor_EditorCannotBeNull ) ; } browsers = new ArrayList < ContributedBrowser > ( ) ; this . wrapper = wrapper ; this . editor = editor ; this . isHorizontal = isHorizontal ; } public Browser getBrowser2 ( ) { return null ; } public HTMLSourceEditor getSourceEditor ( ) { return editor ; } public void doSave ( IProgressMonitor monitor ) { editor . doSave ( monitor ) ; setInput ( editor . getEditorInput ( ) ) ; setPartName ( getEditorInput ( ) . getName ( ) ) ; wrapper . updatePreview ( ) ; saveWeightPreferences ( ) ; } public void doSaveAs ( ) { editor . doSaveAs ( ) ; setInput ( editor . getEditorInput ( ) ) ; setPartName ( getEditorInput ( ) . getName ( ) ) ; wrapper . updatePreview ( ) ; saveWeightPreferences ( ) ; } private void saveWeightPreferences ( ) { if ( browsers . size ( ) == 2 && browserSash != null && browserWeightPreference != null ) { int [ ] weights = browserSash . getWeights ( ) ; if ( weights != null && weights . length == 2 ) { String browserWeight = weights [ 0 ] + "," + weights [ 1 ] ; HTMLPlugin . getDefault ( ) . getPreferenceStore ( ) . setValue ( browserWeightPreference , browserWeight ) ; } } if ( sash != null && editorToBrowserWeightPreference != null ) { int [ ] weights = sash . getWeights ( ) ; if ( weights != null & weights . length == 2 ) { String editorToBrowserWeight = weights [ 0 ] + "," + weights [ 1 ] ; HTMLPlugin . getDefault ( ) . getPreferenceStore ( ) . setValue ( editorToBrowserWeightPreference , editorToBrowserWeight ) ; } } } public void init ( IEditorSite site , IEditorInput editorInput ) throws PartInitException { setSite ( site ) ; _editorInput = editorInput ; setInput ( editorInput ) ; setPartName ( editorInput . getName ( ) ) ; } public boolean isDirty ( ) { if ( editor != null ) { return editor . isDirty ( ) ; } return false ; } public boolean isSaveAsAllowed ( ) { return true ; } public void dispose ( ) { if ( isDisposing ) { return ; } isDisposing = true ; if ( _propertyListener != null ) { editor . removePropertyListener ( _propertyListener ) ; _propertyListener = null ; } if ( browsers != null && browsers . size ( ) != 0 ) { disposeBrowsers ( ) ; browsers = null ; } if ( wrapper != null ) { wrapper . dispose ( ) ; wrapper = null ; } if ( site != null ) { site . dispose ( ) ; site = null ; } if ( _editorInput != null ) { _editorInput = null ; } if ( editor != null ) { if ( editor . getDocumentProvider ( ) != null ) { editor . getDocumentProvider ( ) . removeElementStateListener ( elementListener ) ; } editor . removePropertyListener ( propertyListener ) ; editor . dispose ( ) ; editor = null ; } super . dispose ( ) ; } public void createPartControl ( Composite parent ) { try { sash = null ; if ( isHorizontal ) { sash = new SashForm ( parent , SWT . VERTICAL ) ; editorToBrowserWeightPreference = IPreferenceConstants . HTMLEDITOR_EDITOR_BROWSER_WEIGHT_HORIZONTAL ; } else { sash = new SashForm ( parent , SWT . HORIZONTAL ) ; editorToBrowserWeightPreference = IPreferenceConstants . HTMLEDITOR_EDITOR_BROWSER_WEIGHT_VERTICAL ; } site = new SplitEditorSite ( editor , getEditorSite ( ) ) ; editor . init ( site , getEditorInput ( ) ) ; _propertyListener = new IPropertyListener ( ) { public void propertyChanged ( Object source , int propertyId ) { firePropertyChange ( propertyId ) ; } } ; editor . addPropertyListener ( _propertyListener ) ; editor . createPartControl ( sash ) ; editor . addPropertyListener ( propertyListener ) ; editor . getDocumentProvider ( ) . addElementStateListener ( elementListener ) ; loadBrowsers ( sash ) ; String editorWeight = HTMLPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( editorToBrowserWeightPreference ) ; if ( editorWeight != null && ! editorWeight . equals ( "" ) && browsers . size ( ) > 0 ) { try { String [ ] weights = editorWeight . split ( "," ) ; if ( weights != null && weights . length == 2 ) { int [ ] intWeights = new int [ weights . length ] ; intWeights [ 0 ] = Integer . parseInt ( weights [ 0 ] ) ; intWeights [ 1 ] = Integer . parseInt ( weights [ 1 ] ) ; sash . setWeights ( intWeights ) ; } } catch ( Exception e ) { } catch ( Error e ) { } } wrapper . updatePreview ( ) ; } catch ( PartInitException e ) { ErrorDialog . openError ( getSite ( ) . getShell ( ) , "Error creating nested text editor" , null , e . getStatus ( ) ) ; } } public void setFocus ( ) { editor . setFocus ( ) ; } public void gotoMarker ( IMarker marker ) { IDE . gotoMarker ( editor , marker ) ; } public void setOffset ( int offset ) { editor . selectAndReveal ( offset , 0 ) ; } public boolean isFileEditorInput ( ) { return editor . isFileEditorInput ( ) ; } public Object getAdapter ( Class adapter ) { if ( editor != null ) { return editor . getAdapter ( adapter ) ; } else { IdeLog . logError ( HTMLPlugin . getDefault ( ) , StringUtils . format ( Messages . SplitPageHTMLEditor_EditorIsNull , adapter . toString ( ) ) ) ; return null ; } } protected void firePropertyChange ( int propertyId ) { super . firePropertyChange ( propertyId ) ; wrapper . firePropertyChange2 ( propertyId ) ; } private static class SplitEditorSite implements IEditorSite { private HTMLSourceEditor editor ; private IEditorSite site ; private ArrayList menuExtenders ; public SplitEditorSite ( HTMLSourceEditor editor , IEditorSite site ) { this . editor = editor ; this . site = site ; } public IEditorActionBarContributor getActionBarContributor ( ) { return site . getActionBarContributor ( ) ; } public IActionBars getActionBars ( ) { return site . getActionBars ( ) ; } public String getId ( ) { return site . getId ( ) ; } public IKeyBindingService getKeyBindingService ( ) { return site . getKeyBindingService ( ) ; } public String getPluginId ( ) { return site . getPluginId ( ) ; } public String getRegisteredName ( ) { return site . getRegisteredName ( ) ; } public void registerContextMenu ( MenuManager menuManager , ISelectionProvider selectionProvider ) { site . registerContextMenu ( menuManager , selectionProvider ) ; } public void registerContextMenu ( String menuId , MenuManager menuManager , ISelectionProvider selectionProvider ) { if ( menuExtenders == null ) { menuExtenders = new ArrayList ( 1 ) ; } menuExtenders . add ( new PopupMenuExtender ( menuId , menuManager , selectionProvider , editor ) ) ; } public IWorkbenchPage getPage ( ) { return site . getPage ( ) ; } public ISelectionProvider getSelectionProvider ( ) { return site . getSelectionProvider ( ) ; } public Shell getShell ( ) { return site . getShell ( ) ; } public IWorkbenchWindow getWorkbenchWindow ( ) { return site . getWorkbenchWindow ( ) ; } public void setSelectionProvider ( ISelectionProvider provider ) { site . setSelectionProvider ( provider ) ; } public Object getAdapter ( Class adapter ) { return site . getAdapter ( adapter ) ; } public void dispose ( ) { if ( menuExtenders != null ) { for ( int i = 0 ; i < menuExtenders . size ( ) ; i ++ ) { ( ( PopupMenuExtender ) menuExtenders . get ( i ) ) . dispose ( ) ; } menuExtenders = null ; } } public IWorkbenchPart getPart ( ) { return editor ; } public void registerContextMenu ( MenuManager menuManager , ISelectionProvider selectionProvider , boolean includeEditorInput ) { this . registerContextMenu ( menuManager , selectionProvider ) ; } public void registerContextMenu ( String menuId , MenuManager menuManager , ISelectionProvider selectionProvider , boolean includeEditorInput ) { this . registerContextMenu ( menuId , menuManager , selectionProvider ) ; } public Object getService ( Class api ) { return null ; } public boolean hasService ( Class api ) { return false ; } } public void setBrowserURL ( String url ) { String browserURL = null ; String value = null ; String type = null ; IEditorInput input = this . editor . getEditorInput ( ) ; boolean isProjectFile = false ; if ( input instanceof IFileEditorInput ) { isProjectFile = true ; IFile file = ( ( IFileEditorInput ) input ) . getFile ( ) ; try { String override = file . getProject ( ) . getPersistentProperty ( new QualifiedName ( "" , HTMLPreviewPropertyPage . HTML_PREVIEW_OVERRIDE ) ) ; if ( HTMLPreviewPropertyPage . TRUE . equals ( override ) ) { type = file . getProject ( ) . getPersistentProperty ( new QualifiedName ( "" , HTMLPreviewPropertyPage . HTML_PREVIEW_ADDON_TYPE ) ) ; value = file . getProject ( ) . getPersistentProperty ( new QualifiedName ( "" , HTMLPreviewPropertyPage . HTML_PREVIEW_VALUE ) ) ; } } catch ( CoreException e ) { type = null ; value = null ; } } if ( type == null || value == null ) { type = HTMLPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( HTMLPreviewPropertyPage . HTML_PREVIEW_ADDON_TYPE ) ; value = HTMLPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( HTMLPreviewPropertyPage . HTML_PREVIEW_VALUE ) ; } PreviewInfo previewInfo = ServerFileTypeHandlers . getPreviewInfoFromURL ( url ) ; String alternativeValue = null ; String serverTypeRestriction = null ; if ( previewInfo != null ) { alternativeValue = previewInfo . serverID ; serverTypeRestriction = previewInfo . serverTypeID ; } if ( HTMLPreviewPropertyPage . FILE_BASED_TYPE . equals ( type ) ) { browserURL = url ; } else if ( HTMLPreviewPropertyPage . SERVER_BASED_TYPE . equals ( type ) || HTMLPreviewPropertyPage . APPENDED_SERVER_BASED_TYPE . equals ( type ) ) { if ( isProjectFile ) { IServer [ ] servers = ServerCore . getServerManager ( ) . getServers ( ) ; browserURL = null ; if ( alternativeValue != null && alternativeValue . length ( ) != 0 ) { for ( int i = 0 ; i < servers . length ; i ++ ) { final IServer curr = servers [ i ] ; if ( curr . getId ( ) . equals ( alternativeValue ) && curr . getServerType ( ) . getId ( ) . equals ( serverTypeRestriction ) ) { browserURL = HTMLPreviewHelper . getServerURL ( curr , input , HTMLPreviewPropertyPage . APPENDED_SERVER_BASED_TYPE . equals ( type ) , previewInfo . pathHeader ) ; break ; } } } if ( browserURL == null ) { for ( int i = 0 ; i < servers . length ; i ++ ) { final IServer curr = servers [ i ] ; if ( curr . getId ( ) . equals ( value ) ) { if ( alternativeValue != null && alternativeValue . length ( ) == 0 & curr . getServerType ( ) . getId ( ) . equals ( serverTypeRestriction ) ) { browserURL = HTMLPreviewHelper . getServerURL ( curr , input , HTMLPreviewPropertyPage . APPENDED_SERVER_BASED_TYPE . equals ( type ) , previewInfo . pathHeader ) ; } else { browserURL = HTMLPreviewHelper . getServerURL ( curr , input , HTMLPreviewPropertyPage . APPENDED_SERVER_BASED_TYPE . equals ( type ) ) ; } break ; } } } } } else if ( HTMLPreviewPropertyPage . CONFIG_BASED_TYPE . equals ( type ) ) { ILaunchManager launchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunchConfigurationType launchType = launchManager . getLaunchConfigurationType ( "com.aptana.ide.debug.core.jsLaunchConfigurationType" ) ; try { ILaunchConfiguration [ ] configs = launchManager . getLaunchConfigurations ( launchType ) ; for ( int i = 0 ; i < configs . length ; i ++ ) { final ILaunchConfiguration current = configs [ i ] ; if ( current . getName ( ) . equals ( value ) ) { browserURL = HTMLPreviewHelper . getConfigURL ( current , input ) ; break ; } } } catch ( CoreException e ) { } } if ( browserURL == null ) { browserURL = url ; } for ( int i = 0 ; i < browsers . size ( ) ; i ++ ) { ( ( ContributedBrowser ) browsers . get ( i ) ) . setURL ( browserURL ) ; } } private void loadBrowsers ( Composite sash ) { List browserList = BrowserExtensionLoader . loadBrowsers ( ) ; if ( browserList . size ( ) > 0 ) { browserSash = null ; if ( isHorizontal ) { browserSash = new SashForm ( sash , SWT . VERTICAL ) ; browserWeightPreference = IPreferenceConstants . HTMLEDITOR_TWO_BROWSER_WEIGHT_HORIZONTAL ; } else { browserSash = new SashForm ( sash , SWT . HORIZONTAL ) ; browserWeightPreference = IPreferenceConstants . HTMLEDITOR_TWO_BROWSER_WEIGHT_VERTICAL ; } for ( int j = 0 ; j < browserList . size ( ) ; j ++ ) { IConfigurationElement element = ( IConfigurationElement ) browserList . get ( j ) ; String name = BrowserExtensionLoader . getBrowserLabel ( element ) ; String outlineClass = element . getAttribute ( UnifiedEditorsPlugin . OUTLINE_ATTR ) ; try { Object obj = element . createExecutableExtension ( UnifiedEditorsPlugin . CLASS_ATTR ) ; if ( obj instanceof ContributedBrowser ) { Composite comp = new Composite ( browserSash , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = 1 ; layout . makeColumnsEqualWidth = false ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; layout . verticalSpacing = 0 ; comp . setLayout ( layout ) ; comp . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , true , true ) ) ; Label label = new Label ( comp , SWT . WRAP ) ; label . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , true , false ) ) ; label . setText ( StringUtils . format ( Messages . SplitPageHTMLEditor_Preview , name ) ) ; ContributedBrowser browser = ( ContributedBrowser ) obj ; browser . createControl ( comp ) ; browsers . add ( browser ) ; if ( outlineClass != null ) { Object ol = element . createExecutableExtension ( UnifiedEditorsPlugin . OUTLINE_ATTR ) ; if ( ol instanceof ContributedOutline ) { ContributedOutline outline = ( ContributedOutline ) ol ; browser . setOutline ( outline ) ; outline . setBrowser ( browser ) ; editor . getOutlinePage ( ) . addOutline ( outline , name ) ; } } } } catch ( Exception e ) { IdeLog . logError ( HTMLPlugin . getDefault ( ) , StringUtils . format ( Messages . SplitPageHTMLEditor_UnableToCreateBrowserControl , name ) , e ) ; } catch ( Error e ) { IdeLog . logError ( HTMLPlugin . getDefault ( ) , StringUtils . format ( Messages . SplitPageHTMLEditor_UnableToCreateBrowserControl , name ) , e ) ; } } String weights = HTMLPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( browserWeightPreference ) ; if ( browsers . size ( ) == 2 && weights != null && ! weights . equals ( "" ) ) { try { String [ ] orderedWeights = weights . split ( "," ) ; if ( orderedWeights != null && orderedWeights . length == 2 ) { int [ ] intWeights = new int [ orderedWeights . length ] ; intWeights [ 0 ] = Integer . parseInt ( orderedWeights [ 0 ] ) ; intWeights [ 1 ] = Integer . parseInt ( orderedWeights [ 1 ] ) ; browserSash . setWeights ( intWeights ) ; } } catch ( Exception e ) { } catch ( Error e ) { } } } } private void disposeBrowsers ( ) { for ( int i = 0 ; i < browsers . size ( ) ; i ++ ) { ( ( ContributedBrowser ) browsers . get ( i ) ) . dispose ( ) ; } } } 