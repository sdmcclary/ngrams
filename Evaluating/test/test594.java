public class JSFileLanguageService extends BaseFileLanguageService { private JSOffsetMapper _offsetMapper ; private LexemeBasedEnvironmentLoader _loader ; private IDocumentationStore _documentationStore ; private IFileContextListener _delayedFileListener ; public JSFileLanguageService ( FileService fileService , final IParseState parseState , IParser parser , IParentOffsetMapper mapper ) { super ( fileService , parseState , parser , mapper ) ; createOffsetMapper ( mapper ) ; this . _loader = new LexemeBasedEnvironmentLoader ( ( Environment ) JSLanguageEnvironment . getInstance ( ) . getRuntimeEnvironment ( ) ) ; this . _delayedFileListener = new IFileContextListener ( ) { public void onContentChanged ( FileContextContentEvent evt ) { if ( parseState . getFileIndex ( ) == - 1 ) { reconnectToEnvironment ( ) ; } JSParseState jsps = ( JSParseState ) parseState . getParseState ( getDefaultLanguage ( ) ) ; if ( jsps != null ) { _loader . reloadEnvironment ( jsps ) ; } } } ; this . fileService . addDelayedFileListener ( this . _delayedFileListener ) ; } public String getDocumentationTitleFromLexeme ( Lexeme lexeme ) { String title = Messages . JSFileLanguageService_Javascript_editor ; if ( lexeme == null ) { return title ; } else { String titleLower = lexeme . getText ( ) ; if ( lexeme . getCategoryIndex ( ) == TokenCategories . KEYWORD ) { title = MessageFormat . format ( Messages . JSFileLanguageService_0_keyword , titleLower ) ; } else if ( lexeme . getCategoryIndex ( ) == TokenCategories . IDENTIFIER ) { title = MessageFormat . format ( Messages . JSFileLanguageService_0_identifier , titleLower ) ; } } return title ; } public HelpResource [ ] getDocumentationResourcesFromLexeme ( Lexeme lexeme ) { if ( lexeme == null ) { return new HelpResource [ 0 ] ; } else { List < HelpResource > topics = new ArrayList < HelpResource > ( ) ; List < HelpResource > generalTopics = new ArrayList < HelpResource > ( ) ; String lowerName = lexeme . getText ( ) . toLowerCase ( ) ; if ( lexeme . getCategoryIndex ( ) == TokenCategories . KEYWORD ) { addKeywordHelpTopics ( topics , generalTopics , lowerName ) ; } else if ( lexeme . getCategoryIndex ( ) == TokenCategories . IDENTIFIER ) { addIdentifierHelpTopics ( topics , generalTopics , lowerName ) ; } if ( generalTopics . size ( ) == 0 ) { HelpResource index = new HelpResource ( Messages . JSFileLanguageService_Javascript_core_reference , "/com.aptana.ide.documentation/html/reference/api/JSCore.index.html" ) ; generalTopics . add ( index ) ; index = new HelpResource ( Messages . JSFileLanguageService_HTML_dom_0_reference , "/com.aptana.ide.documentation/html/reference/api/HTMLDOM0.index.html" ) ; generalTopics . add ( index ) ; index = new HelpResource ( Messages . JSFileLanguageService_HTML_dom_1_2_reference , "/com.aptana.ide.documentation/html/reference/api/HTMLDOM2.index.html" ) ; generalTopics . add ( index ) ; } for ( Iterator < HelpResource > iter = generalTopics . iterator ( ) ; iter . hasNext ( ) ; ) { topics . add ( iter . next ( ) ) ; } return topics . toArray ( new HelpResource [ 0 ] ) ; } } private void addKeywordHelpTopics ( List < HelpResource > topics , List < HelpResource > generalTopics , String lowerName ) { HelpResource index = new HelpResource ( Messages . JSFileLanguageService_11 , "/com.aptana.ide.documentation/html/reference/api/JSKeywords.index.html" ) ; generalTopics . add ( index ) ; } private void addIdentifierHelpTopics ( List < HelpResource > topics , List < HelpResource > generalTopics , String lowerName ) { } public String getDocumentationFromLexeme ( Lexeme lexeme ) { if ( lexeme == null ) { return StringUtils . EMPTY ; } else { Lexeme l = findPreviousValidLexeme ( lexeme ) ; if ( l == null ) { return "" ; } else { return ScriptDocHelper . getInformationForLexeme ( this . _offsetMapper , l , true ) ; } } } public Lexeme getValidDocumentationLexeme ( Lexeme lexeme ) { return findPreviousValidLexeme ( lexeme ) ; } private Lexeme findPreviousValidLexeme ( Lexeme lexeme ) { if ( lexeme . getCategoryIndex ( ) == TokenCategories . IDENTIFIER || lexeme . getCategoryIndex ( ) == TokenCategories . KEYWORD ) { return lexeme ; } LexemeList ll = getFileContext ( ) . getLexemeList ( ) ; if ( ll == null ) { return null ; } Lexeme newLexeme = null ; int index = ll . getLexemeIndex ( lexeme ) ; while ( index > 0 ) { Lexeme l = ll . get ( index ) ; if ( l == null ) { return null ; } if ( l . getCategoryIndex ( ) == TokenCategories . IDENTIFIER || l . getCategoryIndex ( ) == TokenCategories . KEYWORD ) { newLexeme = l ; break ; } index -- ; } return newLexeme ; } public IOffsetMapper getOffsetMapper ( ) { return this . _offsetMapper ; } public void createOffsetMapper ( IParentOffsetMapper parent ) { this . _offsetMapper = new JSOffsetMapper ( parent ) ; } public LexemeBasedEnvironmentLoader getEnvironmentLoader ( ) { return this . _loader ; } public String getDefaultLanguage ( ) { return JSMimeType . MimeType ; } public void reset ( boolean resetFileIndex ) { this . _loader . unloadEnvironment ( ) ; getParseState ( ) . reset ( ) ; if ( resetFileIndex ) { this . getParseState ( ) . setFileIndex ( FileContextManager . DEFAULT_FILE_INDEX ) ; } } public void connectSourceProvider ( IFileSourceProvider sourceProvider ) { } public void disconnectSourceProvider ( IFileSourceProvider sourceProvider ) { this . _loader . unloadEnvironment ( ) ; this . getParseState ( ) . setFileIndex ( FileContextManager . DEFAULT_FILE_INDEX ) ; this . _offsetMapper . dispose ( ) ; this . _offsetMapper = null ; this . _loader = null ; this . _documentationStore = null ; } public IDocumentationStore getDocumentationStore ( ) { return this . _documentationStore ; } public void setDocumentationStore ( IDocumentationStore store ) { this . _documentationStore = store ; } public static JSFileLanguageService getJSFileLanguageService ( IFileService context ) { return ( JSFileLanguageService ) context . getLanguageService ( JSMimeType . MimeType ) ; } public void activateForEditing ( ) { super . activateForEditing ( ) ; } public void deactivateForEditing ( ) { super . deactivateForEditing ( ) ; this . _loader . unloadEnvironment ( ) ; } } 