public abstract class QuickJUnitAction implements IEditorActionDelegate , IObjectActionDelegate { private Shell shell ; protected IJavaElement javaElement ; protected ITextEditor javaEditor ; public void setActiveEditor ( IAction action , IEditorPart targetEditor ) { if ( ! ( targetEditor instanceof ITextEditor ) ) { javaEditor = null ; return ; } javaEditor = ( ITextEditor ) targetEditor ; shell = javaEditor . getSite ( ) . getShell ( ) ; } public void setActivePart ( IAction action , IWorkbenchPart targetPart ) { shell = targetPart . getSite ( ) . getShell ( ) ; } public void selectionChanged ( IAction action , ISelection selection ) { if ( ! ( selection instanceof IStructuredSelection ) ) { javaElement = null ; return ; } Object element = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( element instanceof IJavaElement ) javaElement = ( IJavaElement ) element ; else javaElement = null ; } protected void openInformation ( IAction action , String message ) { MessageDialog . openInformation ( shell , action . getText ( ) , message ) ; } protected Shell getShell ( ) { return shell ; } protected IJavaElement getElementOfJavaEditor ( ) throws JavaModelException { ICompilationUnit unit = getCompilationUnitOfJavaEditor ( ) ; if ( unit == null ) return null ; ISelectionProvider provider = javaEditor . getSelectionProvider ( ) ; ISelection selection = provider . getSelection ( ) ; if ( ! ( selection instanceof ITextSelection ) ) return null ; int offset = ( ( ITextSelection ) selection ) . getOffset ( ) ; IJavaElement element = unit . getElementAt ( offset ) ; return element ; } protected ICompilationUnit getCompilationUnitOfJavaEditor ( ) throws JavaModelException { if ( javaEditor == null ) return null ; IEditorInput input = javaEditor . getEditorInput ( ) ; IJavaElement element = ( IJavaElement ) input . getAdapter ( IJavaElement . class ) ; if ( element instanceof ICompilationUnit ) return ( ICompilationUnit ) element ; return null ; } } 