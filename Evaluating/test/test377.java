<<<<<<< HEAD
public final class CharBuffer extends CharSegment { private static final int MIN_CAPACITY = 64 ; public CharBuffer ( ) { _buffer = new char [ MIN_CAPACITY ] ; _length = 0 ; } public CharBuffer ( int capacity ) { if ( capacity < 0 ) throw new IllegalArgumentException ( ) ; if ( capacity < MIN_CAPACITY ) capacity = MIN_CAPACITY ; _buffer = new char [ capacity ] ; _length = 0 ; } public CharBuffer ( String string ) { int length = string . length ( ) ; int capacity = length + MIN_CAPACITY ; _buffer = new char [ capacity ] ; _length = length ; string . getChars ( 0 , length , _buffer , 0 ) ; } public CharBuffer ( String string , int offset , int length ) { int capacity = length ; if ( capacity < MIN_CAPACITY ) capacity = MIN_CAPACITY ; _buffer = new char [ capacity ] ; _length = length ; string . getChars ( offset , length , _buffer , 0 ) ; } public static CharBuffer allocate ( ) { return new CharBuffer ( ) ; } public void free ( ) { } public int capacity ( ) { return _buffer . length ; } public int getCapacity ( ) { return _buffer . length ; } public final void ensureCapacity ( int minimumCapacity ) { if ( minimumCapacity <= _buffer . length ) { return ; } expandCapacity ( minimumCapacity ) ; } private final void expandCapacity ( int minimumCapacity ) { int oldCapacity = _buffer . length ; int newCapacity = oldCapacity * 2 ; if ( newCapacity < 0 ) newCapacity = Integer . MAX_VALUE ; else if ( newCapacity < minimumCapacity ) newCapacity = minimumCapacity ; char [ ] chars = new char [ newCapacity ] ; System . arraycopy ( _buffer , 0 , chars , 0 , oldCapacity ) ; _buffer = chars ; } public final void clear ( ) { _length = 0 ; } public final void setLength ( int newLength ) { if ( newLength < 0 ) throw new IndexOutOfBoundsException ( "illegal argument" ) ; else if ( _buffer . length < newLength ) expandCapacity ( newLength ) ; _length = newLength ; } public char charAt ( int i ) { if ( i < 0 || _length <= i ) throw new IndexOutOfBoundsException ( ) ; return _buffer [ i ] ; } public char getLastChar ( ) { if ( _length == 0 ) throw new IndexOutOfBoundsException ( ) ; return _buffer [ _length - 1 ] ; } public final char [ ] getBuffer ( ) { return _buffer ; } public void getChars ( int srcBegin , int srcEnd , char [ ] dst , int dstBegin ) { char [ ] buffer = _buffer ; while ( srcBegin < srcEnd ) dst [ dstBegin ++ ] = buffer [ srcBegin ++ ] ; } public void setCharAt ( int index , char ch ) { if ( index < 0 || _length <= index ) throw new IndexOutOfBoundsException ( ) ; _buffer [ index ] = ch ; } public CharBuffer append ( Object obj ) { return append ( String . valueOf ( obj ) ) ; } public CharBuffer append ( CharBuffer cb ) { return append ( cb . _buffer , 0 , cb . _length ) ; } public CharBuffer append ( String string ) { if ( string == null ) string = "null" ; int len = string . length ( ) ; int newLength = _length + len ; int length = _length ; if ( _buffer . length <= newLength ) expandCapacity ( newLength ) ; string . getChars ( 0 , len , _buffer , length ) ; _length = newLength ; return this ; } public CharBuffer append ( String string , int offset , int len ) { if ( _buffer . length <= len + _length ) expandCapacity ( len + _length ) ; string . getChars ( offset , offset + len , _buffer , _length ) ; _length += len ; return this ; } public CharBuffer append ( char [ ] buffer ) { return append ( buffer , 0 , buffer . length ) ; } public CharBuffer append ( char [ ] buffer , int offset , int length ) { if ( _buffer . length < _length + length ) expandCapacity ( _length + length ) ; System . arraycopy ( buffer , offset , _buffer , _length , length ) ; _length += length ; return this ; } public final CharBuffer append ( boolean b ) { return append ( String . valueOf ( b ) ) ; } public final CharBuffer append ( char ch ) { if ( _buffer . length <= _length ) expandCapacity ( _length + 1 ) ; _buffer [ _length ++ ] = ch ; return this ; } public CharBuffer append ( int i ) { if ( i == 0x80000000 ) { return append ( "-2147483648" ) ; } int length = _length ; if ( _buffer . length <= length + 16 ) expandCapacity ( length + 16 ) ; char [ ] buffer = _buffer ; if ( i < 0 ) { buffer [ length ++ ] = '-' ; i = - i ; } else if ( i == 0 ) { buffer [ _length ++ ] = '0' ; return this ; } int start = length ; while ( i > 0 ) { buffer [ length ++ ] = ( char ) ( ( i % 10 ) + '0' ) ; i /= 10 ; } for ( int j = ( length - start ) / 2 ; j > 0 ; j -- ) { char temp = buffer [ length - j ] ; buffer [ length - j ] = buffer [ start + j - 1 ] ; buffer [ start + j - 1 ] = temp ; } _length = length ; return this ; } public CharBuffer append ( long i ) { if ( i == 0x8000000000000000L ) { return append ( "-9223372036854775808" ) ; } int length = _length ; if ( _buffer . length < length + 32 ) expandCapacity ( length + 32 ) ; char [ ] buffer = _buffer ; if ( i < 0 ) { buffer [ length ++ ] = '-' ; i = - i ; } else if ( i == 0 ) { buffer [ _length ++ ] = '0' ; return this ; } int start = length ; while ( i > 0 ) { buffer [ length ++ ] = ( char ) ( ( i % 10 ) + '0' ) ; i /= 10 ; } for ( int j = ( length - start ) / 2 ; j > 0 ; j -- ) { char temp = buffer [ length - j ] ; buffer [ length - j ] = buffer [ start + j - 1 ] ; buffer [ start + j - 1 ] = temp ; } _length = length ; return this ; } public CharBuffer append ( float f ) { return append ( String . valueOf ( f ) ) ; } public CharBuffer append ( double d ) { return append ( String . valueOf ( d ) ) ; } public final CharBuffer append ( byte [ ] buf , int offset , int len ) { int length = _length ; if ( _buffer . length < _length + len ) expandCapacity ( _length + len ) ; char [ ] buffer = _buffer ; for ( ; len > 0 ; len -- ) buffer [ length ++ ] = ( char ) buf [ offset ++ ] ; _length = length ; return this ; } public CharBuffer delete ( int start , int end ) { if ( start < 0 || end < start || _length < start ) throw new StringIndexOutOfBoundsException ( ) ; if ( _length < end ) end = _length ; int tail = _length - end ; char [ ] buffer = _buffer ; for ( int i = 0 ; i < tail ; i ++ ) buffer [ start + i ] = buffer [ end + i ] ; _length -= end - start ; return this ; } public CharBuffer deleteCharAt ( int index ) { if ( index < 0 || _length < index ) throw new StringIndexOutOfBoundsException ( ) ; if ( index == _length ) return this ; int tail = _length - index + 1 ; char [ ] buffer = _buffer ; for ( int i = 0 ; i < tail ; i ++ ) buffer [ index + i ] = buffer [ index + i + 1 ] ; _length -- ; return this ; } public CharBuffer replace ( int start , int end , String string ) { if ( start < 0 || end < start || _length < start ) throw new StringIndexOutOfBoundsException ( ) ; int len = string . length ( ) ; int length = _length ; if ( _buffer . length < len + length - ( end - start ) ) expandCapacity ( len + length - ( end - start ) ) ; char [ ] buffer = _buffer ; if ( len < end - start ) { int tail = length - end ; for ( int i = 0 ; i < tail ; i ++ ) buffer [ start + len + i ] = buffer [ end + i ] ; } else { int tail = length - end ; for ( int i = tail - 1 ; i >= 0 ; i -- ) buffer [ end + i ] = buffer [ start + len + i ] ; } string . getChars ( 0 , len , buffer , start ) ; _length = length + len - ( end - start ) ; return this ; } public CharBuffer replace ( int start , int end , char [ ] buffer , int offset , int len ) { if ( start < 0 || end < start || _length < start ) throw new StringIndexOutOfBoundsException ( ) ; if ( _buffer . length < len + _length - ( end - start ) ) expandCapacity ( len + _length - ( end - start ) ) ; char [ ] thisBuffer = _buffer ; if ( len < end - start ) { int tail = _length - end ; for ( int i = 0 ; i < tail ; i ++ ) thisBuffer [ start + len + i ] = thisBuffer [ end + i ] ; } else { int tail = _length - end ; for ( int i = tail - 1 ; i >= 0 ; i -- ) thisBuffer [ end + i ] = thisBuffer [ start + len + i ] ; } System . arraycopy ( buffer , offset , thisBuffer , start , len ) ; _length += len - ( end - start ) ; return this ; } public String substring ( int start ) { if ( _length < start || start < 0 ) throw new StringIndexOutOfBoundsException ( ) ; return new String ( _buffer , start , _length - start ) ; } public String substring ( int start , int end ) { if ( _length < start || start < 0 || end < start ) throw new StringIndexOutOfBoundsException ( ) ; return new String ( _buffer , start , end - start ) ; } public CharBuffer insert ( int index , String string ) { if ( string == null ) string = "null" ; if ( index < 0 || _length < index ) throw new StringIndexOutOfBoundsException ( ) ; int len = string . length ( ) ; if ( _buffer . length < _length + len ) expandCapacity ( len + _length ) ; int tail = _length - index ; char [ ] buffer = _buffer ; for ( int i = tail - 1 ; i >= 0 ; i -- ) buffer [ index + len + i ] = buffer [ index + i ] ; string . getChars ( 0 , len , buffer , index ) ; _length += len ; return this ; } public CharBuffer insert ( int index , char [ ] buffer , int offset , int len ) { if ( index < 0 || _length < index ) throw new StringIndexOutOfBoundsException ( ) ; if ( _buffer . length < len + _length ) expandCapacity ( len + _length ) ; int tail = _length - index ; char [ ] thisBuffer = _buffer ; for ( int i = tail - 1 ; i >= 0 ; i -- ) buffer [ index + len + i ] = thisBuffer [ index + i ] ; System . arraycopy ( buffer , offset , thisBuffer , index , len ) ; _length += len ; return this ; } public CharBuffer insert ( int offset , Object o ) { return insert ( offset , String . valueOf ( o ) ) ; } public CharBuffer insert ( int offset , char ch ) { return insert ( offset , String . valueOf ( ch ) ) ; } public CharBuffer insert ( int offset , int i ) { return insert ( offset , String . valueOf ( i ) ) ; } public CharBuffer insert ( int offset , long l ) { return insert ( offset , String . valueOf ( l ) ) ; } public CharBuffer insert ( int offset , float f ) { return insert ( offset , String . valueOf ( f ) ) ; } public CharBuffer insert ( int offset , double d ) { return insert ( offset , String . valueOf ( d ) ) ; } public int indexOf ( char ch ) { return indexOf ( ch , 0 ) ; } public Object clone ( ) { CharBuffer newBuffer = new CharBuffer ( ) ; newBuffer . setLength ( _length ) ; System . arraycopy ( _buffer , 0 , newBuffer . _buffer , 0 , _length ) ; return newBuffer ; } public String toString ( ) { return new String ( _buffer , 0 , _length ) ; } public String close ( ) { String string = new String ( _buffer , 0 , _length ) ; free ( ) ; return string ; } class CBInputStream extends InputStream { int _index = 0 ; public int read ( ) { if ( _length <= _index ) return - 1 ; return _buffer [ _index ++ ] ; } } public InputStream getInputStream ( ) { return new CBInputStream ( ) ; } } 
=======
public abstract class SchemaFactory2 extends SchemaFactory { private boolean secureProcessing = false ; private ErrorHandler errorHandler = null ; private LSResourceResolver resourceResolver = null ; public abstract Schema2 newSchema ( SAXSource schema ) throws SAXException ; public Schema2 newSchema ( Source [ ] schemas ) throws SAXException { if ( schemas . length != 1 ) throw new UnsupportedOperationException ( ) ; return newSchema ( schemas [ 0 ] ) ; } public Schema2 newSchema ( ) throws SAXException { throw new UnsupportedOperationException ( ) ; } public Schema2 newSchema ( Source source ) throws SAXException { if ( source == null ) throw new NullPointerException ( ) ; if ( source instanceof SAXSource ) return newSchema ( ( SAXSource ) source ) ; InputSource inputSource = SAXSource . sourceToInputSource ( source ) ; if ( inputSource == null ) throw new IllegalArgumentException ( "unsupported type of Source for schema" ) ; return newSchema ( new SAXSource ( inputSource ) ) ; } public Schema2 newSchema ( File schema ) throws SAXException { return newSchema ( new StreamSource ( schema ) ) ; } public Schema2 newSchema ( URL schema ) throws SAXException { return newSchema ( new StreamSource ( schema . toExternalForm ( ) ) ) ; } public void setErrorHandler ( ErrorHandler errorHandler ) { this . errorHandler = errorHandler ; } public ErrorHandler getErrorHandler ( ) { return errorHandler ; } public void setResourceResolver ( LSResourceResolver resourceResolver ) { this . resourceResolver = resourceResolver ; } public LSResourceResolver getResourceResolver ( ) { return resourceResolver ; } public void setFeature ( String name , boolean value ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( XMLConstants . FEATURE_SECURE_PROCESSING . equals ( name ) ) secureProcessing = value ; else super . setFeature ( name , value ) ; } public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( XMLConstants . FEATURE_SECURE_PROCESSING . equals ( name ) ) return secureProcessing ; return super . getFeature ( name ) ; } public void setSecureProcessing ( boolean secureProcessing ) { this . secureProcessing = secureProcessing ; } public boolean getSecureProcessing ( ) { return secureProcessing ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
