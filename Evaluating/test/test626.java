<<<<<<< HEAD
public abstract class ModifyDialogTabPage { public interface IModificationListener { void updateStatus ( IStatus status ) ; void valuesModified ( ) ; } protected final Observer fUpdater = new Observer ( ) { public void update ( Observable o , Object arg ) { doUpdatePreview ( ) ; notifyValuesModified ( ) ; } } ; public abstract class Preference extends Observable { private final Map < String , String > fPreferences ; private boolean fEnabled ; private String fKey ; public Preference ( Map < String , String > preferences , String key ) { fPreferences = preferences ; fEnabled = true ; fKey = key ; } protected final Map < String , String > getPreferences ( ) { return fPreferences ; } public final void setEnabled ( boolean enabled ) { fEnabled = enabled ; updateWidget ( ) ; } public final boolean getEnabled ( ) { return fEnabled ; } public final void setKey ( String key ) { if ( key == null || ! fKey . equals ( key ) ) { fKey = key ; updateWidget ( ) ; } } public final String getKey ( ) { return fKey ; } public abstract Control getControl ( ) ; protected abstract void updateWidget ( ) ; } protected class ButtonPreference extends Preference { private final String [ ] fValues ; private final Button fButton ; public ButtonPreference ( Composite composite , int numColumns , Map < String , String > preferences , String key , String [ ] values , String text , int style ) { super ( preferences , key ) ; if ( values == null || text == null ) throw new IllegalArgumentException ( FormatterMessages . ModifyDialogTabPage_error_msg_values_text_unassigned ) ; fValues = values ; fButton = new Button ( composite , style ) ; fButton . setText ( text ) ; fButton . setLayoutData ( createGridData ( numColumns , GridData . FILL_HORIZONTAL , SWT . DEFAULT ) ) ; fButton . setFont ( composite . getFont ( ) ) ; updateWidget ( ) ; fButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { checkboxChecked ( ( ( Button ) e . widget ) . getSelection ( ) ) ; } } ) ; } protected void checkboxChecked ( boolean state ) { getPreferences ( ) . put ( getKey ( ) , state ? fValues [ 1 ] : fValues [ 0 ] ) ; setChanged ( ) ; notifyObservers ( ) ; } protected void updateWidget ( ) { if ( getKey ( ) != null ) { fButton . setEnabled ( getEnabled ( ) ) ; fButton . setSelection ( getChecked ( ) ) ; } else { fButton . setSelection ( false ) ; fButton . setEnabled ( false ) ; } } public boolean getChecked ( ) { return fValues [ 1 ] . equals ( getPreferences ( ) . get ( getKey ( ) ) ) ; } public void setChecked ( boolean checked ) { getPreferences ( ) . put ( getKey ( ) , checked ? fValues [ 1 ] : fValues [ 0 ] ) ; updateWidget ( ) ; checkboxChecked ( checked ) ; } public Control getControl ( ) { return fButton ; } } public final class CheckboxPreference extends ButtonPreference { public CheckboxPreference ( Composite composite , int numColumns , Map < String , String > preferences , String key , String [ ] values , String text ) { super ( composite , numColumns , preferences , key , values , text , SWT . CHECK ) ; } } protected final class RadioPreference extends ButtonPreference { public RadioPreference ( Composite composite , int numColumns , Map < String , String > preferences , String key , String [ ] values , String text ) { super ( composite , numColumns , preferences , key , values , text , SWT . RADIO ) ; } } public final class ComboPreference extends Preference { private final String [ ] fItems ; private final String [ ] fValues ; private final Combo fCombo ; public ComboPreference ( Composite composite , int numColumns , Map < String , String > preferences , String key , String [ ] values , String text , String [ ] items ) { super ( preferences , key ) ; if ( values == null || items == null || text == null ) throw new IllegalArgumentException ( FormatterMessages . ModifyDialogTabPage_error_msg_values_items_text_unassigned ) ; fValues = values ; fItems = items ; createLabel ( numColumns - 1 , composite , text ) ; fCombo = new Combo ( composite , SWT . SINGLE | SWT . READ_ONLY ) ; fCombo . setFont ( composite . getFont ( ) ) ; fCombo . setItems ( items ) ; int max = 0 ; for ( int i = 0 ; i < items . length ; i ++ ) { if ( items [ i ] . length ( ) > max ) { max = items [ i ] . length ( ) ; } } fCombo . setLayoutData ( createGridData ( 1 , GridData . HORIZONTAL_ALIGN_FILL , fCombo . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) . x ) ) ; updateWidget ( ) ; fCombo . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { comboSelected ( ( ( Combo ) e . widget ) . getSelectionIndex ( ) ) ; } } ) ; } protected void comboSelected ( int index ) { getPreferences ( ) . put ( getKey ( ) , fValues [ index ] ) ; setChanged ( ) ; notifyObservers ( fValues [ index ] ) ; } protected void updateWidget ( ) { if ( getKey ( ) != null ) { fCombo . setEnabled ( getEnabled ( ) ) ; fCombo . setText ( getSelectedItem ( ) ) ; } else { fCombo . setText ( "" ) ; fCombo . setEnabled ( false ) ; } } public String getSelectedItem ( ) { String selected = getPreferences ( ) . get ( getKey ( ) ) ; for ( int i = 0 ; i < fValues . length ; i ++ ) { if ( fValues [ i ] . equals ( selected ) ) { return fItems [ i ] ; } } return "" ; } public boolean hasValue ( String value ) { return value . equals ( getPreferences ( ) . get ( getKey ( ) ) ) ; } public Control getControl ( ) { return fCombo ; } } public final class NumberPreference extends Preference { private final int fMinValue , fMaxValue ; private final Label fNumberLabel ; private final Text fNumberText ; protected int fSelected ; protected int fOldSelected ; public NumberPreference ( Composite composite , int numColumns , Map < String , String > preferences , String key , int minValue , int maxValue , String text ) { super ( preferences , key ) ; fNumberLabel = createLabel ( numColumns - 1 , composite , text , GridData . FILL_HORIZONTAL ) ; fNumberText = new Text ( composite , SWT . SINGLE | SWT . BORDER | SWT . RIGHT ) ; fNumberText . setFont ( composite . getFont ( ) ) ; int length = Integer . toString ( maxValue ) . length ( ) + 3 ; fNumberText . setLayoutData ( createGridData ( 1 , GridData . HORIZONTAL_ALIGN_END , fPixelConverter . convertWidthInCharsToPixels ( length ) ) ) ; fMinValue = minValue ; fMaxValue = maxValue ; updateWidget ( ) ; fNumberText . addFocusListener ( new FocusListener ( ) { public void focusGained ( FocusEvent e ) { NumberPreference . this . focusGained ( ) ; } public void focusLost ( FocusEvent e ) { NumberPreference . this . focusLost ( ) ; } } ) ; fNumberText . addModifyListener ( new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { fieldModified ( ) ; } } ) ; } private IStatus createErrorStatus ( ) { return new Status ( IStatus . ERROR , Activator . PLUGIN_ID , 0 , StringUtils . format ( FormatterMessages . ModifyDialogTabPage_NumberPreference_error_invalid_value , new String [ ] { Integer . toString ( fMinValue ) , Integer . toString ( fMaxValue ) } ) , null ) ; } protected void focusGained ( ) { fOldSelected = fSelected ; fNumberText . setSelection ( 0 , fNumberText . getCharCount ( ) ) ; } protected void focusLost ( ) { updateStatus ( null ) ; final String input = fNumberText . getText ( ) ; if ( ! validInput ( input ) ) fSelected = fOldSelected ; else fSelected = Integer . parseInt ( input ) ; if ( fSelected != fOldSelected ) { saveSelected ( ) ; fNumberText . setText ( Integer . toString ( fSelected ) ) ; } } protected void fieldModified ( ) { String trimInput = fNumberText . getText ( ) . trim ( ) ; boolean valid = validInput ( trimInput ) ; updateStatus ( valid ? null : createErrorStatus ( ) ) ; if ( valid ) { int number = Integer . parseInt ( trimInput ) ; if ( fSelected != number ) { fSelected = number ; saveSelected ( ) ; } } } private boolean validInput ( String trimInput ) { int number ; try { number = Integer . parseInt ( trimInput ) ; } catch ( NumberFormatException x ) { return false ; } if ( number < fMinValue ) return false ; if ( number > fMaxValue ) return false ; return true ; } private void saveSelected ( ) { getPreferences ( ) . put ( getKey ( ) , Integer . toString ( fSelected ) ) ; setChanged ( ) ; notifyObservers ( ) ; } public void updateWidget ( ) { boolean hasKey = getKey ( ) != null ; fNumberLabel . setEnabled ( hasKey && getEnabled ( ) ) ; fNumberText . setEnabled ( hasKey && getEnabled ( ) ) ; if ( hasKey ) { String s = ( String ) getPreferences ( ) . get ( getKey ( ) ) ; try { fSelected = Integer . parseInt ( s ) ; } catch ( NumberFormatException e ) { String message = StringUtils . format ( FormatterMessages . ModifyDialogTabPage_NumberPreference_error_invalid_key , getKey ( ) ) ; Activator . getDefault ( ) . getLog ( ) . log ( new Status ( IStatus . ERROR , Activator . PLUGIN_ID , IStatus . OK , message , e ) ) ; s = "" ; } fNumberText . setText ( s ) ; } else { fNumberText . setText ( "" ) ; } } public Control getControl ( ) { return fNumberText ; } } protected final static class DefaultFocusManager extends FocusAdapter { private final static String PREF_LAST_FOCUS_INDEX = Activator . PLUGIN_ID + "formatter_page.modify_dialog_tab_page.last_focus_index" ; private final IDialogSettings fDialogSettings ; private final Map < Control , Integer > fItemMap ; private final List < Control > fItemList ; private int fIndex ; public DefaultFocusManager ( ) { fDialogSettings = Activator . getDefault ( ) . getDialogSettings ( ) ; fItemMap = new HashMap < Control , Integer > ( ) ; fItemList = new ArrayList < Control > ( ) ; fIndex = 0 ; } public void focusGained ( FocusEvent e ) { fDialogSettings . put ( PREF_LAST_FOCUS_INDEX , ( ( Integer ) fItemMap . get ( e . widget ) ) . intValue ( ) ) ; } public void add ( Control control ) { control . addFocusListener ( this ) ; fItemList . add ( fIndex , control ) ; fItemMap . put ( control , new Integer ( fIndex ++ ) ) ; } public void add ( Preference preference ) { final Control control = preference . getControl ( ) ; if ( control != null ) add ( control ) ; } public boolean isUsed ( ) { return fIndex != 0 ; } public void restoreFocus ( ) { int index = 0 ; try { index = fDialogSettings . getInt ( PREF_LAST_FOCUS_INDEX ) ; if ( ( index >= 0 ) && ( index <= fItemList . size ( ) - 1 ) ) { fItemList . get ( index ) . setFocus ( ) ; } } catch ( NumberFormatException ex ) { } } public void resetFocus ( ) { fDialogSettings . put ( PREF_LAST_FOCUS_INDEX , - 1 ) ; } } private static class PageLayout extends Layout { private final ScrolledComposite fContainer ; private final int fMinimalWidth ; private final int fMinimalHight ; private PageLayout ( ScrolledComposite container , int minimalWidth , int minimalHight ) { fContainer = container ; fMinimalWidth = minimalWidth ; fMinimalHight = minimalHight ; } public Point computeSize ( Composite composite , int wHint , int hHint , boolean force ) { if ( wHint != SWT . DEFAULT && hHint != SWT . DEFAULT ) { return new Point ( wHint , hHint ) ; } int x = fMinimalWidth ; int y = fMinimalHight ; Control [ ] children = composite . getChildren ( ) ; Point size ; for ( int i = 0 ; i < children . length ; i ++ ) { size = children [ i ] . computeSize ( SWT . DEFAULT , SWT . DEFAULT , force ) ; x = Math . max ( x , size . x ) ; y = Math . max ( y , size . y ) ; } Rectangle area = fContainer . getClientArea ( ) ; if ( area . width > x ) { fContainer . setExpandHorizontal ( true ) ; } else { fContainer . setExpandHorizontal ( false ) ; } if ( area . height > y ) { fContainer . setExpandVertical ( true ) ; } else { fContainer . setExpandVertical ( false ) ; } if ( wHint != SWT . DEFAULT ) { x = wHint ; } if ( hHint != SWT . DEFAULT ) { y = hHint ; } return new Point ( x , y ) ; } public void layout ( Composite composite , boolean force ) { Rectangle rect = composite . getClientArea ( ) ; Control [ ] children = composite . getChildren ( ) ; for ( int i = 0 ; i < children . length ; i ++ ) { children [ i ] . setSize ( rect . width , rect . height ) ; } } } protected final DefaultFocusManager fDefaultFocusManager ; protected PixelConverter fPixelConverter ; protected final Map < String , String > fWorkingValues ; private final IModificationListener fModifyListener ; public ModifyDialogTabPage ( IModificationListener modifyListener , Map < String , String > workingValues ) { fWorkingValues = workingValues ; fModifyListener = modifyListener ; fDefaultFocusManager = new DefaultFocusManager ( ) ; } public final Composite createContents ( Composite parent ) { final int numColumns = 4 ; if ( fPixelConverter == null ) { fPixelConverter = new PixelConverter ( parent ) ; } final SashForm sashForm = new SashForm ( parent , SWT . HORIZONTAL ) ; sashForm . setFont ( parent . getFont ( ) ) ; Composite scrollContainer = new Composite ( sashForm , SWT . NONE ) ; GridData gridData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; scrollContainer . setLayoutData ( gridData ) ; GridLayout layout = new GridLayout ( 2 , false ) ; layout . marginHeight = 0 ; layout . marginWidth = 0 ; layout . horizontalSpacing = 0 ; layout . verticalSpacing = 0 ; scrollContainer . setLayout ( layout ) ; ScrolledComposite scroll = new ScrolledComposite ( scrollContainer , SWT . V_SCROLL | SWT . H_SCROLL ) ; scroll . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; scroll . setExpandHorizontal ( true ) ; scroll . setExpandVertical ( true ) ; final Composite settingsContainer = new Composite ( scroll , SWT . NONE ) ; settingsContainer . setFont ( sashForm . getFont ( ) ) ; scroll . setContent ( settingsContainer ) ; settingsContainer . setLayout ( new PageLayout ( scroll , 400 , 400 ) ) ; settingsContainer . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; Composite settingsPane = new Composite ( settingsContainer , SWT . NONE ) ; settingsPane . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; layout = new GridLayout ( numColumns , false ) ; layout . verticalSpacing = ( int ) ( 1.5 * fPixelConverter . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ) ; layout . horizontalSpacing = fPixelConverter . convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_SPACING ) ; layout . marginHeight = fPixelConverter . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_MARGIN ) ; layout . marginWidth = fPixelConverter . convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_MARGIN ) ; settingsPane . setLayout ( layout ) ; doCreatePreferences ( settingsPane , numColumns ) ; settingsContainer . setSize ( settingsContainer . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) ) ; scroll . addControlListener ( new ControlListener ( ) { public void controlMoved ( ControlEvent e ) { } public void controlResized ( ControlEvent e ) { settingsContainer . setSize ( settingsContainer . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) ) ; } } ) ; Label sashHandle = new Label ( scrollContainer , SWT . SEPARATOR | SWT . VERTICAL ) ; gridData = new GridData ( SWT . RIGHT , SWT . FILL , false , true ) ; sashHandle . setLayoutData ( gridData ) ; final Composite previewPane = new Composite ( sashForm , SWT . NONE ) ; previewPane . setLayout ( createGridLayout ( numColumns , true ) ) ; previewPane . setFont ( sashForm . getFont ( ) ) ; doCreatePreviewPane ( previewPane , numColumns ) ; initializePage ( ) ; sashForm . setWeights ( new int [ ] { 3 , 3 } ) ; return sashForm ; } protected abstract void initializePage ( ) ; protected abstract void doCreatePreferences ( Composite composite , int numColumns ) ; protected Composite doCreatePreviewPane ( Composite composite , int numColumns ) { createLabel ( numColumns , composite , FormatterMessages . ModifyDialogTabPage_preview_label_text ) ; Preview preview = doCreateJavaPreview ( composite ) ; fDefaultFocusManager . add ( preview . getControl ( ) ) ; GridData gd = createGridData ( numColumns , GridData . FILL_BOTH , 0 ) ; gd . widthHint = 0 ; gd . heightHint = 0 ; preview . getControl ( ) . setLayoutData ( gd ) ; return composite ; } protected abstract Preview doCreateJavaPreview ( Composite parent ) ; final public void makeVisible ( ) { fDefaultFocusManager . resetFocus ( ) ; doUpdatePreview ( ) ; } protected abstract void doUpdatePreview ( ) ; protected void notifyValuesModified ( ) { fModifyListener . valuesModified ( ) ; } public void setInitialFocus ( ) { if ( fDefaultFocusManager . isUsed ( ) ) { fDefaultFocusManager . restoreFocus ( ) ; } } protected void updateStatus ( IStatus status ) { fModifyListener . updateStatus ( status ) ; } protected GridLayout createGridLayout ( int numColumns , boolean margins ) { GridLayout layout = new GridLayout ( numColumns , false ) ; layout . verticalSpacing = fPixelConverter . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ; layout . horizontalSpacing = fPixelConverter . convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_SPACING ) ; if ( margins ) { layout . marginHeight = fPixelConverter . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_MARGIN ) ; layout . marginWidth = fPixelConverter . convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_MARGIN ) ; } else { layout . marginHeight = 0 ; layout . marginWidth = 0 ; } return layout ; } protected static GridData createGridData ( int numColumns , int style , int widthHint ) { final GridData gd = new GridData ( style ) ; gd . horizontalSpan = numColumns ; gd . widthHint = widthHint ; return gd ; } protected static Label createLabel ( int numColumns , Composite parent , String text ) { return createLabel ( numColumns , parent , text , GridData . FILL_HORIZONTAL ) ; } protected static Label createLabel ( int numColumns , Composite parent , String text , int gridDataStyle ) { final Label label = new Label ( parent , SWT . WRAP ) ; label . setFont ( parent . getFont ( ) ) ; label . setText ( text ) ; PixelConverter pixelConverter = new PixelConverter ( parent ) ; label . setLayoutData ( createGridData ( numColumns , gridDataStyle , pixelConverter . convertHorizontalDLUsToPixels ( 150 ) ) ) ; return label ; } protected Group createGroup ( int numColumns , Composite parent , String text ) { final Group group = new Group ( parent , SWT . NONE ) ; group . setFont ( parent . getFont ( ) ) ; group . setLayoutData ( createGridData ( numColumns , GridData . FILL_HORIZONTAL , SWT . DEFAULT ) ) ; final GridLayout layout = new GridLayout ( numColumns , false ) ; layout . verticalSpacing = fPixelConverter . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ; layout . horizontalSpacing = fPixelConverter . convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_SPACING ) ; layout . marginHeight = fPixelConverter . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ; group . setLayout ( layout ) ; group . setText ( text ) ; return group ; } protected NumberPreference createNumberPref ( Composite composite , int numColumns , String name , String key , int minValue , int maxValue ) { final NumberPreference pref = new NumberPreference ( composite , numColumns , fWorkingValues , key , minValue , maxValue , name ) ; fDefaultFocusManager . add ( pref ) ; pref . addObserver ( fUpdater ) ; return pref ; } protected ComboPreference createComboPref ( Composite composite , int numColumns , String name , String key , String [ ] values , String [ ] items ) { final ComboPreference pref = new ComboPreference ( composite , numColumns , fWorkingValues , key , values , name , items ) ; fDefaultFocusManager . add ( pref ) ; pref . addObserver ( fUpdater ) ; return pref ; } protected CheckboxPreference createCheckboxPref ( Composite composite , int numColumns , String name , String key , String [ ] values ) { final CheckboxPreference pref = new CheckboxPreference ( composite , numColumns , fWorkingValues , key , values , name ) ; fDefaultFocusManager . add ( pref ) ; pref . addObserver ( fUpdater ) ; return pref ; } protected RadioPreference createRadioPref ( Composite composite , int numColumns , String name , String key , String [ ] values ) { final RadioPreference pref = new RadioPreference ( composite , numColumns , fWorkingValues , key , values , name ) ; fDefaultFocusManager . add ( pref ) ; pref . addObserver ( fUpdater ) ; return pref ; } protected static String createPreviewHeader ( String title ) { return "/**\n* " + title + "\n*/\n" ; } } 
=======
public class ParenthesisEnd extends AbstractUnicodeClassCharacter { private static final UnicodeSet UNICODE_SET = new UnicodeSet ( "[:Pe:]" ) ; public static final ParenthesisEnd THE_INSTANCE = new ParenthesisEnd ( ) ; private ParenthesisEnd ( ) { } @ Override public String getName ( ) { return "end parenthesis" ; } @ Override protected UnicodeSet getUnicodeSet ( ) { return UNICODE_SET ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
