public class ScriptingEngine extends BaseTimingStartup implements IFileErrorListener , IFileContextListener , IUnifiedBracketMatcherListener , ISaveAsEvent { public static final int SCRIPTING_SERVER_START_PORT = 9000 ; private static Map < String , Object > supportedPerspectives ; private static ScriptingEngine instance = null ; private Global _global = null ; private ScriptingHttpServer _server = null ; private IPerspectiveListener _perspectiveListener ; private IPartListener _partListener ; private boolean _loaded ; private ScriptingConsole _console ; private MessageConsoleStream _consoleStream ; public static ScriptingEngine getInstance ( ) { if ( instance == null ) { instance = new ScriptingEngine ( ) ; } return instance ; } public Global getGlobal ( ) { return this . _global ; } static { supportedPerspectives = new HashMap < String , Object > ( ) ; supportedPerspectives . put ( "com.aptana.ide.js.ui.WebPerspective" , new Object ( ) ) ; } public ScriptingEngine ( ) { if ( instance != null ) { throw new IllegalStateException ( Messages . ScriptingEngine_ScriptingEngine_Is_Singleton ) ; } ScriptingEngine . instance = this ; } private void addListenerToWindow ( IWorkbenchWindow window ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page != null ) { IPerspectiveDescriptor perspective = page . getPerspective ( ) ; if ( perspective != null && this . perspectiveActivated ( page , perspective ) == false ) { window . addPerspectiveListener ( this . _perspectiveListener ) ; } } } private void bindToWorkbench ( ) { final ScriptingEngine me = this ; me . _partListener = new IPartListener ( ) { public void partActivated ( IWorkbenchPart part ) { String secondaryId = null ; if ( part instanceof IUnifiedEditor ) { IUnifiedEditor editor = ( IUnifiedEditor ) part ; editor . getFileContext ( ) . addLongDelayedFileListener ( me ) ; editor . getFileContext ( ) . addErrorListener ( me ) ; editor . addSaveAsListener ( me ) ; } if ( part instanceof ActionsView ) { View view = ( View ) me . _global . getViews ( ) . getActionsView ( ) ; if ( view != null ) { view . setView ( part ) ; } } else if ( part instanceof GenericScriptableView ) { secondaryId = ( ( GenericScriptableView ) part ) . getViewSite ( ) . getSecondaryId ( ) ; ScriptableView view = me . _global . getViews ( ) . getView ( secondaryId ) ; if ( view != null ) { view . setView ( part ) ; } } firePartActivated ( part , secondaryId ) ; } public void partDeactivated ( IWorkbenchPart part ) { String secondaryId = null ; if ( part instanceof IUnifiedEditor ) { IUnifiedEditor editor = ( IUnifiedEditor ) part ; IFileService context = editor . getFileContext ( ) ; if ( context != null ) { context . removeLongDelayedFileListener ( me ) ; context . removeErrorListener ( me ) ; } } if ( part instanceof ActionsView ) { View view = ( View ) me . _global . getViews ( ) . getActionsView ( ) ; if ( view != null ) { view . setView ( null ) ; } } else if ( part instanceof GenericScriptableView ) { secondaryId = ( ( GenericScriptableView ) part ) . getViewSite ( ) . getSecondaryId ( ) ; ScriptableView view = me . _global . getViews ( ) . getView ( secondaryId ) ; if ( view != null ) { view . setView ( null ) ; } } firePartDeactivated ( part , secondaryId ) ; } public void partBroughtToTop ( IWorkbenchPart part ) { } public void partOpened ( IWorkbenchPart part ) { String secondaryId = null ; if ( part instanceof ActionsView ) { View view = ( View ) me . _global . getViews ( ) . getActionsView ( ) ; if ( view != null ) { view . setView ( part ) ; } } else if ( part instanceof GenericScriptableView ) { secondaryId = ( ( GenericScriptableView ) part ) . getViewSite ( ) . getSecondaryId ( ) ; ScriptableView view = me . _global . getViews ( ) . getView ( secondaryId ) ; if ( view != null ) { view . setView ( part ) ; } } firePartOpened ( part , secondaryId ) ; } public void partClosed ( IWorkbenchPart part ) { String secondaryId = null ; if ( part instanceof IUnifiedEditor ) { IUnifiedEditor editor = ( IUnifiedEditor ) part ; editor . getFileContext ( ) . removeLongDelayedFileListener ( me ) ; editor . getFileContext ( ) . removeErrorListener ( me ) ; editor . removeSaveAsListener ( me ) ; } if ( part instanceof ActionsView ) { View view = ( View ) me . _global . getViews ( ) . getActionsView ( ) ; if ( view != null ) { view . setView ( null ) ; } } else if ( part instanceof GenericScriptableView ) { secondaryId = ( ( GenericScriptableView ) part ) . getViewSite ( ) . getSecondaryId ( ) ; ScriptableView view = me . _global . getViews ( ) . getView ( secondaryId ) ; if ( view != null ) { view . setView ( null ) ; } } firePartClosed ( part , secondaryId ) ; } } ; PlatformUI . getWorkbench ( ) . getDisplay ( ) . syncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchWindow window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window != null ) { window . getPartService ( ) . addPartListener ( me . _partListener ) ; } } } ) ; } public void onSaveAs ( IEditorPart part , File oldFile , File newFIle ) { firePartSaveAs ( part , oldFile , newFIle ) ; } public void fireCallback ( String scriptID , Object callback , Object [ ] args ) { try { ScriptInfo info = this . _global . getScriptInfo ( scriptID ) ; if ( info != null ) { Scriptable scope = info . getScope ( ) ; final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; Display display = workbench . getDisplay ( ) ; display . syncExec ( new ScriptThread ( scope , callback , args , info . getClassLoader ( ) ) ) ; } else { String message = StringUtils . format ( Messages . ScriptingEngine_Script_Id_Not_Found , scriptID ) ; IdeLog . logError ( ScriptingPlugin . getDefault ( ) , message ) ; } } catch ( Exception e ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . ScriptingEngine_Error , e ) ; } } private void firePartActivated ( IWorkbenchPart part , String secondaryId ) { Views views = this . _global . getViews ( ) ; String id = part . getSite ( ) . getId ( ) ; String title = part . getTitle ( ) ; String path = StringUtils . EMPTY ; if ( part instanceof IEditorPart ) { path = getPathFromPart ( ( IEditorPart ) part ) ; } PartActivatedEvent event = new PartActivatedEvent ( views , title , id , secondaryId , path ) ; views . fireEventListeners ( event ) ; } private void firePartDeactivated ( IWorkbenchPart part , String secondaryId ) { Views views = this . _global . getViews ( ) ; String id = part . getSite ( ) . getId ( ) ; String title = part . getTitle ( ) ; String path = null ; if ( part instanceof IEditorPart ) { path = getPathFromPart ( ( IEditorPart ) part ) ; } PartDeactivatedEvent event = new PartDeactivatedEvent ( views , title , id , secondaryId , path ) ; views . fireEventListeners ( event ) ; } private void firePartOpened ( IWorkbenchPart part , String secondaryId ) { Views views = this . _global . getViews ( ) ; String id = part . getSite ( ) . getId ( ) ; String title = part . getTitle ( ) ; String path = StringUtils . EMPTY ; if ( part instanceof IEditorPart ) { path = getPathFromPart ( ( IEditorPart ) part ) ; } PartOpenedEvent event = new PartOpenedEvent ( views , title , id , secondaryId , path ) ; views . fireEventListeners ( event ) ; } private void firePartSaveAs ( IWorkbenchPart part , File oldFile , File newFile ) { if ( oldFile == null || newFile == null ) { return ; } Views views = this . _global . getViews ( ) ; String id = part . getSite ( ) . getId ( ) ; String title = part . getTitle ( ) ; PartClosedEvent event1 = new PartClosedEvent ( views , title , id , null , oldFile . getAbsolutePath ( ) ) ; views . fireEventListeners ( event1 ) ; PartActivatedEvent event2 = new PartActivatedEvent ( views , title , id , null , newFile . getAbsolutePath ( ) ) ; views . fireEventListeners ( event2 ) ; } private void firePartClosed ( IWorkbenchPart part , String secondaryId ) { Views views = this . _global . getViews ( ) ; String id = part . getSite ( ) . getId ( ) ; String title = part . getTitle ( ) ; String path = null ; if ( part instanceof IEditorPart ) { path = getPathFromPart ( ( IEditorPart ) part ) ; } PartClosedEvent event = new PartClosedEvent ( views , title , id , secondaryId , path ) ; views . fireEventListeners ( event ) ; } private String getPathFromPart ( IEditorPart part ) { IEditorInput input = part . getEditorInput ( ) ; return CoreUIUtils . getPathFromEditorInput ( input ) ; } @ Override public String getStartupName ( ) { return "ScriptingEngine" ; } public void startup ( ) { Trace . info ( "ScriptingEngine: earlyStartup" ) ; final ScriptingEngine me = this ; this . _perspectiveListener = new IPerspectiveListener ( ) { public void perspectiveActivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { String message = StringUtils . format ( Messages . ScriptingEngine_Activated , perspective . getId ( ) ) ; Trace . info ( message ) ; me . perspectiveActivated ( page , perspective ) ; } public void perspectiveChanged ( IWorkbenchPage page , IPerspectiveDescriptor perspective , String changeId ) { String message = StringUtils . format ( Messages . ScriptingEngine_Changed , perspective . getId ( ) ) ; Trace . info ( message ) ; } } ; Runnable resetEngine = new Runnable ( ) { public void run ( ) { Trace . info ( Messages . ScriptingEngine_Reset ) ; me . shutdown ( ) ; } } ; WebPerspectiveFactory . addResettingHandler ( resetEngine ) ; PlatformUI . getWorkbench ( ) . getDisplay ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchWindow window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window != null ) { Trace . info ( Messages . ScriptingEngine_Registering_Listener ) ; addListenerToWindow ( window ) ; } } } ) ; startupDone ( ) ; } public void initConsole ( ) { if ( this . _console == null ) { this . _console = new ScriptingConsole ( "Aptana Scripting Console" , null ) ; this . _consoleStream = this . _console . newMessageStream ( ) ; PlatformUI . getWorkbench ( ) . getDisplay ( ) . syncExec ( new Runnable ( ) { public void run ( ) { _consoleStream . setColor ( PlatformUI . getWorkbench ( ) . getDisplay ( ) . getSystemColor ( SWT . COLOR_BLUE ) ) ; } } ) ; ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . addConsoles ( new IConsole [ ] { this . _console } ) ; } } public MessageConsoleStream getConsoleStream ( ) { if ( this . _consoleStream == null ) { initConsole ( ) ; } return this . _consoleStream ; } public static IEditorPart getActiveEditor ( ) { class ActiveEditorRef { public IEditorPart activeEditor ; } final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; final ActiveEditorRef activeEditor = new ActiveEditorRef ( ) ; Display display = workbench . getDisplay ( ) ; IEditorPart result ; display . syncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchWindow window = workbench . getActiveWorkbenchWindow ( ) ; if ( window != null && window . getActivePage ( ) != null ) { activeEditor . activeEditor = window . getActivePage ( ) . getActiveEditor ( ) ; } } } ) ; if ( activeEditor . activeEditor instanceof IUnifiedEditor ) { IUnifiedEditor editor = ( IUnifiedEditor ) activeEditor . activeEditor ; result = editor . getEditor ( ) ; } else { result = activeEditor . activeEditor ; } return result ; } public void init ( ) { if ( this . _loaded == false ) { Context cx = Context . enter ( ) ; try { this . _global = new Global ( cx ) ; startServer ( ) ; if ( this . _server != null ) { this . _global . put ( "serverPort" , this . _global , new Integer ( this . _server . getPort ( ) ) ) ; String scriptName = "/com/aptana/ide/scripting/resources/bootstrap.js" ; String source = FileUtilities . getResourceText ( scriptName ) ; cx . evaluateString ( this . _global , source , scriptName , 1 , null ) ; } bindToWorkbench ( ) ; IEditorPart activeEditor = getActiveEditor ( ) ; if ( activeEditor != null && activeEditor instanceof IUnifiedEditor ) { IUnifiedEditor editor = ( IUnifiedEditor ) activeEditor ; editor . getFileContext ( ) . addLongDelayedFileListener ( this ) ; editor . getFileContext ( ) . addErrorListener ( this ) ; } this . _loaded = true ; } catch ( EcmaError e ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . ScriptingEngine_Error , e ) ; } catch ( EvaluatorException e ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . ScriptingEngine_Error , e ) ; } finally { Context . exit ( ) ; } } } private boolean perspectiveActivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { boolean result = false ; if ( supportedPerspectives . containsKey ( perspective . getId ( ) ) ) { IPreferenceStore store = ScriptingPlugin . getDefault ( ) . getPreferenceStore ( ) ; if ( store . getBoolean ( IPreferenceConstants . SCRIPTING_SERVER_START_AUTOMATICALLY ) ) { init ( ) ; result = true ; } } return result ; } public void reload ( ) { this . shutdown ( ) ; this . init ( ) ; } private void shutdown ( ) { if ( this . _loaded ) { this . unbindToWorkbench ( ) ; String [ ] keys = this . _global . getScriptIds ( ) ; for ( int i = 0 ; i < keys . length ; i ++ ) { String key = keys [ i ] ; ScriptInfo info = this . _global . getScriptInfo ( key ) ; Scriptable scope = info . getScope ( ) ; Object onunload = scope . get ( "onunload" , scope ) ; if ( onunload instanceof Function ) { Function unloadFunction = ( Function ) onunload ; Context cx = Context . enter ( ) ; unloadFunction . call ( cx , scope , scope , new Object [ 0 ] ) ; Context . exit ( ) ; } } this . _global . shutdown ( ) ; this . _loaded = false ; } } private void startServer ( ) { if ( this . _server == null ) { initConsole ( ) ; String pluginDir = CoreUIUtils . getPluginLocation ( ScriptingPlugin . getDefault ( ) ) ; String scriptsDir = pluginDir + File . separator + "scripts" ; System . setProperty ( "scripts.dir" , scriptsDir ) ; String workspaceDir = CoreUIUtils . getWorkspaceDirectory ( ) ; String userScriptsDir = workspaceDir + File . separator + "user.scripts" ; System . setProperty ( "user.scripts.dir" , userScriptsDir ) ; if ( new File ( scriptsDir ) . exists ( ) ) { IPreferenceStore store = ScriptingPlugin . getDefault ( ) . getPreferenceStore ( ) ; int startPort = SCRIPTING_SERVER_START_PORT ; if ( store != null ) { startPort = store . getInt ( IPreferenceConstants . SCRIPTING_SERVER_START_PORT ) ; } this . _server = new ScriptingHttpServer ( this , scriptsDir , startPort , startPort + 100 ) ; try { this . _server . start ( ) ; String message = StringUtils . format ( Messages . ScriptingEngine_Started , this . _server . getPort ( ) ) ; IdeLog . logInfo ( ScriptingPlugin . getDefault ( ) , message ) ; } catch ( IOException e ) { IdeLog . logError ( ScriptingPlugin . getDefault ( ) , Messages . ScriptingEngine_Error_On_Start , e ) ; } } else { String message = StringUtils . format ( Messages . ScriptingEngine_Base_Directory_Does_Not_Exist , scriptsDir ) ; IdeLog . logError ( ScriptingPlugin . getDefault ( ) , message ) ; } } } private void unbindToWorkbench ( ) { if ( this . _partListener != null ) { final ScriptingEngine me = this ; final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; Display display = workbench . getDisplay ( ) ; display . syncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchWindow window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window != null ) { window . getPartService ( ) . removePartListener ( me . _partListener ) ; me . _partListener = null ; } } } ) ; } } public void onErrorsChanged ( IFileError [ ] errors ) { if ( this . _global != null ) { IEditorPart part = getActiveEditor ( ) ; if ( part instanceof IUnifiedEditor ) { IUnifiedEditor editor = ( IUnifiedEditor ) part ; String mimeType = editor . getFileContext ( ) . getDefaultLanguage ( ) ; EditorType editorType = this . _global . getEditors ( ) . getEventTarget ( mimeType ) ; if ( editorType != null ) { ErrorsChangedEvent event = new ErrorsChangedEvent ( editorType , errors ) ; editorType . fireEventListeners ( event ) ; } } } } public void onContentChanged ( FileContextContentEvent evt ) { final IFileService fcx = evt . getSource ( ) ; String mimeType = fcx . getDefaultLanguage ( ) ; EditorType editorType = this . _global . getEditors ( ) . getEventTarget ( mimeType ) ; if ( editorType != null ) { class ActiveEditorRef { public IEditorPart activeEditor ; } final IWorkbench workbench = PlatformUI . getWorkbench ( ) ; final ActiveEditorRef activeEditor = new ActiveEditorRef ( ) ; Display display = workbench . getDisplay ( ) ; display . syncExec ( new Runnable ( ) { public void run ( ) { IWorkbenchWindow window = workbench . getActiveWorkbenchWindow ( ) ; if ( window == null ) { return ; } IWorkbenchPage [ ] pages = window . getPages ( ) ; outer : for ( int i = 0 ; i < pages . length ; i ++ ) { IWorkbenchPage page = pages [ i ] ; IEditorReference [ ] editorRefs = page . getEditorReferences ( ) ; for ( int j = 0 ; j < editorRefs . length ; j ++ ) { IEditorPart editor = editorRefs [ j ] . getEditor ( false ) ; if ( editor instanceof IUnifiedEditor ) { IUnifiedEditor uniEditor = ( IUnifiedEditor ) editor ; IFileService service = uniEditor . getFileContext ( ) ; if ( service instanceof EditorFileContext ) { service = ( ( EditorFileContext ) service ) . getFileContext ( ) ; } if ( service == fcx ) { activeEditor . activeEditor = editor ; break outer ; } } } } } } ) ; Editor editor = new Editor ( this . _global , activeEditor . activeEditor ) ; ContentChangedEvent event = new ContentChangedEvent ( editor ) ; editorType . fireEventListeners ( "ContentChanged" , new Object [ ] { event } ) ; } } public IRegion onBracketMatch ( int offset ) { Callable callback = this . _global . getEditors ( ) . getBracketMatcher ( ) ; if ( callback != null ) { Context . enter ( ) ; try { Object o = callback . call ( Context . getCurrentContext ( ) , this . _global , this . _global , new Object [ ] { new Integer ( offset ) } ) ; if ( o instanceof Undefined ) { return null ; } return ( IRegion ) o ; } finally { Context . exit ( ) ; } } return null ; } } 