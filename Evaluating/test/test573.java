public class LaunchHelper { private static final String HANDLE_URL_FLAG = "-handleURL" ; private String dotAptanaFile = null ; private String [ ] initialFiles ; private static class FeatureURL implements IPlugin { private final URL url ; private final String id ; FeatureURL ( URL url , String id ) { this . url = url ; this . id = id ; } public String getId ( ) { return id ; } public String getName ( ) { return id ; } public URL getURL ( ) { return url ; } public String getVersion ( ) { return null ; } } private List < FeatureURL > featuresToInstall = new LinkedList < FeatureURL > ( ) ; public void openStartupFiles ( IWorkbenchWindow window ) { if ( initialFiles != null ) { if ( initialFiles . length > 0 ) { try { IntroPlugin . closeIntro ( ) ; } catch ( Exception ex ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_UnableToCLoseWelcome , ex ) ; } } for ( int i = 0 ; i < initialFiles . length ; i ++ ) { File file = new File ( initialFiles [ i ] ) ; try { if ( file . exists ( ) ) { String editorID = getEditorID ( file ) ; if ( editorID == null ) { WorkbenchHelper . openFile ( file , window ) ; } else { WorkbenchHelper . openFile ( editorID , file , window ) ; } } } catch ( Exception e ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_ErrorOpeningFileOnStartup , initialFiles [ i ] ) , e ) ; } } initialFiles = null ; } if ( featuresToInstall . size ( ) > 0 ) { UIJob uiJob = new UIJob ( "Installing features" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { try { Activator . getDefault ( ) . getPluginManager ( ) . install ( featuresToInstall . toArray ( new FeatureURL [ 0 ] ) , new NullProgressMonitor ( ) ) ; } catch ( PluginManagerException e ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , e . getMessage ( ) ) ; } return Status . OK_STATUS ; } } ; uiJob . setSystem ( true ) ; uiJob . setRule ( MutexJobRule . getInstance ( ) ) ; uiJob . schedule ( 10000 ) ; } } private String getEditorID ( File file ) { String name = file . getName ( ) . toLowerCase ( ) ; if ( name . endsWith ( ".js" ) || name . endsWith ( ".css" ) ) { return null ; } String contents = getFileContents ( file ) ; final String HTML_EDITOR = "com.aptana.ide.editors.HTMLEditor" ; if ( contents == null ) { return null ; } else { contents = contents . toLowerCase ( ) ; if ( contents . indexOf ( "<!doctype html" ) != - 1 || contents . indexOf ( "<html" ) != - 1 ) { return HTML_EDITOR ; } } return null ; } private String getFileContents ( File file ) { int fileLength = ( int ) file . length ( ) ; if ( fileLength == 0 ) { return null ; } if ( fileLength > 100 ) { fileLength = 100 ; } char [ ] chars = new char [ fileLength ] ; try { FileReader fr = new FileReader ( file ) ; fr . read ( chars ) ; fr . close ( ) ; } catch ( Exception e ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_UnableToGetFileContents , file . getAbsolutePath ( ) ) , e ) ; return null ; } return new String ( chars ) ; } private static LaunchHelper _instance ; public LaunchHelper getInstance ( ) { if ( _instance == null ) { _instance = new LaunchHelper ( ) ; } return _instance ; } public void setLaunchFileCmdLineArgs ( String [ ] args ) { int startIndex = 0 ; String [ ] fileList ; String [ ] argList = args ; if ( argList . length > 0 ) { if ( argList [ 0 ] . toLowerCase ( ) . matches ( ".*?(aptana.exe|aptanastudio.exe)" ) ) { startIndex = 1 ; String newDotAptanaFile = computeDotAptanaFileName ( ) ; if ( dotAptanaFile == null ) { dotAptanaFile = newDotAptanaFile ; IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_AptanaPortCachedInFile , dotAptanaFile ) ) ; } else { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_PortCacheFile , new String [ ] { dotAptanaFile , newDotAptanaFile } ) ) ; } } } featuresToInstall . clear ( ) ; List < String > filesList = new ArrayList < String > ( ) ; for ( int i = startIndex ; i < argList . length ; i ++ ) { if ( argList [ i ] . startsWith ( "-" ) ) { if ( argList [ i ] . equals ( HANDLE_URL_FLAG ) ) { if ( i < ( argList . length - 1 ) ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , "Received install request : " + argList [ i + 1 ] ) ; try { String urlString = argList [ i + 1 ] ; if ( urlString . startsWith ( "aptanaplugininstaller:" ) ) { urlString = urlString . substring ( "aptanaplugininstaller:" . length ( ) ) ; } URL url = new URL ( urlString ) ; final String id = url . getQuery ( ) ; if ( id != null && id . length ( ) > 0 ) { i ++ ; URL updateSiteUrl = new URL ( url . getProtocol ( ) , url . getHost ( ) , url . getPort ( ) , url . getPath ( ) ) ; featuresToInstall . add ( new FeatureURL ( updateSiteUrl , id ) ) ; } } catch ( MalformedURLException e ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , e . getMessage ( ) ) ; } } } } else { File file = new File ( argList [ i ] ) ; if ( file . exists ( ) ) { filesList . add ( argList [ i ] ) ; } } } fileList = ( String [ ] ) filesList . toArray ( new String [ 0 ] ) ; initialFiles = fileList ; } public int checkForRunningInstance ( ) { int port = readCurrentPort ( ) ; if ( port < 0 ) { return port ; } ServerSocket serverSocket = null ; try { serverSocket = new ServerSocket ( port , 0 , null ) ; return - 1 ; } catch ( IOException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , e . getMessage ( ) ) ; } finally { if ( serverSocket != null ) { try { serverSocket . close ( ) ; } catch ( IOException e ) { } } } return port ; } public void startServer ( ) { if ( dotAptanaFile == null ) { dotAptanaFile = computeDotAptanaFileName ( ) ; } try { CommandLineArgsServer server = new CommandLineArgsServer ( this ) ; server . start ( ) ; } catch ( IOException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_ErrorInChdeckingForCurrentInstance , e ) ; } } public void doShutdownCleanup ( ) { if ( dotAptanaFile != null ) { ( new File ( dotAptanaFile ) ) . delete ( ) ; } } private int readCurrentPort ( ) { FileReader fr = null ; if ( dotAptanaFile == null ) { dotAptanaFile = computeDotAptanaFileName ( ) ; } try { fr = new FileReader ( dotAptanaFile ) ; BufferedReader br = new BufferedReader ( fr ) ; String sPort = br . readLine ( ) . trim ( ) ; if ( sPort . length ( ) == 0 ) { return - 1 ; } return Integer . parseInt ( sPort ) ; } catch ( FileNotFoundException e ) { return - 1 ; } catch ( Exception e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_UnableToFindCurrentPort , e ) ; return CommandLineArgsServer . STARTING_PORT ; } finally { if ( fr != null ) { try { fr . close ( ) ; } catch ( IOException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_ErrorInClosingFileReader , e ) ; } } } } private static String computeDotAptanaFileName ( ) { File dotAptanaParent = new File ( System . getProperty ( "user.dir" ) ) ; Location location = Platform . getInstallLocation ( ) ; if ( location == null || location . isReadOnly ( ) ) { location = Platform . getConfigurationLocation ( ) ; if ( location == null || location . isReadOnly ( ) ) { location = Platform . getUserLocation ( ) ; if ( location == null || location . isReadOnly ( ) ) { location = null ; } } } if ( location != null ) { URL locationURL = location . getURL ( ) ; if ( locationURL != null && "file" . equals ( locationURL . getProtocol ( ) ) ) { try { dotAptanaParent = new File ( locationURL . toURI ( ) ) ; } catch ( URISyntaxException e ) { dotAptanaParent = new File ( locationURL . getPath ( ) ) ; } } } String computedDotAptanaFile = new File ( dotAptanaParent , ".aptana" ) . getAbsolutePath ( ) ; IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , ".aptana file " + computedDotAptanaFile ) ; return computedDotAptanaFile ; } public boolean sendInitialFilesAndInstallFeatures ( int port , String [ ] args ) { Socket socket = null ; DataOutputStream os = null ; try { socket = new Socket ( InetAddress . getByName ( null ) , port ) ; os = new DataOutputStream ( socket . getOutputStream ( ) ) ; } catch ( UnknownHostException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_UnknownLocalHost ) ; return false ; } catch ( IOException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_CouldNotGetIOConnection ) ; return false ; } if ( socket != null && os != null ) { try { StringBuilder sb = new StringBuilder ( ) ; for ( String arg : args ) { if ( sb . length ( ) > 0 ) { sb . append ( StringUtils . SPACE ) ; } sb . append ( "\"" + arg + "\"" ) ; } PrintWriter ps = new PrintWriter ( os ) ; ps . println ( sb . toString ( ) ) ; ps . flush ( ) ; ps . close ( ) ; socket . close ( ) ; return true ; } catch ( UnknownHostException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_TryingToConnectToUnknownHost ) ; } catch ( IOException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_IOExceptionEncountered ) ; } } return false ; } class CommandLineArgsServer extends Thread { public static final int STARTING_PORT = 9980 ; LaunchHelper helper ; ServerSocket server = null ; String line ; DataInputStream is ; PrintStream os ; Socket clientSocket = null ; public CommandLineArgsServer ( LaunchHelper helper ) throws IOException { super ( "CommandLineArgsServer" ) ; this . helper = helper ; int port = getPort ( ) ; if ( port == - 1 ) { throw new IOException ( StringUtils . format ( Messages . LaunchHelper_CouldNotFindOpenPort , new String [ ] { String . valueOf ( STARTING_PORT ) , String . valueOf ( STARTING_PORT + 10 ) } ) ) ; } else { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_BoundAptanaToPort , port ) ) ; } try { FileWriter f = new FileWriter ( dotAptanaFile ) ; BufferedWriter out = new BufferedWriter ( f ) ; out . write ( StringUtils . EMPTY + port ) ; out . close ( ) ; new File ( dotAptanaFile ) . deleteOnExit ( ) ; } catch ( IOException e ) { } } public int getPort ( ) { int tries = 10 ; int port = STARTING_PORT ; while ( tries > 0 ) { try { server = new ServerSocket ( port , 0 , null ) ; server . setSoTimeout ( 1000 ) ; return port ; } catch ( IOException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_UnableToBindToPort , port ) ) ; tries -- ; port ++ ; } } return - 1 ; } public void run ( ) { while ( server . isClosed ( ) == false ) { try { clientSocket = server . accept ( ) ; BufferedReader r = new BufferedReader ( new InputStreamReader ( clientSocket . getInputStream ( ) ) ) ; BufferedWriter w = new BufferedWriter ( new OutputStreamWriter ( clientSocket . getOutputStream ( ) ) ) ; line = r . readLine ( ) . trim ( ) ; w . write ( "pong" ) ; w . flush ( ) ; clientSocket . close ( ) ; if ( line . length ( ) > 0 ) { helper . startupPerformed ( line ) ; } } catch ( SocketTimeoutException e ) { } catch ( Exception e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , CoreStrings . ERROR , e ) ; } } } } public void hookStartupListener ( ) { try { Class cls = ClassLoader . getSystemClassLoader ( ) . loadClass ( "com.aptana.ide.startup.WorkbenchStartupManager" ) ; Method startupListener ; startupListener = cls . getMethod ( "setStartupListener" , new Class [ ] { Object . class } ) ; startupListener . invoke ( null , new Object [ ] { this } ) ; } catch ( ClassNotFoundException e ) { IdeLog . logInfo ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_TheStartupListenerClassIsNotAvailable ) ; } catch ( Throwable e ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , Messages . LaunchHelper_ErrorHookingStartupListener , e ) ; } } public void startupPerformed ( String args ) { String [ ] startupArgs = parseCommandLineArgs ( args ) ; setLaunchFileCmdLineArgs ( startupArgs ) ; PlatformUI . getWorkbench ( ) . getDisplay ( ) . syncExec ( new Runnable ( ) { public void run ( ) { openStartupFiles ( PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ) ; } } ) ; } private String [ ] parseCommandLineArgs ( String cmdLine ) { char quote = '"' ; char flagStart = '-' ; List < String > args = new ArrayList < String > ( ) ; StringBuffer word = new StringBuffer ( ) ; try { char [ ] chars = cmdLine . toCharArray ( ) ; boolean quoteMode = false ; for ( int i = 0 ; i < chars . length ; i ++ ) { boolean endWord = false ; char ch = chars [ i ] ; if ( ch == quote ) { if ( quoteMode ) { quoteMode = false ; endWord = true ; } else { quoteMode = true ; } } else if ( Character . isWhitespace ( ch ) && ! quoteMode ) { endWord = true ; } else { word . append ( ch ) ; } if ( endWord ) { if ( word . length ( ) > 0 && ( word . toString ( ) . equals ( HANDLE_URL_FLAG ) || word . charAt ( 0 ) != flagStart ) ) { args . add ( word . toString ( ) ) ; } word . setLength ( 0 ) ; } } } catch ( Exception e ) { IdeLog . logError ( DesktopIntegrationServerActivator . getDefault ( ) , StringUtils . format ( Messages . LaunchHelper_UnableToRecognizeCommandLineLaunchArguments , cmdLine ) ) ; } if ( word . length ( ) > 0 && ( word . toString ( ) . equals ( HANDLE_URL_FLAG ) || word . charAt ( 0 ) != flagStart ) ) { args . add ( word . toString ( ) ) ; } String [ ] argArray = ( String [ ] ) args . toArray ( new String [ 0 ] ) ; return argArray ; } } 