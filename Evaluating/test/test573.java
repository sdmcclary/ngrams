public class Base64InputStream extends InputStream { private static final int [ ] DECODING_TABLE = new int [ 256 ] ; static { for ( int i = 0 ; i < DECODING_TABLE . length ; i ++ ) { if ( i >= 'A' && i <= 'Z' ) { DECODING_TABLE [ i ] = ( i - 'A' ) ; } else if ( i >= 'a' && i <= 'z' ) { DECODING_TABLE [ i ] = ( i - 'a' + 26 ) ; } else if ( i >= '0' && i <= '9' ) { DECODING_TABLE [ i ] = ( i - '0' + 52 ) ; } else if ( i == '+' ) { DECODING_TABLE [ i ] = 62 ; } else if ( i == '/' ) { DECODING_TABLE [ i ] = 63 ; } else if ( i == '=' ) { DECODING_TABLE [ i ] = - 2 ; } else { DECODING_TABLE [ i ] = - 1 ; } } } private final InputStream delegate ; private int bytesLeftInBuffer = 0 ; private int buffer = 0 ; public Base64InputStream ( InputStream delegate ) { this . delegate = delegate ; } @ Override public int read ( ) throws IOException { if ( bytesLeftInBuffer == 0 ) { bytesLeftInBuffer = 3 ; for ( int i = 0 ; i < 4 ; i ++ ) { int c = delegate . read ( ) ; buffer <<= 6 ; if ( c < 0 ) { if ( i == 0 ) { bytesLeftInBuffer = 0 ; return - 1 ; } else { throw new EOFException ( ) ; } } else if ( bytesLeftInBuffer == 2 ) { if ( c == '=' ) { bytesLeftInBuffer = 1 ; } else { throw new IOException ( "Non-padding in Base64 stream after padding had started." ) ; } } else { int b = DECODING_TABLE [ c ] ; if ( b == - 2 ) { if ( i <= 1 ) { throw new IOException ( "Base 64 padding in a bad position." ) ; } bytesLeftInBuffer = 2 ; } else if ( b == - 1 ) { throw new IOException ( "Non-Base64 input: “0x" + Integer . toHexString ( c ) + "”." ) ; } else { buffer |= b ; } } } } int rv = ( buffer & 0xFF0000 ) > > 16 ; buffer <<= 8 ; bytesLeftInBuffer -- ; return rv ; } public void close ( ) throws IOException { delegate . close ( ) ; } } 