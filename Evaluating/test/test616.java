public class XMLEditor extends UnifiedEditor { private boolean isDisposing = false ; private boolean _isMarkingBothTags ; public XMLEditor ( ) { super ( ) ; addPluginToPreferenceStore ( XMLPlugin . getDefault ( ) ) ; _isMarkingBothTags = getPreferenceStore ( ) . getBoolean ( IPreferenceConstants . XMLEDITOR_HIGHLIGHT_START_END_TAGS ) ; } protected IUnifiedEditorContributor createLocalContributor ( ) { return new XMLContributor ( ) ; } public IFileServiceFactory getFileServiceFactory ( ) { return XMLFileServiceFactory . getInstance ( ) ; } public String getDefaultFileExtension ( ) { return "xml" ; } public void dispose ( ) { if ( isDisposing ) { return ; } isDisposing = true ; super . dispose ( ) ; } protected boolean isNewInput ( IEditorInput input ) { XMLFileInfo cuInfo = getXMLFileInfo ( input ) ; if ( cuInfo == null ) { throw new RuntimeException ( Messages . XMLEditor_cuInfo_Null_At_DoSetInput ) ; } XMLDocumentProvider dp = ( XMLDocumentProvider ) getDocumentProvider ( ) ; IDocument document = dp . getDocument ( input ) ; DocumentSourceProvider provider = new DocumentSourceProvider ( document , input ) ; if ( provider == null ) { throw new RuntimeException ( Messages . XMLEditor_Provider_Null ) ; } return ( cuInfo . sourceProvider == null || cuInfo . sourceProvider . equals ( provider ) == false ) ; } private XMLFileInfo getXMLFileInfo ( IEditorInput input ) { XMLDocumentProvider dp = ( XMLDocumentProvider ) getDocumentProvider ( ) ; if ( dp == null ) { throw new RuntimeException ( Messages . XMLEditor_Document_Provider_Null ) ; } return ( XMLFileInfo ) dp . getFileInfoPublic ( input ) ; } protected void updateFileInfo ( IEditorInput input , DocumentSourceProvider provider , IDocument document ) { super . updateFileInfo ( input , provider , document ) ; if ( isNewInput ( input ) ) { getXMLFileInfo ( input ) . sourceProvider = provider ; } } private ToolbarWidget toolbar ; private Composite displayArea ; public void createPartControl ( Composite parent ) { displayArea = new Composite ( parent , SWT . NONE ) ; GridLayout daLayout = new GridLayout ( 1 , true ) ; daLayout . marginHeight = 0 ; daLayout . marginWidth = 0 ; displayArea . setLayout ( daLayout ) ; displayArea . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; boolean show = getPreferenceStore ( ) . getBoolean ( IPreferenceConstants . SHOW_XML_TOOLBAR ) ; if ( show ) { toolbar = new ToolbarWidget ( new String [ ] { XMLMimeType . MimeType } , new String [ ] { "XML" } , getPreferenceStore ( ) , IPreferenceConstants . SHOW_XML_TOOLBAR , this ) ; toolbar . createControl ( displayArea ) ; } Composite editorArea = new Composite ( displayArea , SWT . NONE ) ; editorArea . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true ) ) ; GridLayout eaLayout = new GridLayout ( 1 , true ) ; eaLayout . marginHeight = 0 ; eaLayout . marginWidth = 0 ; editorArea . setLayout ( new FillLayout ( ) ) ; super . createPartControl ( editorArea ) ; } public boolean canMarkOccurrences ( Lexeme lexeme ) { IToken token = lexeme . getToken ( ) ; int typeIndex = token . getTypeIndex ( ) ; if ( typeIndex == XMLTokenTypes . WHITESPACE || typeIndex == XMLTokenTypes . COMMENT || typeIndex == XMLTokenTypes . TEXT ) { return false ; } return true ; } protected void markOccurences ( LexemeList lexemeList , Lexeme selectedLexeme ) { boolean deferToParent = true ; if ( _isMarkingBothTags && ( selectedLexeme . typeIndex == XMLTokenTypes . START_TAG || selectedLexeme . typeIndex == XMLTokenTypes . END_TAG ) ) { deferToParent = false ; String selectedText = selectedLexeme . getText ( ) ; String normalizedSelectedText = selectedText ; if ( selectedLexeme . typeIndex == XMLTokenTypes . END_TAG ) { if ( selectedLexeme . length >= 3 ) { normalizedSelectedText = selectedText . substring ( 0 , 1 ) + selectedText . substring ( 2 ) ; } } for ( int i = 0 ; i < lexemeList . size ( ) ; i ++ ) { Lexeme lexeme = lexemeList . get ( i ) ; if ( lexeme != null ) { if ( lexeme . isHighlighted ( ) ) { lexeme . setHighlighted ( false ) ; } if ( lexeme . typeIndex == XMLTokenTypes . START_TAG || lexeme . typeIndex == XMLTokenTypes . END_TAG ) { if ( lexeme . typeIndex == selectedLexeme . typeIndex && lexeme . length == selectedLexeme . length ) { if ( selectedText . equals ( lexeme . getText ( ) ) ) { lexeme . setHighlighted ( true ) ; } } else if ( ( lexeme . length - selectedLexeme . length ) == 1 ) { if ( lexeme . typeIndex == XMLTokenTypes . END_TAG ) { if ( lexeme . length >= 3 ) { String normalizedText = lexeme . getText ( ) . substring ( 0 , 1 ) + lexeme . getText ( ) . substring ( 2 ) ; if ( normalizedText . equals ( selectedText ) ) { lexeme . setHighlighted ( true ) ; } } } } else if ( ( selectedLexeme . length - lexeme . length ) == 1 ) { if ( normalizedSelectedText . equals ( lexeme . getText ( ) ) ) { lexeme . setHighlighted ( true ) ; } } } } } } if ( deferToParent ) { super . markOccurences ( lexemeList , selectedLexeme ) ; } } public IDocumentProvider createDocumentProvider ( ) { return XMLDocumentProvider . getInstance ( ) ; } protected String [ ] collectContextMenuPreferencePages ( ) { return new String [ ] { "com.aptana.ide.editor.xml.preferences.GeneralPreferencePage" , "com.aptana.ide.editor.xml.preferences.ColorizationPreferencePage" , "com.aptana.ide.editor.xml.preferences.FoldingPreferencePage" , "com.aptana.ide.editor.xml.preferences.ProblemsPreferencePage" , "com.aptana.ide.editor.xml.preferences.FormattingPreferencePage" , "com.aptana.ide.editor.xml.preferences.CodeAssistPreferencePage" , "com.aptana.ide.editor.xml.preferences.TypingPreferencePage" , "org.eclipse.ui.preferencePages.GeneralTextEditor" , "org.eclipse.ui.editors.preferencePages.Annotations" , "org.eclipse.ui.editors.preferencePages.QuickDiff" , "org.eclipse.ui.editors.preferencePages.Accessibility" , "org.eclipse.ui.editors.preferencePages.Spelling" , "org.eclipse.ui.editors.preferencePages.LinkedModePreferencePage" , } ; } protected void handlePreferenceStoreChanged ( PropertyChangeEvent event ) { String property = event . getProperty ( ) ; if ( IPreferenceConstants . XMLEDITOR_HIGHLIGHT_START_END_TAGS . equals ( property ) ) { _isMarkingBothTags = getPreferenceStore ( ) . getBoolean ( IPreferenceConstants . XMLEDITOR_HIGHLIGHT_START_END_TAGS ) ; } else { super . handlePreferenceStoreChanged ( event ) ; } } } 