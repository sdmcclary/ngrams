public class SyncPomMojo extends AbstractMojo { private String yamlPomName = "pom.yml" ; private String syncFileName = ".pom.yml" ; private int yamlIndent = 2 ; private int xmlIndent = 4 ; private boolean failIfXmlSync = true ; private boolean failIfCannotSync = true ; private String target = "auto" ; private File basedir ; public void execute ( ) throws MojoExecutionException { File xmlFile = new File ( basedir , "pom.xml" ) ; File yamlFile = new File ( basedir , yamlPomName ) ; File syncFile = new File ( basedir , syncFileName ) ; SyncManager syncManager = new SyncManager ( xmlFile , yamlFile , syncFile ) ; try { switch ( determineTarget ( syncManager ) ) { case YAML : getLog ( ) . info ( "Converting " + xmlFile . getName ( ) + " into " + yamlFile . getName ( ) ) ; sync ( xmlFile , yamlFile , syncFile , false ) ; syncManager . save ( ) ; break ; case XML : getLog ( ) . info ( "Converting " + yamlFile . getName ( ) + " into " + xmlFile . getName ( ) ) ; sync ( xmlFile , yamlFile , syncFile , true ) ; syncManager . save ( ) ; if ( failIfXmlSync ) { throw new MojoExecutionException ( "pom.xml modified.  You must retry your Maven command." ) ; } break ; case SYNC_FILE_ONLY : getLog ( ) . info ( "Files in sync, creating a sync file" ) ; syncManager . save ( ) ; break ; case NONE : getLog ( ) . info ( "No sync required" ) ; break ; case UNKNOWN : if ( failIfCannotSync ) throw new MojoExecutionException ( "Unable to automatically sync" ) ; else getLog ( ) . error ( "Unable to automatically sync due to changes to both XML and YAML since last sync." ) ; } } catch ( IOException e ) { throw new MojoExecutionException ( "Error syncing YAML pom" , e ) ; } catch ( InvalidFormatException e ) { throw new MojoExecutionException ( "Unable to create or parse a valid format: \n" + e . getText ( ) , e ) ; } } private SyncManager . FormatToTarget determineTarget ( SyncManager syncManager ) { if ( target . equalsIgnoreCase ( "yaml" ) || target . equalsIgnoreCase ( "yml" ) ) { return SyncManager . FormatToTarget . YAML ; } else if ( target . equalsIgnoreCase ( "xml" ) ) { return SyncManager . FormatToTarget . XML ; } else { return syncManager . determineFormatToTarget ( ) ; } } private void sync ( File xmlFile , File yamlFile , File syncFile , boolean xmlFirst ) throws IOException , InvalidFormatException { if ( xmlFirst ) { convertYamlToXml ( ) . indentSpaces ( xmlIndent ) . fromFile ( yamlFile ) . toFile ( xmlFile ) . logWith ( new MavenLog ( getLog ( ) ) ) . convert ( ) ; convertXmlToYaml ( ) . indentSpaces ( yamlIndent ) . fromFile ( xmlFile ) . toFile ( yamlFile ) . logWith ( new MavenLog ( getLog ( ) ) ) . convert ( ) ; } else { convertXmlToYaml ( ) . indentSpaces ( yamlIndent ) . fromFile ( xmlFile ) . toFile ( yamlFile ) . logWith ( new MavenLog ( getLog ( ) ) ) . convert ( ) ; convertYamlToXml ( ) . indentSpaces ( xmlIndent ) . fromFile ( yamlFile ) . toFile ( xmlFile ) . logWith ( new MavenLog ( getLog ( ) ) ) . convert ( ) ; } } } 