<<<<<<< HEAD
public class JdbcResultResource { private static final Logger log = Logger . getLogger ( JdbcResultResource . class . getName ( ) ) ; public static final int FETCH_ASSOC = 0x1 ; public static final int FETCH_NUM = 0x2 ; public static final int FETCH_BOTH = FETCH_ASSOC | FETCH_NUM ; public static final String INTEGER = "int" ; public static final String BLOB = "blob" ; public static final String STRING = "string" ; public static final String DATE = "date" ; public static final String DATETIME = "datetime" ; public static final String REAL = "real" ; public static final String TIME = "time" ; public static final String TIMESTAMP = "timestamp" ; public static final String UNKNOWN = "unknown" ; public static final String YEAR = "year" ; private Statement _stmt ; protected ResultSet _rs ; private boolean _isValid ; private int _fieldOffset ; private JdbcConnectionResource _conn ; private Env _env ; protected ResultSetMetaData _metaData ; private Value [ ] _columnNames ; private int _affectedRows ; private String _resultEncoding ; public JdbcResultResource ( Env env , Statement stmt , ResultSet rs , JdbcConnectionResource conn , String _resultEncoding ) { _env = env ; _stmt = stmt ; _rs = rs ; _conn = conn ; } public JdbcResultResource ( Env env , ResultSetMetaData metaData , JdbcConnectionResource conn ) { _env = env ; _metaData = metaData ; _conn = conn ; } public void close ( ) { try { ResultSet rs = _rs ; _rs = null ; Statement stmt = _stmt ; _stmt = null ; JdbcConnectionResource conn = _conn ; _conn = null ; if ( rs != null ) rs . close ( ) ; if ( stmt != null && conn != null ) conn . closeStatement ( stmt ) ; _env = null ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } public ArrayValue fetchArray ( Env env , int type ) { try { if ( _rs == null ) return null ; if ( _rs . next ( ) ) { _isValid = true ; ArrayValue array = new ArrayValueImpl ( ) ; ResultSetMetaData md = getMetaData ( ) ; int count = md . getColumnCount ( ) ; if ( ( type & FETCH_ASSOC ) != 0 ) { _columnNames = new Value [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { String columnName = md . getColumnLabel ( i + 1 ) ; _columnNames [ i ] = createString ( columnName ) ; } } for ( int i = 0 ; i < count ; i ++ ) { Value value = getColumnValue ( env , _rs , md , i + 1 ) ; if ( ( type & FETCH_NUM ) != 0 ) array . put ( LongValue . create ( i ) , value ) ; if ( ( type & FETCH_ASSOC ) != 0 ) array . put ( _columnNames [ i ] , value ) ; } return array ; } else { return null ; } } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return null ; } } public ArrayValue fetchAssoc ( Env env ) { return fetchArray ( env , JdbcResultResource . FETCH_ASSOC ) ; } public Value fetchField ( Env env , int maxLength , String tableName , String type ) { if ( _rs == null ) return null ; ObjectValue result = env . createObject ( ) ; try { if ( ! _isValid ) { _isValid = true ; _rs . next ( ) ; } result . putField ( env , "name" , createString ( _rs . getString ( 1 ) ) ) ; result . putField ( env , "table" , createString ( tableName ) ) ; result . putField ( env , "max_length" , LongValue . create ( maxLength ) ) ; if ( ! isInResultString ( 4 , "YES" ) ) result . putField ( env , "not_null" , LongValue . ONE ) ; else result . putField ( env , "not_null" , LongValue . ZERO ) ; if ( isInResultString ( 5 , "PRI" ) ) result . putField ( env , "primary_key" , LongValue . ONE ) ; else result . putField ( env , "primary_key" , LongValue . ZERO ) ; if ( isInResultString ( 5 , "MUL" ) ) result . putField ( env , "multiple_key" , LongValue . ONE ) ; else result . putField ( env , "multiple_key" , LongValue . ZERO ) ; if ( isInResultString ( 2 , "int" ) || isInResultString ( 2 , "real" ) ) result . putField ( env , "numeric" , LongValue . ONE ) ; else result . putField ( env , "numeric" , LongValue . ZERO ) ; if ( isInResultString ( 2 , "blob" ) ) result . putField ( env , "blob" , LongValue . ONE ) ; else result . putField ( env , "blob" , LongValue . ZERO ) ; result . putField ( env , "type" , createString ( type ) ) ; if ( isInResultString ( 2 , "unsigned" ) ) result . putField ( env , "unsigned" , LongValue . ONE ) ; else result . putField ( env , "unsigned" , LongValue . ZERO ) ; if ( isInResultString ( 2 , "zerofill" ) ) result . putField ( env , "zerofill" , LongValue . ONE ) ; else result . putField ( env , "zerofill" , LongValue . ZERO ) ; return result ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value fetchObject ( Env env ) { if ( _rs == null ) return NullValue . NULL ; try { if ( _rs . next ( ) ) { _isValid = true ; Value result = env . createObject ( ) ; ResultSetMetaData md = getMetaData ( ) ; int count = md . getColumnCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { String name = md . getColumnLabel ( i + 1 ) ; Value value = getColumnValue ( env , _rs , md , i + 1 ) ; result . putField ( env , name , value ) ; } return result ; } else { return NullValue . NULL ; } } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return NullValue . NULL ; } } public ArrayValue fetchRow ( Env env ) { return fetchArray ( env , JdbcResultResource . FETCH_NUM ) ; } public int getAffectedRows ( ) { return _affectedRows ; } protected int getColumnNumber ( Value fieldNameOrNumber , int base ) throws SQLException { int fieldNumber = - 1 ; if ( ( fieldNameOrNumber != null ) && fieldNameOrNumber . isLongConvertible ( ) ) { fieldNumber = fieldNameOrNumber . toInt ( ) - base ; } if ( fieldNumber < 0 ) { fieldNumber = getColumnNumber ( fieldNameOrNumber . toString ( ) ) ; } return fieldNumber ; } protected int getColumnNumber ( String colName ) throws SQLException { return getColumnNumber ( colName , getMetaData ( ) ) ; } private int getColumnNumber ( String colName , ResultSetMetaData rsmd ) throws SQLException { int numColumns = rsmd . getColumnCount ( ) ; if ( colName . indexOf ( '.' ) == - 1 ) { for ( int i = 1 ; i <= numColumns ; i ++ ) { if ( colName . equals ( rsmd . getColumnLabel ( i ) ) ) return ( i - 1 ) ; } return - 1 ; } else { for ( int i = 1 ; i <= numColumns ; i ++ ) { if ( colName . equals ( rsmd . getTableName ( i ) + '.' + rsmd . getColumnLabel ( i ) ) ) return ( i - 1 ) ; } return - 1 ; } } public Value getColumnValue ( Env env , ResultSet rs , ResultSetMetaData metaData , int column ) throws SQLException { try { switch ( metaData . getColumnType ( column ) ) { case Types . NULL : return NullValue . NULL ; case Types . BIT : { String typeName = metaData . getColumnTypeName ( column ) ; if ( ! typeName . equals ( "bool" ) ) { String value = rs . getString ( column ) ; if ( rs . wasNull ( ) ) return NullValue . NULL ; else return createString ( value ) ; } } case Types . BOOLEAN : { boolean b = rs . getBoolean ( column ) ; if ( rs . wasNull ( ) ) return NullValue . NULL ; else return createString ( b ? "t" : "f" ) ; } case Types . TINYINT : case Types . SMALLINT : case Types . INTEGER : case Types . BIGINT : { long value = rs . getLong ( column ) ; if ( rs . wasNull ( ) ) return NullValue . NULL ; else return createString ( String . valueOf ( value ) ) ; } case Types . REAL : case Types . DOUBLE : { double value = rs . getDouble ( column ) ; if ( rs . wasNull ( ) ) return NullValue . NULL ; else if ( metaData . isCurrency ( column ) ) { StringValue sb = _env . createUnicodeBuilder ( ) ; sb . append ( "$" ) ; return sb . append ( value ) ; } else if ( value == 0.0 ) { StringValue sb = _env . createUnicodeBuilder ( ) ; return sb . append ( "0" ) ; } else { StringValue sb = _env . createUnicodeBuilder ( ) ; return sb . append ( value ) ; } } case Types . BLOB : { Object object = rs . getBlob ( column ) ; if ( object . getClass ( ) . getName ( ) . equals ( "oracle.sql.BLOB" ) ) { OracleOciLob ociLob = new OracleOciLob ( ( Oracle ) _conn , OracleModule . OCI_D_LOB ) ; ociLob . setLob ( object ) ; object = ociLob ; } return env . wrapJava ( object ) ; } case Types . CLOB : { Object object = rs . getClob ( column ) ; if ( object . getClass ( ) . getName ( ) . equals ( "oracle.sql.CLOB" ) ) { OracleOciLob ociLob = new OracleOciLob ( ( Oracle ) _conn , OracleModule . OCI_D_LOB ) ; ociLob . setLob ( object ) ; object = ociLob ; } return env . wrapJava ( object ) ; } case Types . LONGVARBINARY : case Types . VARBINARY : case Types . BINARY : { StringValue bb = env . createBinaryBuilder ( ) ; InputStream is = rs . getBinaryStream ( column ) ; if ( is == null ) return NullValue . NULL ; try { bb . appendReadAll ( is , Long . MAX_VALUE / 2 ) ; } catch ( RuntimeException e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; return NullValue . NULL ; } return bb ; } case Types . VARCHAR : case Types . LONGVARCHAR : if ( env . isUnicodeSemantics ( ) ) return getUnicodeColumnString ( env , rs , metaData , column ) ; else return getColumnString ( env , rs , metaData , column ) ; case Types . TIME : return getColumnTime ( env , rs , column ) ; case Types . TIMESTAMP : return getColumnTimestamp ( env , rs , column ) ; case Types . DATE : return getColumnDate ( env , rs , column ) ; default : { String strValue = rs . getString ( column ) ; if ( strValue == null ) return NullValue . NULL ; else return createString ( strValue ) ; } } } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return NullValue . NULL ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return NullValue . NULL ; } } protected Value getUnicodeColumnString ( Env env , ResultSet rs , ResultSetMetaData md , int column ) throws IOException , SQLException { Reader reader = rs . getCharacterStream ( column ) ; if ( reader == null ) return NullValue . NULL ; StringValue bb = env . createUnicodeBuilder ( ) ; bb . append ( reader ) ; return bb ; } protected Value getColumnString ( Env env , ResultSet rs , ResultSetMetaData md , int column ) throws SQLException { byte [ ] bytes = rs . getBytes ( column ) ; if ( bytes == null ) return NullValue . NULL ; StringValue bb = env . createUnicodeBuilder ( ) ; bb . append ( bytes ) ; return bb ; } protected Value getColumnTime ( Env env , ResultSet rs , int column ) throws SQLException { Time time = rs . getTime ( column ) ; if ( time == null ) return NullValue . NULL ; else return createString ( String . valueOf ( time ) ) ; } protected Value getColumnDate ( Env env , ResultSet rs , int column ) throws SQLException { Date date = rs . getDate ( column ) ; if ( date == null ) return NullValue . NULL ; else return createString ( String . valueOf ( date ) ) ; } protected Value getColumnTimestamp ( Env env , ResultSet rs , int column ) throws SQLException { try { Timestamp timestamp = rs . getTimestamp ( column ) ; if ( timestamp == null ) return NullValue . NULL ; else { String time = String . valueOf ( timestamp ) ; if ( time . endsWith ( ".0" ) ) time = time . substring ( 0 , time . length ( ) - 2 ) ; return createString ( time ) ; } } catch ( SQLException e ) { if ( log . isLoggable ( Level . FINER ) ) log . log ( Level . FINER , e . toString ( ) , e ) ; return createString ( "0000-00-00 00:00:00" ) ; } } public JdbcConnectionResource getConnection ( ) { return _conn ; } public Value getFieldCatalog ( int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) return BooleanValue . FALSE ; else return createString ( md . getCatalogName ( fieldOffset + 1 ) ) ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public int getFieldCount ( ) { try { if ( getMetaData ( ) != null ) return getMetaData ( ) . getColumnCount ( ) ; else return - 1 ; } catch ( SQLException e ) { throw new RuntimeException ( e ) ; } } protected boolean isValidFieldOffset ( int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( fieldOffset < 0 || md . getColumnCount ( ) <= fieldOffset ) return false ; else return true ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } } protected boolean isInResultString ( int columnIndex , String substring ) throws SQLException { String resultString = _rs . getString ( columnIndex ) ; if ( resultString == null ) return false ; int index = resultString . indexOf ( substring ) ; if ( index == - 1 ) return false ; else return true ; } public Value getFieldLength ( Env env , int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { env . invalidArgument ( "field" , fieldOffset ) ; return BooleanValue . FALSE ; } else return LongValue . create ( ( long ) md . getPrecision ( fieldOffset + 1 ) ) ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getFieldName ( Env env , int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { env . invalidArgument ( "field" , fieldOffset ) ; return BooleanValue . FALSE ; } else return createString ( md . getColumnLabel ( fieldOffset + 1 ) ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getFieldNameAlias ( int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) return BooleanValue . FALSE ; else return createString ( md . getColumnLabel ( fieldOffset + 1 ) ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getFieldNotNull ( Env env , int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { env . invalidArgument ( "field" , fieldOffset ) ; return BooleanValue . FALSE ; } else if ( md . isNullable ( fieldOffset + 1 ) == ResultSetMetaData . columnNoNulls ) return LongValue . ONE ; else return LongValue . ZERO ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public int getFieldOffset ( ) { return _fieldOffset ; } public Value getFieldScale ( int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) return BooleanValue . FALSE ; else return LongValue . create ( ( long ) md . getScale ( fieldOffset + 1 ) ) ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getFieldTable ( Env env , int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { env . invalidArgument ( "field" , fieldOffset ) ; return BooleanValue . FALSE ; } else { String tableName = md . getTableName ( fieldOffset + 1 ) ; if ( tableName == null || tableName . equals ( "" ) ) return BooleanValue . FALSE ; else return createString ( tableName ) ; } } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getFieldSchema ( Env env , int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { env . invalidArgument ( "schema" , fieldOffset ) ; return BooleanValue . FALSE ; } else { String tableName = md . getSchemaName ( fieldOffset + 1 ) ; if ( tableName == null || tableName . equals ( "" ) ) return BooleanValue . FALSE ; else return createString ( tableName ) ; } } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getFieldType ( Env env , int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; if ( md . getColumnCount ( ) <= fieldOffset || fieldOffset < 0 ) { env . invalidArgument ( "field" , fieldOffset ) ; return BooleanValue . FALSE ; } else { int jdbcType = md . getColumnType ( fieldOffset + 1 ) ; return createString ( getFieldType ( fieldOffset , jdbcType ) ) ; } } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } protected String getFieldType ( int fieldOffset , int jdbcType ) { switch ( jdbcType ) { case Types . BIGINT : case Types . BIT : case Types . INTEGER : case Types . SMALLINT : case Types . TINYINT : return INTEGER ; case Types . LONGVARBINARY : case Types . LONGVARCHAR : return BLOB ; case Types . CHAR : case Types . VARCHAR : case Types . BINARY : case Types . VARBINARY : return STRING ; case Types . TIME : return TIME ; case Types . DATE : return DATE ; case Types . TIMESTAMP : return DATETIME ; case Types . DECIMAL : case Types . DOUBLE : case Types . REAL : return REAL ; default : return UNKNOWN ; } } protected Statement getJavaStatement ( ) { return _conn . getEnv ( ) . getQuercus ( ) . getStatement ( getStatement ( ) ) ; } protected Value getJdbcType ( int fieldOffset ) { try { ResultSetMetaData md = getMetaData ( ) ; return LongValue . create ( md . getColumnType ( fieldOffset + 1 ) ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public Value getLengths ( ) { Value result ; ArrayValue array = new ArrayValueImpl ( ) ; try { ResultSetMetaData md = getMetaData ( ) ; int numColumns = md . getColumnCount ( ) ; for ( int i = 1 ; i <= numColumns ; i ++ ) { array . put ( LongValue . create ( _rs . getObject ( i ) . toString ( ) . length ( ) ) ) ; } result = array ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } return result ; } public ResultSetMetaData getMetaData ( ) throws SQLException { if ( _metaData != null ) return _metaData ; if ( _metaData == null && _rs != null ) _metaData = _rs . getMetaData ( ) ; return _metaData ; } public Value getNumFields ( ) { try { Value result = NullValue . NULL ; ResultSetMetaData md = getMetaData ( ) ; int count = md . getColumnCount ( ) ; if ( count != 0 ) { result = LongValue . create ( ( long ) count ) ; } return result ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return NullValue . NULL ; } } public int getNumRows ( ) { return getNumRows ( _rs ) ; } public static int getNumRows ( ResultSet rs ) { if ( rs == null ) return - 1 ; try { int currentRow = rs . getRow ( ) ; try { rs . last ( ) ; return rs . getRow ( ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return - 1 ; } finally { if ( currentRow == 0 ) rs . beforeFirst ( ) ; else rs . absolute ( currentRow ) ; } } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return - 1 ; } } public Value getResultField ( Env env , int row , Value field ) { try { ResultSetMetaData md = getMetaData ( ) ; int colNumber ; if ( field . isNumberConvertible ( ) ) colNumber = field . toInt ( ) ; else colNumber = getColumnNumber ( field . toString ( ) , md ) ; if ( colNumber < 0 || colNumber >= md . getColumnCount ( ) ) { env . invalidArgument ( "field" , field ) ; return BooleanValue . FALSE ; } int currentRow = _rs . getRow ( ) ; if ( ( row < 0 ) || ( ! _rs . absolute ( row + 1 ) ) || _rs . isAfterLast ( ) ) { if ( currentRow > 0 ) _rs . absolute ( currentRow ) ; else _rs . beforeFirst ( ) ; env . invalidArgument ( "row" , row ) ; return BooleanValue . FALSE ; } return getColumnValue ( env , _rs , md , colNumber + 1 ) ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public ResultSet getResultSet ( ) { return _rs ; } public Statement getStatement ( ) { return _stmt ; } public boolean seek ( Env env , int rowNumber ) { if ( setRowNumber ( rowNumber ) ) return true ; return false ; } public void setAffectedRows ( int affectedRows ) { _affectedRows = affectedRows ; } public boolean setFieldOffset ( int fieldOffset ) { _fieldOffset = fieldOffset ; if ( fieldOffset < 0 || fieldOffset >= getNumFields ( ) . toInt ( ) ) return false ; else return true ; } public boolean setRowNumber ( int rowNumber ) { return setRowNumber ( _rs , rowNumber ) ; } public static boolean setRowNumber ( ResultSet rs , int rowNumber ) { int numRows = getNumRows ( rs ) ; if ( numRows <= rowNumber || rowNumber < 0 ) { return false ; } try { if ( rowNumber == 0 ) rs . beforeFirst ( ) ; else rs . absolute ( rowNumber ) ; } catch ( SQLException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } return true ; } public Value toKey ( ) { return createString ( "JdbcResultResource$" + System . identityHashCode ( this ) ) ; } public String toString ( ) { if ( _rs != null ) return getClass ( ) . getSimpleName ( ) + "[" + _rs . getClass ( ) . getSimpleName ( ) + "]" ; else return getClass ( ) . getSimpleName ( ) + "[]" ; } public JdbcResultResource validateResult ( ) { return this ; } private StringValue createString ( String str ) { return _env . createString ( str , _resultEncoding ) ; } } 
=======
public class RngProperty { private RngProperty ( ) { } public static final PropertyId < DatatypeLibraryFactory > DATATYPE_LIBRARY_FACTORY = PropertyId . newInstance ( "DATATYPE_LIBRARY_FACTORY" , DatatypeLibraryFactory . class ) ; public static final FlagPropertyId CHECK_ID_IDREF = new FlagPropertyId ( "CHECK_ID_IDREF" ) ; public static final FlagPropertyId FEASIBLE = new FlagPropertyId ( "FEASIBLE" ) ; public static final StringPropertyId SIMPLIFIED_SCHEMA = new StringPropertyId ( "SIMPLIFIED_SCHEMA" ) ; public static Option getOption ( String uri ) { if ( ! uri . startsWith ( SchemaReader . BASE_URI ) ) return null ; uri = uri . substring ( SchemaReader . BASE_URI . length ( ) ) ; if ( uri . equals ( "feasible" ) ) return new FlagOption ( FEASIBLE ) ; if ( uri . equals ( "check-id-idref" ) ) return new FlagOption ( CHECK_ID_IDREF ) ; return null ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
