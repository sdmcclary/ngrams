<<<<<<< HEAD
public final class RPC1524 { private static final Map < Class < ? > , Class < ? > > PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS = new HashMap < Class < ? > , Class < ? > > ( ) ; private static Map < Class < ? > , Set < String > > serviceToImplementedInterfacesMap ; private static final HashMap < String , Class < ? > > TYPE_NAMES ; static { PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Boolean . class , Boolean . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Byte . class , Byte . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Character . class , Character . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Double . class , Double . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Float . class , Float . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Integer . class , Integer . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Long . class , Long . TYPE ) ; PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . put ( Short . class , Short . TYPE ) ; TYPE_NAMES = new HashMap < String , Class < ? > > ( ) ; TYPE_NAMES . put ( "Z" , boolean . class ) ; TYPE_NAMES . put ( "B" , byte . class ) ; TYPE_NAMES . put ( "C" , char . class ) ; TYPE_NAMES . put ( "D" , double . class ) ; TYPE_NAMES . put ( "F" , float . class ) ; TYPE_NAMES . put ( "I" , int . class ) ; TYPE_NAMES . put ( "J" , long . class ) ; TYPE_NAMES . put ( "S" , short . class ) ; serviceToImplementedInterfacesMap = new HashMap < Class < ? > , Set < String > > ( ) ; } public static RPCRequest decodeRequest ( String encodedRequest ) { return decodeRequest ( encodedRequest , null ) ; } public static RPCRequest decodeRequest ( String encodedRequest , Class < ? > type ) { return decodeRequest ( encodedRequest , type , null ) ; } public static RPCRequest decodeRequest ( String encodedRequest , Class < ? > type , SerializationPolicyProvider serializationPolicyProvider ) { if ( encodedRequest == null ) { throw new NullPointerException ( "encodedRequest cannot be null" ) ; } if ( encodedRequest . length ( ) == 0 ) { throw new IllegalArgumentException ( "encodedRequest cannot be empty" ) ; } ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; try { ServerSerializationStreamReader streamReader = new ServerSerializationStreamReader ( classLoader , serializationPolicyProvider ) ; streamReader . prepareToRead ( encodedRequest ) ; String serviceIntfName = streamReader . readString ( ) ; if ( type != null ) { if ( ! implementsInterface ( type , serviceIntfName ) ) { throw new IncompatibleRemoteServiceException ( "Blocked attempt to access interface '" + serviceIntfName + "', which is not implemented by '" + printTypeName ( type ) + "'; this is either misconfiguration or a hack attempt" ) ; } } SerializationPolicy serializationPolicy = streamReader . getSerializationPolicy ( ) ; Class < ? > serviceIntf ; try { serviceIntf = getClassFromSerializedName ( serviceIntfName , classLoader ) ; if ( ! RemoteService . class . isAssignableFrom ( serviceIntf ) ) { throw new IncompatibleRemoteServiceException ( "Blocked attempt to access interface '" + printTypeName ( serviceIntf ) + "', which doesn't extend RemoteService; this is either misconfiguration or a hack attempt" ) ; } } catch ( ClassNotFoundException e ) { throw new IncompatibleRemoteServiceException ( "Could not locate requested interface '" + serviceIntfName + "' in default classloader" , e ) ; } String serviceMethodName = streamReader . readString ( ) ; int paramCount = streamReader . readInt ( ) ; Class < ? > [ ] parameterTypes = new Class [ paramCount ] ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { String paramClassName = streamReader . readString ( ) ; try { parameterTypes [ i ] = getClassFromSerializedName ( paramClassName , classLoader ) ; } catch ( ClassNotFoundException e ) { throw new IncompatibleRemoteServiceException ( "Parameter " + i + " of is of an unknown type '" + paramClassName + "'" , e ) ; } } try { Method method = serviceIntf . getMethod ( serviceMethodName , parameterTypes ) ; Object [ ] parameterValues = new Object [ parameterTypes . length ] ; for ( int i = 0 ; i < parameterValues . length ; i ++ ) { parameterValues [ i ] = streamReader . deserializeValue ( parameterTypes [ i ] ) ; } return new RPCRequest ( method , parameterValues , serializationPolicy ) ; } catch ( NoSuchMethodException e ) { throw new IncompatibleRemoteServiceException ( formatMethodNotFoundErrorMessage ( serviceIntf , serviceMethodName , parameterTypes ) ) ; } } catch ( SerializationException ex ) { throw new IncompatibleRemoteServiceException ( ex . getMessage ( ) , ex ) ; } } public static String encodeResponseForFailure ( Method serviceMethod , Throwable cause ) throws SerializationException { return encodeResponseForFailure ( serviceMethod , cause , new ServerSerializationStreamWriter_1_5_3 ( getDefaultSerializationPolicy ( ) ) ) ; } public static String encodeResponseForFailure ( Method serviceMethod , Throwable cause , ServerSerializationStreamWriter_1_5_3 streamWriter ) throws SerializationException { if ( cause == null ) { throw new NullPointerException ( "cause cannot be null" ) ; } if ( streamWriter == null ) { throw new NullPointerException ( "streamWriter" ) ; } if ( serviceMethod != null && ! RPC1524 . isExpectedException ( serviceMethod , cause ) ) { throw new UnexpectedException ( "Service method '" + getSourceRepresentation ( serviceMethod ) + "' threw an unexpected exception: " + cause . toString ( ) , cause ) ; } return encodeResponse ( cause . getClass ( ) , cause , true , streamWriter ) ; } public static String encodeResponseForSuccess ( Method serviceMethod , Object object ) throws SerializationException { return encodeResponseForSuccess ( serviceMethod , object , new ServerSerializationStreamWriter_1_5_3 ( getDefaultSerializationPolicy ( ) ) ) ; } public static String encodeResponseForSuccess ( Method serviceMethod , Object object , ServerSerializationStreamWriter_1_5_3 streamWriter ) throws SerializationException { if ( serviceMethod == null ) { throw new NullPointerException ( "serviceMethod cannot be null" ) ; } if ( streamWriter == null ) { throw new NullPointerException ( "streamWriter" ) ; } Class < ? > methodReturnType = serviceMethod . getReturnType ( ) ; if ( methodReturnType != void . class && object != null ) { Class < ? > actualReturnType ; if ( methodReturnType . isPrimitive ( ) ) { actualReturnType = getPrimitiveClassFromWrapper ( object . getClass ( ) ) ; } else { actualReturnType = object . getClass ( ) ; } if ( actualReturnType == null || ! methodReturnType . isAssignableFrom ( actualReturnType ) ) { throw new IllegalArgumentException ( "Type '" + printTypeName ( object . getClass ( ) ) + "' does not match the return type in the method's signature: '" + getSourceRepresentation ( serviceMethod ) + "'" ) ; } } return encodeResponse ( methodReturnType , object , false , streamWriter ) ; } public static SerializationPolicy getDefaultSerializationPolicy ( ) { return LegacySerializationPolicy . getInstance ( ) ; } public static String invokeAndEncodeResponse ( Object target , Method serviceMethod , Object [ ] args ) throws SerializationException { return invokeAndEncodeResponse ( target , serviceMethod , args , getDefaultSerializationPolicy ( ) ) ; } public static String invokeAndEncodeResponse ( Object target , Method serviceMethod , Object [ ] args , SerializationPolicy serializationPolicy ) throws SerializationException { return invokeAndEncodeResponse ( target , serviceMethod , args , new ServerSerializationStreamWriter_1_5_3 ( serializationPolicy ) ) ; } public static String invokeAndEncodeResponse ( Object target , Method serviceMethod , Object [ ] args , ServerSerializationStreamWriter_1_5_3 streamWriter ) throws SerializationException { if ( serviceMethod == null ) { throw new NullPointerException ( "serviceMethod" ) ; } if ( streamWriter == null ) { throw new NullPointerException ( "streamWriter" ) ; } String responsePayload ; try { Object result = serviceMethod . invoke ( target , args ) ; responsePayload = encodeResponseForSuccess ( serviceMethod , result , streamWriter ) ; } catch ( IllegalAccessException e ) { SecurityException securityException = new SecurityException ( formatIllegalAccessErrorMessage ( target , serviceMethod ) ) ; securityException . initCause ( e ) ; throw securityException ; } catch ( IllegalArgumentException e ) { SecurityException securityException = new SecurityException ( formatIllegalArgumentErrorMessage ( target , serviceMethod , args ) ) ; securityException . initCause ( e ) ; throw securityException ; } catch ( InvocationTargetException e ) { Throwable cause = e . getCause ( ) ; responsePayload = encodeResponseForFailure ( serviceMethod , cause , streamWriter ) ; } return responsePayload ; } private static String encodeResponse ( Class < ? > responseClass , Object object , boolean wasThrown , ServerSerializationStreamWriter_1_5_3 stream ) throws SerializationException { stream . prepareToWrite ( ) ; if ( responseClass != void . class ) { stream . serializeValue ( object , responseClass ) ; } String bufferStr = ( wasThrown ? "//EX" : "//OK" ) + stream . toString ( ) ; return bufferStr ; } private static String formatIllegalAccessErrorMessage ( Object target , Method serviceMethod ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "Blocked attempt to access inaccessible method '" ) ; sb . append ( getSourceRepresentation ( serviceMethod ) ) ; sb . append ( "'" ) ; if ( target != null ) { sb . append ( " on target '" ) ; sb . append ( printTypeName ( target . getClass ( ) ) ) ; sb . append ( "'" ) ; } sb . append ( "; this is either misconfiguration or a hack attempt" ) ; return sb . toString ( ) ; } private static String formatIllegalArgumentErrorMessage ( Object target , Method serviceMethod , Object [ ] args ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "Blocked attempt to invoke method '" ) ; sb . append ( getSourceRepresentation ( serviceMethod ) ) ; sb . append ( "'" ) ; if ( target != null ) { sb . append ( " on target '" ) ; sb . append ( printTypeName ( target . getClass ( ) ) ) ; sb . append ( "'" ) ; } sb . append ( " with invalid arguments" ) ; if ( args != null && args . length > 0 ) { sb . append ( Arrays . asList ( args ) ) ; } return sb . toString ( ) ; } private static String formatMethodNotFoundErrorMessage ( Class < ? > serviceIntf , String serviceMethodName , Class < ? > [ ] parameterTypes ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "Could not locate requested method '" ) ; sb . append ( serviceMethodName ) ; sb . append ( "(" ) ; for ( int i = 0 ; i < parameterTypes . length ; ++ i ) { if ( i > 0 ) { sb . append ( ", " ) ; } sb . append ( printTypeName ( parameterTypes [ i ] ) ) ; } sb . append ( ")'" ) ; sb . append ( " in interface '" ) ; sb . append ( printTypeName ( serviceIntf ) ) ; sb . append ( "'" ) ; return sb . toString ( ) ; } private static Class < ? > getClassFromSerializedName ( String serializedName , ClassLoader classLoader ) throws ClassNotFoundException { Class < ? > value = TYPE_NAMES . get ( serializedName ) ; if ( value != null ) { return value ; } return Class . forName ( serializedName , false , classLoader ) ; } private static Class < ? > getPrimitiveClassFromWrapper ( Class < ? > wrapperClass ) { return PRIMITIVE_WRAPPER_CLASS_TO_PRIMITIVE_CLASS . get ( wrapperClass ) ; } private static String getSourceRepresentation ( Method method ) { return method . toString ( ) . replace ( '$' , '.' ) ; } private static boolean implementsInterface ( Class < ? > service , String intfName ) { synchronized ( serviceToImplementedInterfacesMap ) { Set < String > interfaceSet = serviceToImplementedInterfacesMap . get ( service ) ; if ( interfaceSet != null ) { if ( interfaceSet . contains ( intfName ) ) { return true ; } } else { interfaceSet = new HashSet < String > ( ) ; serviceToImplementedInterfacesMap . put ( service , interfaceSet ) ; } if ( ! service . isInterface ( ) ) { while ( ( service != null ) && ! RemoteServiceServlet . class . equals ( service ) ) { Class < ? > [ ] intfs = service . getInterfaces ( ) ; for ( Class < ? > intf : intfs ) { if ( implementsInterfaceRecursive ( intf , intfName ) ) { interfaceSet . add ( intfName ) ; return true ; } } service = service . getSuperclass ( ) ; } } else { if ( implementsInterfaceRecursive ( service , intfName ) ) { interfaceSet . add ( intfName ) ; return true ; } } return false ; } } private static boolean implementsInterfaceRecursive ( Class < ? > clazz , String intfName ) { assert ( clazz . isInterface ( ) ) ; if ( clazz . getName ( ) . equals ( intfName ) ) { return true ; } Class < ? > [ ] intfs = clazz . getInterfaces ( ) ; for ( Class < ? > intf : intfs ) { if ( implementsInterfaceRecursive ( intf , intfName ) ) { return true ; } } return false ; } private static boolean isExpectedException ( Method serviceIntfMethod , Throwable cause ) { assert ( serviceIntfMethod != null ) ; assert ( cause != null ) ; Class < ? > [ ] exceptionsThrown = serviceIntfMethod . getExceptionTypes ( ) ; if ( exceptionsThrown . length <= 0 ) { return false ; } Class < ? extends Throwable > causeType = cause . getClass ( ) ; for ( Class < ? > exceptionThrown : exceptionsThrown ) { assert ( exceptionThrown != null ) ; if ( exceptionThrown . isAssignableFrom ( causeType ) ) { return true ; } } return false ; } private static String printTypeName ( Class < ? > type ) { if ( type . equals ( Integer . TYPE ) ) { return "int" ; } else if ( type . equals ( Long . TYPE ) ) { return "long" ; } else if ( type . equals ( Short . TYPE ) ) { return "short" ; } else if ( type . equals ( Byte . TYPE ) ) { return "byte" ; } else if ( type . equals ( Character . TYPE ) ) { return "char" ; } else if ( type . equals ( Boolean . TYPE ) ) { return "boolean" ; } else if ( type . equals ( Float . TYPE ) ) { return "float" ; } else if ( type . equals ( Double . TYPE ) ) { return "double" ; } if ( type . isArray ( ) ) { Class < ? > componentType = type . getComponentType ( ) ; return printTypeName ( componentType ) + "[]" ; } return type . getName ( ) . replace ( '$' , '.' ) ; } private RPC1524 ( ) { } } 
=======
class EmptyPattern extends Pattern { EmptyPattern ( ) { super ( true , EMPTY_CONTENT_TYPE , EMPTY_HASH_CODE ) ; } boolean samePattern ( Pattern other ) { return other instanceof EmptyPattern ; } < T > T apply ( PatternFunction < T > f ) { return f . caseEmpty ( this ) ; } void checkRestrictions ( int context , DuplicateAttributeDetector dad , Alphabet alpha ) throws RestrictionViolationException { switch ( context ) { case DATA_EXCEPT_CONTEXT : throw new RestrictionViolationException ( "data_except_contains_empty" ) ; case START_CONTEXT : throw new RestrictionViolationException ( "start_contains_empty" ) ; } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
