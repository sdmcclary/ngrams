<<<<<<< HEAD
public class EucalyptusWebInterface implements EntryPoint { private static final AppMessages MSG = ( AppMessages ) GWT . create ( AppMessages . class ) ; private static String cookie_name = "eucalyptus-session-id" ; private static int minPasswordLength = 5 ; private static Boolean server_ready = new Boolean ( false ) ; private static String signup_greeting ; private static String cloud_name ; private static String certificate_download_text ; private static String rest_credentials_text ; private static String user_account_text ; private static String admin_email_change_text ; private static String admin_walrus_setup_text ; private static boolean request_telephone ; private static boolean request_project_leader ; private static boolean request_affiliation ; private static boolean request_project_description ; private static boolean show_cloud_registration ; private static String cloud_registration_text ; private static Image logo = null ; private static Image textless_logo = null ; private static String rightscale_base_url = null ; private static String rightscaleUrl = null ; private static HashMap props ; private static HashMap urlParams ; private static String sessionId ; private static String currentAction ; private static UserInfoWeb loggedInUser ; private static CloudInfoWeb cloudInfo ; private static TabBar allTabs ; private static int currentTabIndex = 0 ; private static int credsTabIndex ; private static int imgTabIndex ; private static int usageTabIndex ; private static int usrTabIndex ; private static int confTabIndex ; private static int downTabIndex ; private static boolean sortUsersLastFirst = true ; private static boolean previousSkipConfirmation = false ; private Label label_box = new Label ( ) ; private CheckBox check_box = new CheckBox ( "" , false ) ; private Label remember_label = new Label ( MSG . rememberMe ( ) ) ; private static Label statusMessage = new Label ( ) ; public void onModuleLoad ( ) { sessionId = Cookies . getCookie ( cookie_name ) ; urlParams = GWTUtils . parseParamString ( GWTUtils . getParamString ( ) ) ; String page = ( String ) urlParams . get ( "page" ) ; if ( page != null ) { currentTabIndex = Integer . parseInt ( page ) ; } currentAction = ( String ) urlParams . get ( "action" ) ; displayStatusPage ( "Loading data from server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . getProperties ( new AsyncCallback ( ) { public void onSuccess ( Object result ) { props = ( HashMap ) result ; try { load_props ( ) ; if ( currentAction . equals ( "confirm" ) || currentAction . equals ( "recover" ) ) { executeAction ( currentAction ) ; } else { if ( sessionId == null ) { displayLoginPage ( ) ; } else { check_box . setChecked ( true ) ; attemptLogin ( ) ; } } } catch ( Exception e ) { displayErrorPageFinal ( "Internal error (1): " + e . getMessage ( ) ) ; } } public void onFailure ( Throwable caught ) { displayErrorPageFinal ( "Internal error (2): " + caught . getMessage ( ) ) ; } } ) ; } void load_props ( ) throws Exception { if ( props == null ) { throw new Exception ( "Invalid server configuration" ) ; } cloud_name = ( String ) props . get ( "cloud-name" ) ; signup_greeting = ( String ) props . get ( "signup-greeting" ) ; certificate_download_text = ( String ) props . get ( "certificate-download-text" ) ; rest_credentials_text = ( String ) props . get ( "rest-credentials-text" ) ; user_account_text = ( String ) props . get ( "user-account-text" ) ; admin_email_change_text = ( String ) props . get ( "admin-email-change-text" ) ; admin_walrus_setup_text = ( String ) props . get ( "admin-walrus-setup-text" ) ; server_ready = ( Boolean ) props . get ( "ready" ) ; if ( server_ready == null ) { throw new Exception ( "Internal server error (cannot determine server readiness)" ) ; } if ( cloud_name == null ) { throw new Exception ( "Server configuration is missing 'cloud-name' value" ) ; } if ( signup_greeting == null ) { throw new Exception ( "Server configuration is missing 'signup-greeting' value" ) ; } if ( certificate_download_text == null ) { throw new Exception ( "Server configuration is missing 'certificate-dowload-text' value" ) ; } if ( rest_credentials_text == null ) { throw new Exception ( "Server configuration is missing 'rest-credentials-text' value" ) ; } if ( user_account_text == null ) { throw new Exception ( "Server configuration is missing 'user-account-text' value" ) ; } if ( admin_email_change_text == null ) { throw new Exception ( "Server configuration is missing 'admin-email-change-text' value" ) ; } if ( admin_walrus_setup_text == null ) { throw new Exception ( "Server configuration is missing 'admin-walrus-setup-text' value" ) ; } request_telephone = str2bool ( ( String ) props . get ( "request-telephone" ) ) ; request_project_leader = str2bool ( ( String ) props . get ( "request-project-leader" ) ) ; request_affiliation = str2bool ( ( String ) props . get ( "request-affiliation" ) ) ; request_project_description = str2bool ( ( String ) props . get ( "request-project-description" ) ) ; String file = ( String ) props . get ( "logo-file" ) ; if ( file != null ) { logo = new Image ( file ) ; } file = ( String ) props . get ( "logo-without-text" ) ; if ( file != null ) { textless_logo = new Image ( file ) ; } show_cloud_registration = str2bool ( ( String ) props . get ( "show-cloud-registration" ) ) ; cloud_registration_text = ( String ) props . get ( "cloud-registration-text" ) ; rightscale_base_url = ( String ) props . get ( "rightscale-registration-base-url" ) ; if ( cloud_registration_text == null || rightscale_base_url == null ) { show_cloud_registration = false ; } } private boolean str2bool ( String s ) { if ( s == null ) { return true ; } if ( s . equalsIgnoreCase ( "no" ) || s . equalsIgnoreCase ( "n" ) || s . equalsIgnoreCase ( "0" ) ) { return false ; } else { return true ; } } public void displayLoginPage ( ) { if ( currentAction == null ) { displayLoginPage ( MSG . pleaseSignIn ( ) + ":" ) ; } else { if ( currentAction . equals ( "approve" ) || currentAction . equals ( "reject" ) || currentAction . equals ( "disable" ) || currentAction . equals ( "delete" ) ) { displayLoginPage ( "Please, log into Eucalyptus to " + currentAction + " the user" ) ; } else if ( currentAction . equals ( "delete_image" ) ) { displayLoginPage ( "Please, log into Eucalyptus to delete the image" ) ; } else if ( currentAction . equals ( "confirm" ) ) { displayLoginPage ( "Please, log into Eucalyptus to confirm your acccount" ) ; } else { displayLoginPage ( MSG . pleaseSignIn ( ) + ":" ) ; } label_box . setStyleName ( "euca-greeting-warning" ) ; } } public void displayLoginPage ( String greeting ) { History . newItem ( "login" ) ; label_box . setText ( greeting ) ; label_box . setStyleName ( "euca-greeting-normal" ) ; final TextBox login_box = new TextBox ( ) ; final PasswordTextBox pass_box = new PasswordTextBox ( ) ; ClickListener LoginButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { if ( login_box . getText ( ) . length ( ) < 1 ) { displayLoginErrorPage ( "Username is empty!" ) ; return ; } if ( pass_box . getText ( ) . length ( ) < 1 ) { displayLoginErrorPage ( "Password is empty!" ) ; return ; } label_box . setText ( "Contacting the server..." ) ; label_box . setStyleName ( "euca-greeting-pending" ) ; EucalyptusWebBackend . App . getInstance ( ) . getNewSessionID ( login_box . getText ( ) , GWTUtils . md5 ( pass_box . getText ( ) ) , new AsyncCallback ( ) { public void onSuccess ( Object result ) { sessionId = ( String ) result ; long expiresMs = System . currentTimeMillis ( ) + ( 7 * 24 * 60 * 60 * 1000 ) ; Date expires = new Date ( expiresMs ) ; if ( check_box . isChecked ( ) ) { Cookies . setCookie ( cookie_name , sessionId , expires ) ; } else { Cookies . setCookie ( cookie_name , sessionId , new Date ( 0 ) ) ; } attemptLogin ( ) ; } public void onFailure ( Throwable caught ) { displayLoginErrorPage ( ( String ) caught . getMessage ( ) ) ; } } ) ; } } ; ClickListener RecoverButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { displayPasswordRecoveryPage ( ) ; } } ; Button submit_button = new Button ( MSG . signInButton ( ) , LoginButtonListener ) ; Hyperlink signup_button = new Hyperlink ( MSG . applyButton ( ) , "apply" ) ; signup_button . addClickListener ( AddUserButtonListener ) ; Hyperlink recover_button = new Hyperlink ( MSG . recoverButton ( ) , "recover" ) ; recover_button . addClickListener ( RecoverButtonListener ) ; remember_label . setStyleName ( "euca-remember-text" ) ; EucalyptusKeyboardListener sl = new EucalyptusKeyboardListener ( submit_button ) ; submit_button . addKeyboardListener ( sl ) ; login_box . addKeyboardListener ( sl ) ; pass_box . addKeyboardListener ( sl ) ; Grid g = new Grid ( 4 , 2 ) ; g . setCellSpacing ( 4 ) ; g . setWidget ( 0 , 0 , new Label ( MSG . usernameField ( ) + ":" ) ) ; g . getCellFormatter ( ) . setHorizontalAlignment ( 0 , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; g . setWidget ( 1 , 0 , new Label ( MSG . passwordField ( ) + ":" ) ) ; g . getCellFormatter ( ) . setHorizontalAlignment ( 1 , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; g . setWidget ( 0 , 1 , login_box ) ; g . setWidget ( 1 , 1 , pass_box ) ; g . setWidget ( 2 , 0 , check_box ) ; g . getCellFormatter ( ) . setHorizontalAlignment ( 2 , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; g . setWidget ( 2 , 1 , remember_label ) ; g . setWidget ( 3 , 1 , submit_button ) ; VerticalPanel panel = new VerticalPanel ( ) ; panel . add ( g ) ; panel . setStyleName ( "euca-login-panel" ) ; panel . setCellHorizontalAlignment ( g , HasHorizontalAlignment . ALIGN_CENTER ) ; panel . setCellVerticalAlignment ( g , HasVerticalAlignment . ALIGN_MIDDLE ) ; HorizontalPanel hpanel = new HorizontalPanel ( ) ; hpanel . setSpacing ( 2 ) ; hpanel . add ( signup_button ) ; hpanel . add ( new HTML ( "&nbsp;" + MSG . forAccount ( ) + "&nbsp;&nbsp;|&nbsp;&nbsp;" ) ) ; hpanel . add ( recover_button ) ; hpanel . add ( new HTML ( "&nbsp;" + MSG . thePassword ( ) ) ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( panel ) ; if ( server_ready . booleanValue ( ) ) { vpanel . add ( hpanel ) ; } VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; } public void displayLoginErrorPage ( String message ) { if ( message . equals ( "Earlier session not found" ) || message . equals ( "Earlier session expired" ) ) { displayLoginPage ( ) ; } else { displayLoginPage ( "Error: " + message ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } } public void displayUserRecordPage ( Panel parent , UserInfoWeb userToEdit ) { final String oldPassword ; final boolean admin ; final boolean newUser ; final boolean showSkipConfirmed ; boolean isAdminChecked = false ; boolean skipConfirmationChecked = previousSkipConfirmation ; if ( loggedInUser != null && loggedInUser . isAdministrator ( ) ) { admin = true ; } else { admin = false ; } if ( userToEdit == null ) { newUser = true ; showSkipConfirmed = true ; userToEdit = new UserInfoWeb ( ) ; oldPassword = "" ; if ( admin ) { label_box . setText ( "Please, fill out the form to add a user" ) ; } else { label_box . setText ( signup_greeting ) ; } } else { newUser = false ; oldPassword = userToEdit . getBCryptedPassword ( ) ; isAdminChecked = userToEdit . isAdministrator ( ) ; showSkipConfirmed = ! userToEdit . isConfirmed ( ) ; skipConfirmationChecked = userToEdit . isConfirmed ( ) ; String status ; if ( ! userToEdit . isApproved ( ) ) { status = "unapproved" ; } else if ( ! userToEdit . isEnabled ( ) ) { status = "disabled" ; } else if ( ! userToEdit . isConfirmed ( ) ) { status = "unconfirmed" ; } else { status = "active" ; } if ( userToEdit . isAdministrator ( ) ) { status += " & admin" ; } label_box . setText ( "Editing information for user '" + userToEdit . getUserName ( ) + "' (" + status + ")" ) ; } label_box . setStyleName ( "euca-greeting-normal" ) ; int rowsMandatory = 5 ; if ( admin ) { rowsMandatory ++ ; if ( showSkipConfirmed ) { rowsMandatory ++ ; } } final Grid g1 = new Grid ( rowsMandatory , 3 ) ; g1 . getColumnFormatter ( ) . setWidth ( 0 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 1 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 2 , "180" ) ; int i = 0 ; final Label label_mandatory = new Label ( "Mandatory fields:" ) ; label_mandatory . setStyleName ( "euca-section-header" ) ; final int userName_row = i ; g1 . setWidget ( i , 0 , new Label ( "Username:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final TextBox userName_box = new TextBox ( ) ; userName_box . setText ( userToEdit . getUserName ( ) ) ; userName_box . setWidth ( "180" ) ; if ( ! newUser ) { userName_box . setEnabled ( false ) ; } g1 . setWidget ( i ++ , 1 , userName_box ) ; final CheckBox userIsAdmin = new CheckBox ( "Administrator" ) ; userIsAdmin . setChecked ( isAdminChecked ) ; userIsAdmin . setStyleName ( "euca-remember-text" ) ; if ( admin ) { g1 . setWidget ( i ++ , 1 , userIsAdmin ) ; } final int password1_row = i ; g1 . setWidget ( i , 0 , new Label ( "Password:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox cleartextPassword1_box = new PasswordTextBox ( ) ; cleartextPassword1_box . setText ( userToEdit . getBCryptedPassword ( ) ) ; cleartextPassword1_box . setWidth ( "180" ) ; if ( ( ! admin && ! newUser ) || userToEdit . isAdministrator ( ) . booleanValue ( ) ) { cleartextPassword1_box . setEnabled ( false ) ; } g1 . setWidget ( i ++ , 1 , cleartextPassword1_box ) ; final int password2_row = i ; g1 . setWidget ( i , 0 , new Label ( "Password, again:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox cleartextPassword2_box = new PasswordTextBox ( ) ; cleartextPassword2_box . setText ( userToEdit . getBCryptedPassword ( ) ) ; cleartextPassword2_box . setWidth ( "180" ) ; if ( ( ! admin && ! newUser ) || userToEdit . isAdministrator ( ) . booleanValue ( ) ) { cleartextPassword2_box . setEnabled ( false ) ; } g1 . setWidget ( i ++ , 1 , cleartextPassword2_box ) ; final int realName_row = i ; g1 . setWidget ( i , 0 , new Label ( "Full Name:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final TextBox realName_box = new TextBox ( ) ; realName_box . setText ( userToEdit . getRealName ( ) ) ; realName_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , realName_box ) ; final int emailAddress_row = i ; g1 . setWidget ( i , 0 , new Label ( "Email address:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final TextBox emailAddress_box = new TextBox ( ) ; emailAddress_box . setText ( userToEdit . getEmail ( ) ) ; emailAddress_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , emailAddress_box ) ; final CheckBox skipConfirmation = new CheckBox ( "Skip email confirmation" ) ; skipConfirmation . setChecked ( skipConfirmationChecked ) ; skipConfirmation . setStyleName ( "euca-remember-text" ) ; if ( admin && showSkipConfirmed ) { g1 . setWidget ( i ++ , 1 , skipConfirmation ) ; } final Grid g2 = new Grid ( ) ; final Label label_optional = new Label ( "Optional fields:" ) ; label_optional . setStyleName ( "euca-section-header" ) ; final TextBox telephoneNumber_box = new TextBox ( ) ; final TextBox projectPIName_box = new TextBox ( ) ; final TextBox affiliation_box = new TextBox ( ) ; final TextArea projectDescription_box = new TextArea ( ) ; int extra_fields = 0 ; if ( request_telephone ) { extra_fields ++ ; } if ( request_project_leader ) { extra_fields ++ ; } if ( request_affiliation ) { extra_fields ++ ; } if ( request_project_description ) { extra_fields ++ ; } if ( extra_fields > 0 ) { g2 . resize ( extra_fields , 2 ) ; g2 . getColumnFormatter ( ) . setWidth ( 0 , "180" ) ; g2 . getColumnFormatter ( ) . setWidth ( 1 , "360" ) ; i = 0 ; if ( request_telephone ) { g2 . setWidget ( i , 0 , new Label ( "Telephone Number:" ) ) ; g2 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; telephoneNumber_box . setWidth ( "180" ) ; telephoneNumber_box . setText ( userToEdit . getTelephoneNumber ( ) ) ; g2 . setWidget ( i ++ , 1 , telephoneNumber_box ) ; } if ( request_project_leader ) { g2 . setWidget ( i , 0 , new Label ( "Project Leader:" ) ) ; g2 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; projectPIName_box . setText ( userToEdit . getProjectPIName ( ) ) ; projectPIName_box . setWidth ( "180" ) ; g2 . setWidget ( i ++ , 1 , projectPIName_box ) ; } if ( request_affiliation ) { g2 . setWidget ( i , 0 , new Label ( "Affiliation:" ) ) ; g2 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; affiliation_box . setText ( userToEdit . getAffiliation ( ) ) ; affiliation_box . setWidth ( "360" ) ; g2 . setWidget ( i ++ , 1 , affiliation_box ) ; } if ( request_project_description ) { g2 . setWidget ( i , 0 , new Label ( "Project Description:" ) ) ; g2 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; projectDescription_box . setText ( userToEdit . getProjectDescription ( ) ) ; projectDescription_box . setWidth ( "360" ) ; projectDescription_box . setHeight ( "50" ) ; g2 . setWidget ( i ++ , 1 , projectDescription_box ) ; } } ClickListener SignupButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { boolean formOk = true ; for ( int j = 0 ; j < 4 ; j ++ ) { g1 . clearCell ( j , 2 ) ; } if ( userName_box . getText ( ) . length ( ) < 1 ) { Label l = new Label ( "Username is empty!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( userName_row , 2 , l ) ; formOk = false ; } else { if ( cleartextPassword1_box . getText ( ) . toLowerCase ( ) . matches ( ".*" + userName_box . getText ( ) . toLowerCase ( ) + ".*" ) ) { Label l = new Label ( "Password may not contain the username!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password1_row , 2 , l ) ; formOk = false ; } } if ( userName_box . getText ( ) . matches ( ".*[^\\w\\-\\.@]+.*" ) ) { Label l = new Label ( "Invalid characters in the username!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( userName_row , 2 , l ) ; formOk = false ; } if ( userName_box . getText ( ) . length ( ) > 30 ) { Label l = new Label ( "Username is too long, sorry!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( userName_row , 2 , l ) ; formOk = false ; } if ( cleartextPassword1_box . getText ( ) . length ( ) < minPasswordLength ) { Label l = new Label ( "Password must be at least " + minPasswordLength + " characters long!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password1_row , 2 , l ) ; formOk = false ; } if ( ! cleartextPassword1_box . getText ( ) . equals ( cleartextPassword2_box . getText ( ) ) ) { Label l = new Label ( "Passwords do not match!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password2_row , 2 , l ) ; formOk = false ; } if ( realName_box . getText ( ) . toLowerCase ( ) . matches ( ".*" + cleartextPassword1_box . getText ( ) . toLowerCase ( ) + ".*" ) ) { Label l = new Label ( "Password may not contain parts of your name!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password1_row , 2 , l ) ; formOk = false ; } if ( realName_box . getText ( ) . length ( ) < 1 ) { Label l = new Label ( "Name is empty!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( realName_row , 2 , l ) ; formOk = false ; } if ( emailAddress_box . getText ( ) . length ( ) < 1 ) { Label l = new Label ( "Email address is empty!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( emailAddress_row , 2 , l ) ; formOk = false ; } if ( formOk ) { label_box . setText ( "Checking with the server..." ) ; label_box . setStyleName ( "euca-greeting-pending" ) ; String enteredPassword = cleartextPassword1_box . getText ( ) ; String encryptedPassword = GWTUtils . md5 ( enteredPassword ) ; if ( enteredPassword . equals ( oldPassword ) ) { encryptedPassword = enteredPassword ; } final UserInfoWeb userToSave = new UserInfoWeb ( userName_box . getText ( ) , realName_box . getText ( ) , emailAddress_box . getText ( ) , encryptedPassword ) ; if ( admin ) { userToSave . setIsAdministrator ( userIsAdmin . isChecked ( ) ) ; if ( showSkipConfirmed ) { previousSkipConfirmation = skipConfirmation . isChecked ( ) ; userToSave . setIsConfirmed ( previousSkipConfirmation ) ; } } if ( telephoneNumber_box . getText ( ) . length ( ) > 0 ) { userToSave . setTelephoneNumber ( telephoneNumber_box . getText ( ) ) ; } if ( affiliation_box . getText ( ) . length ( ) > 0 ) { userToSave . setAffiliation ( affiliation_box . getText ( ) ) ; } if ( projectDescription_box . getText ( ) . length ( ) > 0 ) { userToSave . setProjectDescription ( projectDescription_box . getText ( ) ) ; } if ( projectPIName_box . getText ( ) . length ( ) > 0 ) { userToSave . setProjectPIName ( projectPIName_box . getText ( ) ) ; } if ( newUser ) { EucalyptusWebBackend . App . getInstance ( ) . addUserRecord ( sessionId , userToSave , new AsyncCallback ( ) { public void onSuccess ( Object result ) { displayDialog ( "Thank you!" , ( String ) result ) ; } public void onFailure ( Throwable caught ) { String m = caught . getMessage ( ) ; if ( m . equals ( "User already exists" ) ) { g1 . setWidget ( userName_row , 2 , new Label ( "Username is taken!" ) ) ; label_box . setText ( "Please, fix the error and resubmit:" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } else { displayErrorPage ( m ) ; } } } ) ; } else { EucalyptusWebBackend . App . getInstance ( ) . updateUserRecord ( sessionId , userToSave , new AsyncCallback ( ) { public void onSuccess ( Object result ) { if ( loggedInUser . getUserName ( ) . equals ( userToSave . getUserName ( ) ) ) { loggedInUser . setRealName ( userToSave . getRealName ( ) ) ; loggedInUser . setEmail ( userToSave . getEmail ( ) ) ; loggedInUser . setBCryptedPassword ( userToSave . getBCryptedPassword ( ) ) ; loggedInUser . setTelephoneNumber ( userToSave . getTelephoneNumber ( ) ) ; loggedInUser . setAffiliation ( userToSave . getAffiliation ( ) ) ; loggedInUser . setProjectDescription ( userToSave . getProjectDescription ( ) ) ; loggedInUser . setProjectPIName ( userToSave . getProjectPIName ( ) ) ; displayDialog ( "" , ( String ) result ) ; } else { displayBarAndTabs ( "" ) ; statusMessage . setText ( ( String ) result ) ; statusMessage . setStyleName ( "euca-small-text" ) ; } } public void onFailure ( Throwable caught ) { String m = caught . getMessage ( ) ; displayErrorPage ( m ) ; } } ) ; } } else { label_box . setText ( "Please, fix the errors and resubmit:" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } } } ; Button submit_button ; if ( newUser ) { if ( admin ) { submit_button = new Button ( "Add user" , SignupButtonListener ) ; } else { submit_button = new Button ( "Sign up" , SignupButtonListener ) ; } } else { submit_button = new Button ( "Update Record" , SignupButtonListener ) ; } Button cancel_button = new Button ( "Cancel" , DefaultPageButtonListener ) ; VerticalPanel mpanel = new VerticalPanel ( ) ; mpanel . add ( label_mandatory ) ; mpanel . add ( g1 ) ; VerticalPanel opanel = new VerticalPanel ( ) ; if ( extra_fields > 0 ) { opanel . add ( label_optional ) ; opanel . add ( g2 ) ; } HorizontalPanel bpanel = new HorizontalPanel ( ) ; bpanel . add ( submit_button ) ; bpanel . add ( new HTML ( "&nbsp;&nbsp;or&nbsp;&nbsp;" ) ) ; bpanel . add ( cancel_button ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( mpanel ) ; vpanel . add ( opanel ) ; vpanel . add ( bpanel ) ; VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; parent . clear ( ) ; parent . add ( wrapper ) ; } public void displayPasswordRecoveryPage ( ) { label_box . setText ( "Please, choose the new password" ) ; label_box . setStyleName ( "euca-greeting-normal" ) ; final Grid g1 = new Grid ( 3 , 3 ) ; g1 . getColumnFormatter ( ) . setWidth ( 0 , "230" ) ; g1 . getColumnFormatter ( ) . setWidth ( 1 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 2 , "180" ) ; int i = 0 ; final int usernameOrEmail_row = i ; g1 . setWidget ( i , 0 , new Label ( "Username OR email address:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final TextBox usernameOrEmail_box = new TextBox ( ) ; usernameOrEmail_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , usernameOrEmail_box ) ; final int password1_row = i ; g1 . setWidget ( i , 0 , new Label ( "New password:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox cleartextPassword1_box = new PasswordTextBox ( ) ; cleartextPassword1_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , cleartextPassword1_box ) ; final int password2_row = i ; g1 . setWidget ( i , 0 , new Label ( "The password, again:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox cleartextPassword2_box = new PasswordTextBox ( ) ; cleartextPassword2_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , cleartextPassword2_box ) ; ClickListener RecoverButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { boolean formOk = true ; for ( int j = 0 ; j < 3 ; j ++ ) { g1 . clearCell ( j , 2 ) ; } if ( usernameOrEmail_box . getText ( ) . length ( ) < 1 ) { Label l = new Label ( "Username is empty!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( usernameOrEmail_row , 2 , l ) ; formOk = false ; } if ( usernameOrEmail_box . getText ( ) . matches ( ".*[ \t]+.*" ) ) { Label l = new Label ( "Username cannot have spaces, sorry!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( usernameOrEmail_row , 2 , l ) ; formOk = false ; } if ( cleartextPassword1_box . getText ( ) . length ( ) < minPasswordLength ) { Label l = new Label ( "Password must be at least " + minPasswordLength + " characters long!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password1_row , 2 , l ) ; formOk = false ; } if ( ! cleartextPassword1_box . getText ( ) . equals ( cleartextPassword2_box . getText ( ) ) ) { Label l = new Label ( "Passwords do not match!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password2_row , 2 , l ) ; formOk = false ; } if ( cleartextPassword1_box . getText ( ) . toLowerCase ( ) . matches ( ".*" + usernameOrEmail_box . getText ( ) . toLowerCase ( ) + ".*" ) ) { Label l = new Label ( "Password may not contain the username!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( password1_row , 2 , l ) ; formOk = false ; } if ( formOk ) { label_box . setText ( "Checking with the server..." ) ; label_box . setStyleName ( "euca-greeting-pending" ) ; UserInfoWeb user = new UserInfoWeb ( usernameOrEmail_box . getText ( ) , "" , usernameOrEmail_box . getText ( ) , GWTUtils . md5 ( cleartextPassword1_box . getText ( ) ) ) ; EucalyptusWebBackend . App . getInstance ( ) . recoverPassword ( user , new AsyncCallback ( ) { public void onSuccess ( Object result ) { displayDialog ( "Thank you!" , ( String ) result ) ; } public void onFailure ( Throwable caught ) { String m = caught . getMessage ( ) ; displayErrorPage ( m ) ; } } ) ; } else { label_box . setText ( "Please, fix the errors and resubmit:" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } } } ; Button submit_button = new Button ( "Recover Password" , RecoverButtonListener ) ; Button cancel_button = new Button ( "Cancel" , DefaultPageButtonListener ) ; VerticalPanel mpanel = new VerticalPanel ( ) ; mpanel . add ( g1 ) ; HorizontalPanel bpanel = new HorizontalPanel ( ) ; bpanel . add ( submit_button ) ; bpanel . add ( new HTML ( "&nbsp;&nbsp;or&nbsp;&nbsp;" ) ) ; bpanel . add ( cancel_button ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( mpanel ) ; vpanel . add ( bpanel ) ; VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; } private Button displayDialog ( String greeting , String message ) { return displayDialog ( greeting , message , null ) ; } private Button displayDialog ( String greeting , String message , Button firstButton ) { if ( message == null || message . equalsIgnoreCase ( "" ) ) { message = "Server is not accessible!" ; } label_box . setText ( greeting ) ; label_box . setStyleName ( "euca-greeting-normal" ) ; Label m = new Label ( message ) ; m . setWidth ( "300" ) ; VerticalPanel panel = new VerticalPanel ( ) ; panel . add ( m ) ; panel . setStyleName ( "euca-login-panel" ) ; panel . setCellHorizontalAlignment ( m , HasHorizontalAlignment . ALIGN_CENTER ) ; panel . setCellVerticalAlignment ( m , HasVerticalAlignment . ALIGN_MIDDLE ) ; Button ok_button = new Button ( "Ok" , DefaultPageButtonListener ) ; HorizontalPanel hpanel = new HorizontalPanel ( ) ; hpanel . setSpacing ( 10 ) ; if ( firstButton != null ) { hpanel . add ( firstButton ) ; } hpanel . add ( ok_button ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( panel ) ; vpanel . add ( hpanel ) ; VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; return ok_button ; } public void attemptLogin ( ) { displayStatusPage ( "Logging into the server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . getUserRecord ( sessionId , null , new AsyncCallback ( ) { public void onSuccess ( Object result ) { loggedInUser = ( UserInfoWeb ) ( ( List ) result ) . get ( 0 ) ; if ( currentAction == null ) { displayDefaultPage ( "" ) ; } else { executeAction ( currentAction ) ; } } public void onFailure ( Throwable caught ) { if ( caught . getMessage ( ) . equals ( "Password expired" ) ) { displayPasswordChangePage ( true ) ; } else { displayLoginErrorPage ( caught . getMessage ( ) ) ; } } } ) ; } public void attemptAction ( String action , String param ) { displayStatusPage ( "Contacting the server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . performAction ( sessionId , action , param , new AsyncCallback ( ) { public void onSuccess ( Object result ) { displayMessagePage ( ( String ) result ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; } public void attemptActionNoReload ( String action , String param , final VerticalPanel parent ) { statusMessage . setText ( "Contacting the server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . performAction ( sessionId , action , param , new AsyncCallback ( ) { public void onSuccess ( Object result ) { displayBarAndTabs ( "" ) ; statusMessage . setText ( ( String ) result ) ; statusMessage . setStyleName ( "euca-small-text" ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; } public void executeAction ( String action ) { if ( action . equals ( "approve" ) || action . equals ( "reject" ) || action . equals ( "delete" ) || action . equals ( "disable" ) || action . equals ( "enable" ) ) { String userName = ( String ) urlParams . get ( "user" ) ; if ( ! loggedInUser . isAdministrator ( ) . booleanValue ( ) ) { displayErrorPage ( "Administrative privileges required" ) ; } else if ( userName == null ) { displayErrorPage ( "Username not specified" ) ; } else { attemptAction ( action , userName ) ; } } else if ( action . equals ( "delete_image" ) || action . equals ( "disable_image" ) || action . equals ( "enable_image" ) ) { String imageId = ( String ) urlParams . get ( "id" ) ; if ( ! loggedInUser . isAdministrator ( ) . booleanValue ( ) ) { displayErrorPage ( "Administrative privileges required" ) ; } else if ( imageId == null ) { displayErrorPage ( "Image ID not specified" ) ; } else { attemptAction ( action , imageId ) ; } } else if ( action . equals ( "confirm" ) || action . equals ( "recover" ) ) { String confirmationCode = ( String ) urlParams . get ( "code" ) ; if ( confirmationCode == null ) { displayErrorPage ( "Confirmation code not specified" ) ; } else { attemptAction ( action , confirmationCode ) ; } } else { displayErrorPage ( "Action '" + action + "' not recognized" ) ; } } public void displayDefaultPage ( String message ) { displayStatusPage ( "Loading default page..." ) ; if ( currentAction != null ) { String extra = "" ; if ( currentTabIndex != 0 ) { extra = "?page=" + currentTabIndex ; } GWTUtils . redirect ( GWT . getModuleBaseURL ( ) + extra ) ; } if ( loggedInUser != null ) { if ( loggedInUser . isAdministrator ( ) . booleanValue ( ) ) { if ( loggedInUser . getEmail ( ) . equalsIgnoreCase ( "" ) ) { displayAdminEmailChangePage ( ) ; } else { displayBarAndTabs ( message ) ; } } else { displayBarAndTabs ( message ) ; } } else { displayLoginPage ( ) ; } } ClickListener AddUserButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { displayUserRecordPage ( RootPanel . get ( ) , null ) ; } } ; ClickListener DefaultPageButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { displayDefaultPage ( "" ) ; } } ; public void displayErrorPage ( String message ) { displayDialog ( "Error!" , message ) ; label_box . setStyleName ( "euca-greeting-error" ) ; } public void displayErrorPageFinal ( String message ) { Button ok_button = displayDialog ( "Error!" , message ) ; label_box . setStyleName ( "euca-greeting-error" ) ; ok_button . setVisible ( false ) ; } public void displayMessagePage ( String message ) { displayDialog ( "" , message ) ; label_box . setStyleName ( "euca-greeting-normal" ) ; } ClickListener LogoutButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { EucalyptusWebBackend . App . getInstance ( ) . logoutSession ( sessionId , new AsyncCallback ( ) { public void onSuccess ( Object result ) { displayLoginPage ( ) ; } public void onFailure ( Throwable caught ) { displayLoginPage ( ) ; } } ) ; sessionId = null ; loggedInUser = null ; Cookies . removeCookie ( cookie_name ) ; } } ; public void displayBarAndTabs ( String message ) { displayStatusPage ( "Drawing the tabs..." ) ; HorizontalPanel top_bar = new HorizontalPanel ( ) ; top_bar . setStyleName ( "euca-top-bar" ) ; top_bar . setSize ( "100%" , "20" ) ; HorizontalPanel name_panel = new HorizontalPanel ( ) ; name_panel . setSpacing ( 5 ) ; Label welcome = new Label ( cloud_name ) ; if ( textless_logo != null ) { name_panel . add ( textless_logo ) ; } name_panel . add ( welcome ) ; name_panel . setCellVerticalAlignment ( welcome , HorizontalPanel . ALIGN_MIDDLE ) ; top_bar . add ( name_panel ) ; top_bar . setCellHorizontalAlignment ( name_panel , HorizontalPanel . ALIGN_LEFT ) ; top_bar . setCellVerticalAlignment ( name_panel , HorizontalPanel . ALIGN_MIDDLE ) ; HorizontalPanel upanel = new HorizontalPanel ( ) ; Label user_name = new HTML ( "Logged in as <b>" + loggedInUser . getUserName ( ) + "</b>&nbsp;&nbsp;|&nbsp;&nbsp;" ) ; Hyperlink logout_button = new Hyperlink ( "Logout" , "logout" ) ; logout_button . addClickListener ( LogoutButtonListener ) ; upanel . add ( user_name ) ; upanel . add ( logout_button ) ; top_bar . add ( upanel ) ; top_bar . setCellHorizontalAlignment ( upanel , HorizontalPanel . ALIGN_RIGHT ) ; top_bar . setCellVerticalAlignment ( upanel , HorizontalPanel . ALIGN_MIDDLE ) ; final HorizontalPanel messageBox = new HorizontalPanel ( ) ; messageBox . setSize ( "100%" , "0" ) ; messageBox . setSpacing ( 3 ) ; messageBox . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_RIGHT ) ; messageBox . add ( statusMessage ) ; final VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . setSize ( "100%" , "80%" ) ; wrapper . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; wrapper . setVerticalAlignment ( HasVerticalAlignment . ALIGN_MIDDLE ) ; int nTabs = 0 ; allTabs = new TabBar ( ) ; allTabs . addTab ( "Credentials" ) ; credsTabIndex = nTabs ++ ; allTabs . addTab ( "Images" ) ; imgTabIndex = nTabs ++ ; allTabs . addTab ( "Usage" ) ; usageTabIndex = nTabs ++ ; if ( loggedInUser . isAdministrator ( ) . booleanValue ( ) ) { allTabs . addTab ( "Users" ) ; usrTabIndex = nTabs ++ ; allTabs . addTab ( "Configuration" ) ; confTabIndex = nTabs ++ ; allTabs . addTab ( "Extras" ) ; downTabIndex = nTabs ++ ; } if ( currentTabIndex > ( nTabs - 1 ) ) { currentTabIndex = 0 ; } allTabs . addTabListener ( new TabListener ( ) { public void onTabSelected ( SourcesTabEvents sender , int tabIndex ) { String error = "This tab is not implemented yet, sorry!" ; statusMessage . setText ( "" ) ; wrapper . clear ( ) ; currentTabIndex = tabIndex ; if ( tabIndex == credsTabIndex ) { displayCredentialsTab ( wrapper ) ; } else if ( tabIndex == imgTabIndex ) { displayImagesTab ( wrapper ) ; } else if ( tabIndex == usageTabIndex ) { displayUsageTab ( wrapper ) ; } else if ( tabIndex == usrTabIndex ) { displayUsersTab ( wrapper ) ; } else if ( tabIndex == confTabIndex ) { displayConfTab ( wrapper ) ; } else if ( tabIndex == downTabIndex ) { displayDownloadsTab ( wrapper ) ; } else { displayErrorPage ( "Invalid tab!" ) ; } } public boolean onBeforeTabSelected ( SourcesTabEvents sender , int tabIndex ) { return true ; } } ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( top_bar ) ; RootPanel . get ( ) . add ( allTabs ) ; RootPanel . get ( ) . add ( messageBox ) ; RootPanel . get ( ) . add ( wrapper ) ; allTabs . selectTab ( currentTabIndex ) ; } public void displayCredentialsTab ( final VerticalPanel parent ) { EucalyptusWebBackend . App . getInstance ( ) . getCloudInfo ( sessionId , false , new AsyncCallback ( ) { public void onSuccess ( Object result ) { cloudInfo = ( CloudInfoWeb ) result ; actuallyDisplayCredentialsTab ( parent ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; } private class RightscaleDialog extends DialogBox { private boolean cancelled ; public RightscaleDialog ( ) { cancelled = false ; setHTML ( "<img src=\"img/ajax-loader-FFCC33.gif\" align=\"middle\"> &nbsp; Checking the external IP address..." ) ; final Button okButton = new Button ( "OK" , new ClickListener ( ) { public void onClick ( Widget sender ) { RightscaleDialog . this . hide ( ) ; if ( rightscaleUrl != null ) { Window . open ( rightscaleUrl , "_blank" , "" ) ; } } } ) ; okButton . setEnabled ( false ) ; Button cancelButton = new Button ( "Cancel" , new ClickListener ( ) { public void onClick ( Widget sender ) { RightscaleDialog . this . hide ( ) ; cancelled = true ; } } ) ; HorizontalPanel buttonPanel = new HorizontalPanel ( ) ; buttonPanel . add ( okButton ) ; buttonPanel . add ( cancelButton ) ; setWidget ( buttonPanel ) ; EucalyptusWebBackend . App . getInstance ( ) . getCloudInfo ( sessionId , true , new AsyncCallback ( ) { public void onSuccess ( Object result ) { if ( cancelled ) { return ; } cloudInfo = ( CloudInfoWeb ) result ; String ex = cloudInfo . getExternalHostPort ( ) ; String in = cloudInfo . getInternalHostPort ( ) ; String text = "" ; String ip ; if ( ex == null ) { ip = in ; text = "<b>Warning:</b> Rightscale could not discover the external IP address of your cloud.  Hence, the pre-filled cloud URL <i>may</i> be incorrect.  Check your firewall settings.</p> " ; } else if ( ! ex . equals ( in ) ) { ip = ex ; text = "<b>Warning:</b> The external cloud IP discovered by Rightscale (" + ex + ") is different from the IP found by Eucalyptus (" + in + ").  Hence, the pre-filled cloud URL <i>may</i> be incorrect.  Check your firewall settings.</p> " ; } else { ip = ex ; } String callbackUrl = "http://" + ip + cloudInfo . getServicePath ( ) ; rightscaleUrl = rightscale_base_url + GWTUtils . escape ( callbackUrl ) + "&registration_version=1.0&retry=1&secret_token=" + GWTUtils . escape ( cloudInfo . getCloudId ( ) ) ; String pre = "<h3>Cloud registration</h3> You are about to open a new window to Rightscale's Web site, on which you will be able to complete registraton. </p> " ; setHTML ( pre + text ) ; okButton . setEnabled ( true ) ; center ( ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; } } public void actuallyDisplayCredentialsTab ( VerticalPanel parent ) { History . newItem ( "credentials" ) ; VerticalPanel ppanel = new VerticalPanel ( ) ; ppanel . setSpacing ( 5 ) ; ppanel . add ( new HTML ( "<h3>User account Information</h3>" ) ) ; ppanel . add ( new HTML ( "<b>Login:</b> " + loggedInUser . getUserName ( ) ) ) ; ppanel . add ( new HTML ( "<b>Name:</b> " + loggedInUser . getRealName ( ) ) ) ; ppanel . add ( new HTML ( "<b>Email:</b> " + loggedInUser . getEmail ( ) ) ) ; ppanel . add ( new HTML ( user_account_text ) ) ; ppanel . setStyleName ( "euca-text" ) ; Button passwordButton = new Button ( "Change Password" , new ClickListener ( ) { public void onClick ( Widget sender ) { displayPasswordChangePage ( false ) ; } } ) ; Button editButton = new Button ( "Edit Account Information" , new ClickListener ( ) { public void onClick ( Widget sender ) { displayUserRecordPage ( RootPanel . get ( ) , loggedInUser ) ; } } ) ; VerticalPanel ppanel2 = new VerticalPanel ( ) ; ppanel2 . setSpacing ( 5 ) ; ppanel2 . add ( editButton ) ; ppanel2 . add ( passwordButton ) ; VerticalPanel cpanel = new VerticalPanel ( ) ; cpanel . add ( new HTML ( certificate_download_text ) ) ; cpanel . setStyleName ( "euca-text" ) ; Button certButton = new Button ( "Download Certificate" , new ClickListener ( ) { public void onClick ( Widget sender ) { Window . open ( GWT . getModuleBaseURL ( ) + "getX509?user=" + loggedInUser . getUserName ( ) + "&keyValue=" + loggedInUser . getUserName ( ) + "&code=" + loggedInUser . getCertificateCode ( ) , "_self" , "" ) ; } } ) ; VerticalPanel rpanel = new VerticalPanel ( ) ; rpanel . setSpacing ( 5 ) ; rpanel . add ( new HTML ( rest_credentials_text ) ) ; Grid g0 = new Grid ( 2 , 2 ) ; g0 . setWidget ( 0 , 0 , new HTML ( "<b><font size=\"2\">Query ID:</font></b>" ) ) ; final HTML queryId = new HTML ( "<font color=#666666 size=\"1\">" + loggedInUser . getQueryId ( ) + "</font>" ) ; queryId . setVisible ( false ) ; g0 . setWidget ( 0 , 1 , queryId ) ; g0 . setWidget ( 1 , 0 , new HTML ( "<b><font size=\"2\">Secret key:</font></b>" ) ) ; final HTML secretKey = new HTML ( "<font color=#666666 size=\"1\">" + loggedInUser . getSecretKey ( ) + "</font>" ) ; secretKey . setVisible ( false ) ; g0 . setWidget ( 1 , 1 , secretKey ) ; rpanel . add ( g0 ) ; rpanel . setStyleName ( "euca-text" ) ; final Button secretButton = new Button ( "Show keys" ) ; secretButton . addClickListener ( new ClickListener ( ) { public void onClick ( Widget sender ) { if ( secretKey . isVisible ( ) ) { secretKey . setVisible ( false ) ; queryId . setVisible ( false ) ; secretButton . setText ( "Show keys" ) ; } else { secretKey . setVisible ( true ) ; queryId . setVisible ( true ) ; secretButton . setText ( "Hide keys" ) ; } } } ) ; int gridRows = 3 ; if ( loggedInUser . isAdministrator ( ) && show_cloud_registration ) { gridRows ++ ; } final Grid g = new Grid ( gridRows , 2 ) ; g . getColumnFormatter ( ) . setWidth ( 0 , "400" ) ; g . getColumnFormatter ( ) . setWidth ( 1 , "200" ) ; g . setCellSpacing ( 30 ) ; g . setWidget ( 0 , 0 , ppanel ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 0 , 0 , HasVerticalAlignment . ALIGN_TOP ) ; g . setWidget ( 0 , 1 , ppanel2 ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 0 , 1 , HasVerticalAlignment . ALIGN_TOP ) ; g . setWidget ( 1 , 0 , cpanel ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 1 , 0 , HasVerticalAlignment . ALIGN_TOP ) ; g . setWidget ( 1 , 1 , certButton ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 1 , 1 , HasVerticalAlignment . ALIGN_TOP ) ; g . setWidget ( 2 , 0 , rpanel ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 2 , 0 , HasVerticalAlignment . ALIGN_TOP ) ; g . setWidget ( 2 , 1 , secretButton ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 2 , 1 , HasVerticalAlignment . ALIGN_TOP ) ; if ( loggedInUser . isAdministrator ( ) && show_cloud_registration ) { VerticalPanel cloud_panel = new VerticalPanel ( ) ; cloud_panel . setSpacing ( 5 ) ; cloud_panel . add ( new HTML ( cloud_registration_text ) ) ; Grid g1 = new Grid ( 2 , 2 ) ; g1 . setWidget ( 0 , 0 , new HTML ( "<b><font size=\"2\">Cloud URL:</font></b>" ) ) ; final HTML cloudUrl = new HTML ( "<font color=#666666 size=\"1\">http://" + cloudInfo . getInternalHostPort ( ) + cloudInfo . getServicePath ( ) + "</font>" ) ; g1 . setWidget ( 0 , 1 , cloudUrl ) ; g1 . setWidget ( 1 , 0 , new HTML ( "<b><font size=\"2\">Cloud ID:</font></b>" ) ) ; final HTML cloudId = new HTML ( "<font color=#666666 size=\"1\">" + cloudInfo . getCloudId ( ) + "</font>" ) ; g1 . setWidget ( 1 , 1 , cloudId ) ; cloud_panel . add ( g1 ) ; cloud_panel . setStyleName ( "euca-text" ) ; final Button cloudButton = new Button ( "Register" ) ; cloudButton . addClickListener ( new ClickListener ( ) { public void onClick ( Widget sender ) { new RightscaleDialog ( ) . center ( ) ; } } ) ; g . setWidget ( 3 , 0 , cloud_panel ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 3 , 0 , HasVerticalAlignment . ALIGN_TOP ) ; VerticalPanel vp = new VerticalPanel ( ) ; vp . setSpacing ( 3 ) ; HorizontalPanel hp = new HorizontalPanel ( ) ; hp . setSpacing ( 3 ) ; hp . add ( cloudButton ) ; hp . add ( new HTML ( "with" ) ) ; vp . add ( hp ) ; vp . add ( new Image ( "img/rightscale_logo_blue.gif" ) ) ; g . setWidget ( 3 , 1 , vp ) ; g . getCellFormatter ( ) . setVerticalAlignment ( 3 , 1 , HasVerticalAlignment . ALIGN_TOP ) ; } parent . add ( g ) ; } public void displayErrorTab ( VerticalPanel parent , String message ) { parent . add ( new Label ( message ) ) ; } public void displayTestingTab ( VerticalPanel parent ) { parent . add ( new Label ( "truth = [" + props . get ( "truth" ) + "]" ) ) ; } public void displayStatusPage ( String message ) { label_box . setText ( message ) ; label_box . setStyleName ( "euca-greeting-pending" ) ; final VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; wrapper . setVerticalAlignment ( HasVerticalAlignment . ALIGN_MIDDLE ) ; wrapper . add ( label_box ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; } public void displayPasswordChangePage ( boolean mustChange ) { if ( mustChange ) { label_box . setText ( "You are required to change your password" ) ; label_box . setStyleName ( "euca-greeting-error" ) ; } else { label_box . setText ( "Please, change your password" ) ; label_box . setStyleName ( "euca-greeting-normal" ) ; } final Grid g1 = new Grid ( 3 , 3 ) ; g1 . getColumnFormatter ( ) . setWidth ( 0 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 1 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 2 , "180" ) ; int i = 0 ; final int oldPassword_row = i ; g1 . setWidget ( i , 0 , new Label ( "Old password:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox oldPassword_box = new PasswordTextBox ( ) ; oldPassword_box . setWidth ( "180" ) ; if ( ! mustChange ) { g1 . setWidget ( i ++ , 1 , oldPassword_box ) ; } final int newPassword1_row = i ; g1 . setWidget ( i , 0 , new Label ( "New password:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox newCleartextPassword1_box = new PasswordTextBox ( ) ; newCleartextPassword1_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , newCleartextPassword1_box ) ; final int newPassword2_row = i ; g1 . setWidget ( i , 0 , new Label ( "New password, again:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final PasswordTextBox newCleartextPassword2_box = new PasswordTextBox ( ) ; newCleartextPassword2_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , newCleartextPassword2_box ) ; ClickListener ChangeButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { boolean formOk = true ; for ( int j = 0 ; j < 3 ; j ++ ) { g1 . clearCell ( j , 2 ) ; } if ( newCleartextPassword1_box . getText ( ) . length ( ) < minPasswordLength ) { Label l = new Label ( "Password is too short!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( newPassword1_row , 2 , l ) ; formOk = false ; } if ( ! newCleartextPassword1_box . getText ( ) . equals ( newCleartextPassword2_box . getText ( ) ) ) { Label l = new Label ( "Passwords do not match!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( newPassword2_row , 2 , l ) ; formOk = false ; } if ( formOk ) { label_box . setText ( "Checking with the server..." ) ; label_box . setStyleName ( "euca-greeting-pending" ) ; EucalyptusWebBackend . App . getInstance ( ) . changePassword ( sessionId , GWTUtils . md5 ( oldPassword_box . getText ( ) ) , GWTUtils . md5 ( newCleartextPassword1_box . getText ( ) ) , new AsyncCallback ( ) { public void onSuccess ( final Object result ) { label_box . setText ( "Refreshing user data..." ) ; EucalyptusWebBackend . App . getInstance ( ) . getUserRecord ( sessionId , null , new AsyncCallback ( ) { public void onSuccess ( Object result2 ) { loggedInUser = ( UserInfoWeb ) ( ( List ) result2 ) . get ( 0 ) ; displayMessagePage ( ( String ) result ) ; } public void onFailure ( Throwable caught ) { displayLoginErrorPage ( caught . getMessage ( ) ) ; } } ) ; } public void onFailure ( Throwable caught ) { String m = caught . getMessage ( ) ; label_box . setText ( m ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } } ) ; } else { label_box . setText ( "Please, fix the errors and try again:" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } } } ; Button change_button = new Button ( "Change password" , ChangeButtonListener ) ; Button cancel_button = new Button ( "Cancel" , DefaultPageButtonListener ) ; HorizontalPanel bpanel = new HorizontalPanel ( ) ; bpanel . add ( change_button ) ; if ( ! mustChange ) { bpanel . add ( new HTML ( "&nbsp;&nbsp;or&nbsp;&nbsp;" ) ) ; bpanel . add ( cancel_button ) ; } VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( g1 ) ; vpanel . add ( bpanel ) ; VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; } public void displayAdminEmailChangePage ( ) { label_box . setText ( "One more thing!" ) ; label_box . setStyleName ( "euca-greeting-error" ) ; final Grid g1 = new Grid ( 2 , 3 ) ; g1 . getColumnFormatter ( ) . setWidth ( 0 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 1 , "180" ) ; g1 . getColumnFormatter ( ) . setWidth ( 2 , "180" ) ; int i = 0 ; g1 . setWidget ( i , 0 , new Label ( "Email address:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final TextBox emailAddress1_box = new TextBox ( ) ; emailAddress1_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , emailAddress1_box ) ; g1 . setWidget ( i , 0 , new Label ( "The address, again:" ) ) ; g1 . getCellFormatter ( ) . setHorizontalAlignment ( i , 0 , HasHorizontalAlignment . ALIGN_RIGHT ) ; final TextBox emailAddress2_box = new TextBox ( ) ; emailAddress2_box . setWidth ( "180" ) ; g1 . setWidget ( i ++ , 1 , emailAddress2_box ) ; ClickListener ChangeButtonListener = new ClickListener ( ) { public void onClick ( Widget sender ) { boolean formOk = true ; for ( int j = 0 ; j < 2 ; j ++ ) { g1 . clearCell ( j , 2 ) ; } if ( emailAddress1_box . getText ( ) . length ( ) < 3 ) { Label l = new Label ( "Invalid address!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( 0 , 2 , l ) ; formOk = false ; } if ( ! emailAddress1_box . getText ( ) . equals ( emailAddress2_box . getText ( ) ) ) { Label l = new Label ( "Addresses do not match!" ) ; l . setStyleName ( "euca-error-hint" ) ; g1 . setWidget ( 1 , 2 , l ) ; formOk = false ; } if ( formOk ) { loggedInUser . setEmail ( emailAddress1_box . getText ( ) ) ; label_box . setText ( "Checking with the server..." ) ; label_box . setStyleName ( "euca-greeting-pending" ) ; EucalyptusWebBackend . App . getInstance ( ) . updateUserRecord ( sessionId , loggedInUser , new AsyncCallback ( ) { public void onSuccess ( final Object result ) { displayWalrusURLChangePage ( ) ; } public void onFailure ( Throwable caught ) { loggedInUser . setEmail ( "" ) ; displayLoginErrorPage ( caught . getMessage ( ) ) ; } } ) ; } else { label_box . setText ( "Please, fix the errors and try again:" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } } } ; Button change_button = new Button ( "Change address" , ChangeButtonListener ) ; HTML message = new HTML ( admin_email_change_text ) ; message . setWidth ( "460" ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( message ) ; vpanel . add ( g1 ) ; vpanel . add ( change_button ) ; VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; } public static SystemConfigWeb conf = new SystemConfigWeb ( ) ; public void displayWalrusURLChangePage ( ) { label_box . setText ( "One last thing!  Really!!!" ) ; label_box . setStyleName ( "euca-greeting-error" ) ; HorizontalPanel hpanel = new HorizontalPanel ( ) ; hpanel . add ( new Label ( "Walrus URL:" ) ) ; final TextBox box = new TextBox ( ) ; box . setVisibleLength ( 55 ) ; hpanel . add ( box ) ; EucalyptusWebBackend . App . getInstance ( ) . getSystemConfig ( sessionId , new AsyncCallback ( ) { public void onSuccess ( final Object result ) { conf = ( SystemConfigWeb ) result ; box . setText ( conf . getStorageUrl ( ) ) ; } public void onFailure ( Throwable caught ) { } } ) ; Button change_button = new Button ( "Confirm URL" , new ClickListener ( ) { public void onClick ( Widget sender ) { conf . setStorageUrl ( box . getText ( ) ) ; EucalyptusWebBackend . App . getInstance ( ) . setSystemConfig ( sessionId , conf , new AsyncCallback ( ) { public void onSuccess ( final Object result ) { currentTabIndex = 3 ; displayDefaultPage ( "" ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( "Failed to save the URL (check 'Configuration' tab)." ) ; } } ) ; } } ) ; HTML message = new HTML ( admin_walrus_setup_text ) ; message . setWidth ( "460" ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; if ( logo != null ) { vpanel . add ( logo ) ; } vpanel . add ( label_box ) ; vpanel . add ( message ) ; vpanel . add ( hpanel ) ; vpanel . add ( change_button ) ; VerticalPanel wrapper = new VerticalPanel ( ) ; wrapper . add ( vpanel ) ; wrapper . setSize ( "100%" , "100%" ) ; wrapper . setCellHorizontalAlignment ( vpanel , VerticalPanel . ALIGN_CENTER ) ; wrapper . setCellVerticalAlignment ( vpanel , VerticalPanel . ALIGN_MIDDLE ) ; RootPanel . get ( ) . clear ( ) ; RootPanel . get ( ) . add ( wrapper ) ; } public void displayUsersTab ( final VerticalPanel parent ) { History . newItem ( "users" ) ; final HTML msg = new HTML ( "Contacting the server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . getUserRecord ( sessionId , "*" , new AsyncCallback ( ) { public void onSuccess ( Object result ) { List usersList = ( List ) result ; displayUsersList ( usersList , parent ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; parent . add ( msg ) ; } public void displayImagesTab ( final VerticalPanel parent ) { History . newItem ( "images" ) ; final HTML msg = new HTML ( "Contacting the server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . getImageInfo ( sessionId , loggedInUser . getUserName ( ) , new AsyncCallback ( ) { public void onSuccess ( Object result ) { List imagesList = ( List ) result ; displayImagesList ( imagesList , parent ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; parent . add ( msg ) ; } public void displayUsageTab ( final VerticalPanel parent ) { History . newItem ( "usage" ) ; final HTML msg = new HTML ( "Contacting the server..." ) ; EucalyptusWebBackend . App . getInstance ( ) . getUsageInfo ( sessionId , loggedInUser . getUserName ( ) , new AsyncCallback ( ) { public void onSuccess ( Object result ) { List usageList = ( List ) result ; displayUsageList ( usageList , parent ) ; } public void onFailure ( Throwable caught ) { displayErrorPage ( caught . getMessage ( ) ) ; } } ) ; parent . add ( msg ) ; } private class EucalyptusDialog extends DialogBox { private boolean cancelled ; public EucalyptusDialog ( String mainMsg , String extraMsg , Button okButton ) { super ( true ) ; cancelled = false ; setHTML ( mainMsg ) ; Button cancelButton = new Button ( "Cancel" , new ClickListener ( ) { public void onClick ( Widget sender ) { EucalyptusDialog . this . hide ( ) ; cancelled = true ; } } ) ; HorizontalPanel buttonPanel = new HorizontalPanel ( ) ; buttonPanel . add ( okButton ) ; buttonPanel . add ( cancelButton ) ; setWidget ( buttonPanel ) ; center ( ) ; } } public void displayConfirmDeletePage ( final String userName ) { Button deleteButton = new Button ( "Delete" , new ClickListener ( ) { public void onClick ( Widget sender ) { GWTUtils . redirect ( GWT . getModuleBaseURL ( ) + "?action=delete" + "&user=" + userName + "&page=" + currentTabIndex ) ; } } ) ; Button okButton = displayDialog ( "Sure?" , "Do you want to delete user '" + userName + "'?" , deleteButton ) ; okButton . setText ( "Cancel" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } public void displayConfirmDeletePageNoReload ( final String userName , final VerticalPanel parent ) { Button deleteButton = new Button ( "Delete" , new ClickListener ( ) { public void onClick ( Widget sender ) { attemptActionNoReload ( "delete" , userName , parent ) ; } } ) ; Button okButton = displayDialog ( "Sure?" , "Do you want to delete user '" + userName + "'?" , deleteButton ) ; okButton . setText ( "Cancel" ) ; label_box . setStyleName ( "euca-greeting-warning" ) ; } private HTML userActionButton ( String action , UserInfoWeb user ) { return new HTML ( "<a class=\"euca-action-link\" href=\"" + GWT . getModuleBaseURL ( ) + "?action=" + action . toLowerCase ( ) + "&user=" + user . getUserName ( ) + "&page=" + currentTabIndex + "\">" + action + "</a>" ) ; } private HTML userActionButtonNoReload ( final String action , final UserInfoWeb user , final VerticalPanel parent ) { HTML link = new HTML ( action ) ; link . setStyleName ( "euca-action-link" ) ; link . addClickListener ( new ClickListener ( ) { public void onClick ( Widget sender ) { attemptActionNoReload ( action . toLowerCase ( ) , user . getUserName ( ) , parent ) ; } } ) ; return link ; } class EditCallback implements ClickListener { private EucalyptusWebInterface parent ; private UserInfoWeb u ; EditCallback ( final EucalyptusWebInterface parent , UserInfoWeb u ) { this . parent = parent ; this . u = u ; } public void onClick ( final Widget widget ) { displayUserRecordPage ( RootPanel . get ( ) , u ) ; } } public void displayUsersList ( final List usersList , final VerticalPanel parent ) { String sortSymbol = "&darr;" ; if ( sortUsersLastFirst ) { sortSymbol = "&uarr;" ; } parent . clear ( ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 5 ) ; parent . add ( vpanel ) ; int nusers = usersList . size ( ) ; if ( nusers > 0 ) { Hyperlink sort_button = new Hyperlink ( sortSymbol , true , null ) ; sort_button . setStyleName ( "euca-small-text" ) ; sort_button . addClickListener ( new ClickListener ( ) { public void onClick ( Widget sender ) { sortUsersLastFirst = ! sortUsersLastFirst ; displayUsersList ( usersList , parent ) ; } } ) ; final Grid g = new Grid ( nusers + 1 , 6 ) ; g . setStyleName ( "euca-table" ) ; g . setCellPadding ( 6 ) ; g . setWidget ( 0 , 0 , sort_button ) ; g . setWidget ( 0 , 1 , new Label ( "Username" ) ) ; g . setWidget ( 0 , 2 , new Label ( "Email" ) ) ; g . setWidget ( 0 , 3 , new Label ( "Name" ) ) ; g . setWidget ( 0 , 4 , new Label ( "Status" ) ) ; g . setWidget ( 0 , 5 , new Label ( "Actions" ) ) ; g . getRowFormatter ( ) . setStyleName ( 0 , "euca-table-heading-row" ) ; for ( int i = 0 ; i < nusers ; i ++ ) { int userIndex = i ; if ( sortUsersLastFirst ) { userIndex = nusers - i - 1 ; } final UserInfoWeb u = ( UserInfoWeb ) usersList . get ( userIndex ) ; int row = i + 1 ; if ( ( row % 2 ) == 1 ) { g . getRowFormatter ( ) . setStyleName ( row , "euca-table-odd-row" ) ; } else { g . getRowFormatter ( ) . setStyleName ( row , "euca-table-even-row" ) ; } Label indexLabel = new Label ( Integer . toString ( userIndex ) ) ; indexLabel . setStyleName ( "euca-small-text" ) ; g . setWidget ( row , 0 , indexLabel ) ; Label userLabel = new Label ( u . getUserName ( ) ) ; g . setWidget ( row , 1 , userLabel ) ; Label emailLabel = new Label ( u . getEmail ( ) ) ; g . setWidget ( row , 2 , emailLabel ) ; Label nameLabel = new Label ( u . getRealName ( ) ) ; g . setWidget ( row , 3 , nameLabel ) ; String status ; if ( ! u . isApproved ( ) . booleanValue ( ) ) { status = "unapproved" ; } else if ( ! u . isEnabled ( ) . booleanValue ( ) ) { status = "disabled" ; } else if ( ! u . isConfirmed ( ) . booleanValue ( ) ) { status = "unconfirmed" ; } else { status = "active" ; } if ( u . isAdministrator ( ) . booleanValue ( ) ) { status += " & admin" ; } g . setWidget ( row , 4 , new Label ( status ) ) ; HorizontalPanel ops = new HorizontalPanel ( ) ; ops . setSpacing ( 3 ) ; Label editLabel = new Label ( "Edit" ) ; editLabel . addClickListener ( new EditCallback ( this , u ) ) ; editLabel . setStyleName ( "euca-action-link" ) ; ops . add ( editLabel ) ; if ( ! u . isAdministrator ( ) . booleanValue ( ) ) { HTML act_button = userActionButtonNoReload ( "Disable" , u , parent ) ; if ( ! u . isApproved ( ) . booleanValue ( ) ) { act_button = userActionButtonNoReload ( "Approve" , u , parent ) ; } else if ( ! u . isEnabled ( ) . booleanValue ( ) ) { act_button = userActionButtonNoReload ( "Enable" , u , parent ) ; } ops . add ( act_button ) ; Hyperlink del_button = new Hyperlink ( "Delete" , null ) ; del_button . setStyleName ( "euca-action-link" ) ; del_button . addClickListener ( new ClickListener ( ) { public void onClick ( Widget sender ) { displayConfirmDeletePageNoReload ( u . getUserName ( ) , parent ) ; } } ) ; ops . add ( del_button ) ; } g . setWidget ( row , 5 , ops ) ; HorizontalPanel views = new HorizontalPanel ( ) ; views . setSpacing ( 3 ) ; HTML inst_button = userActionButton ( "Instances" , u ) ; views . add ( inst_button ) ; HTML img_button = userActionButton ( "Images" , u ) ; views . add ( img_button ) ; } vpanel . add ( g ) ; } else { vpanel . add ( new Label ( "No users found" ) ) ; } vpanel . add ( new Button ( "Add user" , AddUserButtonListener ) ) ; } private HTML imageActionButton ( String action , ImageInfoWeb img ) { return new HTML ( "<a class=\"euca-action-link\" href=\"" + GWT . getModuleBaseURL ( ) + "?action=" + action . toLowerCase ( ) + "_image" + "&id=" + img . getImageId ( ) + "&page=" + currentTabIndex + "\">" + action + "</a>" ) ; } public void displayImagesList ( List imagesList , final VerticalPanel parent ) { parent . clear ( ) ; int nimages = imagesList . size ( ) ; boolean showActions = false ; if ( loggedInUser . isAdministrator ( ) . booleanValue ( ) ) { showActions = true ; } if ( nimages > 0 ) { final Grid g = new Grid ( nimages + 1 , 6 ) ; g . setStyleName ( "euca-table" ) ; g . setCellPadding ( 6 ) ; g . setWidget ( 0 , 0 , new Label ( "Id" ) ) ; g . setWidget ( 0 , 1 , new Label ( "Name" ) ) ; g . setWidget ( 0 , 2 , new Label ( "Kernel" ) ) ; g . setWidget ( 0 , 3 , new Label ( "Ramdisk" ) ) ; g . setWidget ( 0 , 4 , new Label ( "State" ) ) ; if ( showActions ) g . setWidget ( 0 , 5 , new Label ( "Actions" ) ) ; g . getRowFormatter ( ) . setStyleName ( 0 , "euca-table-heading-row" ) ; for ( int i = 0 ; i < nimages ; i ++ ) { ImageInfoWeb img = ( ImageInfoWeb ) imagesList . get ( i ) ; int row = i + 1 ; if ( ( row % 2 ) == 1 ) { g . getRowFormatter ( ) . setStyleName ( row , "euca-table-odd-row" ) ; } else { g . getRowFormatter ( ) . setStyleName ( row , "euca-table-even-row" ) ; } g . setWidget ( row , 0 , new Label ( img . getImageId ( ) ) ) ; g . setWidget ( row , 1 , new Label ( img . getImageLocation ( ) ) ) ; g . setWidget ( row , 2 , new Label ( img . getKernelId ( ) ) ) ; g . setWidget ( row , 3 , new Label ( img . getRamdiskId ( ) ) ) ; g . setWidget ( row , 4 , new Label ( img . getImageState ( ) ) ) ; if ( showActions ) { HorizontalPanel ops = new HorizontalPanel ( ) ; ops . setSpacing ( 3 ) ; HTML act_button = imageActionButton ( "Disable" , img ) ; if ( img . getImageState ( ) . equalsIgnoreCase ( "deregistered" ) ) { act_button = imageActionButton ( "Enable" , img ) ; } ops . add ( act_button ) ; g . setWidget ( row , 5 , ops ) ; } } parent . add ( g ) ; } else { parent . add ( new Label ( "No images found" ) ) ; } } public void displayUsageList ( List usageList , final VerticalPanel parent ) { parent . clear ( ) ; int nusage = usageList . size ( ) ; boolean showAllUsers = false ; boolean showCurrentUserUsage = true ; if ( loggedInUser . isAdministrator ( ) . booleanValue ( ) ) { showAllUsers = true ; } if ( showAllUsers ) { if ( nusage > 0 ) { final Grid g = new Grid ( nusage + 1 , 6 ) ; g . setStyleName ( "euca-table" ) ; g . setCellPadding ( 6 ) ; g . setWidget ( 0 , 0 , new Label ( "User Name" ) ) ; g . setWidget ( 0 , 1 , new Label ( "Comments" ) ) ; g . setWidget ( 0 , 2 , new Label ( "Usage" ) ) ; g . setWidget ( 0 , 3 , new Label ( "Total" ) ) ; g . getRowFormatter ( ) . setStyleName ( 0 , "euca-table-heading-row" ) ; for ( int i = 0 ; i < nusage ; i ++ ) { UsageCounterSummaryWeb summary = ( UsageCounterSummaryWeb ) usageList . get ( i ) ; int row = i + 1 ; if ( ( row % 2 ) == 1 ) { g . getRowFormatter ( ) . setStyleName ( row , "euca-table-odd-row" ) ; } else { g . getRowFormatter ( ) . setStyleName ( row , "euca-table-even-row" ) ; } g . setWidget ( row , 0 , new Label ( summary . getUserName ( ) ) ) ; g . setWidget ( row , 1 , new Label ( summary . getComments ( ) ) ) ; g . setWidget ( row , 2 , new Label ( summary . getUsage ( ) ) ) ; g . setWidget ( row , 3 , new Label ( summary . getTotalAmount ( ) ) ) ; } parent . add ( g ) ; } else { parent . add ( new Label ( "No usage statistics found" ) ) ; } } } public void displayConfTab ( final VerticalPanel parent ) { History . newItem ( "conf" ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; vpanel . add ( new SystemConfigTable ( sessionId ) ) ; vpanel . add ( new ClusterInfoTable ( sessionId ) ) ; vpanel . add ( new VmTypeTable ( sessionId ) ) ; parent . clear ( ) ; parent . add ( vpanel ) ; } public void displayDownloadsTab ( final VerticalPanel parent ) { History . newItem ( "extras" ) ; VerticalPanel vpanel = new VerticalPanel ( ) ; vpanel . setSpacing ( 15 ) ; vpanel . setHorizontalAlignment ( HasHorizontalAlignment . ALIGN_CENTER ) ; vpanel . add ( new DownloadsTable ( sessionId , "http://www.eucalyptussoftware.com/downloads/eucalyptus-images/list.php" , "http://open.eucalyptus.com/wiki/EucalyptusUserImageCreatorGuide_v1.5" , "Eucalyptus-certified Images" , 50 ) ) ; vpanel . add ( new DownloadsTable ( sessionId , "http://www.eucalyptussoftware.com/downloads/eucalyptus-tools/list.php" , "http://open.eucalyptus.com/wiki/ToolsEcosystem" , "Eucalyptus-compatible Tools" , 50 ) ) ; parent . clear ( ) ; parent . add ( vpanel ) ; } } 
=======
public class XmlName extends AbstractDatatype { public static boolean isNameStart ( char c ) { return ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'À' && c <= 'Ö' ) || ( c >= 'Ø' && c <= 'ö' ) || ( c >= 'ø' && c <= 'ÿ' ) || ( c >= 'Ā' && c <= 'ı' ) || ( c >= 'Ĵ' && c <= 'ľ' ) || ( c >= 'Ł' && c <= 'ň' ) || ( c >= 'Ŋ' && c <= 'ž' ) || ( c >= 'ƀ' && c <= 'ǃ' ) || ( c >= 'Ǎ' && c <= 'ǰ' ) || ( c >= 'Ǵ' && c <= 'ǵ' ) || ( c >= 'Ǻ' && c <= 'ȗ' ) || ( c >= 'ɐ' && c <= 'ʨ' ) || ( c >= 'ʻ' && c <= 'ˁ' ) || ( c == 'Ά' ) || ( c >= 'Έ' && c <= 'Ί' ) || ( c == 'Ό' ) || ( c >= 'Ύ' && c <= 'Ρ' ) || ( c >= 'Σ' && c <= 'ώ' ) || ( c >= 'ϐ' && c <= 'ϖ' ) || ( c == 'Ϛ' ) || ( c == 'Ϝ' ) || ( c == 'Ϟ' ) || ( c == 'Ϡ' ) || ( c >= 'Ϣ' && c <= 'ϳ' ) || ( c >= 'Ё' && c <= 'Ќ' ) || ( c >= 'Ў' && c <= 'я' ) || ( c >= 'ё' && c <= 'ќ' ) || ( c >= 'ў' && c <= 'ҁ' ) || ( c >= 'Ґ' && c <= 'ӄ' ) || ( c >= 'Ӈ' && c <= 'ӈ' ) || ( c >= 'Ӌ' && c <= 'ӌ' ) || ( c >= 'Ӑ' && c <= 'ӫ' ) || ( c >= 'Ӯ' && c <= 'ӵ' ) || ( c >= 'Ӹ' && c <= 'ӹ' ) || ( c >= 'Ա' && c <= 'Ֆ' ) || ( c == 'ՙ' ) || ( c >= 'ա' && c <= 'ֆ' ) || ( c >= 'א' && c <= 'ת' ) || ( c >= 'װ' && c <= 'ײ' ) || ( c >= 'ء' && c <= 'غ' ) || ( c >= 'ف' && c <= 'ي' ) || ( c >= 'ٱ' && c <= 'ڷ' ) || ( c >= 'ں' && c <= 'ھ' ) || ( c >= 'ۀ' && c <= 'ێ' ) || ( c >= 'ې' && c <= 'ۓ' ) || ( c == 'ە' ) || ( c >= 'ۥ' && c <= 'ۦ' ) || ( c >= 'अ' && c <= 'ह' ) || ( c == 'ऽ' ) || ( c >= 'क़' && c <= 'ॡ' ) || ( c >= 'অ' && c <= 'ঌ' ) || ( c >= 'এ' && c <= 'ঐ' ) || ( c >= 'ও' && c <= 'ন' ) || ( c >= 'প' && c <= 'র' ) || ( c == 'ল' ) || ( c >= 'শ' && c <= 'হ' ) || ( c >= 'ড়' && c <= 'ঢ়' ) || ( c >= 'য়' && c <= 'ৡ' ) || ( c >= 'ৰ' && c <= 'ৱ' ) || ( c >= 'ਅ' && c <= 'ਊ' ) || ( c >= 'ਏ' && c <= 'ਐ' ) || ( c >= 'ਓ' && c <= 'ਨ' ) || ( c >= 'ਪ' && c <= 'ਰ' ) || ( c >= 'ਲ' && c <= 'ਲ਼' ) || ( c >= 'ਵ' && c <= 'ਸ਼' ) || ( c >= 'ਸ' && c <= 'ਹ' ) || ( c >= 'ਖ਼' && c <= 'ੜ' ) || ( c == 'ਫ਼' ) || ( c >= 'ੲ' && c <= 'ੴ' ) || ( c >= 'અ' && c <= 'ઋ' ) || ( c == 'ઍ' ) || ( c >= 'એ' && c <= 'ઑ' ) || ( c >= 'ઓ' && c <= 'ન' ) || ( c >= 'પ' && c <= 'ર' ) || ( c >= 'લ' && c <= 'ળ' ) || ( c >= 'વ' && c <= 'હ' ) || ( c == 'ઽ' ) || ( c == 'ૠ' ) || ( c >= 'ଅ' && c <= 'ଌ' ) || ( c >= 'ଏ' && c <= 'ଐ' ) || ( c >= 'ଓ' && c <= 'ନ' ) || ( c >= 'ପ' && c <= 'ର' ) || ( c >= 'ଲ' && c <= 'ଳ' ) || ( c >= 'ଶ' && c <= 'ହ' ) || ( c == 'ଽ' ) || ( c >= 'ଡ଼' && c <= 'ଢ଼' ) || ( c >= 'ୟ' && c <= 'ୡ' ) || ( c >= 'அ' && c <= 'ஊ' ) || ( c >= 'எ' && c <= 'ஐ' ) || ( c >= 'ஒ' && c <= 'க' ) || ( c >= 'ங' && c <= 'ச' ) || ( c == 'ஜ' ) || ( c >= 'ஞ' && c <= 'ட' ) || ( c >= 'ண' && c <= 'த' ) || ( c >= 'ந' && c <= 'ப' ) || ( c >= 'ம' && c <= 'வ' ) || ( c >= 'ஷ' && c <= 'ஹ' ) || ( c >= 'అ' && c <= 'ఌ' ) || ( c >= 'ఎ' && c <= 'ఐ' ) || ( c >= 'ఒ' && c <= 'న' ) || ( c >= 'ప' && c <= 'ళ' ) || ( c >= 'వ' && c <= 'హ' ) || ( c >= 'ౠ' && c <= 'ౡ' ) || ( c >= 'ಅ' && c <= 'ಌ' ) || ( c >= 'ಎ' && c <= 'ಐ' ) || ( c >= 'ಒ' && c <= 'ನ' ) || ( c >= 'ಪ' && c <= 'ಳ' ) || ( c >= 'ವ' && c <= 'ಹ' ) || ( c == 'ೞ' ) || ( c >= 'ೠ' && c <= 'ೡ' ) || ( c >= 'അ' && c <= 'ഌ' ) || ( c >= 'എ' && c <= 'ഐ' ) || ( c >= 'ഒ' && c <= 'ന' ) || ( c >= 'പ' && c <= 'ഹ' ) || ( c >= 'ൠ' && c <= 'ൡ' ) || ( c >= 'ก' && c <= 'ฮ' ) || ( c == 'ะ' ) || ( c >= 'า' && c <= 'ำ' ) || ( c >= 'เ' && c <= 'ๅ' ) || ( c >= 'ກ' && c <= 'ຂ' ) || ( c == 'ຄ' ) || ( c >= 'ງ' && c <= 'ຈ' ) || ( c == 'ຊ' ) || ( c == 'ຍ' ) || ( c >= 'ດ' && c <= 'ທ' ) || ( c >= 'ນ' && c <= 'ຟ' ) || ( c >= 'ມ' && c <= 'ຣ' ) || ( c == 'ລ' ) || ( c == 'ວ' ) || ( c >= 'ສ' && c <= 'ຫ' ) || ( c >= 'ອ' && c <= 'ຮ' ) || ( c == 'ະ' ) || ( c >= 'າ' && c <= 'ຳ' ) || ( c == 'ຽ' ) || ( c >= 'ເ' && c <= 'ໄ' ) || ( c >= 'ཀ' && c <= 'ཇ' ) || ( c >= 'ཉ' && c <= 'ཀྵ' ) || ( c >= 'Ⴀ' && c <= 'Ⴥ' ) || ( c >= 'ა' && c <= 'ჶ' ) || ( c == 'ᄀ' ) || ( c >= 'ᄂ' && c <= 'ᄃ' ) || ( c >= 'ᄅ' && c <= 'ᄇ' ) || ( c == 'ᄉ' ) || ( c >= 'ᄋ' && c <= 'ᄌ' ) || ( c >= 'ᄎ' && c <= 'ᄒ' ) || ( c == 'ᄼ' ) || ( c == 'ᄾ' ) || ( c == 'ᅀ' ) || ( c == 'ᅌ' ) || ( c == 'ᅎ' ) || ( c == 'ᅐ' ) || ( c >= 'ᅔ' && c <= 'ᅕ' ) || ( c == 'ᅙ' ) || ( c >= 'ᅟ' && c <= 'ᅡ' ) || ( c == 'ᅣ' ) || ( c == 'ᅥ' ) || ( c == 'ᅧ' ) || ( c == 'ᅩ' ) || ( c >= 'ᅭ' && c <= 'ᅮ' ) || ( c >= 'ᅲ' && c <= 'ᅳ' ) || ( c == 'ᅵ' ) || ( c == 'ᆞ' ) || ( c == 'ᆨ' ) || ( c == 'ᆫ' ) || ( c >= 'ᆮ' && c <= 'ᆯ' ) || ( c >= 'ᆷ' && c <= 'ᆸ' ) || ( c == 'ᆺ' ) || ( c >= 'ᆼ' && c <= 'ᇂ' ) || ( c == 'ᇫ' ) || ( c == 'ᇰ' ) || ( c == 'ᇹ' ) || ( c >= 'Ḁ' && c <= 'ẛ' ) || ( c >= 'Ạ' && c <= 'ỹ' ) || ( c >= 'ἀ' && c <= 'ἕ' ) || ( c >= 'Ἐ' && c <= 'Ἕ' ) || ( c >= 'ἠ' && c <= 'ὅ' ) || ( c >= 'Ὀ' && c <= 'Ὅ' ) || ( c >= 'ὐ' && c <= 'ὗ' ) || ( c == 'Ὑ' ) || ( c == 'Ὓ' ) || ( c == 'Ὕ' ) || ( c >= 'Ὗ' && c <= 'ώ' ) || ( c >= 'ᾀ' && c <= 'ᾴ' ) || ( c >= 'ᾶ' && c <= 'ᾼ' ) || ( c == 'ι' ) || ( c >= 'ῂ' && c <= 'ῄ' ) || ( c >= 'ῆ' && c <= 'ῌ' ) || ( c >= 'ῐ' && c <= 'ΐ' ) || ( c >= 'ῖ' && c <= 'Ί' ) || ( c >= 'ῠ' && c <= 'Ῥ' ) || ( c >= 'ῲ' && c <= 'ῴ' ) || ( c >= 'ῶ' && c <= 'ῼ' ) || ( c == 'Ω' ) || ( c >= 'K' && c <= 'Å' ) || ( c == '℮' ) || ( c >= 'ↀ' && c <= 'ↂ' ) || ( c >= 'ぁ' && c <= 'ゔ' ) || ( c >= 'ァ' && c <= 'ヺ' ) || ( c >= 'ㄅ' && c <= 'ㄬ' ) || ( c >= '가' && c <= '힣' ) || ( c >= '一' && c <= '龥' ) || ( c == '〇' ) || ( c >= '〡' && c <= '〩' ) || ( c == '_' ) || ( c == ':' ) ) ; } public static boolean isNameTrail ( char c ) { return ( ( c >= '0' && c <= '9' ) || ( c >= '٠' && c <= '٩' ) || ( c >= '۰' && c <= '۹' ) || ( c >= '०' && c <= '९' ) || ( c >= '০' && c <= '৯' ) || ( c >= '੦' && c <= '੯' ) || ( c >= '૦' && c <= '૯' ) || ( c >= '୦' && c <= '୯' ) || ( c >= '௧' && c <= '௯' ) || ( c >= '౦' && c <= '౯' ) || ( c >= '೦' && c <= '೯' ) || ( c >= '൦' && c <= '൯' ) || ( c >= '๐' && c <= '๙' ) || ( c >= '໐' && c <= '໙' ) || ( c >= '༠' && c <= '༩' ) || ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'À' && c <= 'Ö' ) || ( c >= 'Ø' && c <= 'ö' ) || ( c >= 'ø' && c <= 'ÿ' ) || ( c >= 'Ā' && c <= 'ı' ) || ( c >= 'Ĵ' && c <= 'ľ' ) || ( c >= 'Ł' && c <= 'ň' ) || ( c >= 'Ŋ' && c <= 'ž' ) || ( c >= 'ƀ' && c <= 'ǃ' ) || ( c >= 'Ǎ' && c <= 'ǰ' ) || ( c >= 'Ǵ' && c <= 'ǵ' ) || ( c >= 'Ǻ' && c <= 'ȗ' ) || ( c >= 'ɐ' && c <= 'ʨ' ) || ( c >= 'ʻ' && c <= 'ˁ' ) || ( c == 'Ά' ) || ( c >= 'Έ' && c <= 'Ί' ) || ( c == 'Ό' ) || ( c >= 'Ύ' && c <= 'Ρ' ) || ( c >= 'Σ' && c <= 'ώ' ) || ( c >= 'ϐ' && c <= 'ϖ' ) || ( c == 'Ϛ' ) || ( c == 'Ϝ' ) || ( c == 'Ϟ' ) || ( c == 'Ϡ' ) || ( c >= 'Ϣ' && c <= 'ϳ' ) || ( c >= 'Ё' && c <= 'Ќ' ) || ( c >= 'Ў' && c <= 'я' ) || ( c >= 'ё' && c <= 'ќ' ) || ( c >= 'ў' && c <= 'ҁ' ) || ( c >= 'Ґ' && c <= 'ӄ' ) || ( c >= 'Ӈ' && c <= 'ӈ' ) || ( c >= 'Ӌ' && c <= 'ӌ' ) || ( c >= 'Ӑ' && c <= 'ӫ' ) || ( c >= 'Ӯ' && c <= 'ӵ' ) || ( c >= 'Ӹ' && c <= 'ӹ' ) || ( c >= 'Ա' && c <= 'Ֆ' ) || ( c == 'ՙ' ) || ( c >= 'ա' && c <= 'ֆ' ) || ( c >= 'א' && c <= 'ת' ) || ( c >= 'װ' && c <= 'ײ' ) || ( c >= 'ء' && c <= 'غ' ) || ( c >= 'ف' && c <= 'ي' ) || ( c >= 'ٱ' && c <= 'ڷ' ) || ( c >= 'ں' && c <= 'ھ' ) || ( c >= 'ۀ' && c <= 'ێ' ) || ( c >= 'ې' && c <= 'ۓ' ) || ( c == 'ە' ) || ( c >= 'ۥ' && c <= 'ۦ' ) || ( c >= 'अ' && c <= 'ह' ) || ( c == 'ऽ' ) || ( c >= 'क़' && c <= 'ॡ' ) || ( c >= 'অ' && c <= 'ঌ' ) || ( c >= 'এ' && c <= 'ঐ' ) || ( c >= 'ও' && c <= 'ন' ) || ( c >= 'প' && c <= 'র' ) || ( c == 'ল' ) || ( c >= 'শ' && c <= 'হ' ) || ( c >= 'ড়' && c <= 'ঢ়' ) || ( c >= 'য়' && c <= 'ৡ' ) || ( c >= 'ৰ' && c <= 'ৱ' ) || ( c >= 'ਅ' && c <= 'ਊ' ) || ( c >= 'ਏ' && c <= 'ਐ' ) || ( c >= 'ਓ' && c <= 'ਨ' ) || ( c >= 'ਪ' && c <= 'ਰ' ) || ( c >= 'ਲ' && c <= 'ਲ਼' ) || ( c >= 'ਵ' && c <= 'ਸ਼' ) || ( c >= 'ਸ' && c <= 'ਹ' ) || ( c >= 'ਖ਼' && c <= 'ੜ' ) || ( c == 'ਫ਼' ) || ( c >= 'ੲ' && c <= 'ੴ' ) || ( c >= 'અ' && c <= 'ઋ' ) || ( c == 'ઍ' ) || ( c >= 'એ' && c <= 'ઑ' ) || ( c >= 'ઓ' && c <= 'ન' ) || ( c >= 'પ' && c <= 'ર' ) || ( c >= 'લ' && c <= 'ળ' ) || ( c >= 'વ' && c <= 'હ' ) || ( c == 'ઽ' ) || ( c == 'ૠ' ) || ( c >= 'ଅ' && c <= 'ଌ' ) || ( c >= 'ଏ' && c <= 'ଐ' ) || ( c >= 'ଓ' && c <= 'ନ' ) || ( c >= 'ପ' && c <= 'ର' ) || ( c >= 'ଲ' && c <= 'ଳ' ) || ( c >= 'ଶ' && c <= 'ହ' ) || ( c == 'ଽ' ) || ( c >= 'ଡ଼' && c <= 'ଢ଼' ) || ( c >= 'ୟ' && c <= 'ୡ' ) || ( c >= 'அ' && c <= 'ஊ' ) || ( c >= 'எ' && c <= 'ஐ' ) || ( c >= 'ஒ' && c <= 'க' ) || ( c >= 'ங' && c <= 'ச' ) || ( c == 'ஜ' ) || ( c >= 'ஞ' && c <= 'ட' ) || ( c >= 'ண' && c <= 'த' ) || ( c >= 'ந' && c <= 'ப' ) || ( c >= 'ம' && c <= 'வ' ) || ( c >= 'ஷ' && c <= 'ஹ' ) || ( c >= 'అ' && c <= 'ఌ' ) || ( c >= 'ఎ' && c <= 'ఐ' ) || ( c >= 'ఒ' && c <= 'న' ) || ( c >= 'ప' && c <= 'ళ' ) || ( c >= 'వ' && c <= 'హ' ) || ( c >= 'ౠ' && c <= 'ౡ' ) || ( c >= 'ಅ' && c <= 'ಌ' ) || ( c >= 'ಎ' && c <= 'ಐ' ) || ( c >= 'ಒ' && c <= 'ನ' ) || ( c >= 'ಪ' && c <= 'ಳ' ) || ( c >= 'ವ' && c <= 'ಹ' ) || ( c == 'ೞ' ) || ( c >= 'ೠ' && c <= 'ೡ' ) || ( c >= 'അ' && c <= 'ഌ' ) || ( c >= 'എ' && c <= 'ഐ' ) || ( c >= 'ഒ' && c <= 'ന' ) || ( c >= 'പ' && c <= 'ഹ' ) || ( c >= 'ൠ' && c <= 'ൡ' ) || ( c >= 'ก' && c <= 'ฮ' ) || ( c == 'ะ' ) || ( c >= 'า' && c <= 'ำ' ) || ( c >= 'เ' && c <= 'ๅ' ) || ( c >= 'ກ' && c <= 'ຂ' ) || ( c == 'ຄ' ) || ( c >= 'ງ' && c <= 'ຈ' ) || ( c == 'ຊ' ) || ( c == 'ຍ' ) || ( c >= 'ດ' && c <= 'ທ' ) || ( c >= 'ນ' && c <= 'ຟ' ) || ( c >= 'ມ' && c <= 'ຣ' ) || ( c == 'ລ' ) || ( c == 'ວ' ) || ( c >= 'ສ' && c <= 'ຫ' ) || ( c >= 'ອ' && c <= 'ຮ' ) || ( c == 'ະ' ) || ( c >= 'າ' && c <= 'ຳ' ) || ( c == 'ຽ' ) || ( c >= 'ເ' && c <= 'ໄ' ) || ( c >= 'ཀ' && c <= 'ཇ' ) || ( c >= 'ཉ' && c <= 'ཀྵ' ) || ( c >= 'Ⴀ' && c <= 'Ⴥ' ) || ( c >= 'ა' && c <= 'ჶ' ) || ( c == 'ᄀ' ) || ( c >= 'ᄂ' && c <= 'ᄃ' ) || ( c >= 'ᄅ' && c <= 'ᄇ' ) || ( c == 'ᄉ' ) || ( c >= 'ᄋ' && c <= 'ᄌ' ) || ( c >= 'ᄎ' && c <= 'ᄒ' ) || ( c == 'ᄼ' ) || ( c == 'ᄾ' ) || ( c == 'ᅀ' ) || ( c == 'ᅌ' ) || ( c == 'ᅎ' ) || ( c == 'ᅐ' ) || ( c >= 'ᅔ' && c <= 'ᅕ' ) || ( c == 'ᅙ' ) || ( c >= 'ᅟ' && c <= 'ᅡ' ) || ( c == 'ᅣ' ) || ( c == 'ᅥ' ) || ( c == 'ᅧ' ) || ( c == 'ᅩ' ) || ( c >= 'ᅭ' && c <= 'ᅮ' ) || ( c >= 'ᅲ' && c <= 'ᅳ' ) || ( c == 'ᅵ' ) || ( c == 'ᆞ' ) || ( c == 'ᆨ' ) || ( c == 'ᆫ' ) || ( c >= 'ᆮ' && c <= 'ᆯ' ) || ( c >= 'ᆷ' && c <= 'ᆸ' ) || ( c == 'ᆺ' ) || ( c >= 'ᆼ' && c <= 'ᇂ' ) || ( c == 'ᇫ' ) || ( c == 'ᇰ' ) || ( c == 'ᇹ' ) || ( c >= 'Ḁ' && c <= 'ẛ' ) || ( c >= 'Ạ' && c <= 'ỹ' ) || ( c >= 'ἀ' && c <= 'ἕ' ) || ( c >= 'Ἐ' && c <= 'Ἕ' ) || ( c >= 'ἠ' && c <= 'ὅ' ) || ( c >= 'Ὀ' && c <= 'Ὅ' ) || ( c >= 'ὐ' && c <= 'ὗ' ) || ( c == 'Ὑ' ) || ( c == 'Ὓ' ) || ( c == 'Ὕ' ) || ( c >= 'Ὗ' && c <= 'ώ' ) || ( c >= 'ᾀ' && c <= 'ᾴ' ) || ( c >= 'ᾶ' && c <= 'ᾼ' ) || ( c == 'ι' ) || ( c >= 'ῂ' && c <= 'ῄ' ) || ( c >= 'ῆ' && c <= 'ῌ' ) || ( c >= 'ῐ' && c <= 'ΐ' ) || ( c >= 'ῖ' && c <= 'Ί' ) || ( c >= 'ῠ' && c <= 'Ῥ' ) || ( c >= 'ῲ' && c <= 'ῴ' ) || ( c >= 'ῶ' && c <= 'ῼ' ) || ( c == 'Ω' ) || ( c >= 'K' && c <= 'Å' ) || ( c == '℮' ) || ( c >= 'ↀ' && c <= 'ↂ' ) || ( c >= 'ぁ' && c <= 'ゔ' ) || ( c >= 'ァ' && c <= 'ヺ' ) || ( c >= 'ㄅ' && c <= 'ㄬ' ) || ( c >= '가' && c <= '힣' ) || ( c >= '一' && c <= '龥' ) || ( c == '〇' ) || ( c >= '〡' && c <= '〩' ) || ( c == '_' ) || ( c == ':' ) || ( c == '.' ) || ( c == '-' ) || ( c >= '̀' && c <= 'ͅ' ) || ( c >= '͠' && c <= '͡' ) || ( c >= '҃' && c <= '҆' ) || ( c >= '֑' && c <= '֡' ) || ( c >= '֣' && c <= 'ֹ' ) || ( c >= 'ֻ' && c <= 'ֽ' ) || ( c == 'ֿ' ) || ( c >= 'ׁ' && c <= 'ׂ' ) || ( c == 'ׄ' ) || ( c >= 'ً' && c <= 'ْ' ) || ( c == 'ٰ' ) || ( c >= 'ۖ' && c <= 'ۜ' ) || ( c >= '۝' && c <= '۟' ) || ( c >= '۠' && c <= 'ۤ' ) || ( c >= 'ۧ' && c <= 'ۨ' ) || ( c >= '۪' && c <= 'ۭ' ) || ( c >= 'ँ' && c <= 'ः' ) || ( c == '़' ) || ( c >= 'ा' && c <= 'ौ' ) || ( c == '्' ) || ( c >= '॑' && c <= '॔' ) || ( c >= 'ॢ' && c <= 'ॣ' ) || ( c >= 'ঁ' && c <= 'ঃ' ) || ( c == '়' ) || ( c == 'া' ) || ( c == 'ি' ) || ( c >= 'ী' && c <= 'ৄ' ) || ( c >= 'ে' && c <= 'ৈ' ) || ( c >= 'ো' && c <= '্' ) || ( c == 'ৗ' ) || ( c >= 'ৢ' && c <= 'ৣ' ) || ( c == 'ਂ' ) || ( c == '਼' ) || ( c == 'ਾ' ) || ( c == 'ਿ' ) || ( c >= 'ੀ' && c <= 'ੂ' ) || ( c >= 'ੇ' && c <= 'ੈ' ) || ( c >= 'ੋ' && c <= '੍' ) || ( c >= 'ੰ' && c <= 'ੱ' ) || ( c >= 'ઁ' && c <= 'ઃ' ) || ( c == '઼' ) || ( c >= 'ા' && c <= 'ૅ' ) || ( c >= 'ે' && c <= 'ૉ' ) || ( c >= 'ો' && c <= '્' ) || ( c >= 'ଁ' && c <= 'ଃ' ) || ( c == '଼' ) || ( c >= 'ା' && c <= 'ୃ' ) || ( c >= 'େ' && c <= 'ୈ' ) || ( c >= 'ୋ' && c <= '୍' ) || ( c >= 'ୖ' && c <= 'ୗ' ) || ( c >= 'ஂ' && c <= 'ஃ' ) || ( c >= 'ா' && c <= 'ூ' ) || ( c >= 'ெ' && c <= 'ை' ) || ( c >= 'ொ' && c <= '்' ) || ( c == 'ௗ' ) || ( c >= 'ఁ' && c <= 'ః' ) || ( c >= 'ా' && c <= 'ౄ' ) || ( c >= 'ె' && c <= 'ై' ) || ( c >= 'ొ' && c <= '్' ) || ( c >= 'ౕ' && c <= 'ౖ' ) || ( c >= 'ಂ' && c <= 'ಃ' ) || ( c >= 'ಾ' && c <= 'ೄ' ) || ( c >= 'ೆ' && c <= 'ೈ' ) || ( c >= 'ೊ' && c <= '್' ) || ( c >= 'ೕ' && c <= 'ೖ' ) || ( c >= 'ം' && c <= 'ഃ' ) || ( c >= 'ാ' && c <= 'ൃ' ) || ( c >= 'െ' && c <= 'ൈ' ) || ( c >= 'ൊ' && c <= '്' ) || ( c == 'ൗ' ) || ( c == 'ั' ) || ( c >= 'ิ' && c <= 'ฺ' ) || ( c >= '็' && c <= '๎' ) || ( c == 'ັ' ) || ( c >= 'ິ' && c <= 'ູ' ) || ( c >= 'ົ' && c <= 'ຼ' ) || ( c >= '່' && c <= 'ໍ' ) || ( c >= '༘' && c <= '༙' ) || ( c == '༵' ) || ( c == '༷' ) || ( c == '༹' ) || ( c == '༾' ) || ( c == '༿' ) || ( c >= 'ཱ' && c <= '྄' ) || ( c >= '྆' && c <= 'ྋ' ) || ( c >= 'ྐ' && c <= 'ྕ' ) || ( c == 'ྗ' ) || ( c >= 'ྙ' && c <= 'ྭ' ) || ( c >= 'ྱ' && c <= 'ྷ' ) || ( c == 'ྐྵ' ) || ( c >= '⃐' && c <= '⃜' ) || ( c == '⃡' ) || ( c >= '〪' && c <= '〯' ) || ( c == '゙' ) || ( c == '゚' ) || ( c == '·' ) || ( c == 'ː' ) || ( c == 'ˑ' ) || ( c == '·' ) || ( c == 'ـ' ) || ( c == 'ๆ' ) || ( c == 'ໆ' ) || ( c == '々' ) || ( c >= '〱' && c <= '〵' ) || ( c >= 'ゝ' && c <= 'ゞ' ) || ( c >= 'ー' && c <= 'ヾ' ) ) ; } public static boolean isName ( CharSequence str ) { if ( str == null ) { return false ; } else { int len = str . length ( ) ; switch ( len ) { case 0 : return false ; case 1 : return XmlName . isNameStart ( str . charAt ( 0 ) ) ; default : if ( ! XmlName . isNameStart ( str . charAt ( 0 ) ) ) { return false ; } for ( int i = 1 ; i < len ; i ++ ) { if ( ! XmlName . isNameTrail ( str . charAt ( i ) ) ) { return false ; } } } return true ; } } public static final XmlName THE_INSTANCE = new XmlName ( ) ; private XmlName ( ) { } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { if ( ! isName ( literal ) ) { throw newDatatypeException ( "Not a valid XML 1.0 name." ) ; } } @ Override public String getName ( ) { return "XML name" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
