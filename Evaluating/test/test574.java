public final class BrowserExtensionLoader { private static List < IConfigurationElement > browserList = null ; private static List < String > allBrowsers = null ; private static List < IConfigurationElement > showList = new ArrayList < IConfigurationElement > ( ) ; private static IPropertyChangeListener propertyChangeListener = new IPropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent event ) { if ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE . equals ( event . getProperty ( ) ) ) { computeShowList ( ) ; } } } ; private static String OS = Platform . getOS ( ) ; private BrowserExtensionLoader ( ) { } public static String getBrowserLabel ( IConfigurationElement browserElement ) { String label = null ; boolean found = false ; IConfigurationElement [ ] ce = browserElement . getChildren ( UnifiedEditorsPlugin . LABEL_NODE ) ; for ( int k = 0 ; k < ce . length && ! found ; k ++ ) { if ( ce [ k ] . getAttribute ( UnifiedEditorsPlugin . OS_ATTR ) != null && ce [ k ] . getAttribute ( UnifiedEditorsPlugin . VALUE_ATTR ) != null ) { if ( OS . equals ( ce [ k ] . getAttribute ( UnifiedEditorsPlugin . OS_ATTR ) ) ) { label = ce [ k ] . getAttribute ( UnifiedEditorsPlugin . VALUE_ATTR ) ; found = true ; } } } return label ; } private static void computeShowList ( ) { showList . clear ( ) ; String browserString = CSSPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE ) ; String [ ] browsers_names = browserString . split ( "," ) ; IConfigurationElement safari = null ; IConfigurationElement element ; int size = browserList . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { element = browserList . get ( i ) ; String name = getBrowserLabel ( element ) ; if ( safari == null && "Safari" . equals ( name ) ) { safari = element ; } if ( name != null ) { boolean show = false ; for ( int k = 0 ; k < browsers_names . length && ! show ; k ++ ) { if ( name . equals ( browsers_names [ k ] ) ) { show = true ; } } if ( show ) { showList . add ( element ) ; } } } if ( OS . equals ( Platform . OS_MACOSX ) ) { if ( showList . size ( ) == 1 ) { element = showList . get ( 0 ) ; IPreferenceStore store = CSSPlugin . getDefault ( ) . getPreferenceStore ( ) ; store . removePropertyChangeListener ( propertyChangeListener ) ; if ( getBrowserLabel ( element ) . equals ( "Firefox" ) ) { if ( safari != null ) { showList . add ( 0 , safari ) ; store . setValue ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE , browserString + ",Safari" ) ; } else { showList . clear ( ) ; store . setValue ( IPreferenceConstants . CSSEDITOR_BROWSER_PREVIEW_PREFERENCE , "" ) ; } } store . addPropertyChangeListener ( propertyChangeListener ) ; } } } public static List < IConfigurationElement > loadBrowsers ( ) { if ( browserList == null ) { browserList = new ArrayList < IConfigurationElement > ( ) ; IExtensionRegistry reg = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = reg . getExtensionPoint ( UnifiedEditorsPlugin . BROWSER_EXTENSION_POINT ) ; IExtension [ ] extensions = ep . getExtensions ( ) ; CSSPlugin . getDefault ( ) . getPreferenceStore ( ) . addPropertyChangeListener ( propertyChangeListener ) ; IConfigurationElement [ ] ce ; String browserClass ; String browserName ; for ( int i = 0 ; i < extensions . length ; i ++ ) { ce = extensions [ i ] . getConfigurationElements ( ) ; for ( int j = 0 ; j < ce . length ; j ++ ) { browserClass = ce [ j ] . getAttribute ( UnifiedEditorsPlugin . CLASS_ATTR ) ; browserName = getBrowserLabel ( ce [ j ] ) ; if ( browserClass != null && browserName != null ) { browserList . add ( ce [ j ] ) ; } } } Collections . sort ( browserList , new Comparator < IConfigurationElement > ( ) { public int compare ( IConfigurationElement o1 , IConfigurationElement o2 ) { String name1 = getBrowserLabel ( o1 ) ; String name2 = getBrowserLabel ( o2 ) ; if ( name1 != null && name2 != null ) { if ( Platform . getOS ( ) . equals ( Platform . OS_MACOSX ) ) { return name2 . compareTo ( name1 ) ; } return name1 . compareTo ( name2 ) ; } return 0 ; } } ) ; computeShowList ( ) ; } return showList ; } public static List < String > getAllBrowserLabels ( ) { if ( allBrowsers == null ) { allBrowsers = new ArrayList < String > ( ) ; IExtensionRegistry reg = Platform . getExtensionRegistry ( ) ; IExtensionPoint ep = reg . getExtensionPoint ( UnifiedEditorsPlugin . BROWSER_EXTENSION_POINT ) ; IExtension [ ] extensions = ep . getExtensions ( ) ; IConfigurationElement [ ] ce ; String browserClass ; String browserName ; for ( int i = 0 ; i < extensions . length ; i ++ ) { ce = extensions [ i ] . getConfigurationElements ( ) ; for ( int j = 0 ; j < ce . length ; j ++ ) { browserClass = ce [ j ] . getAttribute ( UnifiedEditorsPlugin . CLASS_ATTR ) ; browserName = BrowserExtensionLoader . getBrowserLabel ( ce [ j ] ) ; if ( browserClass != null && browserName != null ) { allBrowsers . add ( browserName ) ; } } } Collections . sort ( allBrowsers , new Comparator < String > ( ) { public int compare ( String name1 , String name2 ) { if ( name1 != null && name2 != null ) { return name1 . compareTo ( name2 ) ; } return 0 ; } } ) ; } return allBrowsers ; } } 