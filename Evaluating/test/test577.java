public class CSSASTHandler extends UnifiedReductionHandler < CSSParseNode > { private List < CSSParseNode > _statements ; public CSSASTHandler ( ) { super ( ) ; this . _statements = new ArrayList < CSSParseNode > ( ) ; } public void afterParse ( IParseState parseState , IParseNode parentNode ) { if ( parentNode != null ) { for ( CSSParseNode node : this . _statements ) { parentNode . appendChild ( node ) ; } } this . _statements . clear ( ) ; super . afterParse ( parseState , parentNode ) ; } private CSSTermNode createTermNode ( IReductionContext context , Lexeme primitive ) { CSSTermNode result = ( CSSTermNode ) this . createNode ( CSSParseNodeTypes . TERM , primitive ) ; result . setAttribute ( "value" , primitive . getText ( ) ) ; return result ; } public Object onAddAttributeSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSTextNode component = ( CSSTextNode ) nodes [ 1 ] ; ParseFragment fragment = ( ParseFragment ) nodes [ 0 ] ; fragment . appendChild ( component ) ; return fragment ; } public Object onAddDeclaration ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSListNode declarations = ( CSSListNode ) nodes [ 0 ] ; CSSDeclarationNode declaration = ( CSSDeclarationNode ) nodes [ 2 ] ; declarations . appendChild ( declaration ) ; return declarations ; } public Object onAddEmptyDeclaration ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSListNode declarations = ( CSSListNode ) nodes [ 0 ] ; declarations . appendChild ( CSSParseNode . Empty ) ; return declarations ; } public Object onAddFunctionExpression ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSTermNode function = ( CSSTermNode ) nodes [ 1 ] ; function . setAttribute ( "joining-operator" , " " ) ; CSSExprNode expression = ( CSSExprNode ) nodes [ 0 ] ; expression . appendChild ( function ) ; return expression ; } public Object onAddList ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSListNode list = ( CSSListNode ) nodes [ 0 ] ; Lexeme identifier = ( Lexeme ) nodes [ 2 ] ; CSSTextNode medium = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , identifier ) ; list . appendChild ( medium ) ; return list ; } public Object onAddPrimitiveExpression ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme primitive = ( Lexeme ) nodes [ 1 ] ; CSSTermNode term = this . createTermNode ( context , primitive ) ; term . setAttribute ( "joining-operator" , " " ) ; CSSExprNode expression = ( CSSExprNode ) nodes [ 0 ] ; expression . appendChild ( term ) ; return expression ; } public Object onAddSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSListNode selectors = ( CSSListNode ) nodes [ 0 ] ; CSSSelectorNode selector = ( CSSSelectorNode ) nodes [ 2 ] ; selectors . appendChild ( selector ) ; return selectors ; } public Object onAddSeparatorFunctionExpression ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme separator = ( Lexeme ) nodes [ 1 ] ; CSSTermNode function = ( CSSTermNode ) nodes [ 2 ] ; function . setAttribute ( "joining-operator" , separator . getText ( ) ) ; CSSExprNode expression = ( CSSExprNode ) nodes [ 0 ] ; expression . appendChild ( function ) ; return expression ; } public Object onAddSeparatorPrimitiveExpression ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme separator = ( Lexeme ) nodes [ 1 ] ; Lexeme primitive = ( Lexeme ) nodes [ 2 ] ; CSSTermNode term = this . createTermNode ( context , primitive ) ; term . setAttribute ( "joining-operator" , separator . getText ( ) ) ; CSSExprNode expression = ( CSSExprNode ) nodes [ 0 ] ; expression . appendChild ( term ) ; return expression ; } public Object onAddSimpleCombinedSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme combinator = ( Lexeme ) nodes [ 1 ] ; CSSTextNode combinatorNode = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , combinator ) ; CSSSimpleSelectorNode simpleSelector = ( CSSSimpleSelectorNode ) nodes [ 2 ] ; simpleSelector . appendChild ( combinatorNode ) ; CSSSelectorNode selector = ( CSSSelectorNode ) nodes [ 0 ] ; selector . appendChild ( simpleSelector ) ; return selector ; } public Object onAddSimpleSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSSimpleSelectorNode simpleSelector = ( CSSSimpleSelectorNode ) nodes [ 1 ] ; simpleSelector . appendChild ( CSSParseNode . Empty ) ; CSSSelectorNode selector = ( CSSSelectorNode ) nodes [ 0 ] ; selector . appendChild ( simpleSelector ) ; return selector ; } public Object onAddStatement ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSParseNode statement = ( CSSParseNode ) nodes [ 1 ] ; this . _statements . add ( statement ) ; return this . _statements ; } public Object onAttributeExistsSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme name = ( Lexeme ) nodes [ 1 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 2 ] ; String text = "[" + name . getText ( ) + "]" ; CSSTextNode result = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , lbracket ) ; result . setText ( text ) ; result . includeLexemeInRange ( rbracket ) ; return result ; } public Object onAttributeSelector ( IReductionContext context ) { Lexeme selector = ( Lexeme ) context . getNode ( 0 ) ; CSSTextNode result = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , selector ) ; result . setText ( selector . getText ( ) ) ; return result ; } public Object onAttributeSelectors ( IReductionContext context ) { ParseFragment attributeSelectors = ( ParseFragment ) context . getNode ( 0 ) ; CSSListNode components = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; components . setListName ( "components" ) ; components . appendChild ( attributeSelectors ) ; CSSSimpleSelectorNode result = ( CSSSimpleSelectorNode ) this . createNode ( CSSParseNodeTypes . SIMPLE_SELECTOR , attributeSelectors . getStartingLexeme ( ) ) ; result . appendChild ( components ) ; return result ; } public Object onAttributeValueExistsSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme lbracket = ( Lexeme ) nodes [ 0 ] ; Lexeme name = ( Lexeme ) nodes [ 1 ] ; Lexeme operator = ( Lexeme ) nodes [ 2 ] ; Lexeme test = ( Lexeme ) nodes [ 3 ] ; Lexeme rbracket = ( Lexeme ) nodes [ 4 ] ; StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( "[" ) ; buffer . append ( name . getText ( ) ) ; buffer . append ( operator . getText ( ) ) ; buffer . append ( test . getText ( ) ) ; buffer . append ( "]" ) ; CSSTextNode result = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , lbracket ) ; result . setText ( buffer . toString ( ) ) ; result . includeLexemeInRange ( rbracket ) ; return result ; } public Object onAtWord ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme atLexeme = ( Lexeme ) nodes [ 0 ] ; CSSParseNode result = this . createNode ( CSSParseNodeTypes . AT_RULE , atLexeme ) ; return result ; } public Object onCharSet ( IReductionContext context ) { Object [ ] objects = context . getNodes ( ) ; Lexeme keyword = ( Lexeme ) objects [ 0 ] ; Lexeme name = ( Lexeme ) objects [ 1 ] ; Lexeme semicolon = ( Lexeme ) objects [ 2 ] ; CSSTextNode nameNode = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , name ) ; CSSCharSetNode result = ( CSSCharSetNode ) this . createNode ( CSSParseNodeTypes . CHAR_SET , keyword ) ; result . appendChild ( nameNode ) ; result . includeLexemeInRange ( semicolon ) ; return result ; } public Object onDeclaration ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme identifier = ( Lexeme ) nodes [ 0 ] ; CSSExprNode expression = ( CSSExprNode ) nodes [ 2 ] ; CSSDeclarationNode result = ( CSSDeclarationNode ) this . createNode ( CSSParseNodeTypes . DECLARATION , identifier ) ; result . setAttribute ( "name" , identifier . getText ( ) ) ; result . appendChild ( expression ) ; return result ; } public Object onEmptyDeclaration ( IReductionContext context ) { CSSListNode result = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; result . appendChild ( CSSParseNode . Empty ) ; result . setListName ( "properties" ) ; result . setDelimiter ( "\n" ) ; return result ; } public Object onFirstAttributeSelector ( IReductionContext context ) { CSSTextNode component = ( CSSTextNode ) context . getNode ( 0 ) ; ParseFragment result = new ParseFragment ( ) ; result . appendChild ( component ) ; return result ; } public Object onFirstDeclaration ( IReductionContext context ) { CSSDeclarationNode declaration = ( CSSDeclarationNode ) context . getNode ( 0 ) ; CSSListNode result = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; result . appendChild ( declaration ) ; result . setListName ( "properties" ) ; result . setDelimiter ( "\n" ) ; return result ; } public Object onFirstExpression ( IReductionContext context ) { CSSTermNode term = ( CSSTermNode ) context . getNode ( 0 ) ; CSSExprNode result = ( CSSExprNode ) this . createNode ( CSSParseNodeTypes . EXPR , term . getStartingLexeme ( ) ) ; result . appendChild ( term ) ; return result ; } public Object onFirstList ( IReductionContext context ) { Lexeme identifier = ( Lexeme ) context . getNode ( 0 ) ; CSSListNode list = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , identifier ) ; CSSTextNode medium = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , identifier ) ; list . setDelimiter ( ", " ) ; list . appendChild ( medium ) ; return list ; } public Object onFirstSelector ( IReductionContext context ) { CSSSelectorNode selector = ( CSSSelectorNode ) context . getNode ( 0 ) ; CSSListNode result = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , selector . getStartingLexeme ( ) ) ; result . appendChild ( selector ) ; result . setListName ( "selectors" ) ; return result ; } public Object onFirstSimpleSelector ( IReductionContext context ) { CSSSimpleSelectorNode selector = ( CSSSimpleSelectorNode ) context . getNode ( 0 ) ; selector . appendChild ( CSSParseNode . Empty ) ; CSSSelectorNode result = ( CSSSelectorNode ) this . createNode ( CSSParseNodeTypes . SELECTOR , selector . getStartingLexeme ( ) ) ; result . appendChild ( selector ) ; return result ; } public Object onFirstStatement ( IReductionContext context ) { CSSParseNode statement = ( CSSParseNode ) context . getNode ( 0 ) ; this . _statements . add ( statement ) ; return this . _statements ; } public Object onFunction ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; CSSExprNode args = ( CSSExprNode ) nodes [ 1 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 2 ] ; CSSTermNode result = createTermNode ( context , keyword ) ; result . appendChild ( args ) ; result . includeLexemeInRange ( rcurly ) ; return result ; } public Object onImport ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme importLexeme = ( Lexeme ) nodes [ 0 ] ; Lexeme nameLexeme = ( Lexeme ) nodes [ 1 ] ; Lexeme semicolon = ( Lexeme ) nodes [ 2 ] ; CSSImportNode result = ( CSSImportNode ) this . createNode ( CSSParseNodeTypes . IMPORT , importLexeme ) ; result . setAttribute ( "name" , nameLexeme . getText ( ) ) ; result . includeLexemeInRange ( semicolon ) ; return result ; } public Object onImportantDeclaration ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme identifier = ( Lexeme ) nodes [ 0 ] ; CSSExprNode expression = ( CSSExprNode ) nodes [ 2 ] ; Lexeme important = ( Lexeme ) nodes [ 3 ] ; CSSDeclarationNode result = ( CSSDeclarationNode ) this . createNode ( CSSParseNodeTypes . DECLARATION , identifier ) ; result . setAttribute ( "name" , identifier . getText ( ) ) ; result . setAttribute ( "status" , important . getText ( ) ) ; result . appendChild ( expression ) ; result . includeLexemeInRange ( important ) ; return result ; } public Object onImportList ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme importLexeme = ( Lexeme ) nodes [ 0 ] ; Lexeme nameLexeme = ( Lexeme ) nodes [ 1 ] ; CSSListNode list = ( CSSListNode ) nodes [ 2 ] ; Lexeme semicolon = ( Lexeme ) nodes [ 3 ] ; CSSImportNode result = ( CSSImportNode ) this . createNode ( CSSParseNodeTypes . IMPORT , importLexeme ) ; result . setAttribute ( "name" , nameLexeme . getText ( ) ) ; result . appendChild ( list ) ; result . includeLexemeInRange ( semicolon ) ; return result ; } public Object onMedia ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; Lexeme identifier = ( Lexeme ) nodes [ 1 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 3 ] ; CSSListNode media = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; media . setDelimiter ( ", " ) ; CSSMediumNode medium = ( CSSMediumNode ) this . createNode ( CSSParseNodeTypes . MEDIUM , identifier ) ; media . appendChild ( medium ) ; CSSMediaNode result = ( CSSMediaNode ) this . createNode ( CSSParseNodeTypes . MEDIA , keyword ) ; result . includeLexemeInRange ( rcurly ) ; result . appendChild ( media ) ; result . appendChild ( CSSParseNode . Empty ) ; return result ; } public Object onPage ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 2 ] ; CSSListNode declarations = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; declarations . setDelimiter ( "\n" ) ; CSSPageNode result = ( CSSPageNode ) this . createNode ( CSSParseNodeTypes . PAGE , keyword ) ; result . appendChild ( declarations ) ; result . includeLexemeInRange ( rcurly ) ; return result ; } public Object onPageDeclaration ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; CSSListNode declarations = ( CSSListNode ) nodes [ 2 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 3 ] ; CSSPageNode result = ( CSSPageNode ) this . createNode ( CSSParseNodeTypes . PAGE , keyword ) ; result . appendChild ( declarations ) ; result . includeLexemeInRange ( rcurly ) ; return result ; } public Object onPlusMinusTerm ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme plusMinus = ( Lexeme ) nodes [ 0 ] ; Lexeme primitive = ( Lexeme ) nodes [ 1 ] ; CSSTermNode result = ( CSSTermNode ) this . createNode ( CSSParseNodeTypes . TERM , plusMinus ) ; result . setAttribute ( "operator" , plusMinus . getText ( ) ) ; result . setAttribute ( "value" , primitive . getText ( ) ) ; return result ; } public Object onPseudoPage ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme keyword = ( Lexeme ) nodes [ 0 ] ; Lexeme identifier = ( Lexeme ) nodes [ 2 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 4 ] ; CSSListNode declarations = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; declarations . setDelimiter ( "\n" ) ; CSSPageNode result = ( CSSPageNode ) this . createNode ( CSSParseNodeTypes . PAGE , keyword ) ; result . setAttribute ( "name" , identifier . getText ( ) ) ; result . appendChild ( declarations ) ; result . includeLexemeInRange ( rcurly ) ; return result ; } public Object onPseudoSelector ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme colon = ( Lexeme ) nodes [ 0 ] ; Lexeme name = ( Lexeme ) nodes [ 1 ] ; CSSTextNode result = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , colon ) ; result . setText ( Messages . CSSASTHandler_29 + name . getText ( ) ) ; result . includeLexemeInRange ( name ) ; return result ; } public Object onPseudoSelectorFunction ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme colon = ( Lexeme ) nodes [ 0 ] ; CSSTermNode function = ( CSSTermNode ) nodes [ 1 ] ; int startingIndex = this . lexemes . getLexemeIndex ( function . getStartingLexeme ( ) ) ; int endingIndex = this . lexemes . getLexemeIndex ( function . getEndingLexeme ( ) ) ; StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( Messages . CSSASTHandler_30 ) ; for ( int i = startingIndex ; i <= endingIndex ; i ++ ) { buffer . append ( this . lexemes . get ( i ) . getText ( ) ) ; } CSSTextNode result = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , colon ) ; result . setText ( buffer . toString ( ) ) ; result . includeLexemeInRange ( function . getEndingLexeme ( ) ) ; return result ; } public Object onRule ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSListNode selectors = ( CSSListNode ) nodes [ 0 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 2 ] ; CSSListNode declarations = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; declarations . setListName ( Messages . CSSASTHandler_31 ) ; CSSRuleSetNode result = ( CSSRuleSetNode ) this . createNode ( CSSParseNodeTypes . RULE_SET , selectors . getStartingLexeme ( ) ) ; result . appendChild ( selectors ) ; result . appendChild ( declarations ) ; result . includeLexemeInRange ( rcurly ) ; return result ; } public Object onRuleDeclarations ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; CSSListNode selectors = ( CSSListNode ) nodes [ 0 ] ; CSSListNode declarations = ( CSSListNode ) nodes [ 2 ] ; Lexeme rcurly = ( Lexeme ) nodes [ 3 ] ; CSSRuleSetNode result = ( CSSRuleSetNode ) this . createNode ( CSSParseNodeTypes . RULE_SET , selectors . getStartingLexeme ( ) ) ; result . appendChild ( selectors ) ; result . appendChild ( declarations ) ; result . includeLexemeInRange ( rcurly ) ; return result ; } public Object onTerm ( IReductionContext context ) { Lexeme primitive = ( Lexeme ) context . getNode ( 0 ) ; CSSTermNode result = createTermNode ( context , primitive ) ; return result ; } public Object onTypeAndAttributeSelectors ( IReductionContext context ) { Object [ ] nodes = context . getNodes ( ) ; Lexeme selector = ( Lexeme ) nodes [ 0 ] ; ParseFragment attributeSelectors = ( ParseFragment ) nodes [ 1 ] ; CSSTextNode component = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , selector ) ; CSSListNode components = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; components . setListName ( Messages . CSSASTHandler_32 ) ; components . appendChild ( component ) ; components . appendChild ( attributeSelectors ) ; CSSSimpleSelectorNode result = ( CSSSimpleSelectorNode ) this . createNode ( CSSParseNodeTypes . SIMPLE_SELECTOR , selector ) ; result . appendChild ( components ) ; return result ; } public Object onTypeOrUniversalSelector ( IReductionContext context ) { Lexeme selector = ( Lexeme ) context . getNode ( 0 ) ; CSSTextNode component = ( CSSTextNode ) this . createNode ( CSSParseNodeTypes . TEXT , selector ) ; CSSListNode components = ( CSSListNode ) this . createNode ( CSSParseNodeTypes . LIST , null ) ; components . setListName ( Messages . CSSASTHandler_33 ) ; components . appendChild ( component ) ; CSSSimpleSelectorNode result = ( CSSSimpleSelectorNode ) this . createNode ( CSSParseNodeTypes . SIMPLE_SELECTOR , selector ) ; result . appendChild ( components ) ; return result ; } public void reduce ( IReductionContext context ) { String actionName = context . getAction ( ) ; Object result = null ; Object [ ] nodes = this . pop ( context . getNodeCount ( ) ) ; context . setNodes ( nodes ) ; if ( actionName != null && actionName . length ( ) > 0 ) { CSSHandlerAction action = CSSHandlerAction . get ( actionName ) ; if ( action == null ) { throw new IllegalArgumentException ( Messages . CSSASTHandler_34 + actionName ) ; } switch ( action ) { case ADD_ATTRIBUTE_SELECTOR : result = this . onAddAttributeSelector ( context ) ; break ; case ADD_DECLARATION : result = this . onAddDeclaration ( context ) ; break ; case ADD_EMPTY_DECLARATION : result = this . onAddEmptyDeclaration ( context ) ; break ; case ADD_FUNCTION_EXPRESSION : result = this . onAddFunctionExpression ( context ) ; break ; case ADD_LIST : result = this . onAddList ( context ) ; break ; case ADD_PRIMITIVE_EXPRESSION : result = this . onAddPrimitiveExpression ( context ) ; break ; case ADD_SELECTOR : result = this . onAddSelector ( context ) ; break ; case ADD_SEPARATOR_PRIMITIVE_EXPRESSION : result = this . onAddSeparatorPrimitiveExpression ( context ) ; break ; case ADD_SEPARATOR_FUNCTION_EXPRESSION : result = this . onAddSeparatorFunctionExpression ( context ) ; break ; case ADD_SIMPLE_SELECTOR : result = this . onAddSimpleSelector ( context ) ; break ; case ADD_SIMPLE_COMBINED_SELECTOR : result = this . onAddSimpleCombinedSelector ( context ) ; break ; case ADD_STATEMENT : result = this . onAddStatement ( context ) ; break ; case ATTRIBUTE_EXISTS_SELECTOR : result = this . onAttributeExistsSelector ( context ) ; break ; case ATTRIBUTE_SELECTOR : result = this . onAttributeSelector ( context ) ; break ; case ATTRIBUTE_SELECTORS : result = this . onAttributeSelectors ( context ) ; break ; case ATTRIBUTE_VALUE_EXISTS_SELECTOR : result = this . onAttributeValueExistsSelector ( context ) ; break ; case AT_WORD : result = this . onAtWord ( context ) ; break ; case CHARSET : result = this . onCharSet ( context ) ; break ; case DECLARATION : result = this . onDeclaration ( context ) ; break ; case EMPTY_DECLARATION : result = this . onEmptyDeclaration ( context ) ; break ; case FIRST_ATTRIBUTE_SELECTOR : result = this . onFirstAttributeSelector ( context ) ; break ; case FIRST_LIST : result = this . onFirstList ( context ) ; break ; case FIRST_DECLARATION : result = this . onFirstDeclaration ( context ) ; break ; case FIRST_EXPRESSION : result = this . onFirstExpression ( context ) ; break ; case FIRST_SELECTOR : result = this . onFirstSelector ( context ) ; break ; case FIRST_SIMPLE_SELECTOR : result = this . onFirstSimpleSelector ( context ) ; break ; case FIRST_STATEMENT : result = this . onFirstStatement ( context ) ; break ; case FUNCTION : result = this . onFunction ( context ) ; break ; case IMPORT : result = this . onImport ( context ) ; break ; case IMPORTANT_DECLARATION : result = this . onImportantDeclaration ( context ) ; break ; case IMPORT_LIST : result = this . onImportList ( context ) ; break ; case MEDIA : result = this . onMedia ( context ) ; break ; case PAGE : result = this . onPage ( context ) ; break ; case PAGE_DECLARATION : result = this . onPageDeclaration ( context ) ; break ; case PLUS_MINUS_TERM : result = this . onPlusMinusTerm ( context ) ; break ; case PSEUDO_PAGE : result = this . onPseudoPage ( context ) ; break ; case PSEUDO_SELECTOR : result = this . onPseudoSelector ( context ) ; break ; case PSEUDO_SELECTOR_FUNCTION : result = this . onPseudoSelectorFunction ( context ) ; break ; case RULE : result = this . onRule ( context ) ; break ; case RULE_DECLARATIONS : result = this . onRuleDeclarations ( context ) ; break ; case TERM : result = this . onTerm ( context ) ; break ; case TYPE_OR_UNIVERSAL_SELECTOR : result = this . onTypeOrUniversalSelector ( context ) ; break ; case TYPE_AND_ATTRIBUTE_SELECTORS : result = this . onTypeAndAttributeSelectors ( context ) ; break ; default : throw new IllegalArgumentException ( Messages . CSSASTHandler_35 + actionName ) ; } } else { if ( nodes . length > 0 ) { result = nodes [ 0 ] ; } } this . push ( result ) ; } } 