<<<<<<< HEAD
public class MysqliStatement extends JdbcStatementResource { private static final Logger log = Logger . getLogger ( MysqliStatement . class . getName ( ) ) ; MysqliStatement ( Mysqli conn ) { super ( conn ) ; } public int getaffected_rows ( Env env ) { return affected_rows ( env ) ; } public int affected_rows ( Env env ) { try { return validateConnection ( ) . getAffectedRows ( ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return - 1 ; } } public boolean bind_param ( Env env , StringValue types , @ Reference Value [ ] params ) { try { return bindParams ( env , types . toString ( ) , params ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } } public boolean bind_result ( Env env , @ Reference Value [ ] outParams ) { try { return bindResults ( env , outParams ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } } public boolean close ( Env env ) { try { super . close ( ) ; return true ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } } public Value data_seek ( Env env , int offset ) { try { if ( dataSeek ( offset ) ) return NullValue . NULL ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } return BooleanValue . FALSE ; } public int errno ( ) { try { return errorCode ( ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return - 1 ; } } public int geterrno ( ) { return errno ( ) ; } public StringValue error ( Env env ) { try { return env . createString ( errorMessage ( ) , "UTF-8" ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return null ; } } @ ReturnNullAsFalse public StringValue geterror ( Env env ) { return error ( env ) ; } public boolean execute ( Env env ) { try { return super . execute ( env ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } } public Value fetch ( Env env ) { try { return super . fetch ( env ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; env . error ( e ) ; return BooleanValue . FALSE ; } } public void free_result ( Env env ) { try { freeResult ( ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } public Value getnum_rows ( Env env ) { return num_rows ( env ) ; } public Value num_rows ( Env env ) { try { if ( getResultSet ( ) != null ) return LongValue . create ( JdbcResultResource . getNumRows ( getResultSet ( ) ) ) ; else return BooleanValue . FALSE ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return BooleanValue . FALSE ; } } public int getparam_count ( Env env ) { return param_count ( env ) ; } public int param_count ( Env env ) { try { return paramCount ( ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return - 1 ; } } public boolean prepare ( Env env , StringValue query ) { try { return super . prepare ( env , query ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return false ; } } public boolean reset ( Env env ) { return true ; } @ ReturnNullAsFalse public MysqliResult result_metadata ( Env env ) { try { if ( getResultSet ( ) != null ) { return new MysqliResult ( env , getMetaData ( ) , ( Mysqli ) validateConnection ( ) ) ; } else return null ; } catch ( Exception e ) { throw new QuercusModuleException ( e ) ; } } public boolean send_long_data ( Env env , int paramNumber , String data ) { throw new UnimplementedException ( "mysqli_stmt_send_long_data" ) ; } public StringValue getsqlstate ( Env env ) { return sqlstate ( env ) ; } public StringValue sqlstate ( Env env ) { int code = errno ( ) ; return env . createString ( Mysqli . lookupSqlstate ( code ) , "UTF-8" ) ; } public boolean store_result ( Env env ) { return true ; } public int getfield_count ( Env env ) { return field_count ( env ) ; } public int field_count ( Env env ) { try { return getFieldCount ( ) ; } catch ( Exception e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; return - 1 ; } } public Value getinsert_id ( Env env ) { return insert_id ( env ) ; } public Value insert_id ( Env env ) { return ( ( Mysqli ) validateConnection ( ) ) . insert_id ( env ) ; } } 
=======
public class CompactSchemaReader extends SchemaReaderImpl { private static final SchemaReader theInstance = new CompactSchemaReader ( ) ; private CompactSchemaReader ( ) { } public static SchemaReader getInstance ( ) { return theInstance ; } protected Parseable < Pattern , NameClass , Locator , VoidValue , CommentListImpl , AnnotationsImpl > createParseable ( SAXSource source , SAXResolver saxResolver , ErrorHandler eh , PropertyMap properties ) { return new CompactParseable < Pattern , NameClass , Locator , VoidValue , CommentListImpl , AnnotationsImpl > ( SAX . createInput ( source . getInputSource ( ) ) , saxResolver . getResolver ( ) , eh ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
