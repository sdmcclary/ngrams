<<<<<<< HEAD
public class EditGuideDialog extends BasicGuideDialog { private static final Logger LOG = Logger . getLogger ( EditGuideDialog . class . getName ( ) ) ; private JSpinner tfPosition = new JSpinner ( ) ; private JCheckBox chAutoFeedsDiscovery ; private JList iconsList = new JList ( ) ; private static SpinnerNumberModel positionModel = new SpinnerNumberModel ( 1 , 1 , 1 , - 1 ) ; private String keyToSelect ; private IGuide guide ; public EditGuideDialog ( Frame owner , boolean aPublishingAvailable , int aPublishingLimit , boolean aPublishingLimitReached ) { super ( owner , Strings . message ( "edit.guide.dialog.title" ) , aPublishingAvailable , aPublishingLimit , aPublishingLimitReached ) ; enableEvents ( AWTEvent . WINDOW_EVENT_MASK ) ; chAutoFeedsDiscovery = ComponentsFactory . createCheckBox ( Strings . message ( "edit.guide.scan.new.articles" ) ) ; } protected void processWindowEvent ( WindowEvent e ) { if ( e . getID ( ) == WindowEvent . WINDOW_OPENED ) { tfTitle . requestFocusInWindow ( ) ; } } protected JComponent buildContent ( ) { JPanel content = new JPanel ( new BorderLayout ( ) ) ; content . add ( buildBody ( ) , BorderLayout . CENTER ) ; content . add ( buildButtonBarWithOKCancel ( ) , BorderLayout . SOUTH ) ; return content ; } protected JComponent buildHeader ( ) { return new HeaderPanelExt ( Strings . message ( "edit.guide.dialog.title" ) , Strings . message ( "edit.guide.dialog.header" ) ) ; } private JComponent buildBody ( ) { initComponents ( ) ; JTabbedPane pane = new JTabbedPane ( ) ; pane . addTab ( Strings . message ( "edit.guide.general" ) , buildGeneralTab ( ) ) ; pane . addTab ( Strings . message ( "guide.dialog.readinglists" ) , buildReadingListsTab ( ) ) ; pane . addTab ( Strings . message ( "guide.dialog.publishing" ) , buildPublishingTab ( ) ) ; if ( NotificationArea . isSupported ( ) ) { pane . addTab ( Strings . message ( "guide.dialog.notifications" ) , buildNotificationsTab ( ) ) ; } return pane ; } private JComponent buildGeneralTab ( ) { BBFormBuilder builder = new BBFormBuilder ( "p, 4dlu, 30dlu, 7dlu, p:grow" ) ; builder . setDefaultDialogBorder ( ) ; builder . append ( Strings . message ( "guide.dialog.title" ) , tfTitle , 3 ) ; builder . append ( Strings . message ( "edit.guide.general.position" ) , tfPosition , chAutoFeedsDiscovery ) ; builder . appendRelatedComponentsGapRow ( 2 ) ; builder . appendRow ( "70dlu:grow" ) ; builder . append ( Strings . message ( "edit.guide.general.icon" ) , 1 , CellConstraints . FILL , CellConstraints . TOP ) . setLabelFor ( iconsList ) ; builder . append ( new JScrollPane ( iconsList ) , 3 , CellConstraints . FILL , CellConstraints . FILL ) ; return builder . getPanel ( ) ; } private void initComponents ( ) { tfPosition . setModel ( positionModel ) ; iconsList . setModel ( model ) ; iconsList . setCellRenderer ( renderer ) ; iconsList . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; iconsList . setVisibleRowCount ( 0 ) ; iconsList . setLayoutOrientation ( JList . HORIZONTAL_WRAP ) ; if ( keyToSelect == null ) { iconsList . setSelectedIndex ( 0 ) ; } else { iconsList . setSelectedValue ( keyToSelect , true ) ; int selectedIndex = iconsList . getSelectedIndex ( ) ; if ( selectedIndex != - 1 ) iconsList . ensureIndexIsVisible ( selectedIndex ) ; } } public int getPosition ( ) { return positionModel . getNumber ( ) . intValue ( ) - 1 ; } public boolean isAutoFeedDiscovery ( ) { return chAutoFeedsDiscovery . isSelected ( ) ; } public void open ( GuidesSet set , IGuide aGuide ) { guide = aGuide ; String title = aGuide . getTitle ( ) ; Set presTitles = set . getGuidesTitles ( ) ; int position = set . indexOf ( aGuide ) ; String iconKey = aGuide . getIconKey ( ) ; boolean autoFeedDiscovery = aGuide . isAutoFeedsDiscovery ( ) ; ReadingList [ ] aReadingLists = aGuide instanceof StandardGuide ? ( ( StandardGuide ) aGuide ) . getReadingLists ( ) : null ; originalTitle = title ; setPresentTitles ( presTitles ) ; tfTitle . setText ( title ) ; positionModel . setMaximum ( presTitles . size ( ) ) ; positionModel . setValue ( new Integer ( position + 1 ) ) ; keyToSelect = ( iconKey == null ) ? "cg.default.icon" : iconKey ; chAutoFeedsDiscovery . setSelected ( autoFeedDiscovery ) ; setReadingLists ( aReadingLists ) ; chPublishingEnabled . setSelected ( aGuide . isPublishingEnabled ( ) ) ; tfPublishingTitle . setText ( aGuide . getPublishingTitle ( ) ) ; tfPublishingTags . setText ( aGuide . getPublishingTags ( ) ) ; chPublishingPublic . setSelected ( aGuide . isPublishingPublic ( ) ) ; setPublishingURL ( aGuide . getPublishingURL ( ) ) ; setLastPublishingDate ( aGuide . getLastPublishingTime ( ) ) ; vhPublishingRating . setValue ( aGuide . getPublishingRating ( ) + 1 ) ; chMobile . setSelected ( aGuide . isMobile ( ) ) ; boolean en = GlobalModel . SINGLETON . getUserPreferences ( ) . isNotificationsEnabled ( ) ; chAllowNotifications . setSelected ( guide . isNotificationsAllowed ( ) ) ; chAllowNotifications . setEnabled ( en ) ; super . openDialog ( set ) ; } protected IGuide getGuide ( ) { return guide ; } private void setLastPublishingDate ( long time ) { if ( time == - 1 ) { tfLastPublishingDate . setText ( Strings . message ( "guide.dialog.not.published.yet" ) ) ; } else { tfLastPublishingDate . setText ( DateUtils . dateToString ( new Date ( time ) ) ) ; } } private void setPublishingURL ( String url ) { if ( StringUtils . isEmpty ( url ) ) { btnCopyToClipboard . setEnabled ( false ) ; lnkPublishingURL . setText ( Strings . message ( "guide.dialog.not.published.yet" ) ) ; } else { btnCopyToClipboard . setEnabled ( true ) ; lnkPublishingURL . setText ( url ) ; try { lnkPublishingURL . setLink ( new URL ( url ) ) ; } catch ( MalformedURLException e ) { LOG . log ( Level . SEVERE , MessageFormat . format ( Strings . error ( "invalid.url.0" ) , url ) , e ) ; } } } public String getIconKey ( ) { return ( String ) iconsList . getSelectedValue ( ) ; } } 
=======
public class MatchablePatternImpl implements MatchablePattern { private final SchemaPatternBuilder spb ; private final Pattern start ; public MatchablePatternImpl ( SchemaPatternBuilder spb , Pattern start ) { this . spb = spb ; this . start = start ; } public Matcher createMatcher ( ) { return new PatternMatcher ( start , new ValidatorPatternBuilder ( spb ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
