public class SchemaElement { private static final Class < ? > [ ] enterSignature = new Class [ ] { String . class , String . class , String . class , Attributes . class } ; private static final Class < ? > [ ] exitSignature = new Class [ ] { String . class , String . class , String . class } ; private String _name ; private Schema _owningSchema ; private Map < String , SchemaElement > _transitions ; private Map < String , Integer > _attributes ; private List < String > _requiredAttributes ; private String _instanceAttributes ; private Method _onEnter ; private Method _onExit ; private boolean _hasText ; public SchemaElement ( Schema owningSchema , String name ) { if ( owningSchema == null ) { throw new IllegalArgumentException ( Messages . SchemaElement_Undefined_Owning_Schema ) ; } if ( name == null || name . length ( ) == 0 ) { throw new IllegalArgumentException ( Messages . SchemaElement_Undefined_Name ) ; } this . _owningSchema = owningSchema ; this . _name = name ; this . _transitions = new HashMap < String , SchemaElement > ( ) ; this . _attributes = new HashMap < String , Integer > ( ) ; this . _requiredAttributes = new ArrayList < String > ( ) ; } public String getName ( ) { return this . _name ; } public Method getOnEnterMethod ( ) { return this . _onEnter ; } public void setHasText ( boolean value ) { this . _hasText = value ; } public void setOnEnter ( String onEnterMethod ) throws SecurityException , NoSuchMethodException { Class < ? > handlerClass = this . _owningSchema . getHandlerClass ( ) ; if ( handlerClass != null ) { this . _onEnter = handlerClass . getMethod ( onEnterMethod , enterSignature ) ; } else { this . _onEnter = null ; } } public Method getOnExitMethod ( ) { return this . _onExit ; } public void setOnExit ( String onExitMethod ) throws SecurityException , NoSuchMethodException { Class < ? > handlerClass = this . _owningSchema . getHandlerClass ( ) ; if ( handlerClass != null ) { this . _onExit = handlerClass . getMethod ( onExitMethod , exitSignature ) ; } else { this . _onExit = null ; } } public SchemaElement [ ] getTransitionElements ( ) { Collection < SchemaElement > values = this . _transitions . values ( ) ; return values . toArray ( new SchemaElement [ values . size ( ) ] ) ; } public boolean hasAttribute ( String name ) { return ( this . _attributes . containsKey ( name ) ) ; } public boolean hasOnEnterMethod ( ) { return ( this . _onEnter != null ) ; } public boolean hasOnExitMethod ( ) { return ( this . _onExit != null ) ; } public boolean hasText ( ) { return this . _hasText ; } public boolean hasTransitions ( ) { return ( this . _transitions . size ( ) > 0 ) ; } public boolean isDeprecatedAttribute ( String name ) { boolean result = false ; if ( this . isValidAttribute ( name ) ) { int flags = this . _attributes . get ( name ) . intValue ( ) ; result = ( ( flags & AttributeUsage . DEPRECATED ) == AttributeUsage . DEPRECATED ) ; } return result ; } public boolean isOptionalAttribute ( String name ) { boolean result = false ; if ( this . isValidAttribute ( name ) ) { int flags = this . _attributes . get ( name ) . intValue ( ) ; result = ( ( flags & AttributeUsage . USAGE_MASK ) == AttributeUsage . OPTIONAL ) ; } return result ; } public boolean isRequiredAttribute ( String name ) { boolean result = false ; if ( this . isValidAttribute ( name ) ) { int flags = this . _attributes . get ( name ) . intValue ( ) ; result = ( ( flags & AttributeUsage . USAGE_MASK ) == AttributeUsage . REQUIRED ) ; } return result ; } public boolean isValidAttribute ( String name ) { return ( this . _attributes . containsKey ( name ) ) ; } public boolean isValidTransition ( String name ) { return this . _transitions . containsKey ( name ) ; } public void addAttribute ( String name , String usage ) { if ( name == null || name . length ( ) == 0 ) { throw new IllegalArgumentException ( Messages . SchemaElement_Undefined_Name ) ; } if ( this . hasAttribute ( name ) ) { String msg = MessageFormat . format ( Messages . SchemaElement_Attribute_already_defined , name , this . _name ) ; throw new IllegalArgumentException ( msg ) ; } int usageValue ; if ( usage != null ) { if ( usage . equals ( "required" ) ) { usageValue = AttributeUsage . REQUIRED ; } else if ( usage . equals ( "optional" ) ) { usageValue = AttributeUsage . OPTIONAL ; } else { String msg = MessageFormat . format ( Messages . SchemaElement_Not_valid_usage_attribute , usage ) ; throw new IllegalArgumentException ( msg ) ; } } else { usageValue = AttributeUsage . REQUIRED ; } this . _attributes . put ( name , new Integer ( usageValue ) ) ; if ( ( usageValue & AttributeUsage . USAGE_MASK ) == AttributeUsage . REQUIRED ) { this . _requiredAttributes . add ( name ) ; } } public void addTransition ( SchemaElement node ) { if ( node == null ) { throw new IllegalArgumentException ( Messages . SchemaElement_Undefined_Node ) ; } String nodeName = node . getName ( ) ; if ( this . isValidTransition ( nodeName ) ) { String msg = "A node name '" + nodeName + "' has already been added to " + this . _name ; throw new IllegalArgumentException ( msg ) ; } this . _transitions . put ( nodeName , node ) ; } public SchemaElement moveTo ( String name ) { return this . _transitions . get ( name ) ; } public void validateAttributes ( Attributes attributes ) throws SAXException { if ( attributes . getLength ( ) > 0 ) { this . _instanceAttributes = "" ; for ( int i = 0 ; i < attributes . getLength ( ) ; i ++ ) { String key = attributes . getLocalName ( i ) ; String value = attributes . getValue ( i ) ; this . _instanceAttributes += " " + key + "=\"" + value + "\"" ; } } for ( int i = 0 ; i < this . _requiredAttributes . size ( ) ; i ++ ) { String name = this . _requiredAttributes . get ( i ) ; String value = attributes . getValue ( name ) ; if ( value == null ) { SourceWriter writer = new SourceWriter ( ) ; writer . print ( "<" ) . print ( this . _name ) . print ( "> requires a '" ) . print ( name ) . println ( "' attribute" ) ; this . _owningSchema . buildErrorMessage ( writer , this . _name , attributes ) ; throw new SAXException ( writer . toString ( ) ) ; } } for ( int i = 0 ; i < attributes . getLength ( ) ; i ++ ) { String name = attributes . getLocalName ( i ) ; if ( this . _attributes . containsKey ( name ) == false ) { SourceWriter writer = new SourceWriter ( ) ; writer . println ( MessageFormat . format ( Messages . SchemaElement_Invalid_attribute_on_tag , name , this . _name ) ) ; this . _owningSchema . buildErrorMessage ( writer , this . _name , attributes ) ; throw new SAXException ( writer . toString ( ) ) ; } } } public String toString ( ) { String result = "<" + this . _name ; if ( this . _instanceAttributes != null ) { result += this . _instanceAttributes ; } if ( this . hasTransitions ( ) ) { result += ">" ; } else { result += "/>" ; } return result ; } } 