<<<<<<< HEAD
public class GenericServersView extends ViewPart { private final class DeleteServerConfirmDialog extends MessageDialog { private Button stopServer ; private boolean shouldStop ; private boolean mayStop ; private boolean askStopBeforeDelete ; private DeleteServerConfirmDialog ( Shell parentShell , String dialogTitle , Image dialogTitleImage , String dialogMessage , int dialogImageType , String [ ] dialogButtonLabels , int defaultIndex , boolean mayStop , boolean askStopBeforeDelete ) { super ( parentShell , dialogTitle , dialogTitleImage , dialogMessage , dialogImageType , dialogButtonLabels , defaultIndex ) ; this . mayStop = mayStop ; this . askStopBeforeDelete = askStopBeforeDelete ; } @ Override protected void createButtonsForButtonBar ( Composite parent ) { if ( askStopBeforeDelete ) { GridLayout ll = ( GridLayout ) parent . getLayout ( ) ; ll . numColumns ++ ; ll . makeColumnsEqualWidth = false ; GridData layoutData = ( GridData ) parent . getLayoutData ( ) ; layoutData . grabExcessHorizontalSpace = true ; layoutData . horizontalAlignment = SWT . FILL ; stopServer = new Button ( parent , SWT . CHECK ) ; stopServer . setText ( Messages . GenericServersView_STOP_SERVER_BEFORE_DELETING ) ; stopServer . setEnabled ( mayStop ) ; stopServer . setSelection ( mayStop ) ; stopServer . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { shouldStop = stopServer . getSelection ( ) ; } } ) ; GridData gridData = new GridData ( ) ; gridData . horizontalAlignment = SWT . LEFT ; gridData . grabExcessHorizontalSpace = true ; gridData . horizontalIndent = 5 ; stopServer . setLayoutData ( gridData ) ; } super . createButtonsForButtonBar ( parent ) ; } } private static final int MAX_SHOWN_SERVER_NAME = 15 ; public static final String ID = "com.aptana.ide.server.ui.serversView" ; private static final String ELLIPSIS = "..." ; private TreeViewer serverViewer ; private Action startAction ; private IContributionItem debugActionItem ; private IContributionItem profileActionItem ; private Action debugAction ; private Action profileAction ; private Action stopAction ; private Action restartAction ; private Action collapseAction ; private Action expandAction ; private IServerManagerListener externalServerRegistryListener ; private SuspendServerAction pauseAction ; private OpenLogAction openLog ; private OpenStatisticsAction openStats ; public GenericServersView ( ) { super ( ) ; } public void dispose ( ) { ServerCore . getServerManager ( ) . removeServerManagerListener ( externalServerRegistryListener ) ; super . dispose ( ) ; } public ISelection getSelection ( ) { return serverViewer . getSelection ( ) ; } public void createPartControl ( Composite parent ) { GridLayout gridLayout = new GridLayout ( ) ; gridLayout . marginWidth = 0 ; gridLayout . marginHeight = 0 ; parent . setLayout ( gridLayout ) ; createTableViewer ( parent ) ; createPopupMenu ( ) ; createToolbar ( ) ; ToolBarManager toolBarManager = ( ToolBarManager ) getViewSite ( ) . getActionBars ( ) . getToolBarManager ( ) ; final Image smallGlobe = ServerUIPlugin . getImageDescriptor ( "icons/server/small_globe.png" ) . createImage ( ) ; final Image jaxerImage = ServerUIPlugin . getImageDescriptor ( "icons/server/jaxer_decorator.gif" ) . createImage ( ) ; final ToolBar control = toolBarManager . getControl ( ) ; final ToolbarTooltip toolbarTooltip = new ToolbarTooltip ( control , "com.aptana.ide.server.ui.servers_context_view" ) { @ Override protected Composite createToolTipContentArea ( Event event , Composite parent ) { Composite sm = new Composite ( parent , SWT . NONE ) ; sm . setLayout ( GridLayoutFactory . fillDefaults ( ) . margins ( 10 , 10 ) . create ( ) ) ; FormText ts = new FormText ( sm , SWT . NONE ) ; ts . setImage ( "jaxer" , jaxerImage ) ; ts . setImage ( "web" , smallGlobe ) ; ts . setText ( Messages . GenericServersView_LEGEND , true , false ) ; ts . setLayoutData ( new GridData ( 320 , 75 ) ) ; return sm ; } } ; this . serverViewer . getControl ( ) . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { smallGlobe . dispose ( ) ; jaxerImage . dispose ( ) ; toolbarTooltip . deactivate ( ) ; } } ) ; TreeViewerSorter . bind ( serverViewer ) ; } private void createTableViewer ( Composite parent ) { serverViewer = new TreeViewer ( parent , SWT . SINGLE | SWT . FULL_SELECTION ) ; serverViewer . getTree ( ) . setLinesVisible ( true ) ; serverViewer . addTreeListener ( new ITreeViewerListener ( ) { public void treeExpanded ( TreeExpansionEvent event ) { Object server = event . getElement ( ) ; if ( server instanceof IServer ) { ServerUIPlugin . getDefault ( ) . getPreferenceStore ( ) . setValue ( IPreferenceConstants . COLLAPSE_SERVER + "." + ( ( IServer ) server ) . getId ( ) , false ) ; } updateCollapseAllAction ( ) ; } public void treeCollapsed ( TreeExpansionEvent event ) { Object server = event . getElement ( ) ; if ( server instanceof IServer ) { ServerUIPlugin . getDefault ( ) . getPreferenceStore ( ) . setValue ( IPreferenceConstants . COLLAPSE_SERVER + "." + ( ( IServer ) server ) . getId ( ) , true ) ; } updateCollapseAllAction ( ) ; } } ) ; PreferenceUtils . registerBackgroundColorPreference ( serverViewer . getControl ( ) , "com.aptana.ide.core.ui.background.color.serversView" ) ; PreferenceUtils . registerForegroundColorPreference ( serverViewer . getControl ( ) , "com.aptana.ide.core.ui.foreground.color.serversView" ) ; createTree ( ) ; } private void updateStartActions ( ) { boolean canDebug = false ; boolean canProfile = false ; IServer [ ] servers = ServerManager . getInstance ( ) . getServers ( ) ; if ( debugActionItem != null ) { for ( int i = 0 ; i < servers . length ; i ++ ) { IStatus status = servers [ i ] . canStart ( "debug" ) ; if ( status != null && status . isOK ( ) ) { canDebug = true ; break ; } } debugActionItem . setVisible ( canDebug ) ; } if ( profileActionItem != null ) { for ( int i = 0 ; i < servers . length ; i ++ ) { IStatus status = servers [ i ] . canStart ( "profile" ) ; if ( status != null && status . isOK ( ) ) { canProfile = true ; break ; } } profileActionItem . setVisible ( canProfile ) ; } } private void updateCollapseAllAction ( ) { UIJob updateActionState = new UIJob ( "" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( collapseAction != null ) { collapseAction . setEnabled ( serverViewer . getExpandedElements ( ) . length > 0 ) ; } return Status . OK_STATUS ; } } ; updateActionState . setPriority ( UIJob . INTERACTIVE ) ; updateActionState . setSystem ( true ) ; updateActionState . schedule ( 10 ) ; } private void updateExpandAllAction ( ) { UIJob updateActionState = new UIJob ( "" ) { public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( expandAction != null ) { IStructuredContentProvider contentProvider = ( IStructuredContentProvider ) serverViewer . getContentProvider ( ) ; Object [ ] elements = contentProvider . getElements ( serverViewer . getInput ( ) ) ; boolean atleastOneExpandable = false ; for ( Object element : elements ) { if ( serverViewer . isExpandable ( element ) ) { atleastOneExpandable = true ; break ; } } expandAction . setEnabled ( atleastOneExpandable ) ; } return Status . OK_STATUS ; } } ; updateActionState . setPriority ( UIJob . INTERACTIVE ) ; updateActionState . setSystem ( true ) ; updateActionState . schedule ( 10 ) ; } private void createToolbar ( ) { final IToolBarManager toolBarManager = getViewSite ( ) . getActionBars ( ) . getToolBarManager ( ) ; toolBarManager . add ( new Separator ( ) ) ; this . startAction = new StartServerAction ( serverViewer , "run" ) ; this . debugAction = new StartServerAction ( serverViewer , "debug" ) ; this . profileAction = new StartServerAction ( serverViewer , "profile" ) ; debugActionItem = new ActionContributionItem ( this . debugAction ) ; profileActionItem = new ActionContributionItem ( this . profileAction ) ; this . restartAction = new RestartServerAction ( serverViewer ) ; this . pauseAction = new SuspendServerAction ( serverViewer ) ; this . stopAction = new StopServerAction ( serverViewer ) ; this . openLog = new OpenLogAction ( serverViewer ) ; this . openStats = new OpenStatisticsAction ( serverViewer ) ; this . collapseAction = new Action ( ) { public void run ( ) { serverViewer . collapseAll ( ) ; updateCollapseAllAction ( ) ; } } ; this . collapseAction . setImageDescriptor ( CoreUIPlugin . getImageDescriptor ( "icons/collapse.gif" ) ) ; this . collapseAction . setToolTipText ( Messages . GenericServersView_TTP_Collapse ) ; this . expandAction = new Action ( ) { public void run ( ) { serverViewer . expandAll ( ) ; updateCollapseAllAction ( ) ; } } ; this . expandAction . setImageDescriptor ( CoreUIPlugin . getImageDescriptor ( "icons/expand.gif" ) ) ; this . expandAction . setToolTipText ( Messages . GenericServersView_TTP_Expand ) ; toolBarManager . add ( new GenericAddServerAction ( ) ) ; toolBarManager . add ( this . startAction ) ; toolBarManager . add ( debugActionItem ) ; toolBarManager . add ( profileActionItem ) ; toolBarManager . add ( this . restartAction ) ; toolBarManager . add ( this . pauseAction ) ; toolBarManager . add ( this . stopAction ) ; serverViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { public void selectionChanged ( SelectionChangedEvent event ) { updateToolbar ( toolBarManager ) ; } } ) ; externalServerRegistryListener = new IServerManagerListener ( ) { public void serversChanged ( final ServerManagerEvent event ) { Display . getDefault ( ) . asyncExec ( new Runnable ( ) { public void run ( ) { if ( serverViewer . getControl ( ) . isDisposed ( ) ) { return ; } if ( event . getKind ( ) == ServerManagerEvent . KIND_CHANGED ) { serverViewer . refresh ( event . getServer ( ) , true ) ; } else { serverViewer . refresh ( true ) ; if ( event . getKind ( ) == ServerManagerEvent . KIND_ADDED ) { if ( ! ServerUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IPreferenceConstants . COLLAPSE_SERVER + "." + event . getServer ( ) . getId ( ) ) ) { serverViewer . expandToLevel ( event . getServer ( ) , 2 ) ; } } } updateToolbar ( toolBarManager ) ; } } ) ; } } ; ServerCore . getServerManager ( ) . addServerManagerListener ( externalServerRegistryListener ) ; startAction . setEnabled ( false ) ; restartAction . setEnabled ( false ) ; stopAction . setEnabled ( false ) ; toolBarManager . add ( new Separator ( ) ) ; openConsole = new OpenConsole ( serverViewer ) ; toolBarManager . add ( new Separator ( "helpEnd" ) ) ; toolBarManager . add ( openConsole ) ; toolBarManager . add ( openLog ) ; toolBarManager . add ( openStats ) ; toolBarManager . add ( new Separator ( ) ) ; toolBarManager . add ( collapseAction ) ; toolBarManager . add ( expandAction ) ; updateStartActions ( ) ; updateToolbar ( toolBarManager ) ; } private void updateToolbar ( final IToolBarManager toolBarManager ) { IStructuredSelection selection = ( IStructuredSelection ) serverViewer . getSelection ( ) ; this . pauseAction . selectionChanged ( new SelectionChangedEvent ( this . serverViewer , selection ) ) ; this . openLog . selectionChanged ( new SelectionChangedEvent ( this . serverViewer , selection ) ) ; if ( selection . isEmpty ( ) ) { startAction . setEnabled ( false ) ; debugAction . setEnabled ( false ) ; profileAction . setEnabled ( false ) ; restartAction . setEnabled ( false ) ; stopAction . setEnabled ( false ) ; } else { IServer server = ( IServer ) selection . getFirstElement ( ) ; IStatus canStart0 = server . canStart ( "run" ) ; startAction . setEnabled ( canStart0 . isOK ( ) ) ; if ( ! canStart0 . isOK ( ) ) { startAction . setToolTipText ( canStart0 . getMessage ( ) ) ; } else { startAction . setToolTipText ( Messages . ServersView_START ) ; } IStatus canStart = server . canStart ( "debug" ) ; debugAction . setEnabled ( canStart . isOK ( ) ) ; if ( ! canStart . isOK ( ) ) { debugAction . setToolTipText ( canStart . getMessage ( ) ) ; } else { debugAction . setToolTipText ( Messages . ServersView_DEBUG ) ; } IStatus canStart2 = server . canStart ( "profile" ) ; profileAction . setEnabled ( canStart2 . isOK ( ) ) ; if ( ! canStart2 . isOK ( ) ) { profileAction . setToolTipText ( canStart2 . getMessage ( ) ) ; } else { profileAction . setToolTipText ( Messages . ServersView_PROFILE ) ; } restartAction . setEnabled ( server . canRestart ( server . getMode ( ) ) . getSeverity ( ) == IStatus . OK ) ; stopAction . setEnabled ( server . canStop ( ) . getSeverity ( ) == IStatus . OK ) ; openConsole . selectionChanged ( new SelectionChangedEvent ( serverViewer , serverViewer . getSelection ( ) ) ) ; } updateStartActions ( ) ; updateCollapseAllAction ( ) ; updateExpandAllAction ( ) ; toolBarManager . update ( true ) ; } private void createTree ( ) { final Tree serverTable = serverViewer . getTree ( ) ; serverTable . setHeaderVisible ( true ) ; serverTable . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; TreeColumn nameColumn = new TreeColumn ( serverTable , SWT . LEFT ) ; nameColumn . setText ( Messages . ServersView_NAME ) ; nameColumn . setWidth ( 200 ) ; TreeColumn statusColumn = new TreeColumn ( serverTable , SWT . LEFT ) ; statusColumn . setText ( Messages . ServersView_STATUS ) ; statusColumn . setWidth ( 100 ) ; TreeColumn projectColumn = new TreeColumn ( serverTable , SWT . LEFT ) ; projectColumn . setText ( Messages . ServersView_DESCRIPTION ) ; projectColumn . setWidth ( 400 ) ; TreeColumn typeColumn = new TreeColumn ( serverTable , SWT . LEFT ) ; typeColumn . setText ( Messages . ServersView_TYPE ) ; typeColumn . setWidth ( 100 ) ; TreeColumn hostColumn = new TreeColumn ( serverTable , SWT . LEFT ) ; hostColumn . setText ( Messages . GenericServersView_HOST ) ; hostColumn . setWidth ( 100 ) ; TreeColumn portColumn = new TreeColumn ( serverTable , SWT . LEFT ) ; portColumn . setText ( Messages . GenericServersView_PORT ) ; portColumn . setWidth ( 50 ) ; serverViewer . setLabelProvider ( new ServerLabelProvider ( ) ) ; serverViewer . setContentProvider ( new ServerContentProvider ( ) ) ; serverViewer . setInput ( ServerCore . getServerManager ( ) ) ; serverViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { public void doubleClick ( DoubleClickEvent event ) { IStructuredSelection selection = ( IStructuredSelection ) serverViewer . getSelection ( ) ; final IServer server = ( IServer ) selection . getFirstElement ( ) ; if ( server != null ) { doEdit ( server ) ; } } } ) ; getSite ( ) . setSelectionProvider ( serverViewer ) ; ServerUIPlugin default1 = ServerUIPlugin . getDefault ( ) ; final IPreferenceStore preferenceStore = default1 . getPreferenceStore ( ) ; PreferenceUtils . persist ( preferenceStore , serverTable , "serversView" ) ; } public void setFocus ( ) { serverViewer . getTree ( ) . setFocus ( ) ; } private static IWorkbenchAction deleteAction ; private OpenConsole openConsole ; private void createPopupMenu ( ) { deleteAction = ActionFactory . DELETE . create ( getViewSite ( ) . getWorkbenchWindow ( ) ) ; MenuManager menuMgr = new MenuManager ( "#PopupMenu" ) ; menuMgr . setRemoveAllWhenShown ( true ) ; getViewSite ( ) . getActionBars ( ) . setGlobalActionHandler ( ActionFactory . DELETE . getId ( ) , new Action ( ) { public void run ( ) { doDelete ( ) ; } } ) ; menuMgr . addMenuListener ( new IMenuListener ( ) { public void menuAboutToShow ( IMenuManager manager ) { IContributionItem [ ] items = getViewSite ( ) . getActionBars ( ) . getToolBarManager ( ) . getItems ( ) ; for ( int i = 0 ; i < items . length ; i ++ ) { if ( items [ i ] instanceof ActionContributionItem ) { ActionContributionItem aci = ( ActionContributionItem ) items [ i ] ; IAction action = aci . getAction ( ) ; if ( action == openLog ) { boolean enabled = action . isEnabled ( ) ; action = new OpenLogAction ( serverViewer , Action . AS_PUSH_BUTTON ) ; action . setEnabled ( enabled ) ; } if ( action . isEnabled ( ) && action . getStyle ( ) != Action . AS_DROP_DOWN_MENU ) { if ( action . getText ( ) == null || action . getText ( ) . length ( ) == 0 ) { action . setText ( action . getToolTipText ( ) ) ; } manager . add ( action ) ; } } else { if ( items [ i ] instanceof Separator ) { manager . add ( new Separator ( ) ) ; } } } manager . add ( new Separator ( ) ) ; IStructuredSelection selection = ( IStructuredSelection ) serverViewer . getSelection ( ) ; final IServer server = ( IServer ) selection . getFirstElement ( ) ; if ( server != null ) { deleteAction . setText ( StringUtils . format ( Messages . ServersView_DELETE , getShortenName ( server ) ) ) ; deleteAction . setEnabled ( server . canDelete ( ) . isOK ( ) ) ; manager . add ( deleteAction ) ; Action action = new Action ( ) { public void run ( ) { doEdit ( server ) ; } } ; action . setText ( StringUtils . format ( Messages . ServersView_EDIT , getShortenName ( server ) ) ) ; IStatus canModify = server . canModify ( ) ; IStatus canModifyInStoppedStateOnly = server . canModifyInStoppedStateOnly ( ) ; action . setEnabled ( ( ( canModifyInStoppedStateOnly == null || canModifyInStoppedStateOnly . getCode ( ) == IStatus . OK ) ? server . getServerState ( ) == IServer . STATE_STOPPED : true ) && ( canModify == null || canModify . getCode ( ) == IStatus . OK ) ) ; manager . add ( action ) ; } manager . add ( new Separator ( IWorkbenchActionConstants . MB_ADDITIONS ) ) ; } private String getShortenName ( final IServer server ) { String name = server . getName ( ) ; int length = name . length ( ) ; if ( length > MAX_SHOWN_SERVER_NAME ) { int delta = ( length - 15 ) / 2 ; int pivot = length / 2 ; int start = pivot - delta ; int end = pivot + delta ; String s1 = name . substring ( 0 , start ) ; String s2 = name . substring ( end , length ) ; String s = s1 + ELLIPSIS + s2 ; return s ; } return name ; } } ) ; Menu menu = menuMgr . createContextMenu ( serverViewer . getControl ( ) ) ; serverViewer . getControl ( ) . setMenu ( menu ) ; getSite ( ) . registerContextMenu ( menuMgr , serverViewer ) ; } private void doDelete ( ) { IStructuredSelection selection = ( IStructuredSelection ) serverViewer . getSelection ( ) ; if ( selection . isEmpty ( ) ) { return ; } IServer server = ( IServer ) selection . getFirstElement ( ) ; if ( ! server . canDelete ( ) . isOK ( ) ) { return ; } boolean mayStop = ( server . getServerState ( ) != IServer . STATE_STOPPED && server . getServerState ( ) != IServer . STATE_UNKNOWN ) ; boolean askStopBeforeDelete = ( server . askStopBeforeDelete ( ) . getCode ( ) == IStatus . OK ) ; DeleteServerConfirmDialog dlg = new DeleteServerConfirmDialog ( getViewSite ( ) . getShell ( ) , Messages . ServersView_CONFIRM_DELETE , null , StringUtils . format ( Messages . ServersView_CONFIRM_DELETE_TEXT , server . getName ( ) ) , MessageDialog . QUESTION , new String [ ] { Messages . GenericServersView_YES , Messages . GenericServersView_NO } , 0 , mayStop , askStopBeforeDelete ) ; int openConfirm = dlg . open ( ) ; if ( openConfirm != 0 ) { return ; } boolean doStop = dlg . shouldStop ; if ( doStop ) { server . stop ( true , null , null ) ; } try { ServerCore . getServerManager ( ) . removeServer ( server ) ; } catch ( CoreException e ) { MessageDialog . openError ( getViewSite ( ) . getShell ( ) , Messages . ServersView_CONFIRM_DELETE , StringUtils . format ( Messages . ServersView_CONFIRM_DELETE_TEXT , server . getName ( ) ) ) ; } } private void doEdit ( final IServer server ) { IStatus canModify = server . canModify ( ) ; if ( canModify != null && canModify . getCode ( ) != IStatus . OK ) { MessageDialog . openInformation ( serverViewer . getControl ( ) . getShell ( ) , Messages . GenericServersView_READONLY_TITLE , Messages . GenericServersView_READONLY_DESCRIPTION ) ; return ; } ICanEdit adapter = ( ICanEdit ) server . getAdapter ( ICanEdit . class ) ; if ( adapter != null ) { adapter . doEdit ( ) ; return ; } IConfigurationDialog dialog = ServerDialogPageRegistry . getInstance ( ) . getDialog ( server . getServerType ( ) . getId ( ) ) ; Configuration cf = new Configuration ( ) ; server . storeConfiguration ( cf ) ; dialog . setConfiguration ( cf ) ; dialog . setServer ( server ) ; dialog . setEdit ( true ) ; int open = dialog . getDialog ( ) . open ( ) ; if ( open == Dialog . OK ) { IAbstractConfiguration configuration = dialog . getConfiguration ( ) ; configuration . setStringAttribute ( IServer . KEY_TYPE , server . getServerType ( ) . getId ( ) ) ; try { server . reconfigure ( configuration ) ; } catch ( CoreException e ) { MessageDialog . openError ( Display . getCurrent ( ) . getActiveShell ( ) , Messages . GenericServersView_ERROR_WHILE_EDITING_DESCRIPTION , e . getMessage ( ) ) ; IdeLog . log ( ServerUIPlugin . getDefault ( ) , IStatus . ERROR , Messages . GenericServersView_ERROR_WHILE_EDITING_TITLE , e ) ; } } IStructuredSelection selection = ( IStructuredSelection ) serverViewer . getSelection ( ) ; this . pauseAction . selectionChanged ( new SelectionChangedEvent ( this . serverViewer , selection ) ) ; } public void select ( IServer srv ) { serverViewer . setSelection ( new StructuredSelection ( srv ) , true ) ; } } 
=======
public abstract class LiteralArrayVector extends Vector implements KvmSerializable { public void register ( SoapSerializationEnvelope envelope , String namespace , String name ) { envelope . addMapping ( namespace , name , this . getClass ( ) ) ; registerElementClass ( envelope , namespace ) ; } private void registerElementClass ( SoapSerializationEnvelope envelope , String namespace ) { final Class elementClass = getElementClass ( ) ; try { if ( elementClass . newInstance ( ) instanceof KvmSerializable ) envelope . addMapping ( namespace , "" , elementClass ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public void getPropertyInfo ( int index , Hashtable properties , PropertyInfo info ) { info . name = getItemDescriptor ( ) ; info . type = getElementClass ( ) ; } public Object getProperty ( int index ) { return this ; } public int getPropertyCount ( ) { return 1 ; } public void setProperty ( int index , Object value ) { addElement ( value ) ; } abstract protected Class getElementClass ( ) ; protected String getItemDescriptor ( ) { return "item" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
