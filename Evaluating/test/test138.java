public class PostEditorAdv extends AbstractPostEditor { protected JButton btnPostAndContinue ; protected JEditorPane tfExcerpt ; protected JCheckBox chAllowComments ; protected JCheckBox chAllowTrackbacks ; private JDateChooser pkDate ; private JLabel lbDate ; private TargetBlog [ ] targetBlogs ; private JCheckBox [ ] chTargetBlog ; private CategoriesLabel [ ] pcCategories ; private ArrayListModel [ ] categories ; private TargetBlog . Category [ ] [ ] category ; private SyntheticCategoryProperty [ ] categoryProperties ; public PostEditorAdv ( Frame frame , boolean richText ) { super ( frame , richText ) ; btnPostAndContinue = new JButton ( new PostToBlogAction ( true ) ) ; tfExcerpt = new JEditorPane ( ) ; chAllowComments = new JCheckBox ( Strings . message ( "ptb.editor.allow.comments" ) , true ) ; chAllowTrackbacks = new JCheckBox ( Strings . message ( "ptb.editor.allow.trackbacks" ) , true ) ; } public void setTargetBlogs ( TargetBlog [ ] targetBlogs , TargetBlog [ ] selected ) { int blogs = targetBlogs . length ; this . targetBlogs = targetBlogs ; java . util . List < TargetBlog > selBlogs = Arrays . asList ( selected ) ; pcCategories = new CategoriesLabel [ blogs ] ; chTargetBlog = new JCheckBox [ blogs ] ; categories = new ArrayListModel [ blogs ] ; category = new TargetBlog . Category [ blogs ] [ ] ; categoryProperties = new SyntheticCategoryProperty [ blogs ] ; for ( int i = 0 ; i < targetBlogs . length ; i ++ ) { categoryProperties [ i ] = new SyntheticCategoryProperty ( i ) ; TargetBlog blog = targetBlogs [ i ] ; initCategories ( blog , i , new TargetBlog . Category [ ] { blog . getDefaultCategory ( ) } ) ; PropertyAdapter adapter = new PropertyAdapter ( categoryProperties [ i ] , SyntheticCategoryProperty . PROP , true ) ; pcCategories [ i ] = new CategoriesLabel ( categories [ i ] , adapter ) ; chTargetBlog [ i ] = new JCheckBox ( blog . getTitle ( ) ) ; if ( selBlogs . contains ( blog ) ) { chTargetBlog [ i ] . setSelected ( true ) ; setDraft ( blog . isDraft ( ) ) ; } } updateTitle ( selected ) ; } private void initCategories ( final TargetBlog blog , final int index , final TargetBlog . Category [ ] cat ) { TargetBlog . Category [ ] cats = blog . getCategories ( ) ; boolean noCategories = cats . length == 0 ; if ( noCategories ) cats = cat ; ArrayListModel categories = this . categories [ index ] ; if ( categories == null ) { categories = new ArrayListModel ( ) ; this . categories [ index ] = categories ; } categories . clear ( ) ; categories . addAll ( Arrays . asList ( cats ) ) ; setCategories ( index , cat ) ; if ( noCategories ) { blog . loadCategories ( new Runnable ( ) { public void run ( ) { initCategories ( blog , index , category [ index ] ) ; } } ) ; } } private void setCategories ( int index , TargetBlog . Category [ ] cat ) { cat = findEqualCategories ( categories [ index ] , cat ) ; TargetBlog . Category [ ] old = category [ index ] ; category [ index ] = cat ; categoryProperties [ index ] . fireChange ( old , cat ) ; } protected static TargetBlog . Category [ ] findEqualCategories ( ArrayListModel categories , TargetBlog . Category [ ] cat ) { List < TargetBlog . Category > newCats = new ArrayList < TargetBlog . Category > ( ) ; if ( cat != null ) { List < TargetBlog . Category > cats = Arrays . asList ( cat ) ; for ( Object o : categories ) { TargetBlog . Category c = ( TargetBlog . Category ) o ; if ( c != null && cats . contains ( c ) ) newCats . add ( c ) ; } } return newCats . toArray ( new TargetBlog . Category [ newCats . size ( ) ] ) ; } protected void addCustomButtons ( ButtonBarBuilder builder ) { builder . addFixed ( btnPostAndContinue ) ; builder . addRelatedGap ( ) ; } protected void addCustomPanels ( BBFormBuilder builder ) { builder . appendRelatedComponentsGapRow ( 2 ) ; builder . appendRow ( "50dlu" ) ; builder . append ( new JScrollPane ( tfExcerpt ) , 2 , CellConstraints . FILL , CellConstraints . FILL ) ; builder . append ( buildOptionsPanel ( ) , 2 ) ; } private Component buildOptionsPanel ( ) { BBFormBuilder builder = new BBFormBuilder ( "p" ) ; for ( int i = 0 ; i < targetBlogs . length ; i ++ ) { BBFormBuilder b = new BBFormBuilder ( "min(p;100dlu), 2dlu, min(p;100dlu)" ) ; b . append ( chTargetBlog [ i ] , pcCategories [ i ] ) ; builder . append ( b . getPanel ( ) ) ; } JPanel pnlBlogs = builder . getPanel ( ) ; builder = new BBFormBuilder ( "p" ) ; builder . append ( chDraft ) ; builder . append ( chAllowComments ) ; builder . append ( chAllowTrackbacks ) ; JPanel pnlOptions = builder . getPanel ( ) ; builder = new BBFormBuilder ( new FormLayout ( "p, 4dlu:grow, p" , "top:p" ) ) ; builder . append ( pnlBlogs , pnlOptions ) ; return builder . getPanel ( ) ; } protected void addCustomControls ( BBFormBuilder builder ) { pkDate = new JDateChooser ( new JTextFieldDateEditor ( "MM/dd/yyyy" , "##/##/####" , '_' ) ) ; pkDate . setDate ( new Date ( ) ) ; Component [ ] cmps = pkDate . getComponents ( ) ; for ( Component cmp : cmps ) if ( cmp instanceof JButton ) pkDate . remove ( cmp ) ; lbDate = new JLabel ( Strings . message ( "ptb.editor.publication.date" ) ) ; BBFormBuilder b = new BBFormBuilder ( "p, 2dlu, p" ) ; b . append ( lbDate , pkDate ) ; builder . append ( b . getPanel ( ) ) ; } public java . util . List < Integer > getSelectedBlogIndices ( ) { java . util . List < Integer > sel = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < chTargetBlog . length ; i ++ ) { if ( chTargetBlog [ i ] . isSelected ( ) ) sel . add ( i ) ; } return sel ; } protected void addProperties ( WeblogPost post ) { post . excerpt = tfExcerpt . getText ( ) ; post . allowComments = chAllowComments . isSelected ( ) ; post . allowTrackbacks = chAllowTrackbacks . isSelected ( ) ; post . dateCreated = pkDate . getDate ( ) ; } protected TargetBlog getBlogAt ( int i ) { return targetBlogs [ i ] ; } protected java . util . List < TargetBlog . Category > getCategoriesForBlog ( int blogIndex ) { return Arrays . asList ( category [ blogIndex ] ) ; } protected void enableControls ( boolean en ) { super . enableControls ( en ) ; btnPostAndContinue . setEnabled ( en ) ; tfExcerpt . setEnabled ( en ) ; chAllowComments . setEnabled ( en ) ; chAllowTrackbacks . setEnabled ( en ) ; for ( int i = 0 ; i < targetBlogs . length ; i ++ ) { chTargetBlog [ i ] . setEnabled ( en ) ; pcCategories [ i ] . setEnabled ( en ) ; } pkDate . setEnabled ( en ) ; lbDate . setEnabled ( en ) ; } public class SyntheticCategoryProperty { public static final String PROP = "value" ; private final PropertyChangeSupport pcs = new PropertyChangeSupport ( this ) ; private final int index ; public SyntheticCategoryProperty ( int index ) { this . index = index ; } public void addPropertyChangeListener ( PropertyChangeListener x ) { pcs . addPropertyChangeListener ( x ) ; } public void removePropertyChangeListener ( PropertyChangeListener x ) { pcs . removePropertyChangeListener ( x ) ; } public Object getValue ( ) { return category [ index ] ; } public void setValue ( Object c ) { category [ index ] = ( TargetBlog . Category [ ] ) c ; } public void fireChange ( TargetBlog . Category [ ] old , TargetBlog . Category [ ] cat ) { pcs . firePropertyChange ( PROP , old , cat ) ; } } private class CategoriesLabel extends JLabel { private final Color NORMAL = Color . BLUE ; private final ArrayListModel allCategories ; private final ValueModel selCategories ; public CategoriesLabel ( ArrayListModel allCategories , ValueModel selCategories ) { this . allCategories = allCategories ; this . selCategories = selCategories ; setForeground ( NORMAL ) ; setCursor ( Cursor . getPredefinedCursor ( Cursor . HAND_CURSOR ) ) ; updateLabelText ( ) ; enableEvents ( AWTEvent . MOUSE_EVENT_MASK ) ; } private void updateLabelText ( ) { String text ; TargetBlog . Category [ ] cs = ( TargetBlog . Category [ ] ) selCategories . getValue ( ) ; if ( cs == null || cs . length == 0 ) { text = "Uncategorized" ; } else if ( cs . length == 1 ) { text = "category: " + cs [ 0 ] . name ; } else { text = cs . length + " categories" ; } setText ( "(" + text + ")" ) ; } @ Override protected void processMouseEvent ( MouseEvent e ) { if ( e . getID ( ) == MouseEvent . MOUSE_CLICKED ) { CategoriesPicker dlg = new CategoriesPicker ( allCategories , ( TargetBlog . Category [ ] ) selCategories . getValue ( ) ) ; dlg . open ( ) ; if ( ! dlg . hasBeenCanceled ( ) ) { selCategories . setValue ( dlg . getSelectedCategories ( ) ) ; updateLabelText ( ) ; } } } } private class CategoriesPicker extends AbstractDialog { private CategoriesList lstCategories ; public CategoriesPicker ( ArrayListModel categories , TargetBlog . Category [ ] selected ) { super ( PostEditorAdv . this , Strings . message ( "ptb.editor.categories" ) ) ; lstCategories = new CategoriesList ( categories , selected ) ; } protected JComponent buildContent ( ) { JPanel content = new JPanel ( new BorderLayout ( ) ) ; content . add ( new JScrollPane ( lstCategories ) , BorderLayout . CENTER ) ; content . add ( buildButtonBarWithOKCancel ( ) , BorderLayout . SOUTH ) ; return content ; } public TargetBlog . Category [ ] getSelectedCategories ( ) { return lstCategories . getChecked ( ) ; } } private static class CategoriesList extends CheckBoxList { public CategoriesList ( ArrayListModel categories , TargetBlog . Category [ ] selected ) { populateList ( categories , selected ) ; check ( selected ) ; } public TargetBlog . Category [ ] getChecked ( ) { java . util . List < TargetBlog . Category > cats = new ArrayList < TargetBlog . Category > ( ) ; ListModel model = getModel ( ) ; for ( int i = 0 ; i < model . getSize ( ) ; i ++ ) { CategoryCheckBox cb = ( CategoryCheckBox ) model . getElementAt ( i ) ; if ( cb . isSelected ( ) ) cats . add ( cb . getCategory ( ) ) ; } return cats . toArray ( new TargetBlog . Category [ cats . size ( ) ] ) ; } private void populateList ( ArrayListModel categories , TargetBlog . Category [ ] selected ) { Vector < CategoryCheckBox > wrappedCategories = new Vector < CategoryCheckBox > ( categories . size ( ) ) ; for ( Object c : categories ) { wrappedCategories . add ( new CategoryCheckBox ( ( TargetBlog . Category ) c ) ) ; } for ( TargetBlog . Category c : selected ) { TargetBlog . Category eqCat = findEqualCategory ( categories , c ) ; if ( eqCat == null ) wrappedCategories . add ( new CategoryCheckBox ( c ) ) ; } setListData ( wrappedCategories ) ; } private void check ( TargetBlog . Category [ ] selected ) { java . util . List < TargetBlog . Category > cats = Arrays . asList ( selected ) ; ListModel model = getModel ( ) ; for ( int i = 0 ; i < model . getSize ( ) ; i ++ ) { CategoryCheckBox cb = ( CategoryCheckBox ) model . getElementAt ( i ) ; TargetBlog . Category c = cb . getCategory ( ) ; if ( cats . contains ( c ) ) cb . setSelected ( true ) ; } } private static class CategoryCheckBox extends JCheckBox { private final TargetBlog . Category cat ; public CategoryCheckBox ( TargetBlog . Category cat ) { this . cat = cat ; setText ( cat . name ) ; } public TargetBlog . Category getCategory ( ) { return cat ; } public String toString ( ) { return cat . name ; } } } } 