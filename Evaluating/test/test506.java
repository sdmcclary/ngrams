public class LocalCacheEntityResolver implements EntityResolver { private static final ClassLoader LOADER = LocalCacheEntityResolver . class . getClassLoader ( ) ; private static final Map < String , String > PATH_MAP = new HashMap < String , String > ( ) ; static { try { BufferedReader r = new BufferedReader ( new InputStreamReader ( LOADER . getResourceAsStream ( "nu/validator/localentities/files/entitymap" ) , "UTF-8" ) ) ; String line ; while ( ( line = r . readLine ( ) ) != null ) { if ( "" . equals ( line . trim ( ) ) ) { break ; } String s [ ] = line . split ( "\t" ) ; PATH_MAP . put ( s [ 0 ] , "nu/validator/localentities/files/" + s [ 1 ] ) ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } public static InputStream getPresetsAsStream ( ) { return LOADER . getResourceAsStream ( "nu/validator/localentities/files/presets" ) ; } public static InputStream getHtml5SpecAsStream ( ) { return LOADER . getResourceAsStream ( "nu/validator/localentities/files/html5spec" ) ; } private EntityResolver delegate ; private boolean allowRnc = false ; public LocalCacheEntityResolver ( EntityResolver delegate ) { this . delegate = delegate ; } public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { String path = PATH_MAP . get ( systemId ) ; if ( path != null ) { InputStream stream = LOADER . getResourceAsStream ( path ) ; if ( stream != null ) { TypedInputSource is = new TypedInputSource ( ) ; is . setByteStream ( stream ) ; is . setSystemId ( systemId ) ; is . setPublicId ( publicId ) ; if ( systemId . endsWith ( ".rnc" ) ) { is . setType ( "application/relax-ng-compact-syntax" ) ; if ( ! allowRnc ) { throw new IOException ( "Not an XML resource: " + systemId ) ; } } else if ( systemId . endsWith ( ".dtd" ) ) { is . setType ( "application/xml-dtd" ) ; } else if ( systemId . endsWith ( ".ent" ) ) { is . setType ( "application/xml-external-parsed-entity" ) ; } else { is . setType ( "application/xml" ) ; } return is ; } } return delegate . resolveEntity ( publicId , systemId ) ; } public boolean isAllowRnc ( ) { return allowRnc ; } public void setAllowRnc ( boolean allowRnc ) { this . allowRnc = allowRnc ; } } 