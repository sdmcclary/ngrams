public class StreamPrintWriter extends PrintWriter implements FlushBuffer , EnclosedWriteStream { private final static Logger log = Logger . getLogger ( PrintWriterImpl . class . getName ( ) ) ; private final static Writer _dummyWriter = new StringWriter ( ) ; private final WriteStream _out ; public StreamPrintWriter ( WriteStream out ) { super ( ( Writer ) _dummyWriter ) ; _out = out ; } final public void write ( int ch ) { try { _out . print ( ( char ) ch ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void write ( char [ ] buf , int offset , int length ) { try { _out . print ( buf , offset , length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void write ( char [ ] buf ) { try { _out . print ( buf , 0 , buf . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void write ( String v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void write ( String v , int offset , int length ) { try { _out . print ( v , offset , length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( char ch ) { try { _out . print ( ch ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( int v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( long v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( float v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( double v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( char [ ] v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( String v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void print ( Object v ) { try { _out . print ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( ) { try { _out . println ( ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( boolean v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( char v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( int v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( long v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( float v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( double v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( char [ ] v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( String v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } final public void println ( Object v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } public void flush ( ) { try { _out . flush ( ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } public void flushBuffer ( ) { try { _out . flushBuffer ( ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } } public WriteStream getWriteStream ( ) { return _out ; } public void close ( ) { } } 