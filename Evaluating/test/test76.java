public interface InstructionTable { enum CpuBehavior { NMOS_WITH_ROR_BUG , NMOS_6502 , CMOS_6502 , CMOS_65816 } enum Mode { ACC { public String toString ( ) { return "Accumulator" ; } } , AIX { public String toString ( ) { return "Absolute, X-Indexed Indirect" ; } } , ABS { public String toString ( ) { return "Absolute" ; } } , ABX { public String toString ( ) { return "Absolute, X-indexed" ; } } , ABY { public String toString ( ) { return "Absolute, Y-indexed" ; } } , IMM { public String toString ( ) { return "Immediate" ; } } , IMP { public String toString ( ) { return "Implied" ; } } , IND { public String toString ( ) { return "Indirect" ; } } , XIN { public String toString ( ) { return "X-indexed Indirect" ; } } , INY { public String toString ( ) { return "Indirect, Y-indexed" ; } } , REL { public String toString ( ) { return "Relative" ; } } , ZPG { public String toString ( ) { return "Zero Page" ; } } , ZPR { public String toString ( ) { return "Zero Page, Relative" ; } } , ZPX { public String toString ( ) { return "Zero Page, X-indexed" ; } } , ZPY { public String toString ( ) { return "Zero Page, Y-indexed" ; } } , ZPI { public String toString ( ) { return "Zero Page Indirect" ; } } , NUL { public String toString ( ) { return "NULL" ; } } } String [ ] opcodeNames = { "BRK" , "ORA" , "NOP" , "NOP" , "TSB" , "ORA" , "ASL" , "RMB0" , "PHP" , "ORA" , "ASL" , "NOP" , "TSB" , "ORA" , "ASL" , "BBR0" , "BPL" , "ORA" , "ORA" , "NOP" , "TRB" , "ORA" , "ASL" , "RMB1" , "CLC" , "ORA" , "INC" , "NOP" , "TRB" , "ORA" , "ASL" , "BBR1" , "JSR" , "AND" , "NOP" , "NOP" , "BIT" , "AND" , "ROL" , "RMB2" , "PLP" , "AND" , "ROL" , "NOP" , "BIT" , "AND" , "ROL" , "BBR2" , "BMI" , "AND" , "AND" , "NOP" , "BIT" , "AND" , "ROL" , "RMB3" , "SEC" , "AND" , "DEC" , "NOP" , "BIT" , "AND" , "ROL" , "BBR3" , "RTI" , "EOR" , "NOP" , "NOP" , "NOP" , "EOR" , "LSR" , "RMB4" , "PHA" , "EOR" , "LSR" , "NOP" , "JMP" , "EOR" , "LSR" , "BBR4" , "BVC" , "EOR" , "EOR" , "NOP" , "NOP" , "EOR" , "LSR" , "RMB5" , "CLI" , "EOR" , "PHY" , "NOP" , "NOP" , "EOR" , "LSR" , "BBR5" , "RTS" , "ADC" , "NOP" , "NOP" , "STZ" , "ADC" , "ROR" , "RMB6" , "PLA" , "ADC" , "ROR" , "NOP" , "JMP" , "ADC" , "ROR" , "BBR6" , "BVS" , "ADC" , "ADC" , "NOP" , "STZ" , "ADC" , "ROR" , "RMB7" , "SEI" , "ADC" , "PLY" , "NOP" , "JMP" , "ADC" , "ROR" , "BBR7" , "BRA" , "STA" , "NOP" , "NOP" , "STY" , "STA" , "STX" , "SMB0" , "DEY" , "BIT" , "TXA" , "NOP" , "STY" , "STA" , "STX" , "BBS0" , "BCC" , "STA" , "STA" , "NOP" , "STY" , "STA" , "STX" , "SMB1" , "TYA" , "STA" , "TXS" , "NOP" , "STZ" , "STA" , "STZ" , "BBS1" , "LDY" , "LDA" , "LDX" , "NOP" , "LDY" , "LDA" , "LDX" , "SMB2" , "TAY" , "LDA" , "TAX" , "NOP" , "LDY" , "LDA" , "LDX" , "BBS2" , "BCS" , "LDA" , "LDA" , "NOP" , "LDY" , "LDA" , "LDX" , "SMB3" , "CLV" , "LDA" , "TSX" , "NOP" , "LDY" , "LDA" , "LDX" , "BBS3" , "CPY" , "CMP" , "NOP" , "NOP" , "CPY" , "CMP" , "DEC" , "SMB4" , "INY" , "CMP" , "DEX" , "NOP" , "CPY" , "CMP" , "DEC" , "BBS4" , "BNE" , "CMP" , "CMP" , "NOP" , "NOP" , "CMP" , "DEC" , "SMB5" , "CLD" , "CMP" , "PHX" , "NOP" , "NOP" , "CMP" , "DEC" , "BBS5" , "CPX" , "SBC" , "NOP" , "NOP" , "CPX" , "SBC" , "INC" , "SMB6" , "INX" , "SBC" , "NOP" , "NOP" , "CPX" , "SBC" , "INC" , "BBS6" , "BEQ" , "SBC" , "SBC" , "NOP" , "NOP" , "SBC" , "INC" , "SMB7" , "SED" , "SBC" , "PLX" , "NOP" , "NOP" , "SBC" , "INC" , "BBS7" } ; Mode [ ] instructionModes = { Mode . IMP , Mode . XIN , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . ACC , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . ZPG , Mode . ZPX , Mode . ZPX , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . ABS , Mode . ABX , Mode . ABX , Mode . ZPR , Mode . ABS , Mode . XIN , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . ACC , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPX , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . NUL , Mode . ABX , Mode . ABX , Mode . ZPR , Mode . IMP , Mode . XIN , Mode . NUL , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . ACC , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . NUL , Mode . ABX , Mode . ABX , Mode . ZPR , Mode . IMP , Mode . XIN , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . ACC , Mode . NUL , Mode . IND , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPX , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . AIX , Mode . ABX , Mode . ABX , Mode . ZPR , Mode . REL , Mode . XIN , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . IMP , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPY , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . ABS , Mode . ABX , Mode . ABX , Mode . ZPR , Mode . IMM , Mode . XIN , Mode . IMM , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . IMP , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPY , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . ABX , Mode . ABX , Mode . ABY , Mode . ZPR , Mode . IMM , Mode . XIN , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . IMP , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . NUL , Mode . ABX , Mode . ABX , Mode . ZPR , Mode . IMM , Mode . XIN , Mode . NUL , Mode . NUL , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . ZPG , Mode . IMP , Mode . IMM , Mode . IMP , Mode . NUL , Mode . ABS , Mode . ABS , Mode . ABS , Mode . ZPR , Mode . REL , Mode . INY , Mode . ZPI , Mode . NUL , Mode . NUL , Mode . ZPX , Mode . ZPX , Mode . ZPG , Mode . IMP , Mode . ABY , Mode . IMP , Mode . NUL , Mode . NUL , Mode . ABX , Mode . ABX , Mode . ZPR } ; int [ ] instructionSizes = { 1 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 3 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 1 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 1 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 1 , 3 , 1 , 1 , 3 , 3 , 3 , 3 } ; int [ ] instructionClocksNmos = { 7 , 6 , 1 , 8 , 3 , 3 , 5 , 5 , 3 , 2 , 2 , 2 , 4 , 4 , 6 , 6 , 2 , 5 , 1 , 8 , 4 , 4 , 6 , 6 , 2 , 4 , 2 , 7 , 4 , 4 , 7 , 7 , 6 , 6 , 1 , 8 , 3 , 3 , 5 , 5 , 4 , 2 , 2 , 2 , 4 , 4 , 6 , 6 , 2 , 5 , 1 , 8 , 4 , 4 , 6 , 6 , 2 , 4 , 2 , 7 , 4 , 4 , 7 , 7 , 6 , 6 , 1 , 8 , 3 , 3 , 5 , 5 , 3 , 2 , 2 , 2 , 3 , 4 , 6 , 6 , 2 , 5 , 1 , 8 , 4 , 4 , 6 , 6 , 2 , 4 , 2 , 7 , 4 , 4 , 7 , 7 , 6 , 6 , 1 , 8 , 3 , 3 , 5 , 5 , 4 , 2 , 2 , 2 , 5 , 4 , 6 , 6 , 2 , 5 , 1 , 8 , 4 , 4 , 6 , 6 , 2 , 4 , 2 , 7 , 4 , 4 , 7 , 7 , 2 , 6 , 2 , 6 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 2 , 4 , 4 , 4 , 4 , 2 , 6 , 1 , 6 , 4 , 4 , 4 , 4 , 2 , 5 , 2 , 5 , 5 , 5 , 5 , 5 , 2 , 6 , 2 , 6 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 2 , 4 , 4 , 4 , 4 , 2 , 5 , 1 , 5 , 4 , 4 , 4 , 4 , 2 , 4 , 2 , 4 , 4 , 4 , 4 , 4 , 2 , 6 , 2 , 8 , 3 , 3 , 5 , 5 , 2 , 2 , 2 , 2 , 4 , 4 , 6 , 6 , 2 , 5 , 1 , 8 , 4 , 4 , 6 , 6 , 2 , 4 , 2 , 7 , 4 , 4 , 7 , 7 , 2 , 6 , 2 , 8 , 3 , 3 , 5 , 5 , 2 , 2 , 2 , 2 , 4 , 4 , 6 , 6 , 2 , 5 , 1 , 8 , 4 , 4 , 6 , 6 , 2 , 4 , 2 , 7 , 4 , 4 , 7 , 7 } ; int [ ] instructionClocksCmos = { 7 , 6 , 2 , 1 , 5 , 3 , 5 , 5 , 3 , 2 , 2 , 1 , 6 , 4 , 6 , 5 , 2 , 5 , 5 , 1 , 5 , 4 , 6 , 5 , 2 , 4 , 2 , 1 , 6 , 4 , 6 , 5 , 6 , 6 , 2 , 1 , 3 , 3 , 5 , 5 , 4 , 2 , 2 , 1 , 4 , 4 , 6 , 5 , 2 , 5 , 5 , 1 , 4 , 4 , 6 , 5 , 2 , 4 , 2 , 1 , 4 , 4 , 6 , 5 , 6 , 6 , 2 , 1 , 2 , 3 , 5 , 3 , 3 , 2 , 2 , 1 , 3 , 4 , 6 , 5 , 2 , 5 , 5 , 1 , 4 , 4 , 6 , 5 , 2 , 4 , 3 , 1 , 8 , 4 , 6 , 5 , 6 , 6 , 2 , 1 , 3 , 3 , 5 , 5 , 4 , 2 , 2 , 1 , 6 , 4 , 6 , 5 , 2 , 5 , 5 , 1 , 4 , 4 , 6 , 5 , 2 , 4 , 4 , 3 , 6 , 4 , 6 , 5 , 3 , 6 , 2 , 1 , 3 , 3 , 3 , 5 , 2 , 2 , 2 , 1 , 4 , 4 , 4 , 5 , 2 , 6 , 5 , 1 , 4 , 4 , 4 , 5 , 2 , 5 , 2 , 1 , 4 , 5 , 5 , 5 , 2 , 6 , 2 , 1 , 3 , 3 , 3 , 5 , 2 , 2 , 2 , 1 , 4 , 4 , 4 , 5 , 2 , 5 , 5 , 1 , 4 , 4 , 4 , 5 , 2 , 4 , 2 , 1 , 4 , 4 , 4 , 5 , 2 , 6 , 2 , 1 , 3 , 3 , 5 , 5 , 2 , 2 , 2 , 3 , 4 , 4 , 6 , 5 , 2 , 5 , 5 , 1 , 4 , 4 , 6 , 5 , 2 , 4 , 3 , 3 , 4 , 4 , 7 , 5 , 2 , 6 , 2 , 1 , 3 , 3 , 5 , 5 , 2 , 2 , 2 , 1 , 4 , 4 , 6 , 5 , 2 , 5 , 5 , 1 , 4 , 4 , 6 , 5 , 2 , 4 , 4 , 1 , 4 , 4 , 7 , 5 } ; } 