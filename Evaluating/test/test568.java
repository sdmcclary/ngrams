<<<<<<< HEAD
public class Startup implements IStartup { public void earlyStartup ( ) { registerAsFirebugEditor ( ) ; UIJob job = new UIJob ( "Checking default launch configuration" ) { @ Override public IStatus runInUIThread ( IProgressMonitor monitor ) { checkDefaultLaunchConfiguration ( ) ; WorkbenchCloseListener . init ( ) ; return Status . OK_STATUS ; } } ; job . setRule ( MutexJobRule . getInstance ( ) ) ; job . setSystem ( true ) ; job . schedule ( ) ; } private void registerAsFirebugEditor ( ) { IPath launcher = FileUtils . getApplicationLauncher ( ) ; if ( launcher != null ) { FirebugUtils . registerEditor ( "Aptana" , "Aptana Studio" , launcher , StringUtils . EMPTY ) ; } } private void checkDefaultLaunchConfiguration ( ) { Stack defaultConfigurations = new Stack ( ) ; ILaunchConfiguration configuration ; LaunchConfigurationManager manager = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; ILaunchConfiguration [ ] history = manager . getLaunchHistory ( IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) . getHistory ( ) ; configuration = getOrCreateDefaultLaunchConfiguration ( JSLaunchConfigurationHelper . FIREFOX ) ; if ( configuration != null ) { defaultConfigurations . push ( configuration ) ; } if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { configuration = getOrCreateDefaultLaunchConfiguration ( JSLaunchConfigurationHelper . INTERNET_EXPLORER ) ; if ( configuration != null ) { defaultConfigurations . push ( configuration ) ; } } for ( int i = 0 ; i < history . length ; ++ i ) { for ( Iterator j = defaultConfigurations . iterator ( ) ; j . hasNext ( ) ; ) { if ( history [ i ] . equals ( j . next ( ) ) ) { j . remove ( ) ; break ; } } } while ( ! defaultConfigurations . empty ( ) ) { configuration = ( ILaunchConfiguration ) defaultConfigurations . pop ( ) ; setRecentLaunchHistory ( IDebugUIConstants . ID_RUN_LAUNCH_GROUP , configuration ) ; setRecentLaunchHistory ( IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP , configuration ) ; } } private void setRecentLaunchHistory ( String groupId , final ILaunchConfiguration configuration ) { LaunchConfigurationManager manager = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; LaunchHistory history = manager . getLaunchHistory ( groupId ) ; history . launchAdded ( new ILaunch ( ) { public ILaunchConfiguration getLaunchConfiguration ( ) { return configuration ; } public Object [ ] getChildren ( ) { return null ; } public IDebugTarget getDebugTarget ( ) { return null ; } public IProcess [ ] getProcesses ( ) { return null ; } public IDebugTarget [ ] getDebugTargets ( ) { return null ; } public void addDebugTarget ( IDebugTarget target ) { } public void removeDebugTarget ( IDebugTarget target ) { } public void addProcess ( IProcess process ) { } public void removeProcess ( IProcess process ) { } public ISourceLocator getSourceLocator ( ) { return null ; } public void setSourceLocator ( ISourceLocator sourceLocator ) { } public String getLaunchMode ( ) { return null ; } public void setAttribute ( String key , String value ) { } public String getAttribute ( String key ) { return null ; } public boolean hasChildren ( ) { return false ; } public boolean canTerminate ( ) { return false ; } public boolean isTerminated ( ) { return false ; } public void terminate ( ) throws DebugException { } public Object getAdapter ( Class adapter ) { return null ; } } ) ; } private ILaunchConfiguration getOrCreateDefaultLaunchConfiguration ( String nature ) { ILaunchConfigurationType configType = getLaunchConfigType ( ) ; ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; try { ILaunchConfiguration [ ] configs = manager . getLaunchConfigurations ( configType ) ; for ( int i = 0 ; i < configs . length ; ++ i ) { ILaunchConfiguration config = configs [ i ] ; if ( nature . equals ( config . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_BROWSER_NATURE , StringUtils . EMPTY ) ) ) { return config ; } } ILaunchConfigurationWorkingCopy wc = configType . newInstance ( null , DebugPlugin . getDefault ( ) . getLaunchManager ( ) . generateUniqueLaunchConfigurationNameFrom ( nature + " - Internal Server" ) ) ; JSLaunchConfigurationHelper . setDefaults ( wc , nature ) ; boolean showDownload = true ; while ( ! JSLaunchConfigurationHelper . isBrowserDebugCompatible ( wc . getAttribute ( ILaunchConfigurationConstants . CONFIGURATION_BROWSER_EXECUTABLE , StringUtils . EMPTY ) ) ) { String browserPath = null ; if ( nature . equals ( JSLaunchConfigurationHelper . FIREFOX ) ) { IPreferenceStore store = DebugUiPlugin . getDefault ( ) . getPreferenceStore ( ) ; String pref = store . getString ( com . aptana . ide . debug . internal . ui . IDebugUIConstants . PREF_SKIP_FIREFOX_CHECK ) ; if ( pref == null || ! pref . equals ( MessageDialogWithToggle . ALWAYS ) ) { browserPath = showBrowserNotFoundDialog ( showDownload ) ; } } if ( browserPath == null ) { wc . delete ( ) ; return null ; } if ( browserPath . length ( ) == 0 ) { JSLaunchConfigurationHelper . setBrowserDefaults ( wc , nature ) ; } else { wc . setAttribute ( ILaunchConfigurationConstants . CONFIGURATION_BROWSER_EXECUTABLE , browserPath ) ; } showDownload = false ; } return wc . doSave ( ) ; } catch ( CoreException e ) { DebugUiPlugin . log ( e ) ; } return null ; } private ILaunchConfigurationType getLaunchConfigType ( ) { ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; return manager . getLaunchConfigurationType ( ILaunchConfigurationConstants . ID_JS_APPLICATION ) ; } private String showBrowserNotFoundDialog ( final boolean download ) { final String [ ] path = new String [ ] { null } ; PlatformUI . getWorkbench ( ) . getDisplay ( ) . syncExec ( new Runnable ( ) { public void run ( ) { if ( Display . getCurrent ( ) . getActiveShell ( ) == null ) { return ; } MessageDialogWithToggle md = new MessageDialogWithToggle ( PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getShell ( ) , Messages . Startup_Notification , null , Messages . Startup_AptanaRequiresFirefox , MessageDialog . INFORMATION , new String [ ] { IDialogConstants . PROCEED_LABEL , StringUtils . ellipsify ( CoreStrings . BROWSE ) , download ? Messages . Startup_Download : Messages . Startup_CheckAgain } , 0 , Messages . Startup_DontAskAgain , false ) ; md . setPrefKey ( com . aptana . ide . debug . internal . ui . IDebugUIConstants . PREF_SKIP_FIREFOX_CHECK ) ; md . setPrefStore ( DebugUiPlugin . getDefault ( ) . getPreferenceStore ( ) ) ; int returnCode = md . open ( ) ; switch ( returnCode ) { case IDialogConstants . INTERNAL_ID : FileDialog fileDialog = new FileDialog ( PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getShell ( ) , SWT . OPEN ) ; if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { fileDialog . setFilterExtensions ( new String [ ] { "*.exe" } ) ; fileDialog . setFilterNames ( new String [ ] { Messages . Startup_ExecutableFiles } ) ; } path [ 0 ] = fileDialog . open ( ) ; break ; case IDialogConstants . INTERNAL_ID + 1 : if ( download ) { WorkbenchHelper . launchBrowser ( "http://www.getfirefox.com" ) ; } path [ 0 ] = StringUtils . EMPTY ; break ; default : } } } ) ; return path [ 0 ] ; } } 
=======
public final class Week extends AbstractDatatype { private static final int [ ] SPECIAL_YEARS = { 4 , 9 , 15 , 20 , 26 , 32 , 37 , 43 , 48 , 54 , 60 , 65 , 71 , 76 , 82 , 88 , 93 , 99 , 105 , 111 , 116 , 122 , 128 , 133 , 139 , 144 , 150 , 156 , 161 , 167 , 172 , 178 , 184 , 189 , 195 , 201 , 207 , 212 , 218 , 224 , 229 , 235 , 240 , 246 , 252 , 257 , 263 , 268 , 274 , 280 , 285 , 291 , 296 , 303 , 308 , 314 , 320 , 325 , 331 , 336 , 342 , 348 , 353 , 359 , 364 , 370 , 376 , 381 , 387 , 392 , 398 } ; public static final Week THE_INSTANCE = new Week ( ) ; private static final Pattern THE_PATTERN = Pattern . compile ( "^([0-9]{4,})-W([0-9]{2})$" ) ; private Week ( ) { super ( ) ; } private void checkWeek ( String year , String week ) throws DatatypeException { checkWeek ( Integer . parseInt ( year ) , Integer . parseInt ( week ) ) ; } private void checkWeek ( int year , int week ) throws DatatypeException { if ( year < 1 ) { throw newDatatypeException ( "Year cannot be less than 1." ) ; } if ( week < 1 ) { throw newDatatypeException ( "Week cannot be less than 1." ) ; } if ( week == 53 ) { if ( Arrays . binarySearch ( SPECIAL_YEARS , year % 400 ) < 0 ) { throw newDatatypeException ( "Week out of range." ) ; } } else if ( week > 53 ) { throw newDatatypeException ( "Week out of range." ) ; } } public final void checkValid ( CharSequence literal ) throws DatatypeException { Matcher m = THE_PATTERN . matcher ( literal ) ; if ( m . matches ( ) ) { checkWeek ( m . group ( 1 ) , m . group ( 2 ) ) ; } else { throw newDatatypeException ( "The literal did not satisfy the format for week." ) ; } } @ Override public String getName ( ) { return "week" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
