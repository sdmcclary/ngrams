public class PreferenceInitializer implements IStartup { private static final String EMPTY = "" ; private static final String SEMI_COLON = ";" ; private final IPreferenceStore jdtPreferenceStore ; static final String ENABLE_ADDITIONAL_AUTOCOMPLETE_FAVOURTES = "ENABLE_ADDITIONAL_AUTOCOMPLETE_FAVOURTES" ; public PreferenceInitializer ( ) { this ( PreferenceConstants . getPreferenceStore ( ) ) ; } public PreferenceInitializer ( IPreferenceStore jdtPreferenceStore ) { this . jdtPreferenceStore = jdtPreferenceStore ; } void initializeFavorites ( ) { Set < String > imports = new LinkedHashSet < String > ( getJDTImports ( ) ) ; imports . addAll ( getDefaultFavorites ( ) ) ; String join = join ( imports , SEMI_COLON ) ; jdtPreferenceStore . setValue ( PreferenceConstants . CODEASSIST_FAVORITE_STATIC_MEMBERS , join ) ; try { ( ( ScopedPreferenceStore ) jdtPreferenceStore ) . save ( ) ; } catch ( IOException e ) { } } public Set < String > getJDTImports ( ) { String preference = jdtPreferenceStore . getString ( PreferenceConstants . CODEASSIST_FAVORITE_STATIC_MEMBERS ) ; if ( EMPTY . equals ( preference . trim ( ) ) ) { return new HashSet < String > ( ) ; } String [ ] imports = preference . split ( SEMI_COLON ) ; return new LinkedHashSet < String > ( Arrays . asList ( imports ) ) ; } private LinkedHashSet < String > getDefaultFavorites ( ) { LinkedHashSet < String > orderedSet = new LinkedHashSet < String > ( ) ; orderedSet . add ( importStatement ( "org.mockito.Matchers" ) ) ; orderedSet . add ( importStatement ( "org.mockito.Mockito" ) ) ; return orderedSet ; } public void propertyChange ( PropertyChangeEvent event ) { initializeFavorites ( ) ; } private String importStatement ( String clazz ) { return clazz + ".*" ; } private String join ( Collection < ? > toJoin , String delimiter ) { if ( ( toJoin == null ) || ( toJoin . size ( ) == 0 ) ) return "" ; StringBuffer result = new StringBuffer ( ) ; for ( Object object : toJoin ) { result . append ( object ) ; result . append ( delimiter ) ; } result . lastIndexOf ( delimiter ) ; result . replace ( result . length ( ) - delimiter . length ( ) , result . length ( ) , "" ) ; return result . toString ( ) ; } public void earlyStartup ( ) { new PreferenceInitializer ( ) . initializeFavorites ( ) ; } } 