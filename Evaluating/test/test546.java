public final class PreferenceUtils { public static final String IGNORE_COLOR_KEY = "IGNORE_COLOR_KEY" ; private PreferenceUtils ( ) { } public static void persistSettingsToPreferenceStore ( IPreferenceStore store , String key , Table table ) { TableColumn [ ] columns = table . getColumns ( ) ; for ( int a = 0 ; a < columns . length ; a ++ ) { int width = columns [ a ] . getWidth ( ) ; store . setValue ( getColumnKey ( key , a ) , width ) ; } } public static void restoreSettingsFromPreferenceStore ( final IPreferenceStore store , final String key , final Table table ) { final TableColumn [ ] columns = table . getColumns ( ) ; final boolean found = actuallyRestore ( store , key , columns ) ; if ( table . getLayout ( ) instanceof TableLayout && found ) { final TableLayout ll = ( TableLayout ) table . getLayout ( ) ; table . setLayout ( null ) ; table . addControlListener ( new ControlListener ( ) { int inc = 0 ; public void controlMoved ( ControlEvent e ) { } public void controlResized ( ControlEvent e ) { if ( inc == 1 ) { table . setLayout ( ll ) ; } inc ++ ; } } ) ; } } private static boolean actuallyRestore ( IPreferenceStore store , String key , TableColumn [ ] columns ) { boolean found = false ; for ( int a = 0 ; a < columns . length ; a ++ ) { int int1 = store . getInt ( getColumnKey ( key , a ) ) ; if ( int1 != 0 ) { found = true ; columns [ a ] . setWidth ( int1 ) ; } } return found ; } public static void restoreSettingsFromPreferenceStore ( IPreferenceStore store , String key , final Tree tree ) { TreeColumn [ ] columns = tree . getColumns ( ) ; boolean found = false ; for ( int a = 0 ; a < columns . length ; a ++ ) { int int1 = store . getInt ( getColumnKey ( key , a ) ) ; if ( int1 != 0 ) { columns [ a ] . setWidth ( int1 ) ; found = true ; } } if ( tree . getLayout ( ) instanceof TableLayout && found ) { final TableLayout ll = ( TableLayout ) tree . getLayout ( ) ; tree . setLayout ( null ) ; tree . addControlListener ( new ControlListener ( ) { int inc = 0 ; public void controlMoved ( ControlEvent e ) { } public void controlResized ( ControlEvent e ) { if ( inc == 1 ) { tree . setLayout ( ll ) ; } inc ++ ; } } ) ; } } private static String getColumnKey ( String key , int num ) { return key + ".column." + num ; } public static void persistSettingsToPreferenceStore ( IPreferenceStore store , String key , Tree tree ) { TreeColumn [ ] columns = tree . getColumns ( ) ; for ( int a = 0 ; a < columns . length ; a ++ ) { int width = columns [ a ] . getWidth ( ) ; store . setValue ( getColumnKey ( key , a ) , width ) ; } } public static void persist ( final IPreferenceStore store , final Table table , final String key ) { PreferenceUtils . restoreSettingsFromPreferenceStore ( store , key , table ) ; table . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { PreferenceUtils . persistSettingsToPreferenceStore ( store , key , table ) ; } } ) ; } public static void persist ( final IPreferenceStore store , final Tree tree , final String key ) { PreferenceUtils . restoreSettingsFromPreferenceStore ( store , key , tree ) ; tree . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { PreferenceUtils . persistSettingsToPreferenceStore ( store , key , tree ) ; } } ) ; } public static void registerBackgroundColorPreference ( final Control control , final String id ) { final IThemeManager themeManager = PlatformUI . getWorkbench ( ) . getThemeManager ( ) ; setBackround ( control , id , themeManager ) ; final IPropertyChangeListener propertyChangeListener = new IPropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent event ) { if ( event . getProperty ( ) . equals ( IThemeManager . CHANGE_CURRENT_THEME ) || event . getProperty ( ) . equals ( id ) ) { setBackround ( control , id , themeManager ) ; } } } ; themeManager . addPropertyChangeListener ( propertyChangeListener ) ; control . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { themeManager . removePropertyChangeListener ( propertyChangeListener ) ; } } ) ; } public static void registerFontPreference ( final Control control , final String id ) { final IThemeManager themeManager = PlatformUI . getWorkbench ( ) . getThemeManager ( ) ; setFont ( control , id , themeManager ) ; final IPropertyChangeListener propertyChangeListener = new IPropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent event ) { if ( event . getProperty ( ) . equals ( IThemeManager . CHANGE_CURRENT_THEME ) || event . getProperty ( ) . equals ( id ) ) { setFont ( control , id , themeManager ) ; } } } ; themeManager . addPropertyChangeListener ( propertyChangeListener ) ; control . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { themeManager . removePropertyChangeListener ( propertyChangeListener ) ; } } ) ; } private static void setFont ( Control control , String id , IThemeManager themeManager ) { Font color = themeManager . getCurrentTheme ( ) . getFontRegistry ( ) . get ( id ) ; control . setFont ( color ) ; } public static void registerForegroundColorPreference ( final Control control , final String id ) { final IThemeManager themeManager = PlatformUI . getWorkbench ( ) . getThemeManager ( ) ; setForeground ( control , id , themeManager ) ; final IPropertyChangeListener propertyChangeListener = new IPropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent event ) { if ( event . getProperty ( ) . equals ( IThemeManager . CHANGE_CURRENT_THEME ) || event . getProperty ( ) . equals ( id ) ) { setForeground ( control , id , themeManager ) ; } } } ; themeManager . addPropertyChangeListener ( propertyChangeListener ) ; control . addDisposeListener ( new DisposeListener ( ) { public void widgetDisposed ( DisposeEvent e ) { themeManager . removePropertyChangeListener ( propertyChangeListener ) ; } } ) ; } private static void setForeground ( final Control control , final String id , final IThemeManager themeManager ) { Color color = themeManager . getCurrentTheme ( ) . getColorRegistry ( ) . get ( id ) ; internalSet ( control , color ) ; } private static void setBackround ( final Control control , final String id , final IThemeManager themeManager ) { Color color = themeManager . getCurrentTheme ( ) . getColorRegistry ( ) . get ( id ) ; control . setBackground ( color ) ; } public static void ignoreForegroundColorPreference ( Control control ) { if ( control != null ) { control . setData ( PreferenceUtils . IGNORE_COLOR_KEY , Boolean . TRUE ) ; } } private static void internalSet ( final Control control , Color color ) { if ( ! Boolean . TRUE . equals ( control . getData ( IGNORE_COLOR_KEY ) ) ) { control . setForeground ( color ) ; } if ( control instanceof Composite ) { Composite cm = ( Composite ) control ; Control [ ] children = cm . getChildren ( ) ; for ( int a = 0 ; a < children . length ; a ++ ) { internalSet ( children [ a ] , color ) ; } } } } 