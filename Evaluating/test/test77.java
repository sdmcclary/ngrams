public class SAXParseable < P , NC , L , EA , CL extends CommentList < L > , A extends Annotations < L , EA , CL > > extends SAXSubParser < P , NC , L , EA , CL , A > implements SubParseable < P , NC , L , EA , CL , A > { private final SAXSource source ; public SAXParseable ( SAXSource source , SAXResolver resolver , ErrorHandler eh ) { super ( resolver , eh ) ; this . source = source ; } public P parse ( SchemaBuilder < P , NC , L , EA , CL , A > schemaBuilder , Scope < P , L , EA , CL , A > scope ) throws BuildException , IllegalSchemaException { try { XMLReader xr = source . getXMLReader ( ) ; SchemaParser < P , NC , L , EA , CL , A > sp = new SchemaParser < P , NC , L , EA , CL , A > ( xr , eh , schemaBuilder , null , scope ) ; xr . parse ( source . getInputSource ( ) ) ; return sp . getParsedPattern ( ) ; } catch ( SAXException e ) { throw BuildException . fromSAXException ( e ) ; } catch ( IOException e ) { throw new BuildException ( e ) ; } } public P parseAsInclude ( SchemaBuilder < P , NC , L , EA , CL , A > schemaBuilder , IncludedGrammar < P , L , EA , CL , A > g ) throws BuildException , IllegalSchemaException { try { XMLReader xr = source . getXMLReader ( ) ; SchemaParser < P , NC , L , EA , CL , A > sp = new SchemaParser < P , NC , L , EA , CL , A > ( xr , eh , schemaBuilder , g , g ) ; xr . parse ( source . getInputSource ( ) ) ; return sp . getParsedPattern ( ) ; } catch ( SAXException e ) { throw BuildException . fromSAXException ( e ) ; } catch ( IOException e ) { throw new BuildException ( e ) ; } } public String getUri ( ) { final String uri = source . getInputSource ( ) . getSystemId ( ) ; if ( uri == null ) return null ; return Uri . escapeDisallowedChars ( uri ) ; } } 