<<<<<<< HEAD
public final class CustomVisualPanel extends JPanel { private final CustomActionBuilder builder ; private final CustomWizardPanel panel ; DocumentListener documentListener = new DocumentListener ( ) { public void insertUpdate ( DocumentEvent evt ) { refreshText ( ) ; } public void removeUpdate ( DocumentEvent arg0 ) { refreshText ( ) ; } public void changedUpdate ( DocumentEvent arg0 ) { refreshText ( ) ; } } ; public CustomVisualPanel ( CustomWizardPanel panel , CustomActionBuilder builder ) { this . panel = panel ; this . builder = builder ; initComponents ( ) ; nameText . setText ( builder . getName ( ) ) ; nameText . getDocument ( ) . addDocumentListener ( documentListener ) ; pathText . setText ( builder . getPath ( ) ) ; pathText . getDocument ( ) . addDocumentListener ( documentListener ) ; argsText . setText ( builder . getArgs ( ) ) ; argsText . getDocument ( ) . addDocumentListener ( documentListener ) ; showOutput . setSelected ( builder . isShowOutput ( ) ) ; showDirty . setSelected ( builder . isShowDirty ( ) ) ; repoSpecific . setSelected ( builder . isRepoSpecific ( ) ) ; workDirRoot . setSelected ( builder . isWorkDirRoot ( ) ) ; if ( builder . getContext ( ) . getRootFiles ( ) . isEmpty ( ) ) { repoSpecific . setEnabled ( false ) ; } } @ Override public String getName ( ) { return NbBundle . getMessage ( CustomVisualPanel . class , "CustomWizardStepName" ) ; } private void refreshText ( ) { boolean valid = builder . isValid ( ) ; builder . setPath ( pathText . getText ( ) ) ; builder . setArgs ( argsText . getText ( ) ) ; builder . setName ( nameText . getText ( ) ) ; if ( valid != builder . isValid ( ) ) { panel . fireChangeEvent ( ) ; } } private void initComponents ( ) { nameLabel = new javax . swing . JLabel ( ) ; nameText = new javax . swing . JTextField ( ) ; pathLabel = new javax . swing . JLabel ( ) ; pathText = new javax . swing . JTextField ( ) ; pathBrowseButton = new javax . swing . JButton ( ) ; argsLabel = new javax . swing . JLabel ( ) ; argsText = new javax . swing . JTextField ( ) ; argsHelpLabel = new javax . swing . JLabel ( ) ; argsHelpLabel2 = new javax . swing . JLabel ( ) ; jPanel1 = new javax . swing . JPanel ( ) ; showDirty = new javax . swing . JCheckBox ( ) ; repoSpecific = new javax . swing . JCheckBox ( ) ; jPanel2 = new javax . swing . JPanel ( ) ; workDirRoot = new javax . swing . JCheckBox ( ) ; showOutput = new javax . swing . JCheckBox ( ) ; org . openide . awt . Mnemonics . setLocalizedText ( nameLabel , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.nameLabel.text" ) ) ; nameText . setText ( org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.nameText.text" ) ) ; org . openide . awt . Mnemonics . setLocalizedText ( pathLabel , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.pathLabel.text" ) ) ; pathText . setText ( org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.pathText.text" ) ) ; org . openide . awt . Mnemonics . setLocalizedText ( pathBrowseButton , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.pathBrowseButton.text" ) ) ; pathBrowseButton . addActionListener ( new java . awt . event . ActionListener ( ) { public void actionPerformed ( java . awt . event . ActionEvent evt ) { pathBrowseButtonActionPerformed ( evt ) ; } } ) ; org . openide . awt . Mnemonics . setLocalizedText ( argsLabel , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.argsLabel.text" ) ) ; argsText . setText ( org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.argsText.text" ) ) ; org . openide . awt . Mnemonics . setLocalizedText ( argsHelpLabel , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.argsHelpLabel.text" ) ) ; org . openide . awt . Mnemonics . setLocalizedText ( argsHelpLabel2 , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.argsHelpLabel2.text" ) ) ; jPanel1 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.jPanel1.border.title" ) ) ) ; org . openide . awt . Mnemonics . setLocalizedText ( showDirty , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.showDirty.text" ) ) ; showDirty . addItemListener ( new java . awt . event . ItemListener ( ) { public void itemStateChanged ( java . awt . event . ItemEvent evt ) { CustomVisualPanel . this . itemStateChanged ( evt ) ; } } ) ; org . openide . awt . Mnemonics . setLocalizedText ( repoSpecific , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.repoSpecific.text" ) ) ; repoSpecific . addItemListener ( new java . awt . event . ItemListener ( ) { public void itemStateChanged ( java . awt . event . ItemEvent evt ) { CustomVisualPanel . this . itemStateChanged ( evt ) ; } } ) ; org . jdesktop . layout . GroupLayout jPanel1Layout = new org . jdesktop . layout . GroupLayout ( jPanel1 ) ; jPanel1 . setLayout ( jPanel1Layout ) ; jPanel1Layout . setHorizontalGroup ( jPanel1Layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( jPanel1Layout . createSequentialGroup ( ) . addContainerGap ( ) . add ( jPanel1Layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( showDirty ) . add ( repoSpecific ) ) . addContainerGap ( 269 , Short . MAX_VALUE ) ) ) ; jPanel1Layout . setVerticalGroup ( jPanel1Layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( jPanel1Layout . createSequentialGroup ( ) . add ( showDirty ) . addPreferredGap ( org . jdesktop . layout . LayoutStyle . RELATED ) . add ( repoSpecific ) . addContainerGap ( org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) ) ; jPanel2 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.jPanel2.border.title" ) ) ) ; org . openide . awt . Mnemonics . setLocalizedText ( workDirRoot , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.workDirRoot.text" ) ) ; workDirRoot . addItemListener ( new java . awt . event . ItemListener ( ) { public void itemStateChanged ( java . awt . event . ItemEvent evt ) { CustomVisualPanel . this . itemStateChanged ( evt ) ; } } ) ; org . openide . awt . Mnemonics . setLocalizedText ( showOutput , org . openide . util . NbBundle . getMessage ( CustomVisualPanel . class , "CustomVisualPanel.showOutput.text" ) ) ; showOutput . addItemListener ( new java . awt . event . ItemListener ( ) { public void itemStateChanged ( java . awt . event . ItemEvent evt ) { CustomVisualPanel . this . itemStateChanged ( evt ) ; } } ) ; org . jdesktop . layout . GroupLayout jPanel2Layout = new org . jdesktop . layout . GroupLayout ( jPanel2 ) ; jPanel2 . setLayout ( jPanel2Layout ) ; jPanel2Layout . setHorizontalGroup ( jPanel2Layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( jPanel2Layout . createSequentialGroup ( ) . addContainerGap ( ) . add ( jPanel2Layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( workDirRoot ) . add ( showOutput ) ) . addContainerGap ( 219 , Short . MAX_VALUE ) ) ) ; jPanel2Layout . setVerticalGroup ( jPanel2Layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( jPanel2Layout . createSequentialGroup ( ) . add ( workDirRoot ) . addPreferredGap ( org . jdesktop . layout . LayoutStyle . RELATED ) . add ( showOutput ) . addContainerGap ( org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) ) ; org . jdesktop . layout . GroupLayout layout = new org . jdesktop . layout . GroupLayout ( this ) ; this . setLayout ( layout ) ; layout . setHorizontalGroup ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( layout . createSequentialGroup ( ) . addContainerGap ( ) . add ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( jPanel2 , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) . add ( layout . createSequentialGroup ( ) . add ( nameLabel ) . add ( 47 , 47 , 47 ) . add ( nameText , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , 405 , Short . MAX_VALUE ) ) . add ( layout . createSequentialGroup ( ) . add ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( argsLabel ) . add ( pathLabel ) ) . add ( 15 , 15 , 15 ) . add ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( argsHelpLabel2 ) . add ( argsHelpLabel ) . add ( org . jdesktop . layout . GroupLayout . TRAILING , layout . createSequentialGroup ( ) . add ( pathText , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , 329 , Short . MAX_VALUE ) . addPreferredGap ( org . jdesktop . layout . LayoutStyle . RELATED ) . add ( pathBrowseButton ) ) . add ( argsText , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , 405 , Short . MAX_VALUE ) ) ) . add ( org . jdesktop . layout . GroupLayout . TRAILING , jPanel1 , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) . addContainerGap ( ) ) ) ; layout . setVerticalGroup ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . LEADING ) . add ( layout . createSequentialGroup ( ) . addContainerGap ( ) . add ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . BASELINE ) . add ( nameLabel ) . add ( nameText , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE ) ) . add ( 18 , 18 , 18 ) . add ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . BASELINE ) . add ( pathLabel ) . add ( pathBrowseButton ) . add ( pathText , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( org . jdesktop . layout . LayoutStyle . RELATED ) . add ( layout . createParallelGroup ( org . jdesktop . layout . GroupLayout . BASELINE ) . add ( argsLabel ) . add ( argsText , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE ) ) . addPreferredGap ( org . jdesktop . layout . LayoutStyle . RELATED ) . add ( argsHelpLabel ) . addPreferredGap ( org . jdesktop . layout . LayoutStyle . RELATED ) . add ( argsHelpLabel2 ) . add ( 18 , 18 , 18 ) . add ( jPanel2 , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE ) . add ( 18 , 18 , 18 ) . add ( jPanel1 , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE , org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , org . jdesktop . layout . GroupLayout . PREFERRED_SIZE ) . addContainerGap ( org . jdesktop . layout . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) ) ; } private void pathBrowseButtonActionPerformed ( java . awt . event . ActionEvent evt ) { String path = pathText . getText ( ) ; File file = FileUtil . normalizeFile ( new File ( path ) ) ; JFileChooser fileChooser = new AccessibleJFileChooser ( NbBundle . getMessage ( CustomVisualPanel . class , "CustomActionPath" ) , file ) ; fileChooser . setDialogTitle ( NbBundle . getMessage ( CustomVisualPanel . class , "CustomActionPathTitle" ) ) ; fileChooser . setMultiSelectionEnabled ( false ) ; FileFilter [ ] old = fileChooser . getChoosableFileFilters ( ) ; for ( int i = 0 ; i < old . length ; i ++ ) { FileFilter fileFilter = old [ i ] ; fileChooser . removeChoosableFileFilter ( fileFilter ) ; } fileChooser . showDialog ( this , NbBundle . getMessage ( CustomVisualPanel . class , "OK_Button" ) ) ; file = fileChooser . getSelectedFile ( ) ; if ( file != null ) { pathText . setText ( file . getAbsolutePath ( ) ) ; } } private void itemStateChanged ( java . awt . event . ItemEvent evt ) { if ( evt . getSource ( ) == showOutput ) { builder . setShowOutput ( showOutput . isSelected ( ) ) ; } else if ( evt . getSource ( ) == showDirty ) { builder . setShowDirty ( showDirty . isSelected ( ) ) ; } else if ( evt . getSource ( ) == repoSpecific ) { builder . setRepoSpecific ( repoSpecific . isSelected ( ) ) ; } else if ( evt . getSource ( ) == workDirRoot ) { builder . setWorkDirRoot ( workDirRoot . isSelected ( ) ) ; } panel . fireChangeEvent ( ) ; } private javax . swing . JLabel argsHelpLabel ; private javax . swing . JLabel argsHelpLabel2 ; private javax . swing . JLabel argsLabel ; private javax . swing . JTextField argsText ; private javax . swing . JPanel jPanel1 ; private javax . swing . JPanel jPanel2 ; private javax . swing . JLabel nameLabel ; private javax . swing . JTextField nameText ; private javax . swing . JButton pathBrowseButton ; private javax . swing . JLabel pathLabel ; private javax . swing . JTextField pathText ; private javax . swing . JCheckBox repoSpecific ; private javax . swing . JCheckBox showDirty ; private javax . swing . JCheckBox showOutput ; private javax . swing . JCheckBox workDirRoot ; } 
=======
class PatternRestrictDatatype extends RestrictDatatype { private final Regex pattern ; private final String patternString ; PatternRestrictDatatype ( DatatypeBase base , Regex pattern , String patternString ) { super ( base ) ; this . pattern = pattern ; this . patternString = patternString ; } boolean lexicallyAllows ( String str ) { return pattern . matches ( str ) && super . lexicallyAllows ( str ) ; } void checkLexicallyAllows ( String str ) throws DatatypeException { super . checkLexicallyAllows ( str ) ; if ( ! pattern . matches ( str ) ) throw new DatatypeException ( localizer ( ) . message ( "pattern_violation" , getDescriptionForRestriction ( ) , patternString ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
