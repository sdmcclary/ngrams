public class LoggingMarkerRulerAction extends ResourceAction implements IUpdate { private static final int MAX_LABEL_LENGTH = 80 ; private final ResourceBundle bundle ; private String label ; private final String prefix ; private final Shell shell ; private final IVerticalRuler ruler ; private final boolean askForLabel ; private final String markerType ; private final IDocument document ; private final IAnnotationModel model ; private final IUniformResource resource ; private List markers ; public LoggingMarkerRulerAction ( ResourceBundle bundle , String prefix , ILogResource resource , IDocument document , IAnnotationModel annotationModel , IVerticalRuler ruler , boolean askForLabel , String markerType , Shell shell ) { super ( bundle , prefix ) ; this . bundle = bundle ; this . prefix = prefix ; this . ruler = ruler ; this . askForLabel = askForLabel ; this . markerType = markerType ; this . document = document ; this . model = annotationModel ; this . shell = shell ; this . resource = resource ; label = getString ( bundle , prefix + ".label" , prefix + ".label" ) ; } public void run ( ) { update ( ) ; if ( markers . isEmpty ( ) ) addMarker ( ) ; else removeMarkers ( markers ) ; } public void update ( ) { int line = ruler . getLineOfLastMouseButtonActivity ( ) + 1 ; if ( line > document . getNumberOfLines ( ) ) { setEnabled ( false ) ; setText ( label ) ; } else { markers = getMarkers ( ) ; setEnabled ( resource != null ) ; setText ( label ) ; } } protected void addMarker ( ) { Map attributes = createAttributes ( ) ; if ( askForLabel ) { if ( ! askForLabel ( attributes ) ) return ; } try { MarkerUtils . createMarkerForExternalResource ( resource , attributes , markerType ) ; } catch ( CoreException x ) { handleCoreException ( x , "Unxepected exception" ) ; } ruler . update ( ) ; } protected boolean askForLabel ( Map attributes ) { Object o = attributes . get ( "message" ) ; String proposal = ( o instanceof String ) ? ( String ) o : "" ; if ( proposal == null ) proposal = "" ; String title = getString ( bundle , prefix + "add.dialog.title" , prefix + "add.dialog.title" ) ; String message = getString ( bundle , prefix + "add.dialog.message" , prefix + "add.dialog.message" ) ; IInputValidator inputValidator = new IInputValidator ( ) { public String isValid ( String newText ) { return ( newText == null || newText . trim ( ) . length ( ) == 0 ) ? " " : null ; } } ; InputDialog dialog = new InputDialog ( shell , title , message , proposal , inputValidator ) ; String label = null ; if ( dialog . open ( ) != Window . CANCEL ) label = dialog . getValue ( ) ; if ( label == null ) return false ; label = label . trim ( ) ; if ( label . length ( ) == 0 ) return false ; MarkerUtils . setMessage ( attributes , label ) ; return true ; } protected void removeMarkers ( final List markers ) { try { for ( int i = 0 ; i < markers . size ( ) ; ++ i ) { IMarker marker = ( IMarker ) markers . get ( i ) ; marker . delete ( ) ; } } catch ( CoreException x ) { handleCoreException ( x , "Unexpected exception" ) ; } } private Map createAttributes ( ) { Map attributes = new HashMap ( ) ; int line = ruler . getLineOfLastMouseButtonActivity ( ) ; int start = - 1 ; int end = - 1 ; int length = 0 ; try { IRegion lineInformation = document . getLineInformation ( line ) ; start = lineInformation . getOffset ( ) ; length = lineInformation . getLength ( ) ; end = start + length ; } catch ( BadLocationException x ) { } MarkerUtils . setMessage ( attributes , getLabelProposal ( document , start , length ) ) ; MarkerUtils . setLineNumber ( attributes , line + 1 ) ; MarkerUtils . setCharStart ( attributes , start ) ; MarkerUtils . setCharEnd ( attributes , end ) ; return attributes ; } protected String getLabelProposal ( IDocument document , int offset , int length ) { try { String label = document . get ( offset , length ) . trim ( ) ; if ( label . length ( ) <= MAX_LABEL_LENGTH ) return label ; return label . substring ( 0 , MAX_LABEL_LENGTH ) ; } catch ( BadLocationException x ) { return null ; } } protected void handleCoreException ( CoreException exception , String message ) { String title = getString ( bundle , prefix + "error.dialog.title" , prefix + "error.dialog.title" ) ; String msg = getString ( bundle , prefix + "error.dialog.message" , prefix + "error.dialog.message" ) ; ErrorDialog . openError ( shell , title , msg , exception . getStatus ( ) ) ; } protected List getMarkers ( ) { List markers = new ArrayList ( ) ; if ( resource != null && model != null ) { IMarker [ ] allMarkers = MarkerUtils . findMarkers ( resource , markerType , true ) ; if ( allMarkers != null ) { for ( int i = 0 ; i < allMarkers . length ; i ++ ) { if ( includesRulerLine ( ( ( AbstractMarkerAnnotationModel ) model ) . getMarkerPosition ( allMarkers [ i ] ) , document ) ) { markers . add ( allMarkers [ i ] ) ; } } } } return markers ; } protected boolean includesRulerLine ( Position position , IDocument document ) { if ( position != null ) { try { int markerLine = document . getLineOfOffset ( position . getOffset ( ) ) ; int line = ruler . getLineOfLastMouseButtonActivity ( ) ; if ( line == markerLine ) return true ; } catch ( BadLocationException x ) { } } return false ; } } 