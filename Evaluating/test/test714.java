<<<<<<< HEAD
public class FTPAdvancedOptionsComposite extends Composite implements IOptionsComposite { private static final String EMPTY = "" ; private IConnectionDialog connectionDialog ; private Combo modeCombo ; private Text portText ; private Combo encodingCombo ; private Combo timezoneCombo ; private Button detectButton ; private ModifyListener modifyListener ; public FTPAdvancedOptionsComposite ( Composite parent , int style , IConnectionDialog connectionDialog ) { super ( parent , style ) ; this . connectionDialog = connectionDialog ; setLayout ( GridLayoutFactory . swtDefaults ( ) . numColumns ( 5 ) . spacing ( new PixelConverter ( this ) . convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_SPACING ) , new PixelConverter ( this ) . convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ) . create ( ) ) ; Label label = new Label ( this , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( new PixelConverter ( this ) . convertHorizontalDLUsToPixels ( IDialogConstants . LABEL_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label . setText ( StringUtils . makeFormLabel ( "Connect Mode" ) ) ; modeCombo = new Combo ( this , SWT . DROP_DOWN | SWT . READ_ONLY | SWT . BORDER ) ; modeCombo . add ( "Active" ) ; modeCombo . add ( "Passive" ) ; modeCombo . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( modeCombo . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x , SWT . DEFAULT ) . create ( ) ) ; label = new Label ( this , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . align ( SWT . END , SWT . CENTER ) . hint ( new PixelConverter ( this ) . convertHorizontalDLUsToPixels ( IDialogConstants . LABEL_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label = new Label ( this , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . create ( ) ) ; label . setText ( StringUtils . makeFormLabel ( "Port" ) ) ; portText = new Text ( this , SWT . SINGLE | SWT . RIGHT | SWT . BORDER ) ; portText . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( Math . max ( new PixelConverter ( portText ) . convertWidthInCharsToPixels ( 5 ) , portText . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) , SWT . DEFAULT ) . create ( ) ) ; label = new Label ( this , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( new PixelConverter ( this ) . convertHorizontalDLUsToPixels ( IDialogConstants . LABEL_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label . setText ( StringUtils . makeFormLabel ( "Encoding" ) ) ; encodingCombo = new Combo ( this , SWT . DROP_DOWN | SWT . READ_ONLY | SWT . BORDER ) ; encodingCombo . setItems ( Charset . availableCharsets ( ) . keySet ( ) . toArray ( new String [ 0 ] ) ) ; encodingCombo . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( encodingCombo . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x , SWT . DEFAULT ) . span ( 4 , 1 ) . create ( ) ) ; Composite container = new Composite ( this , SWT . NONE ) ; container . setLayoutData ( GridDataFactory . fillDefaults ( ) . grab ( true , false ) . span ( 5 , 1 ) . create ( ) ) ; container . setLayout ( GridLayoutFactory . fillDefaults ( ) . numColumns ( 3 ) . create ( ) ) ; label = new Label ( container , SWT . NONE ) ; label . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( new PixelConverter ( this ) . convertHorizontalDLUsToPixels ( IDialogConstants . LABEL_WIDTH ) , SWT . DEFAULT ) . create ( ) ) ; label . setText ( StringUtils . makeFormLabel ( "Timezone" ) ) ; timezoneCombo = new Combo ( container , SWT . DROP_DOWN | SWT . READ_ONLY | SWT . BORDER ) ; String [ ] timezones = TimeZone . getAvailableIDs ( ) ; Arrays . sort ( timezones ) ; timezoneCombo . setItems ( timezones ) ; timezoneCombo . add ( EMPTY , 0 ) ; timezoneCombo . setLayoutData ( GridDataFactory . swtDefaults ( ) . hint ( timezoneCombo . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x , SWT . DEFAULT ) . create ( ) ) ; detectButton = new Button ( container , SWT . PUSH ) ; detectButton . setText ( "Detect" ) ; detectButton . setLayoutData ( GridDataFactory . fillDefaults ( ) . hint ( Math . max ( new PixelConverter ( detectButton ) . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) , detectButton . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) , SWT . DEFAULT ) . create ( ) ) ; addListeners ( ) ; portText . addVerifyListener ( new NumberVerifyListener ( ) ) ; detectButton . addSelectionListener ( new SelectionAdapter ( ) { @ Override public void widgetSelected ( SelectionEvent e ) { detectTimezone ( ) ; } } ) ; } public void loadPropertiesFrom ( Object element ) { Assert . isLegal ( element instanceof IBaseFTPConnectionPoint ) ; IBaseFTPConnectionPoint ftpConnectionPoint = ( IBaseFTPConnectionPoint ) element ; removeListeners ( ) ; try { modeCombo . select ( ftpConnectionPoint . isPassiveMode ( ) ? 1 : 0 ) ; portText . setText ( Integer . toString ( ftpConnectionPoint . getPort ( ) ) ) ; int index = encodingCombo . indexOf ( String . valueOf ( ftpConnectionPoint . getEncoding ( ) ) ) ; if ( index >= 0 ) { encodingCombo . select ( index ) ; } index = timezoneCombo . indexOf ( String . valueOf ( ftpConnectionPoint . getTimezone ( ) ) ) ; if ( index >= 0 ) { timezoneCombo . select ( index ) ; } else { timezoneCombo . select ( timezoneCombo . indexOf ( EMPTY ) ) ; } } finally { addListeners ( ) ; } } public boolean savePropertiesTo ( Object element ) { Assert . isLegal ( element instanceof IBaseFTPConnectionPoint ) ; boolean updated = false ; IBaseFTPConnectionPoint ftpConnectionPoint = ( IBaseFTPConnectionPoint ) element ; boolean passiveMode = modeCombo . getSelectionIndex ( ) == 1 ; if ( ftpConnectionPoint . isPassiveMode ( ) != passiveMode ) { ftpConnectionPoint . setPassiveMode ( passiveMode ) ; updated = true ; } int port = Integer . parseInt ( portText . getText ( ) ) ; if ( ftpConnectionPoint . getPort ( ) != port ) { ftpConnectionPoint . setPort ( port ) ; updated = true ; } String encoding = encodingCombo . getItem ( encodingCombo . getSelectionIndex ( ) ) ; if ( ! ftpConnectionPoint . getEncoding ( ) . equals ( encoding ) ) { ftpConnectionPoint . setEncoding ( encoding ) ; updated = true ; } String timezone = timezoneCombo . getItem ( timezoneCombo . getSelectionIndex ( ) ) ; if ( EMPTY . equals ( timezone ) ) { timezone = null ; } if ( ftpConnectionPoint . getTimezone ( ) != timezone && ( timezone == null || ! timezone . equals ( ftpConnectionPoint . getTimezone ( ) ) ) ) { ftpConnectionPoint . setTimezone ( timezone ) ; updated = true ; } return updated ; } public String isValid ( ) { int port = 0 ; try { port = Integer . parseInt ( portText . getText ( ) ) ; } catch ( NumberFormatException e ) { } if ( port <= 0 ) { return "Please specify correct port number" ; } return null ; } public void setValid ( boolean valid ) { detectButton . setEnabled ( valid ) ; } public void lockUI ( boolean lock ) { modeCombo . setEnabled ( ! lock ) ; portText . setEnabled ( ! lock ) ; encodingCombo . setEnabled ( ! lock ) ; timezoneCombo . setEnabled ( ! lock ) ; detectButton . setEnabled ( ! lock ) ; } private void detectTimezone ( ) { if ( ! connectionDialog . isValid ( ) ) { return ; } ConnectionContext context = new ConnectionContext ( ) ; context . setBoolean ( ConnectionContext . DETECT_TIMEZONE , true ) ; if ( connectionDialog . testConnection ( context , null ) ) { String [ ] tzones = ( String [ ] ) context . get ( ConnectionContext . SERVER_TIMEZONE ) ; if ( tzones != null && tzones . length > 0 ) { String tz = timezoneCombo . getItem ( timezoneCombo . getSelectionIndex ( ) ) ; if ( ! Arrays . asList ( tzones ) . contains ( tz ) ) { tz = TimeZoneUtils . getCommonTimeZone ( tzones ) ; int index = timezoneCombo . indexOf ( tz ) ; if ( index >= 0 ) { timezoneCombo . select ( index ) ; } } } } } protected void addListeners ( ) { if ( modifyListener == null ) { modifyListener = new ModifyListener ( ) { public void modifyText ( ModifyEvent e ) { connectionDialog . validate ( ) ; } } ; } portText . addModifyListener ( modifyListener ) ; } protected void removeListeners ( ) { if ( modifyListener != null ) { portText . removeModifyListener ( modifyListener ) ; } } } 
=======
public class RecipientsEditor extends MultiAutoCompleteTextView { private int mLongPressedPosition = - 1 ; private final RecipientsEditorTokenizer mTokenizer ; public RecipientsEditor ( Context context , AttributeSet attrs ) { super ( context , attrs , android . R . attr . autoCompleteTextViewStyle ) ; mTokenizer = new RecipientsEditorTokenizer ( context , this ) ; setTokenizer ( mTokenizer ) ; } public RecipientList getRecipientList ( ) { return mTokenizer . getRecipientList ( ) ; } public void populate ( RecipientList list ) { SpannableStringBuilder sb = new SpannableStringBuilder ( ) ; Iterator < Recipient > iter = list . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( sb . length ( ) != 0 ) { sb . append ( ", " ) ; } Recipient r = iter . next ( ) ; sb . append ( r . toToken ( ) ) ; } setText ( sb ) ; } private int pointToPosition ( int x , int y ) { x -= getCompoundPaddingLeft ( ) ; y -= getExtendedPaddingTop ( ) ; x += getScrollX ( ) ; y += getScrollY ( ) ; Layout layout = getLayout ( ) ; if ( layout == null ) { return - 1 ; } int line = layout . getLineForVertical ( y ) ; int off = layout . getOffsetForHorizontal ( line , x ) ; return off ; } @ Override public boolean onTouchEvent ( MotionEvent ev ) { final int action = ev . getAction ( ) ; final int x = ( int ) ev . getX ( ) ; final int y = ( int ) ev . getY ( ) ; if ( action == MotionEvent . ACTION_DOWN ) { mLongPressedPosition = pointToPosition ( x , y ) ; } return super . onTouchEvent ( ev ) ; } @ Override protected ContextMenuInfo getContextMenuInfo ( ) { if ( ( mLongPressedPosition >= 0 ) ) { Spanned text = getText ( ) ; int start = mTokenizer . findTokenStart ( text , mLongPressedPosition ) ; int end = mTokenizer . findTokenEnd ( text , start ) ; if ( end != start ) { Recipient r = getRecipientAt ( getText ( ) , start , end ) ; return new RecipientContextMenuInfo ( r ) ; } } return null ; } private static Recipient getRecipientAt ( Spanned sp , int start , int end ) { Annotation [ ] a = sp . getSpans ( start , end , Annotation . class ) ; String person_id = getAnnotation ( a , "person_id" ) ; String name = getAnnotation ( a , "name" ) ; String label = getAnnotation ( a , "label" ) ; String bcc = getAnnotation ( a , "bcc" ) ; String number = getAnnotation ( a , "number" ) ; Recipient r = new Recipient ( ) ; r . name = name ; r . label = label ; r . bcc = bcc . equals ( "true" ) ; r . number = TextUtils . isEmpty ( number ) ? TextUtils . substring ( sp , start , end ) : number ; r . nameAndNumber = Recipient . buildNameAndNumber ( r . name , r . number ) ; if ( person_id . length ( ) > 0 ) { r . person_id = Long . parseLong ( person_id ) ; } else { r . person_id = - 1 ; } return r ; } private static String getAnnotation ( Annotation [ ] a , String key ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] . getKey ( ) . equals ( key ) ) { return a [ i ] . getValue ( ) ; } } return "" ; } @ Override public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( isPopupShowing ( ) ) { switch ( keyCode ) { case KeyEvent . KEYCODE_COMMA : ListAdapter adapter = getAdapter ( ) ; Object selectedItem = adapter . getItem ( 0 ) ; replaceText ( convertSelectionToString ( selectedItem ) ) ; dismissDropDown ( ) ; return true ; } } return super . onKeyDown ( keyCode , event ) ; } private class RecipientsEditorTokenizer extends MultiAutoCompleteTextView . CommaTokenizer implements MultiAutoCompleteTextView . Tokenizer { private final MultiAutoCompleteTextView mList ; private final LayoutInflater mInflater ; private final TextAppearanceSpan mLabelSpan ; private final TextAppearanceSpan mTypeSpan ; RecipientsEditorTokenizer ( Context context , MultiAutoCompleteTextView list ) { mInflater = LayoutInflater . from ( context ) ; mList = list ; final int size = android . R . style . TextAppearance_Small ; final int color = 8 ; mLabelSpan = new TextAppearanceSpan ( context , size , color ) ; mTypeSpan = new TextAppearanceSpan ( context , size , color ) ; } public RecipientList getRecipientList ( ) { Spanned sp = mList . getText ( ) ; int len = sp . length ( ) ; RecipientList rl = new RecipientList ( ) ; int start = 0 ; int i = 0 ; while ( i < len + 1 ) { if ( ( i == len ) || ( sp . charAt ( i ) == ',' ) ) { if ( i > start ) { Recipient r = getRecipientAt ( sp , start , i ) ; rl . add ( r ) ; } i ++ ; while ( ( i < len ) && ( sp . charAt ( i ) == ' ' ) ) { i ++ ; } start = i ; } else { i ++ ; } } return rl ; } } static class RecipientContextMenuInfo implements ContextMenuInfo { final Recipient recipient ; RecipientContextMenuInfo ( Recipient r ) { recipient = r ; } } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
