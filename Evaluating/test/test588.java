public class Charset extends AbstractDatatype { public static final Charset THE_INSTANCE = new Charset ( ) ; public Charset ( ) { super ( ) ; } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { if ( literal . length ( ) == 0 ) { throw newDatatypeException ( "The empty string is not a valid character encoding name." ) ; } for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; if ( ! ( ( c >= '0' && c <= '9' ) || ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'Z' ) || c == '-' || c == '!' || c == '#' || c == '$' || c == '%' || c == '&' || c == '\'' || c == '+' || c == '_' || c == '`' || c == '{' || c == '}' || c == '~' || c == '^' ) ) { throw newDatatypeException ( "Value contained " , c , ", which is not a valid character in an encoding name." ) ; } } String encodingName = literal . toString ( ) ; encodingName = toAsciiLowerCase ( encodingName ) ; if ( "replacement" . equals ( encodingName ) || ! CharsetData . isPreferred ( encodingName ) ) { String preferred = CharsetData . preferredForLabel ( encodingName ) ; if ( preferred == null || "replacement" . equals ( preferred ) ) { throw newDatatypeException ( "“" + encodingName + "” is not a valid character encoding name." ) ; } throw newDatatypeException ( "“" + encodingName + "” is not a preferred encoding name." + " The preferred label for this encoding is “" + preferred + "”." ) ; } } @ Override public String getName ( ) { return "encoding name" ; } } 