<<<<<<< HEAD
public class GarageDoorActivity extends Activity { private static final String TAG = "GarageDoorActivity" ; private static final int MENU_OPEN = 2 ; private static final int MENU_WIFI_OFF = 3 ; private static final int MENU_JUST_SCAN = 4 ; private static final int MENU_SETTINGS = 5 ; private static final int MENU_HELP = 6 ; private TextView textView ; private TextView scanResultTextView ; private IntentFilter intentFilter ; private Handler logHandler = new Handler ( ) { public void handleMessage ( Message m ) { String logMessage = m . getData ( ) . getString ( "logmessage" ) ; textView . setText ( logMessage + "\n" + textView . getText ( ) ) ; } } ; private IGarageScanService scanServiceStub = null ; private ServiceConnection serviceConnection = new ServiceConnection ( ) { public void onServiceConnected ( ComponentName name , IBinder service ) { scanServiceStub = IGarageScanService . Stub . asInterface ( service ) ; log ( "Service bound" ) ; checkScanningState ( ) ; try { scanServiceStub . registerCallback ( garageCallback ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } } public void onServiceDisconnected ( ComponentName name ) { scanServiceStub = null ; } ; } ; private IGarageScanCallback garageCallback = new IGarageScanCallback . Stub ( ) { public void logToClient ( String message ) throws RemoteException { log ( message ) ; } public void onScanResults ( String scanResults ) throws RemoteException { scanResultTextView . setText ( scanResults ) ; } } ; private SharedPreferences getPrefs ( ) { return getSharedPreferences ( Preferences . NAME , 0 ) ; } @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . main ) ; scanResultTextView = ( TextView ) findViewById ( R . id . scanresults ) ; textView = ( TextView ) findViewById ( R . id . textthing ) ; Button startScan = ( Button ) findViewById ( R . id . StartScan ) ; startScan . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { startScanningService ( false ) ; } } ) ; Button stopScan = ( Button ) findViewById ( R . id . StopScan ) ; stopScan . setOnClickListener ( new OnClickListener ( ) { public void onClick ( View v ) { if ( scanServiceStub == null ) { textView . setText ( "service stub is null" ) ; return ; } try { scanServiceStub . setScanning ( false ) ; scanResultTextView . setText ( "" ) ; log ( "Stopped scanning." ) ; } catch ( RemoteException e ) { log ( "Exception changing state: " + e ) ; } } } ) ; intentFilter = new IntentFilter ( ) ; intentFilter . addAction ( WifiManager . NETWORK_IDS_CHANGED_ACTION ) ; intentFilter . addAction ( WifiManager . NETWORK_STATE_CHANGED_ACTION ) ; intentFilter . addAction ( WifiManager . SUPPLICANT_CONNECTION_CHANGE_ACTION ) ; intentFilter . addAction ( WifiManager . SUPPLICANT_STATE_CHANGED_ACTION ) ; intentFilter . addAction ( WifiManager . WIFI_STATE_CHANGED_ACTION ) ; } protected void startScanningService ( boolean debugMode ) { if ( scanServiceStub == null ) { log ( "Not bound to service." ) ; return ; } try { scanServiceStub . setDebugMode ( debugMode ) ; scanResultTextView . setText ( "" ) ; Intent startScanning = new Intent ( this , InRangeService . class ) ; startScanning . setAction ( InRangeService . ACTION_START_SCANNING ) ; startService ( startScanning ) ; if ( debugMode ) { log ( "Scan-only mode started." ) ; } else { log ( "Scanning mod started." ) ; } } catch ( RemoteException e ) { log ( "Exception changing state: " + e ) ; } } protected void checkScanningState ( ) { if ( scanServiceStub == null ) { textView . setText ( "service stub is null" ) ; } else { boolean running ; try { running = scanServiceStub . isScanning ( ) ; String state = running ? "Scanning" : "NOT scanning" ; textView . setText ( state + "\nURL: " + getPrefs ( ) . getString ( Preferences . KEY_URL , "<no_url>" ) ) ; } catch ( RemoteException e ) { textView . setText ( "Exception error checking scanning: " + e ) ; } } } @ Override public void onResume ( ) { super . onResume ( ) ; textView . setText ( "onResume" ) ; bindService ( new Intent ( this , InRangeService . class ) , serviceConnection , Context . BIND_AUTO_CREATE ) ; } @ Override public void onPause ( ) { super . onPause ( ) ; if ( scanServiceStub != null ) { try { scanServiceStub . unregisterCallback ( garageCallback ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } } if ( serviceConnection != null ) { unbindService ( serviceConnection ) ; } } View . OnClickListener createWifiAPairer ( final String ssid ) { return new OnClickListener ( ) { public void onClick ( View v ) { Settings . System . putInt ( getContentResolver ( ) , Settings . System . WIFI_USE_STATIC_IP , 0 ) ; WifiManager wifiManager = ( WifiManager ) getSystemService ( Context . WIFI_SERVICE ) ; List < WifiConfiguration > networks = wifiManager . getConfiguredNetworks ( ) ; WifiConfiguration foundConfig = null ; for ( WifiConfiguration config : networks ) { if ( config . SSID . equals ( "\"" + ssid + "\"" ) ) { foundConfig = config ; break ; } textView . setText ( config . SSID + ", " + new Integer ( config . SSID . length ( ) ) ) ; } if ( foundConfig != null ) { textView . setText ( new StringBuilder ( ) . append ( foundConfig . networkId ) ) ; int n = 0 ; try { boolean success = wifiManager . enableNetwork ( foundConfig . networkId , true ) ; textView . setText ( new Boolean ( success ) . toString ( ) ) ; if ( success ) { textView . setText ( "Connecting to: " + ssid ) ; } } catch ( Exception e ) { textView . setText ( e . toString ( ) + ", " + n ) ; } } else { textView . setText ( ssid + " not found" ) ; } } } ; } @ Override public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu . add ( Menu . NONE , MENU_WIFI_OFF , 0 , "Wifi Off" ) ; menu . add ( Menu . NONE , MENU_OPEN , 0 , "Open Now" ) ; menu . add ( Menu . NONE , MENU_JUST_SCAN , 0 , "Just Scan" ) ; menu . add ( Menu . NONE , MENU_HELP , 0 , "Help" ) ; menu . add ( Menu . NONE , MENU_SETTINGS , 0 , "Settings" ) ; return true ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case MENU_OPEN : try { scanServiceStub . openGarageNow ( ) ; } catch ( RemoteException e ) { log ( e . toString ( ) ) ; } break ; case MENU_WIFI_OFF : wifi ( ) . disconnect ( ) ; break ; case MENU_JUST_SCAN : startScanningService ( true ) ; break ; case MENU_SETTINGS : SettingsActivity . show ( this ) ; break ; case MENU_HELP : final Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http://bradfitz.com/garage-opener/" ) ) ; startActivity ( intent ) ; break ; } return true ; } private WifiManager wifi ( ) { return ( WifiManager ) getSystemService ( Context . WIFI_SERVICE ) ; } private void log ( String message ) { Message m = new Message ( ) ; Bundle b = new Bundle ( ) ; b . putString ( "logmessage" , message ) ; m . setData ( b ) ; logHandler . sendMessage ( m ) ; } } 
=======
abstract class AbstractPatternFunction < T > implements PatternFunction < T > { public T caseEmpty ( EmptyPattern p ) { return caseOther ( p ) ; } public T caseNotAllowed ( NotAllowedPattern p ) { return caseOther ( p ) ; } public T caseError ( ErrorPattern p ) { return caseOther ( p ) ; } public T caseGroup ( GroupPattern p ) { return caseOther ( p ) ; } public T caseInterleave ( InterleavePattern p ) { return caseOther ( p ) ; } public T caseChoice ( ChoicePattern p ) { return caseOther ( p ) ; } public T caseOneOrMore ( OneOrMorePattern p ) { return caseOther ( p ) ; } public T caseElement ( ElementPattern p ) { return caseOther ( p ) ; } public T caseAttribute ( AttributePattern p ) { return caseOther ( p ) ; } public T caseData ( DataPattern p ) { return caseOther ( p ) ; } public T caseDataExcept ( DataExceptPattern p ) { return caseOther ( p ) ; } public T caseValue ( ValuePattern p ) { return caseOther ( p ) ; } public T caseText ( TextPattern p ) { return caseOther ( p ) ; } public T caseList ( ListPattern p ) { return caseOther ( p ) ; } public T caseAfter ( AfterPattern p ) { return caseOther ( p ) ; } public T caseRef ( RefPattern p ) { return caseOther ( p ) ; } public abstract T caseOther ( Pattern p ) ; } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
