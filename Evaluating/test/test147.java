<<<<<<< HEAD
public class TweetThisDialog extends AbstractDialog { private static final int WIDTH_AVAILABLE = 400 ; private static final int WIDTH_UNAVAILABLE = 450 ; private static final String THREAD_SHORTEN_LINK = "Shorten Link" ; private JTextArea taMessage ; private JButton btnPasteLink ; private JLabel lbCharsLeft ; private JButton btnSend ; private JScrollPane spMessage ; private String initialText ; private String link ; public TweetThisDialog ( Frame frame ) { super ( frame , Strings . message ( "tweetthis.dialog.title" ) ) ; } protected JComponent buildContent ( ) { final Component buttonBar = buildButtonBar ( ) ; JPanel content = new JPanel ( new BorderLayout ( ) ) ; content . add ( buildBody ( ) , BorderLayout . CENTER ) ; content . add ( buttonBar , BorderLayout . SOUTH ) ; return content ; } private Component buildButtonBar ( ) { JComponent bar ; if ( TwitterFeature . isAvaiable ( ) ) { btnSend = createOKButton ( true ) ; btnSend . setText ( Strings . message ( "tweetthis.send" ) ) ; btnPasteLink = new JButton ( new PasteLinkAction ( ) ) ; btnPasteLink . setEnabled ( StringUtils . isNotEmpty ( link ) ) ; BBFormBuilder b = new BBFormBuilder ( "p, 4dlu:grow, p, 2dlu, p" ) ; b . append ( btnPasteLink ) ; b . append ( btnSend ) ; b . append ( createCancelButton ( ) ) ; bar = b . getPanel ( ) ; } else { bar = buildButtonBarWithClose ( ) ; } return bar ; } private Component buildBody ( ) { BBFormBuilder builder = TwitterFeature . isAvaiable ( ) ? buildAvailableBody ( ) : buildUnavailableBody ( ) ; builder . appendUnrelatedComponentsGapRow ( ) ; return builder . getPanel ( ) ; } private BBFormBuilder buildUnavailableBody ( ) { BBFormBuilder builder = new BBFormBuilder ( "7dlu, pref:grow" ) ; builder . setDefaultDialogBorder ( ) ; LinkLabel lnkService = new LinkLabel ( Strings . message ( "spw.learn.more" ) , ResourceUtils . getString ( "server.plans.url" ) ) ; lnkService . setForeground ( LinkLabel . HIGHLIGHT_COLOR ) ; String message = Strings . message ( "tweetthis.unavailable.1" ) ; builder . append ( ComponentsFactory . createWrappedMultilineLabel ( message ) , 2 ) ; builder . appendUnrelatedComponentsGapRow ( 2 ) ; builder . append ( new JLabel ( Strings . message ( "tweetthis.unavailable.2" ) ) , 2 ) ; builder . setLeadingColumnOffset ( 1 ) ; builder . append ( lnkService ) ; return builder ; } private BBFormBuilder buildAvailableBody ( ) { initComponents ( ) ; BBFormBuilder builder = new BBFormBuilder ( "pref, 10dlu, 20dlu:grow, 2dlu, pref" ) ; builder . append ( Strings . message ( "tweetthis.your.message" ) , 1 , CellConstraints . LEFT , CellConstraints . BOTTOM ) ; builder . append ( lbCharsLeft , 1 , CellConstraints . LEFT , CellConstraints . BOTTOM ) ; builder . append ( new JLabel ( IconSource . getIcon ( ResourceID . ICON_TWITTER ) ) ) ; builder . append ( spMessage , 5 ) ; return builder ; } private void initComponents ( ) { taMessage = new JTextArea ( 5 , 70 ) ; lbCharsLeft = new JLabel ( ) ; spMessage = new JScrollPane ( taMessage ) ; Border spacing = BorderFactory . createLineBorder ( new JLabel ( ) . getBackground ( ) , 3 ) ; spMessage . setBorder ( BorderFactory . createCompoundBorder ( spacing , spMessage . getBorder ( ) ) ) ; taMessage . setWrapStyleWord ( false ) ; taMessage . setLineWrap ( true ) ; taMessage . setDocument ( new TwitterMessage ( ) ) ; taMessage . getDocument ( ) . addDocumentListener ( new DocumentListener ( ) { public void insertUpdate ( DocumentEvent e ) { updateCharsCount ( ) ; } public void removeUpdate ( DocumentEvent e ) { updateCharsCount ( ) ; } public void changedUpdate ( DocumentEvent e ) { updateCharsCount ( ) ; } } ) ; taMessage . setText ( initialText ) ; lbCharsLeft . setForeground ( Color . DARK_GRAY ) ; updateCharsCount ( ) ; TwitterPreferences prefs = GlobalController . SINGLETON . getModel ( ) . getUserPreferences ( ) . getTwitterPreferences ( ) ; if ( StringUtils . isNotEmpty ( link ) && prefs . isPasteLink ( ) ) onPasteLink ( ) ; taMessage . requestFocusInWindow ( ) ; } public void open ( String text ) { initialText = text ; open ( ) ; } public void open ( String text , String link ) { this . link = link ; open ( text ) ; } @ Override public void doAccept ( ) { btnSend . setEnabled ( false ) ; btnSend . setText ( "sending ..." ) ; new Thread ( "Sending To Twitter" ) { public void run ( ) { try { TwitterGateway . update ( taMessage . getText ( ) ) ; onSent ( ) ; } catch ( IOException e ) { onFailedToSend ( e . getMessage ( ) ) ; } catch ( OAuthException e ) { onFailedToSend ( e . getMessage ( ) ) ; } } } . start ( ) ; } private void onSent ( ) { super . doAccept ( ) ; } private void onFailedToSend ( String error ) { btnSend . setText ( Strings . message ( "tweetthis.send" ) ) ; btnSend . setEnabled ( true ) ; JOptionPane . showMessageDialog ( this , error , Strings . message ( "tweetthis.dialog.title" ) + " - " + Strings . message ( "tweetthis.send" ) , JOptionPane . WARNING_MESSAGE ) ; } private void updateCharsCount ( ) { int current = taMessage . getText ( ) . length ( ) ; lbCharsLeft . setText ( Integer . toString ( TwitterMessage . MAX_LENGTH - current ) ) ; final boolean over = current > TwitterMessage . MAX_LENGTH ; taMessage . setBackground ( over ? Color . RED : Color . WHITE ) ; taMessage . setForeground ( over ? Color . WHITE : Color . BLACK ) ; btnSend . setEnabled ( ! over && current > 0 ) ; } protected void resizeHook ( JComponent component ) { final int width = TwitterFeature . isAvaiable ( ) ? WIDTH_AVAILABLE : WIDTH_UNAVAILABLE ; component . setPreferredSize ( new Dimension ( width , ( int ) component . getPreferredSize ( ) . getHeight ( ) ) ) ; } private void onPasteLink ( ) { if ( StringUtils . isEmpty ( link ) ) return ; if ( link . matches ( "^http://(www\\.)?is\\.gd\\/.*" ) ) { doPasteLink ( link ) ; return ; } componentsEnabled ( false ) ; new Thread ( THREAD_SHORTEN_LINK ) { public void run ( ) { String aLink = null ; String anErrorMessage = null ; try { aLink = LinkShortener . process ( link ) ; } catch ( LinkShorteningException e ) { anErrorMessage = e . getMessage ( ) ; } final String link = aLink ; final String errorMessage = anErrorMessage ; SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { try { if ( link != null ) { TweetThisDialog . this . link = link ; doPasteLink ( link ) ; } else { onShortenFailure ( errorMessage ) ; } } finally { componentsEnabled ( true ) ; } } } ) ; } } . start ( ) ; } private void componentsEnabled ( boolean enabled ) { btnPasteLink . setEnabled ( enabled ) ; } private void doPasteLink ( String link ) { taMessage . append ( link ) ; taMessage . append ( " " ) ; taMessage . requestFocusInWindow ( ) ; } private void onShortenFailure ( String error ) { JOptionPane . showMessageDialog ( this , error , Strings . message ( "tweetthis.dialog.title" ) + " - " + Strings . message ( "tweetthis.paste.link.btn" ) , JOptionPane . WARNING_MESSAGE ) ; } private class PasteLinkAction extends AbstractAction { public PasteLinkAction ( ) { super ( Strings . message ( "tweetthis.paste.link.btn" ) ) ; } public void actionPerformed ( ActionEvent e ) { onPasteLink ( ) ; } } } 
=======
final class PatternMemo { private final Pattern pattern ; private final ValidatorPatternBuilder builder ; private final boolean notAllowed ; private PatternMemo memoEndAttributes ; private PatternMemo memoTextOnly ; private PatternMemo memoEndTagDeriv ; private PatternMemo memoMixedTextDeriv ; private PatternMemo memoIgnoreMissingAttributes ; private Map < Name , PatternMemo > startTagOpenDerivMap ; private Map < Name , PatternMemo > startTagOpenRecoverDerivMap ; private Map < Name , PatternMemo > startAttributeDerivMap ; private DataDerivType memoDataDerivType ; private PatternMemo memoRecoverAfter ; private PatternMemo memoEmptyAfter ; private NormalizedNameClass memoPossibleAttributeNames ; private NormalizedNameClass memoPossibleStartTagNames ; PatternMemo ( Pattern pattern , ValidatorPatternBuilder builder ) { this . pattern = pattern ; this . builder = builder ; this . notAllowed = pattern . isNotAllowed ( ) ; } Pattern getPattern ( ) { return pattern ; } ValidatorPatternBuilder getPatternBuilder ( ) { return builder ; } boolean isNotAllowed ( ) { return notAllowed ; } PatternMemo endAttributes ( ) { if ( memoEndAttributes == null ) memoEndAttributes = applyForPatternMemo ( builder . getEndAttributesFunction ( ) ) ; return memoEndAttributes ; } PatternMemo endAttributes ( PatternFunction < Pattern > f ) { if ( memoEndAttributes == null ) memoEndAttributes = applyForPatternMemo ( f ) ; return memoEndAttributes ; } PatternMemo ignoreMissingAttributes ( ) { if ( memoIgnoreMissingAttributes == null ) memoIgnoreMissingAttributes = applyForPatternMemo ( builder . getIgnoreMissingAttributesFunction ( ) ) ; return memoIgnoreMissingAttributes ; } PatternMemo ignoreMissingAttributes ( PatternFunction < Pattern > f ) { if ( memoIgnoreMissingAttributes == null ) memoIgnoreMissingAttributes = applyForPatternMemo ( f ) ; return memoIgnoreMissingAttributes ; } PatternMemo textOnly ( ) { if ( memoTextOnly == null ) memoTextOnly = applyForPatternMemo ( builder . getTextOnlyFunction ( ) ) ; return memoTextOnly ; } PatternMemo textOnly ( PatternFunction < Pattern > f ) { if ( memoTextOnly == null ) memoTextOnly = applyForPatternMemo ( f ) ; return memoTextOnly ; } PatternMemo endTagDeriv ( ) { if ( memoEndTagDeriv == null ) memoEndTagDeriv = applyForPatternMemo ( builder . getEndTagDerivFunction ( ) ) ; return memoEndTagDeriv ; } PatternMemo endTagDeriv ( PatternFunction < Pattern > f ) { if ( memoEndTagDeriv == null ) memoEndTagDeriv = applyForPatternMemo ( f ) ; return memoEndTagDeriv ; } PatternMemo mixedTextDeriv ( ) { if ( memoMixedTextDeriv == null ) memoMixedTextDeriv = applyForPatternMemo ( builder . getMixedTextDerivFunction ( ) ) ; return memoMixedTextDeriv ; } PatternMemo mixedTextDeriv ( PatternFunction < Pattern > f ) { if ( memoMixedTextDeriv == null ) memoMixedTextDeriv = applyForPatternMemo ( f ) ; return memoMixedTextDeriv ; } PatternMemo startTagOpenDeriv ( Name name ) { return startTagOpenDeriv ( name , null ) ; } PatternMemo startTagOpenDeriv ( StartTagOpenDerivFunction f ) { return startTagOpenDeriv ( f . getName ( ) , f ) ; } private PatternMemo startTagOpenDeriv ( Name name , StartTagOpenDerivFunction f ) { PatternMemo tem ; if ( startTagOpenDerivMap == null ) startTagOpenDerivMap = new HashMap < Name , PatternMemo > ( ) ; else { tem = startTagOpenDerivMap . get ( name ) ; if ( tem != null ) return tem ; } if ( f == null ) f = new StartTagOpenDerivFunction ( name , builder ) ; tem = applyForPatternMemo ( f ) ; startTagOpenDerivMap . put ( name , tem ) ; return tem ; } PatternMemo startTagOpenRecoverDeriv ( Name name ) { return startTagOpenRecoverDeriv ( name , null ) ; } PatternMemo startTagOpenRecoverDeriv ( StartTagOpenRecoverDerivFunction f ) { return startTagOpenRecoverDeriv ( f . getName ( ) , f ) ; } private PatternMemo startTagOpenRecoverDeriv ( Name name , StartTagOpenRecoverDerivFunction f ) { PatternMemo tem ; if ( startTagOpenRecoverDerivMap == null ) startTagOpenRecoverDerivMap = new HashMap < Name , PatternMemo > ( ) ; else { tem = startTagOpenRecoverDerivMap . get ( name ) ; if ( tem != null ) return tem ; } if ( f == null ) f = new StartTagOpenRecoverDerivFunction ( name , builder ) ; tem = applyForPatternMemo ( f ) ; startTagOpenRecoverDerivMap . put ( name , tem ) ; return tem ; } PatternMemo startAttributeDeriv ( Name name ) { return startAttributeDeriv ( name , null ) ; } PatternMemo startAttributeDeriv ( StartAttributeDerivFunction f ) { return startAttributeDeriv ( f . getName ( ) , f ) ; } private PatternMemo startAttributeDeriv ( Name name , StartAttributeDerivFunction f ) { PatternMemo tem ; if ( startAttributeDerivMap == null ) startAttributeDerivMap = new HashMap < Name , PatternMemo > ( ) ; else { tem = startAttributeDerivMap . get ( name ) ; if ( tem != null ) return tem ; } if ( f == null ) f = new StartAttributeDerivFunction ( name , builder ) ; tem = applyForPatternMemo ( f ) ; startAttributeDerivMap . put ( name , tem ) ; return tem ; } DataDerivType dataDerivType ( ) { if ( memoDataDerivType == null ) memoDataDerivType = DataDerivTypeFunction . dataDerivType ( builder , pattern ) . copy ( ) ; return memoDataDerivType ; } PatternMemo dataDeriv ( String str , ValidationContext vc ) { return dataDerivType ( ) . dataDeriv ( builder , pattern , str , vc , null ) ; } PatternMemo dataDeriv ( String str , ValidationContext vc , List < DataDerivFailure > fail ) { return dataDerivType ( ) . dataDeriv ( builder , pattern , str , vc , fail ) ; } PatternMemo recoverAfter ( ) { if ( memoRecoverAfter == null ) memoRecoverAfter = applyForPatternMemo ( builder . getRecoverAfterFunction ( ) ) ; return memoRecoverAfter ; } PatternMemo emptyAfter ( ) { if ( memoEmptyAfter == null ) memoEmptyAfter = applyForPatternMemo ( new ApplyAfterFunction ( builder ) { Pattern apply ( Pattern p ) { return builder . makeEmpty ( ) ; } public Pattern caseOther ( Pattern p ) { return p ; } } ) ; return memoEmptyAfter ; } NormalizedNameClass possibleStartTagNames ( ) { if ( memoPossibleStartTagNames == null ) memoPossibleStartTagNames = builder . getPossibleStartTagNamesFunction ( ) . applyTo ( pattern ) ; return memoPossibleStartTagNames ; } NormalizedNameClass possibleAttributeNames ( ) { if ( memoPossibleAttributeNames == null ) memoPossibleAttributeNames = builder . getPossibleAttributeNamesFunction ( ) . applyTo ( pattern ) ; return memoPossibleAttributeNames ; } private PatternMemo applyForPatternMemo ( PatternFunction < Pattern > f ) { return builder . getPatternMemo ( pattern . apply ( f ) ) ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
