<<<<<<< HEAD
public class CommitTable implements AncestorListener , TableModelListener { public static String [ ] COMMIT_COLUMNS = new String [ ] { CommitTableModel . COLUMN_NAME_NAME , CommitTableModel . COLUMN_NAME_STATUS , CommitTableModel . COLUMN_NAME_ACTION , CommitTableModel . COLUMN_NAME_PATH } ; public static String [ ] IMPORT_COLUMNS = new String [ ] { CommitTableModel . COLUMN_NAME_NAME , CommitTableModel . COLUMN_NAME_ACTION , CommitTableModel . COLUMN_NAME_PATH } ; private CommitTableModel tableModel ; private JTable table ; private JComponent component ; private TableSorter sorter ; private String [ ] columns ; private String [ ] sortByColumns ; public CommitTable ( JLabel label , String [ ] columns , String [ ] sortByColumns ) { init ( label , columns , null ) ; this . sortByColumns = sortByColumns ; setSortingStatus ( ) ; } public CommitTable ( JLabel label , String [ ] columns , TableSorter sorter ) { init ( label , columns , sorter ) ; } private void init ( JLabel label , String [ ] columns , TableSorter sorter ) { tableModel = new CommitTableModel ( columns ) ; tableModel . addTableModelListener ( this ) ; if ( sorter == null ) { sorter = new TableSorter ( tableModel ) ; } this . sorter = sorter ; table = new JTable ( this . sorter ) ; table . getTableHeader ( ) . setReorderingAllowed ( false ) ; table . setDefaultRenderer ( String . class , new CommitStringsCellRenderer ( ) ) ; table . setDefaultEditor ( CommitOptions . class , new CommitOptionsCellEditor ( ) ) ; table . getTableHeader ( ) . setReorderingAllowed ( true ) ; this . sorter . setTableHeader ( table . getTableHeader ( ) ) ; table . setRowHeight ( table . getRowHeight ( ) * 6 / 5 ) ; table . addAncestorListener ( this ) ; component = new JScrollPane ( table , JScrollPane . VERTICAL_SCROLLBAR_ALWAYS , JScrollPane . HORIZONTAL_SCROLLBAR_NEVER ) ; label . setLabelFor ( table ) ; table . getAccessibleContext ( ) . setAccessibleDescription ( NbBundle . getMessage ( CommitTable . class , "ACSD_CommitTable" ) ) ; setColumns ( columns ) ; } public void ancestorAdded ( AncestorEvent event ) { setDefaultColumnSizes ( ) ; } private void setDefaultColumnSizes ( ) { int width = table . getWidth ( ) ; TableColumnModel columnModel = table . getColumnModel ( ) ; if ( columns == null || columnModel == null ) { return ; } if ( columnModel . getColumnCount ( ) != columns . length ) { return ; } if ( columns . length == 3 ) { for ( int i = 0 ; i < columns . length ; i ++ ) { String col = columns [ i ] ; sorter . setColumnComparator ( i , null ) ; if ( col . equals ( CommitTableModel . COLUMN_NAME_NAME ) ) { sorter . setColumnComparator ( i , new FileNameComparator ( ) ) ; columnModel . getColumn ( i ) . setPreferredWidth ( width * 30 / 100 ) ; } else if ( col . equals ( CommitTableModel . COLUMN_NAME_ACTION ) ) { columnModel . getColumn ( i ) . setPreferredWidth ( width * 15 / 100 ) ; } else { columnModel . getColumn ( i ) . setPreferredWidth ( width * 40 / 100 ) ; } } } else if ( columns . length == 4 ) { for ( int i = 0 ; i < columns . length ; i ++ ) { String col = columns [ i ] ; sorter . setColumnComparator ( i , null ) ; if ( col . equals ( CommitTableModel . COLUMN_NAME_NAME ) ) { sorter . setColumnComparator ( i , new FileNameComparator ( ) ) ; columnModel . getColumn ( i ) . setPreferredWidth ( width * 25 / 100 ) ; } else if ( col . equals ( CommitTableModel . COLUMN_NAME_STATUS ) ) { sorter . setColumnComparator ( i , new StatusComparator ( ) ) ; columnModel . getColumn ( i ) . setPreferredWidth ( width * 15 / 100 ) ; } else if ( col . equals ( CommitTableModel . COLUMN_NAME_ACTION ) ) { columnModel . getColumn ( i ) . setPreferredWidth ( width * 20 / 100 ) ; } else { columnModel . getColumn ( i ) . setPreferredWidth ( width * 40 / 100 ) ; } } } else if ( columns . length == 5 ) { for ( int i = 0 ; i < columns . length ; i ++ ) { String col = columns [ i ] ; sorter . setColumnComparator ( i , null ) ; if ( col . equals ( CommitTableModel . COLUMN_NAME_NAME ) ) { sorter . setColumnComparator ( i , new FileNameComparator ( ) ) ; columnModel . getColumn ( i ) . setPreferredWidth ( width * 25 / 100 ) ; } else if ( col . equals ( CommitTableModel . COLUMN_NAME_STATUS ) ) { sorter . setColumnComparator ( i , new StatusComparator ( ) ) ; sorter . setSortingStatus ( i , TableSorter . ASCENDING ) ; columnModel . getColumn ( i ) . setPreferredWidth ( width * 15 / 100 ) ; } else if ( col . equals ( CommitTableModel . COLUMN_NAME_ACTION ) ) { columnModel . getColumn ( i ) . setPreferredWidth ( width * 15 / 100 ) ; } else { columnModel . getColumn ( i ) . setPreferredWidth ( width * 30 / 100 ) ; } } } } private void setSortingStatus ( ) { for ( int i = 0 ; i < sortByColumns . length ; i ++ ) { String sortByColumn = sortByColumns [ i ] ; for ( int j = 0 ; j < columns . length ; j ++ ) { String column = columns [ j ] ; if ( column . equals ( sortByColumn ) ) { sorter . setSortingStatus ( j , column . equals ( sortByColumn ) ? TableSorter . ASCENDING : TableSorter . NOT_SORTED ) ; break ; } } } } public TableSorter getSorter ( ) { return sorter ; } public void ancestorMoved ( AncestorEvent event ) { } public void ancestorRemoved ( AncestorEvent event ) { } void setColumns ( String [ ] cols ) { if ( Arrays . equals ( columns , cols ) ) { return ; } columns = cols ; tableModel . setColumns ( cols ) ; setDefaultColumnSizes ( ) ; } public void setNodes ( GitFileNode [ ] nodes ) { tableModel . setNodes ( nodes ) ; } public Map < GitFileNode , CommitOptions > getCommitFiles ( ) { return tableModel . getCommitFiles ( ) ; } public JComponent getComponent ( ) { return component ; } void dataChanged ( ) { int idx = table . getSelectedRow ( ) ; tableModel . fireTableDataChanged ( ) ; if ( idx != - 1 ) { table . getSelectionModel ( ) . addSelectionInterval ( idx , idx ) ; } } TableModel getTableModel ( ) { return tableModel ; } public void tableChanged ( TableModelEvent e ) { table . repaint ( ) ; } public void setRootFile ( String repositoryPath , String rootLocalPath ) { tableModel . setRootFile ( repositoryPath , rootLocalPath ) ; } private class CommitOptionsCellEditor extends DefaultCellEditor { private final Object [ ] dirAddOptions = new Object [ ] { CommitOptions . COMMIT , CommitOptions . EXCLUDE } ; private final Object [ ] addOptions = new Object [ ] { CommitOptions . COMMIT , CommitOptions . EXCLUDE } ; private final Object [ ] commitOptions = new Object [ ] { CommitOptions . COMMIT , CommitOptions . EXCLUDE } ; private final Object [ ] removeOptions = new Object [ ] { CommitOptions . COMMIT_REMOVE , CommitOptions . EXCLUDE } ; public CommitOptionsCellEditor ( ) { super ( new JComboBox ( ) ) ; } @ Override public Component getTableCellEditorComponent ( JTable table , Object value , boolean isSelected , int row , int column ) { StatusInfo info = tableModel . getNode ( sorter . modelIndex ( row ) ) . getInformation ( ) ; int fileStatus = info . getStatus ( ) ; JComboBox combo = ( JComboBox ) editorComponent ; if ( fileStatus == StatusInfo . STATUS_VERSIONED_DELETEDLOCALLY || fileStatus == StatusInfo . STATUS_VERSIONED_REMOVEDLOCALLY ) { combo . setModel ( new DefaultComboBoxModel ( removeOptions ) ) ; } else if ( ( fileStatus & StatusInfo . STATUS_IN_REPOSITORY ) == 0 ) { if ( info . isDirectory ( ) ) { combo . setModel ( new DefaultComboBoxModel ( dirAddOptions ) ) ; } else { combo . setModel ( new DefaultComboBoxModel ( addOptions ) ) ; } } else { combo . setModel ( new DefaultComboBoxModel ( commitOptions ) ) ; } return super . getTableCellEditorComponent ( table , value , isSelected , row , column ) ; } } private class CommitStringsCellRenderer extends DefaultTableCellRenderer { private FilePathCellRenderer pathRenderer = new FilePathCellRenderer ( ) ; @ Override public Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column ) { int col = table . convertColumnIndexToModel ( column ) ; if ( columns [ col ] . equals ( CommitTableModel . COLUMN_NAME_NAME ) ) { TableSorter sorter = ( TableSorter ) table . getModel ( ) ; CommitTableModel model = ( CommitTableModel ) sorter . getTableModel ( ) ; GitFileNode node = model . getNode ( sorter . modelIndex ( row ) ) ; CommitOptions options = model . getOptions ( sorter . modelIndex ( row ) ) ; if ( ! isSelected ) { value = "<html>" + HtmlFormatter . getInstance ( ) . annotateNameHtml ( node . getFile ( ) . getName ( ) , node . getInformation ( ) , null ) ; } if ( options == CommitOptions . EXCLUDE ) { value = "<html><s>" + value + "</s></html>" ; } return super . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; } else if ( columns [ col ] . equals ( CommitTableModel . COLUMN_NAME_PATH ) ) { return pathRenderer . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; } else { return super . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ; } } } private class StatusComparator extends GitUtils . ByImportanceComparator { public int compare ( Object o1 , Object o2 ) { Integer row1 = ( Integer ) o1 ; Integer row2 = ( Integer ) o2 ; return super . compare ( tableModel . getNode ( row1 . intValue ( ) ) . getInformation ( ) , tableModel . getNode ( row2 . intValue ( ) ) . getInformation ( ) ) ; } } private class FileNameComparator implements Comparator { public int compare ( Object o1 , Object o2 ) { Integer row1 = ( Integer ) o1 ; Integer row2 = ( Integer ) o2 ; return tableModel . getNode ( row1 . intValue ( ) ) . getName ( ) . compareToIgnoreCase ( tableModel . getNode ( row2 . intValue ( ) ) . getName ( ) ) ; } } } 
=======
interface OrderRelation { boolean isLessThan ( Object obj1 , Object obj2 ) ; } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
