public abstract class AbstractUnicodeClassCharacter extends AbstractDatatype { private static final int SURROGATE_OFFSET = 0x10000 - ( 0xD800 << 10 ) - 0xDC00 ; protected abstract UnicodeSet getUnicodeSet ( ) ; @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { switch ( literal . length ( ) ) { case 0 : throw newDatatypeException ( "The empty string is not a " + getName ( ) + "." ) ; case 1 : char c = literal . charAt ( 0 ) ; if ( ! getUnicodeSet ( ) . contains ( c ) ) { throw newDatatypeException ( 0 , "The character " , c , " is not a " + getName ( ) + "." ) ; } return ; case 2 : char hi = literal . charAt ( 0 ) ; char lo = literal . charAt ( 1 ) ; if ( ( lo & 0xFC00 ) == 0xDC00 && ( hi & 0xFC00 ) == 0xD800 ) { int codepoint = ( hi << 10 ) + lo + SURROGATE_OFFSET ; if ( ! getUnicodeSet ( ) . contains ( codepoint ) ) { throw newDatatypeException ( 0 , "The character " , "" + hi + lo , " is not a " + getName ( ) + "." ) ; } return ; } default : throw newDatatypeException ( "A " + getName ( ) + " must be a single character." ) ; } } @ Override public DatatypeStreamingValidator createStreamingValidator ( ValidationContext context ) { return new DatatypeStreamingValidator ( ) { int codepoint = - 2 ; private void addCharacter ( char c ) { if ( codepoint == - 1 ) { return ; } else if ( ( codepoint & 0xFC00 ) == 0xD800 ) { if ( ( c & 0xFC00 ) == 0xDC00 ) { codepoint = ( codepoint << 10 ) + c + SURROGATE_OFFSET ; } else { codepoint = - 1 ; } } else if ( codepoint == - 2 ) { codepoint = c ; } else { codepoint = - 1 ; } } public void addCharacters ( char [ ] buf , int start , int len ) { if ( codepoint == - 1 ) { return ; } else { for ( int i = start ; i < start + len ; i ++ ) { addCharacter ( buf [ i ] ) ; } } } public void checkValid ( ) throws DatatypeException { if ( codepoint == - 2 ) { throw newDatatypeException ( "The empty string is not a " + getName ( ) + "." ) ; } else if ( codepoint == - 1 ) { throw newDatatypeException ( "A " + getName ( ) + " must be a single character." ) ; } else if ( ! getUnicodeSet ( ) . contains ( codepoint ) ) { throw newDatatypeException ( 0 , "The character " , UCharacter . toString ( codepoint ) , " is not a " + getName ( ) + "." ) ; } } public boolean isValid ( ) { try { checkValid ( ) ; return true ; } catch ( DatatypeException e ) { return false ; } } } ; } } 