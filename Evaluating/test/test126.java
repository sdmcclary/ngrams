public final class MDDiscoveryLogic { private static final Logger LOG = Logger . getLogger ( MDDiscoveryLogic . class . getName ( ) ) ; static final int STATUS_VALID = 0 ; static final int STATUS_PROCESSING = 1 ; static final int STATUS_INVALID = 2 ; static final String KEY_STATUS_CODE = "code" ; static final String KEY_HTML_URL = "htmlUrl" ; static final String KEY_DATA_URL = "dataUrl" ; static final String KEY_INBOUND_LINKS = "inboundLinks" ; static final String KEY_TITLE = "title" ; static final String KEY_AUTHOR = "author" ; static final String KEY_DESCRIPTION = "description" ; private static IURLFilter urlFilter ; public static void setURLFilter ( IURLFilter urlFilter ) { MDDiscoveryLogic . urlFilter = urlFilter ; } public static void processDiscovery ( MDDiscoveryRequest aRequest , ConnectionState aConnectionState ) { FeedMetaDataHolder holder = aRequest . getHolder ( ) ; holder . setComplete ( false ) ; if ( ! isFilteredOut ( aRequest . getUrl ( ) ) ) { queryDirectly ( aRequest ) ; if ( aConnectionState . isServiceAccessible ( ) && ! aRequest . isLocal ( ) ) queryService ( aRequest ) ; } else { holder . setInvalid ( true ) ; aRequest . setDirectDiscoveryComplete ( true ) ; aRequest . setServiceDiscoveryComplete ( true ) ; } updateHolderStatus ( aRequest ) ; } private static boolean isFilteredOut ( URL url ) { return urlFilter != null && urlFilter . matches ( url ) ; } static void updateHolderStatus ( MDDiscoveryRequest request ) { boolean complete = false ; boolean directComplete = request . isDirectDiscoveryComplete ( ) ; boolean serviceComplete = request . isServiceDiscoveryComplete ( ) ; boolean local = request . isLocal ( ) ; FeedMetaDataHolder holder = request . getHolder ( ) ; if ( holder . isInvalid ( ) != null ) { boolean invalid = holder . isInvalid ( ) ; if ( ( ( directComplete || serviceComplete ) && ! invalid ) || ( directComplete && serviceComplete && invalid ) ) { complete = true ; } } else if ( local && directComplete ) { complete = true ; } if ( complete ) { holder . setComplete ( true ) ; holder . setLastUpdateTime ( System . currentTimeMillis ( ) ) ; } } private static void queryDirectly ( MDDiscoveryRequest request ) { FeedMetaDataHolder holder = request . getHolder ( ) ; if ( request . isDirectDiscoveryComplete ( ) || holder . getXmlURL ( ) != null ) return ; if ( LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Direct discovery started: URL=" + request . getUrl ( ) ) ; } DirectDiscoverer dd = new DirectDiscoverer ( ) ; String failureMessage = null ; try { DiscoveryResult res = dd . discover ( request . getUrl ( ) ) ; if ( res != null ) { URL link = res . getLink ( ) ; if ( link != null ) { holder . setXmlURL ( link ) ; holder . setInvalid ( false ) ; } } request . setDirectDiscoveryComplete ( true ) ; } catch ( UrlDiscovererException e ) { Throwable cause = e . getCause ( ) ; failureMessage = causeToFailureMessage ( cause ) ; if ( failureMessage != null ) { request . setDirectDiscoveryComplete ( true ) ; } else { LOG . log ( Level . FINE , "Direct discovery failed temporary." , e ) ; } } catch ( IllegalArgumentException e ) { request . setDirectDiscoveryComplete ( true ) ; } if ( request . isDirectDiscoveryComplete ( ) && LOG . isLoggable ( Level . FINE ) ) { LOG . fine ( "Direct discovery finished: URL=" + request . getUrl ( ) + ( holder . getXmlURL ( ) != null ? " Discovered" : " Undiscovered" ) + ( failureMessage != null ? " (" + failureMessage + ")" : "" ) ) ; } } private static String causeToFailureMessage ( Throwable aCause ) { String aFailureMessage = null ; if ( aCause instanceof FileNotFoundException ) { aFailureMessage = "Not Found" ; } else if ( aCause instanceof UnknownHostException ) { aFailureMessage = "Host Unknown" ; } else if ( aCause instanceof UISException ) { aFailureMessage = "UIS" ; } else if ( aCause instanceof CyclicRedirectionException ) { aFailureMessage = "Cyclic Redirection" ; } else if ( aCause instanceof NotAuthenticatedException ) { aFailureMessage = "Not Authenticated" ; } return aFailureMessage ; } private static void queryService ( MDDiscoveryRequest request ) { if ( request . isServiceDiscoveryComplete ( ) ) return ; ServerService ss = ServerService . getInstance ( ) ; try { Map result = ss . discover ( request . getUrl ( ) . toString ( ) ) ; processServiceResults ( result , request ) ; } catch ( ServerServiceException e ) { boolean log = true ; Throwable cause = e . getCause ( ) ; if ( cause instanceof IOException ) { String msg = cause . getMessage ( ) ; log = msg == null || msg . indexOf ( "Connection refused" ) == - 1 ; } if ( log ) LOG . log ( Level . WARNING , "Service Error." , e ) ; } } static void processServiceResults ( Map results , MDDiscoveryRequest request ) { Integer statusCodeI = ( Integer ) results . get ( KEY_STATUS_CODE ) ; int statusCode = statusCodeI == null ? - 1 : statusCodeI ; FeedMetaDataHolder holder = request . getHolder ( ) ; switch ( statusCode ) { case STATUS_PROCESSING : break ; case STATUS_VALID : copyData ( results , holder , request . getUrl ( ) ) ; holder . setInvalid ( false ) ; request . setServiceDiscoveryComplete ( true ) ; break ; case STATUS_INVALID : if ( holder . isInvalid ( ) == null ) holder . setInvalid ( true ) ; request . setServiceDiscoveryComplete ( true ) ; break ; default : LOG . warning ( MessageFormat . format ( "Unrecognized service code: {0}" , statusCode ) ) ; } } private static void copyData ( Map result , FeedMetaDataHolder holder , URL url ) { holder . setInboundLinks ( ( Integer ) result . get ( KEY_INBOUND_LINKS ) ) ; holder . setTitle ( fromUtf8 ( result . get ( KEY_TITLE ) ) ) ; holder . setAuthor ( fromUtf8 ( result . get ( KEY_AUTHOR ) ) ) ; holder . setDescription ( fromUtf8 ( result . get ( KEY_DESCRIPTION ) ) ) ; String htmlUrl = ( String ) result . get ( KEY_HTML_URL ) ; if ( holder . getHtmlURL ( ) == null && htmlUrl != null ) { try { holder . setHtmlURL ( new URL ( htmlUrl ) ) ; } catch ( MalformedURLException e ) { LOG . warning ( MessageFormat . format ( "Service returned malformed HTML URL ({0}) for {1}" , htmlUrl , url ) ) ; } } String xmlURL = ( String ) result . get ( KEY_DATA_URL ) ; if ( holder . getXmlURL ( ) == null && xmlURL != null ) { try { holder . setXmlURL ( new URL ( xmlURL ) ) ; } catch ( MalformedURLException e ) { LOG . warning ( MessageFormat . format ( "Service returned malformed XML URL ({0}) for {1}" , xmlURL , url ) ) ; } } } private static String fromUtf8 ( Object object ) { String result = Constants . EMPTY_STRING ; if ( object instanceof String ) { result = ( String ) object ; } else if ( object instanceof byte [ ] ) { result = StringUtils . fromUTF8 ( ( byte [ ] ) object ) ; } return result ; } } 