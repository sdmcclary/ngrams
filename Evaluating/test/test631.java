<<<<<<< HEAD
public class AdvancedPreferencePage extends TabbedFieldEditorPreferencePage implements IWorkbenchPreferencePage { private static final String IE_PREVIEW_KEY = "HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\View Source Editor\\Editor Name" ; private static final String IE_PREVIEW_NOTEPAD_VALUE = "notepad.exe" ; private Button notepad ; private Button otherButton ; private Text text ; private Button browse ; private Scale debugSlider ; private FieldEditor switchPerspectiveField ; public AdvancedPreferencePage ( ) { super ( GRID ) ; setPreferenceStore ( UnifiedEditorsPlugin . getDefault ( ) . getPreferenceStore ( ) ) ; setDescription ( Messages . AdvancedPreferencePage_DebuggingAndAdvanced ) ; } public void createFieldEditors ( ) { addTab ( Messages . AdvancedPreferencePage_User ) ; Composite appearanceComposite = getFieldEditorParent ( ) ; addField ( new StringFieldEditor ( com . aptana . ide . core . ui . preferences . IPreferenceConstants . PREF_USER_NAME , com . aptana . ide . core . ui . preferences . Messages . GeneralPreferencePage_EmailAddressForBugReports , appearanceComposite ) ) ; switchPerspectiveField = new RadioGroupFieldEditor ( IPreferencesConstants2 . SWITCH_TO_APTANA_PRESPECTIVE , Messages . AdvancedPreferencePage_switchToAptanaPerspective , 3 , new String [ ] [ ] { { Messages . AdvancedPreferencePage_Always , MessageDialogWithToggle . ALWAYS } , { Messages . AdvancedPreferencePage_Never , MessageDialogWithToggle . NEVER } , { Messages . AdvancedPreferencePage_Prompt , MessageDialogWithToggle . PROMPT } } , appearanceComposite , true ) ; addField ( switchPerspectiveField ) ; if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { Group ieGroup = new Group ( appearanceComposite , SWT . NONE ) ; GridData ieData = new GridData ( SWT . FILL , SWT . FILL , true , true ) ; ieData . horizontalSpan = 2 ; ieGroup . setLayoutData ( ieData ) ; ieGroup . setLayout ( new GridLayout ( 1 , true ) ) ; ieGroup . setText ( Messages . AdvancedPreferencePage_IESettings ) ; notepad = new Button ( ieGroup , SWT . RADIO ) ; notepad . setText ( Messages . AdvancedPreferencePage_AssociateWithNotepad ) ; notepad . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { setErrorMessage ( null ) ; setValid ( true ) ; } } ) ; otherButton = new Button ( ieGroup , SWT . RADIO ) ; otherButton . setText ( Messages . AdvancedPreferencePage_AssociateWithOther ) ; Composite other = new Composite ( ieGroup , SWT . NONE ) ; GridLayout otherLayout = new GridLayout ( 2 , false ) ; otherLayout . marginHeight = 0 ; other . setLayout ( otherLayout ) ; other . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; text = new Text ( other , SWT . BORDER | SWT . SINGLE ) ; text . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; text . setEditable ( false ) ; text . setEnabled ( false ) ; browse = new Button ( other , SWT . PUSH ) ; browse . setEnabled ( false ) ; browse . setText ( StringUtils . ellipsify ( CoreStrings . BROWSE ) ) ; browse . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { FileDialog dialog = new FileDialog ( browse . getShell ( ) , SWT . OPEN ) ; String program = dialog . open ( ) ; if ( program != null ) { text . setText ( program ) ; setErrorMessage ( null ) ; setValid ( true ) ; } } } ) ; otherButton . addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent e ) { boolean selection = otherButton . getSelection ( ) ; browse . setEnabled ( selection ) ; text . setEnabled ( selection ) ; if ( ! selection ) { text . setText ( "" ) ; } else { if ( text . getText ( ) . length ( ) < 1 ) { setErrorMessage ( Messages . AdvancedPreferencePage_PleaseSpecifyApplication ) ; setValid ( false ) ; } } } } ) ; String current = null ; try { current = PlatformUtils . queryRegestryStringValue ( IE_PREVIEW_KEY , null ) ; } catch ( Exception e ) { IdeLog . logError ( UnifiedEditorsPlugin . getDefault ( ) , Messages . AdvancedPreferencePage_ERR_ErrorGettingRegistryValue , e ) ; } if ( current != null ) { if ( current . equalsIgnoreCase ( IE_PREVIEW_NOTEPAD_VALUE ) || current . endsWith ( IE_PREVIEW_NOTEPAD_VALUE ) ) { notepad . setSelection ( true ) ; } else { otherButton . setSelection ( true ) ; browse . setEnabled ( true ) ; text . setEnabled ( true ) ; text . setText ( current ) ; } } } addTab ( Messages . AdvancedPreferencePage_Debugging ) ; appearanceComposite = getFieldEditorParent ( ) ; Composite group = com . aptana . ide . core . ui . preferences . GeneralPreferencePage . createGroup ( appearanceComposite , Messages . AdvancedPreferencePage_LBL_AdvancedFunctionality ) ; addField ( new BooleanFieldEditor ( IPreferenceConstants . SHOW_DEBUG_HOVER , Messages . AdvancedPreferencePage_ShowDebugInformation , group ) ) ; addField ( new BooleanFieldEditor ( IPreferenceConstants . PARSER_OFF_UI , Messages . AdvancedPreferencePage_LBL_ParserOffUI , group ) ) ; group = com . aptana . ide . core . ui . preferences . GeneralPreferencePage . createGroup ( appearanceComposite , Messages . AdvancedPreferencePage_LBL_DebuggingOutputLevel ) ; Composite debugComp = new Composite ( group , SWT . NONE ) ; GridLayout pkcLayout = new GridLayout ( 3 , false ) ; pkcLayout . marginWidth = 0 ; pkcLayout . marginHeight = 0 ; debugComp . setLayout ( pkcLayout ) ; debugComp . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false ) ) ; Label pianoKeyLabel = new Label ( debugComp , SWT . LEFT ) ; pianoKeyLabel . setText ( Messages . AdvancedPreferencePage_LBL_ControlDebugInformationAmountHelp ) ; GridData pklData = new GridData ( SWT . FILL , SWT . FILL , true , false ) ; pklData . horizontalSpan = 3 ; pianoKeyLabel . setLayoutData ( pklData ) ; Label less = new Label ( debugComp , SWT . LEFT ) ; less . setText ( Messages . AdvancedPreferencePage_LBL_Errors ) ; debugSlider = new Scale ( debugComp , SWT . HORIZONTAL ) ; debugSlider . setIncrement ( 1 ) ; debugSlider . setMinimum ( 1 ) ; debugSlider . setMaximum ( 3 ) ; Preferences p = AptanaCorePlugin . getDefault ( ) . getPluginPreferences ( ) ; debugSlider . setSelection ( p . getInt ( com . aptana . ide . core . preferences . IPreferenceConstants . PREF_DEBUG_LEVEL ) ) ; Label more = new Label ( debugComp , SWT . LEFT ) ; more . setText ( Messages . AdvancedPreferencePage_LBL_All ) ; final Label currentValue = new Label ( debugComp , SWT . LEFT ) ; currentValue . setText ( getValueLabel ( debugSlider . getSelection ( ) ) ) ; currentValue . setFont ( SWTUtils . getDefaultSmallFont ( ) ) ; pklData = new GridData ( SWT . FILL , SWT . FILL , true , false ) ; pklData . horizontalSpan = 3 ; currentValue . setLayoutData ( pklData ) ; debugSlider . addSelectionListener ( new SelectionListener ( ) { public void widgetDefaultSelected ( SelectionEvent selectionevent ) { currentValue . setText ( getValueLabel ( debugSlider . getSelection ( ) ) ) ; } public void widgetSelected ( SelectionEvent selectionevent ) { currentValue . setText ( getValueLabel ( debugSlider . getSelection ( ) ) ) ; } } ) ; } protected void initialize ( ) { super . initialize ( ) ; switchPerspectiveField . setPreferenceStore ( Activator . getDefault ( ) . getPreferenceStore ( ) ) ; switchPerspectiveField . load ( ) ; } private String getValueLabel ( int selection ) { switch ( selection ) { case 0 : return Messages . AdvancedPreferencePage_LBL_NoDebuggingOutput ; case 1 : return Messages . AdvancedPreferencePage_LBL_OnlyError ; case 2 : return Messages . AdvancedPreferencePage_LBL_ErrorsAndImportant ; case 3 : return Messages . AdvancedPreferencePage_LBL_AllDebuggingInformation ; default : return Messages . AdvancedPreferencePage_LBL_UnknownLoggingLevel ; } } public void init ( IWorkbench workbench ) { } protected void performDefaults ( ) { debugSlider . setSelection ( getPreferenceStore ( ) . getDefaultInt ( com . aptana . ide . core . preferences . IPreferenceConstants . PREF_DEBUG_LEVEL ) ) ; super . performDefaults ( ) ; } public boolean performOk ( ) { boolean ok = super . performOk ( ) ; boolean saved = false ; boolean optionSelected = false ; if ( ok ) { if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { try { if ( notepad . getSelection ( ) ) { saved = PlatformUtils . setRegestryStringValue ( IE_PREVIEW_KEY , null , IE_PREVIEW_NOTEPAD_VALUE ) ; optionSelected = true ; } else if ( otherButton . getSelection ( ) ) { saved = PlatformUtils . setRegestryStringValue ( IE_PREVIEW_KEY , null , text . getText ( ) ) ; optionSelected = true ; } if ( ! saved && optionSelected ) { throw new Exception ( "Registry value not saved" ) ; } } catch ( Exception e ) { MessageBox error = new MessageBox ( this . getShell ( ) , SWT . ICON_ERROR | SWT . OK ) ; error . setMessage ( Messages . AdvancedPreferencePage_ErrorSettingRegistry + Messages . AdvancedPreferencePage_CheckPrivileges ) ; error . open ( ) ; } } IPreferenceStore unified = UnifiedEditorsPlugin . getDefault ( ) . getPreferenceStore ( ) ; boolean value = unified . getBoolean ( com . aptana . ide . core . preferences . IPreferenceConstants . PREF_ENABLE_DEBUGGING ) ; Preferences p = AptanaCorePlugin . getDefault ( ) . getPluginPreferences ( ) ; p . setValue ( com . aptana . ide . core . preferences . IPreferenceConstants . PREF_ENABLE_DEBUGGING , value ) ; p . setValue ( com . aptana . ide . core . preferences . IPreferenceConstants . PREF_DEBUG_LEVEL , debugSlider . getSelection ( ) ) ; AptanaCorePlugin . getDefault ( ) . savePluginPreferences ( ) ; } return ok ; } } 
=======
public final class Refresh extends IriRef { public static final Refresh THE_INSTANCE = new Refresh ( ) ; private Refresh ( ) { super ( ) ; } private enum State { AT_START , DIGIT_SEEN , SEMICOLON_SEEN , SPACE_SEEN , U_SEEN , R_SEEN , L_SEEN , EQUALS_SEEN } @ Override public void checkValid ( CharSequence literal ) throws DatatypeException { if ( literal . length ( ) == 0 ) { throw newDatatypeException ( "Empty literal." ) ; } State state = State . AT_START ; for ( int i = 0 ; i < literal . length ( ) ; i ++ ) { char c = literal . charAt ( i ) ; switch ( state ) { case AT_START : if ( isAsciiDigit ( c ) ) { state = State . DIGIT_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected a digit, but saw " , c , " instead." ) ; } case DIGIT_SEEN : if ( isAsciiDigit ( c ) ) { continue ; } else if ( c == ';' ) { state = State . SEMICOLON_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected a digit or a semicolon, but saw " , c , " instead." ) ; } case SEMICOLON_SEEN : if ( isWhitespace ( c ) ) { state = State . SPACE_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected a space character, but saw " , c , " instead." ) ; } case SPACE_SEEN : if ( isWhitespace ( c ) ) { continue ; } else if ( c == 'u' || c == 'U' ) { state = State . U_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected a space character or the letter “u”, but saw " , c , " instead." ) ; } case U_SEEN : if ( c == 'r' || c == 'R' ) { state = State . R_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected the letter “r”, but saw " , c , " instead." ) ; } case R_SEEN : if ( c == 'l' || c == 'L' ) { state = State . L_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected the letter “l”, but saw " , c , " instead." ) ; } case L_SEEN : if ( c == '=' ) { state = State . EQUALS_SEEN ; continue ; } else { throw newDatatypeException ( i , "Expected “=”, but saw " , c , " instead." ) ; } case EQUALS_SEEN : if ( c == '"' || c == '\'' ) { throw newDatatypeException ( "Expected an unquoted IRI reference, but saw " , c , " instead." ) ; } if ( ' ' == c || '\t' == c || '\n' == c || '\f' == c || '\r' == c ) { throw newDatatypeException ( "Expected an IRI reference, but saw whitespace instead." ) ; } char l = literal . charAt ( literal . length ( ) - 1 ) ; if ( ' ' == l || '\t' == l || '\n' == l || '\f' == l || '\r' == l ) { throw newDatatypeException ( "Trailing whitespace." ) ; } super . checkValid ( literal . subSequence ( i , literal . length ( ) ) ) ; return ; } } switch ( state ) { case AT_START : throw newDatatypeException ( "Expected a digit, but the literal ended." ) ; case DIGIT_SEEN : return ; case SEMICOLON_SEEN : throw newDatatypeException ( "Expected a space character, but the literal ended." ) ; case SPACE_SEEN : throw newDatatypeException ( "Expected a space character or the letter “u”, but the literal ended." ) ; case U_SEEN : throw newDatatypeException ( "Expected the letter “r”, but the literal ended." ) ; case R_SEEN : throw newDatatypeException ( "Expected the letter “l”, but the literal ended." ) ; case L_SEEN : throw newDatatypeException ( "Expected “=”, but the literal ended." ) ; case EQUALS_SEEN : throw newDatatypeException ( "Expected an IRI reference, but the literal ended." ) ; } } @ Override public String getName ( ) { return "refresh" ; } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
