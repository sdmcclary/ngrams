<<<<<<< HEAD
public class ScriptEvaluatorManager { private static Map < String , ScriptEvaluator > evaluatorContexts = new HashMap < String , ScriptEvaluator > ( ) ; private static Map < String , Integer > evaluatorContextCounter = new HashMap < String , Integer > ( ) ; private static MappedSet < String , Object > objectsUsingEvaluator = new MappedSet < String , Object > ( ) ; private static Map < String , Map < String , Object > > maxObjectMap = new HashMap < String , Map < String , Object > > ( ) ; private static Constructor < ScriptEvaluator > evaluatorConstructor ; private static Map < Object , String [ ] > objectMetadata = new HashMap < Object , String [ ] > ( ) ; private ScriptEvaluatorManager ( ) { } public static ScriptEvaluator getRubyEvaluator ( String maxContext , String id , Object maxObject , CompatVersion rubyVersion ) { Map < String , Object > idMap = maxObjectMap . get ( maxContext ) ; if ( idMap == null ) { idMap = new HashMap < String , Object > ( ) ; maxObjectMap . put ( maxContext , idMap ) ; } else { ensureIdAvailable ( idMap , maxObject , id ) ; } idMap . put ( id , maxObject ) ; objectMetadata . put ( maxObject , new String [ ] { maxContext , id } ) ; String evaluatorContext = getEvaluatorContext ( maxContext , maxObject ) ; ScriptEvaluator evaluator = evaluatorContexts . get ( evaluatorContext ) ; if ( evaluator == null ) { evaluator = newRubyEvaluatorInstance ( rubyVersion ) ; evaluatorContexts . put ( evaluatorContext , evaluator ) ; evaluatorContextCounter . put ( evaluatorContext , 1 ) ; Set < Object > maxObjects = objectsUsingEvaluator . addValue ( evaluatorContext , maxObject ) ; evaluator . declareGlobal ( "max_objects" , maxObjects ) ; evaluator . declareGlobal ( "max_object_map" , maxObjectMap ) ; } else { int count = evaluatorContextCounter . get ( evaluatorContext ) ; count ++ ; evaluatorContextCounter . put ( evaluatorContext , count ) ; objectsUsingEvaluator . addValue ( evaluatorContext , maxObject ) ; } return evaluator ; } public static void removeRubyEvaluator ( Object maxObject ) { String [ ] contextAndId = objectMetadata . remove ( maxObject ) ; if ( contextAndId != null ) { String maxContext = contextAndId [ 0 ] ; String evaluatorContext = getEvaluatorContext ( maxContext , maxObject ) ; String id = contextAndId [ 1 ] ; int count = evaluatorContextCounter . get ( evaluatorContext ) ; count -- ; if ( count > 0 ) { evaluatorContextCounter . put ( evaluatorContext , count ++ ) ; objectsUsingEvaluator . get ( evaluatorContext ) . remove ( maxObject ) ; } else { notifyContextDestroyedListener ( maxContext , maxObject ) ; objectsUsingEvaluator . remove ( evaluatorContext ) ; evaluatorContextCounter . remove ( evaluatorContext ) ; evaluatorContexts . remove ( evaluatorContext ) ; } Map < String , Object > idMap = maxObjectMap . get ( maxContext ) ; idMap . remove ( id ) ; if ( idMap . isEmpty ( ) ) { maxObjectMap . remove ( maxContext ) ; } } } public static void updateId ( Object maxObject , String id ) { String [ ] contextAndId = objectMetadata . get ( maxObject ) ; if ( contextAndId != null ) { String maxContext = contextAndId [ 0 ] ; String oldId = contextAndId [ 1 ] ; Map < String , Object > idMap = maxObjectMap . get ( maxContext ) ; ensureIdAvailable ( idMap , maxObject , id ) ; idMap . remove ( oldId ) ; idMap . put ( id , maxObject ) ; contextAndId [ 1 ] = id ; } } private static void ensureIdAvailable ( Map < String , Object > idMap , Object maxObject , String id ) { Object existingObject = idMap . get ( id ) ; if ( existingObject != null && ! existingObject . equals ( maxObject ) ) { String base = id ; long index = 0 ; if ( id . matches ( ".*\\[\\d*\\]$" ) ) { int split = id . lastIndexOf ( '[' ) ; base = id . substring ( 0 , split ) ; String indexStr = id . substring ( split + 1 ) ; indexStr = indexStr . substring ( 0 , indexStr . length ( ) - 1 ) ; index = Long . parseLong ( indexStr ) ; } String suggest ; do { index ++ ; suggest = base + "[" + index + "]" ; } while ( idMap . containsKey ( suggest ) ) ; throw new IdInUseException ( suggest ) ; } } private static String getEvaluatorContext ( String maxContext , Object maxObject ) { if ( maxContext == null ) { return "__" + Integer . toHexString ( maxObject . hashCode ( ) ) ; } else { return maxContext ; } } public static void notifyContextDestroyedListener ( String maxContext , Object maxObject ) { String evaluatorContext = getEvaluatorContext ( maxContext , maxObject ) ; ScriptEvaluator ruby = evaluatorContexts . get ( evaluatorContext ) ; if ( ruby != null ) { ruby . exit ( ) ; } } private static ScriptEvaluator newRubyEvaluatorInstance ( CompatVersion rubyVersion ) { if ( evaluatorConstructor == null ) { String evaluatorClassName = RubyProperties . getRubyEngine ( ) ; try { @ SuppressWarnings ( "unchecked" ) Class < ScriptEvaluator > evaluatorClass = ( Class < ScriptEvaluator > ) Class . forName ( evaluatorClassName ) ; evaluatorConstructor = evaluatorClass . getConstructor ( CompatVersion . class ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } catch ( NoSuchMethodException e ) { throw new RuntimeException ( e ) ; } } try { return evaluatorConstructor . newInstance ( rubyVersion ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeException ( e ) ; } } } 
=======
public class IdContentHandler implements ContentHandler { private final IdSoundnessChecker checker ; private Locator locator ; public IdContentHandler ( IdTypeMap idTypeMap , ErrorHandler eh ) { this . checker = new IdSoundnessChecker ( idTypeMap , eh ) ; } public void reset ( ) { checker . reset ( ) ; locator = null ; } public void setDocumentLocator ( Locator locator ) { this . locator = locator ; } public void startDocument ( ) throws SAXException { } public void endDocument ( ) throws SAXException { checker . endDocument ( ) ; setComplete ( ) ; } protected void setComplete ( ) { } public void startPrefixMapping ( String s , String s1 ) throws SAXException { } public void endPrefixMapping ( String s ) throws SAXException { } public void startElement ( String namespaceUri , String localName , String qName , Attributes attributes ) throws SAXException { Name elementName = new Name ( namespaceUri , localName ) ; int len = attributes . getLength ( ) ; for ( int i = 0 ; i < len ; i ++ ) { Name attributeName = new Name ( attributes . getURI ( i ) , attributes . getLocalName ( i ) ) ; String value = attributes . getValue ( i ) ; checker . attribute ( elementName , attributeName , value , locator ) ; } } public void endElement ( String s , String s1 , String s2 ) throws SAXException { } public void characters ( char [ ] chars , int i , int i1 ) throws SAXException { } public void ignorableWhitespace ( char [ ] chars , int i , int i1 ) throws SAXException { } public void processingInstruction ( String s , String s1 ) throws SAXException { } public void skippedEntity ( String s ) throws SAXException { } public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { } public void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) throws SAXException { } } 
>>>>>>> ab1fba6c6e93a4331abe98d3c4c0cdc860e899a6
